{
  "comments": [
    {
      "key": {
        "uuid": "bea77522_178bf706",
        "filename": "debuggerd/tombstone.c",
        "patchSetId": 1
      },
      "lineNbr": 184,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2013-11-22T20:06:39Z",
      "side": 1,
      "message": "we should probably add a macro similar to PRIxPTR but including the %08 or %016 and use it everywhere we currently have %08\u003cwhatever\u003e.",
      "revId": "ee97440de1d0ea89977fe413fe416c2797a6011f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1eca41de_6cc70f7d",
        "filename": "debuggerd/tombstone.c",
        "patchSetId": 1
      },
      "lineNbr": 184,
      "author": {
        "id": 1010578
      },
      "writtenOn": "2013-11-25T14:21:41Z",
      "side": 1,
      "message": "Agree. Do you think we should add it to /bionic/libc/include/inttypes.h or is there any better place for that?",
      "parentUuid": "bea77522_178bf706",
      "revId": "ee97440de1d0ea89977fe413fe416c2797a6011f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ed03988_7e968e7a",
        "filename": "debuggerd/tombstone.c",
        "patchSetId": 1
      },
      "lineNbr": 184,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2013-11-25T16:07:43Z",
      "side": 1,
      "message": "i don\u0027t think there\u0027s any standard macro like this, so i was just thinking we should add it somewhere in debuggerd itself.",
      "parentUuid": "1eca41de_6cc70f7d",
      "revId": "ee97440de1d0ea89977fe413fe416c2797a6011f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ed03988_efedb234",
        "filename": "debuggerd/tombstone.c",
        "patchSetId": 1
      },
      "lineNbr": 622,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2013-11-22T20:06:39Z",
      "side": 1,
      "message": "i think we should have a word_t or equivalent to be more intention-revealing than taking advantage of the fact that long is 32-bit on our 32-bit architectures and 64-bit on our 64-bit architectures.",
      "revId": "ee97440de1d0ea89977fe413fe416c2797a6011f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "430f8224_57b7ece0",
        "filename": "debuggerd/tombstone.c",
        "patchSetId": 1
      },
      "lineNbr": 622,
      "author": {
        "id": 1010578
      },
      "writtenOn": "2013-11-25T14:21:41Z",
      "side": 1,
      "message": "At bionic/libc/include/sys/types.h?",
      "parentUuid": "5ed03988_efedb234",
      "revId": "ee97440de1d0ea89977fe413fe416c2797a6011f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ed03988_be6646ff",
        "filename": "debuggerd/tombstone.c",
        "patchSetId": 1
      },
      "lineNbr": 622,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2013-11-25T16:07:43Z",
      "side": 1,
      "message": "no, Backtrace.h seemed like a good place.",
      "parentUuid": "430f8224_57b7ece0",
      "revId": "ee97440de1d0ea89977fe413fe416c2797a6011f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "deaa69eb_697542e0",
        "filename": "debuggerd/utility.c",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2013-11-22T20:06:39Z",
      "side": 1,
      "message": "should we just unconditionally format into buf and then unconditionally use buf here?\n\nalso, the comment on L76 is misleading; it should come here, _after_ we\u0027ve written to the log and before we write to activity manager. (and even then, it\u0027s a bit misleading in that it\u0027s not always true!)",
      "revId": "ee97440de1d0ea89977fe413fe416c2797a6011f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "630ac615_78d781de",
        "filename": "debuggerd/utility.c",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1010578
      },
      "writtenOn": "2013-11-25T14:21:41Z",
      "side": 1,
      "message": "I agree. I\u0027m fixing segfault here (somehow it occurs on 64-bit only) on second handling of va_list ap. I\u0027ll fix that and probably remove the comment.",
      "parentUuid": "deaa69eb_697542e0",
      "revId": "ee97440de1d0ea89977fe413fe416c2797a6011f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3e532f4_fb6defd7",
        "filename": "debuggerd/utility.c",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1011068
      },
      "writtenOn": "2013-11-28T09:10:09Z",
      "side": 1,
      "message": "I suppose we need va_copy here.\n\nHere is the manual:\nThe  functions  vprintf(),  vfprintf(),  vsprintf(), vsnprintf() are equivalent to the functions printf(), fprintf(), sprintf(), snprintf(), respectively,\n       except that they are called with a va_list instead of a variable number of arguments.  These functions do not call the va_end macro.  Because they  invoke\n       the va_arg macro, the value of ap is undefined after the call.\n\nSo all the ap used by these functions should use va_copy.",
      "parentUuid": "630ac615_78d781de",
      "revId": "ee97440de1d0ea89977fe413fe416c2797a6011f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ed03988_cf054e2b",
        "filename": "include/backtrace/Backtrace.h",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2013-11-22T20:06:39Z",
      "side": 1,
      "message": "yeah, this would be a good place to have a word_t.",
      "revId": "ee97440de1d0ea89977fe413fe416c2797a6011f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "630ac615_58dcbdfe",
        "filename": "include/backtrace/Backtrace.h",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1010578
      },
      "writtenOn": "2013-11-25T14:21:41Z",
      "side": 1,
      "message": "Ok.",
      "parentUuid": "5ed03988_cf054e2b",
      "revId": "ee97440de1d0ea89977fe413fe416c2797a6011f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bea77522_77535bca",
        "filename": "include/corkscrew/ptrace.h",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2013-11-22T20:06:39Z",
      "side": 1,
      "message": "libcorkscrew is no longer used for ARM, and we want to switch MIPS and x86 over to libbacktrace (which is a wrapper for libunwind), and have the 64-bit architectures be libbacktrace-only.",
      "revId": "ee97440de1d0ea89977fe413fe416c2797a6011f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1eca41de_6c9eef7c",
        "filename": "include/corkscrew/ptrace.h",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 1010578
      },
      "writtenOn": "2013-11-25T14:21:41Z",
      "side": 1,
      "message": "I\u0027ll look into it.",
      "parentUuid": "bea77522_77535bca",
      "revId": "ee97440de1d0ea89977fe413fe416c2797a6011f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}