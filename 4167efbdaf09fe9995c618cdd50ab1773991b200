{
  "comments": [
    {
      "key": {
        "uuid": "7d8c6c87_b3410285",
        "filename": "bvb/bvb_util.c",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-02-16T21:59:10Z",
      "side": 1,
      "message": "nit: eliminate these macros please -- while succinct, they are not necessary and IMO they reduce readability",
      "range": {
        "startLine": 44,
        "startChar": 8,
        "endLine": 44,
        "endChar": 16
      },
      "revId": "4167efbdaf09fe9995c618cdd50ab1773991b200",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d76744b_d18046ec",
        "filename": "bvb/bvb_util.h",
        "patchSetId": 6
      },
      "lineNbr": 37,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-02-16T21:59:10Z",
      "side": 1,
      "message": "nit: consistent naming: header_in / header_out, src / dest, or big_endian_header / host_order_header.",
      "revId": "4167efbdaf09fe9995c618cdd50ab1773991b200",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd7ab832_8e3cdb1b",
        "filename": "bvb/bvb_util_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-02-16T21:59:10Z",
      "side": 1,
      "message": "nit: while 42 has the advantage of being the ultimate answer, use a value that exercises all bytes? n32 \u003d 0x11223344; n64 \u003d 0x1122334455667788;",
      "revId": "4167efbdaf09fe9995c618cdd50ab1773991b200",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d71b053_13c254fd",
        "filename": "bvb/bvb_verify.c",
        "patchSetId": 6
      },
      "lineNbr": 22,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-02-16T21:59:10Z",
      "side": 1,
      "message": "nit: lines \u003e 80\nsuggestion: put just hash prefixes in constants and build the rest of the padding dynamically",
      "revId": "4167efbdaf09fe9995c618cdd50ab1773991b200",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fd2a1c13_dad06576",
        "filename": "bvb/bvb_verify.c",
        "patchSetId": 6
      },
      "lineNbr": 49,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-02-16T21:59:10Z",
      "side": 1,
      "message": "nit: not used -- maybe it should be compared to the hash_size in the block?",
      "revId": "4167efbdaf09fe9995c618cdd50ab1773991b200",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d76744b_b7b6ca4f",
        "filename": "bvb/bvb_verify.c",
        "patchSetId": 6
      },
      "lineNbr": 120,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-02-16T21:59:10Z",
      "side": 1,
      "message": "/* */ comment style throughout for consistency?",
      "revId": "4167efbdaf09fe9995c618cdd50ab1773991b200",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d76744b_341bb864",
        "filename": "bvb/bvb_verify.c",
        "patchSetId": 6
      },
      "lineNbr": 126,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-02-16T21:59:10Z",
      "side": 1,
      "message": "nit: period",
      "revId": "4167efbdaf09fe9995c618cdd50ab1773991b200",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd255844_b604a633",
        "filename": "bvb/bvb_verify.c",
        "patchSetId": 6
      },
      "lineNbr": 136,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-02-16T21:59:10Z",
      "side": 1,
      "message": "const?",
      "range": {
        "startLine": 136,
        "startChar": 44,
        "endLine": 136,
        "endChar": 62
      },
      "revId": "4167efbdaf09fe9995c618cdd50ab1773991b200",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d71b053_10fb2ad9",
        "filename": "bvb/bvb_verify.c",
        "patchSetId": 6
      },
      "lineNbr": 157,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-02-16T21:59:10Z",
      "side": 1,
      "message": "overflow checks here?",
      "revId": "4167efbdaf09fe9995c618cdd50ab1773991b200",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d8fa87c_a361b211",
        "filename": "bvb/bvb_verify.c",
        "patchSetId": 6
      },
      "lineNbr": 163,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-02-16T21:59:10Z",
      "side": 1,
      "message": "overflow checks here too? For example, offset\u003d1, size\u003d~0 would pass this test.\n\nIn all cases below too...\n\nMaybe a utility function to implement the subtleties would be helpful?",
      "revId": "4167efbdaf09fe9995c618cdd50ab1773991b200",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd7ab832_4ef35391",
        "filename": "bvb/bvb_verify.h",
        "patchSetId": 6
      },
      "lineNbr": 56,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-02-16T21:59:10Z",
      "side": 1,
      "message": "typo?",
      "range": {
        "startLine": 56,
        "startChar": 40,
        "endLine": 56,
        "endChar": 42
      },
      "revId": "4167efbdaf09fe9995c618cdd50ab1773991b200",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fd2a1c13_57f3ce90",
        "filename": "bvb/bvb_verify.h",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-02-16T21:59:10Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 60,
        "startChar": 61,
        "endLine": 60,
        "endChar": 68
      },
      "revId": "4167efbdaf09fe9995c618cdd50ab1773991b200",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd255844_b354b89d",
        "filename": "bvb/bvb_verify.h",
        "patchSetId": 6
      },
      "lineNbr": 67,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-02-16T21:59:10Z",
      "side": 1,
      "message": "out_public_key_length",
      "range": {
        "startLine": 67,
        "startChar": 4,
        "endLine": 67,
        "endChar": 23
      },
      "revId": "4167efbdaf09fe9995c618cdd50ab1773991b200",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d71b053_f0d53e63",
        "filename": "bvb/bvb_verify.h",
        "patchSetId": 6
      },
      "lineNbr": 72,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-02-16T21:59:10Z",
      "side": 1,
      "message": "Should these policy checks be done by the verify function? Doesn\u0027t seem hard if public key and rollback index inputs are provided?",
      "range": {
        "startLine": 72,
        "startChar": 3,
        "endLine": 72,
        "endChar": 17
      },
      "revId": "4167efbdaf09fe9995c618cdd50ab1773991b200",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd255844_f61e9ea7",
        "filename": "bvb/bvb_verify.h",
        "patchSetId": 6
      },
      "lineNbr": 82,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-02-16T21:59:10Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 82,
        "startChar": 62,
        "endLine": 82,
        "endChar": 69
      },
      "revId": "4167efbdaf09fe9995c618cdd50ab1773991b200",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd7ab832_545c4254",
        "filename": "bvb/bvb_verify_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 48,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-02-16T21:59:10Z",
      "side": 1,
      "message": "nit: on line above? (more below)",
      "revId": "4167efbdaf09fe9995c618cdd50ab1773991b200",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d76744b_5743e6ea",
        "filename": "bvb/bvb_verify_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 125,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-02-16T21:59:10Z",
      "side": 1,
      "message": "Also verify minor version change is ok?",
      "range": {
        "startLine": 125,
        "startChar": 19,
        "endLine": 125,
        "endChar": 36
      },
      "revId": "4167efbdaf09fe9995c618cdd50ab1773991b200",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fd2a1c13_7aeef117",
        "filename": "bvb/bvb_verify_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 262,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-02-16T21:59:10Z",
      "side": 1,
      "message": "Tests for overflow conditions for each of these out-of-bounds tests.",
      "range": {
        "startLine": 262,
        "startChar": 19,
        "endLine": 262,
        "endChar": 36
      },
      "revId": "4167efbdaf09fe9995c618cdd50ab1773991b200",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d8fa87c_a38c52b5",
        "filename": "bvb/bvbtool_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 39,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-02-16T21:59:10Z",
      "side": 1,
      "message": "nit: inconsistent BVB vs Bvb",
      "range": {
        "startLine": 39,
        "startChar": 20,
        "endLine": 39,
        "endChar": 23
      },
      "revId": "4167efbdaf09fe9995c618cdd50ab1773991b200",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fd2a1c13_fab68122",
        "filename": "bvb/bvbtool_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 49,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-02-16T21:59:10Z",
      "side": 1,
      "message": "Use ReadFileToString?",
      "range": {
        "startLine": 49,
        "startChar": 20,
        "endLine": 49,
        "endChar": 28
      },
      "revId": "4167efbdaf09fe9995c618cdd50ab1773991b200",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d8c6c87_566a045d",
        "filename": "bvb/bvbtool_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 83,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-02-16T21:59:10Z",
      "side": 1,
      "message": "line \u003e 80 (run through clang-format)",
      "revId": "4167efbdaf09fe9995c618cdd50ab1773991b200",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd255844_16cf9ace",
        "filename": "bvb/bvbtool_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 320,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-02-16T21:59:10Z",
      "side": 1,
      "message": "optional: This seems brittle. Maybe that\u0027s intentional / useful as a reminder to update tests?",
      "revId": "4167efbdaf09fe9995c618cdd50ab1773991b200",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}