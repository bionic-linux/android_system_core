{
  "comments": [
    {
      "key": {
        "uuid": "903934bb_9d6fe514",
        "filename": "libbacktrace/BacktraceOffline.cpp",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2016-11-30T00:10:51Z",
      "side": 1,
      "message": "It seems redundant to have eh_frame in the variable name when the struct is named EhFrame. Applies to all of the variables in this structure.",
      "range": {
        "startLine": 54,
        "startChar": 11,
        "endLine": 54,
        "endChar": 20
      },
      "revId": "329cfcbc19ecc229a159fa3c17858f499d56dc09",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "903934bb_5d0badd7",
        "filename": "libbacktrace/BacktraceOffline.cpp",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2016-11-30T01:01:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "903934bb_9d6fe514",
      "range": {
        "startLine": 54,
        "startChar": 11,
        "endLine": 54,
        "endChar": 20
      },
      "revId": "329cfcbc19ecc229a159fa3c17858f499d56dc09",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "903934bb_dd979dd6",
        "filename": "libbacktrace/BacktraceOffline.cpp",
        "patchSetId": 3
      },
      "lineNbr": 56,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2016-11-30T00:10:51Z",
      "side": 1,
      "message": "Should probably just be fde_table_offset.",
      "range": {
        "startLine": 56,
        "startChar": 11,
        "endLine": 56,
        "endChar": 43
      },
      "revId": "329cfcbc19ecc229a159fa3c17858f499d56dc09",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "903934bb_7d0871da",
        "filename": "libbacktrace/BacktraceOffline.cpp",
        "patchSetId": 3
      },
      "lineNbr": 56,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2016-11-30T01:01:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "903934bb_dd979dd6",
      "range": {
        "startLine": 56,
        "startChar": 11,
        "endLine": 56,
        "endChar": 43
      },
      "revId": "329cfcbc19ecc229a159fa3c17858f499d56dc09",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "903934bb_ddfb1d08",
        "filename": "libbacktrace/BacktraceOffline.cpp",
        "patchSetId": 3
      },
      "lineNbr": 286,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2016-11-30T00:10:51Z",
      "side": 1,
      "message": "This isn\u0027t true, the last address is stored in the program headers section. The executable PT_LOAD will have the virt address as the start, and the size plus that will give you the end address.",
      "range": {
        "startLine": 286,
        "startChar": 5,
        "endLine": 286,
        "endChar": 54
      },
      "revId": "329cfcbc19ecc229a159fa3c17858f499d56dc09",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "903934bb_20da4e08",
        "filename": "libbacktrace/BacktraceOffline.cpp",
        "patchSetId": 3
      },
      "lineNbr": 286,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2016-11-30T01:01:12Z",
      "side": 1,
      "message": "Yes, An end address read from section headers or program headers is better than a guess. I use end of \u0027.text\u0027 section as it is more strict than end of PT_LOAD segment. PT_LOAD contains other sections (.ARM.exidx, .rodata, etc) after .text section.",
      "parentUuid": "903934bb_ddfb1d08",
      "range": {
        "startLine": 286,
        "startChar": 5,
        "endLine": 286,
        "endChar": 54
      },
      "revId": "329cfcbc19ecc229a159fa3c17858f499d56dc09",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "903934bb_5d848d5d",
        "filename": "libbacktrace/BacktraceOffline.h",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2016-11-30T00:10:51Z",
      "side": 1,
      "message": "It\u0027s not clear why you need this. Couldn\u0027t you have some way to modify the has_arm_exidx or other variables from DebugFrameInfo instead?",
      "range": {
        "startLine": 52,
        "startChar": 8,
        "endLine": 52,
        "endChar": 23
      },
      "revId": "329cfcbc19ecc229a159fa3c17858f499d56dc09",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "903934bb_20a08ed7",
        "filename": "libbacktrace/BacktraceOffline.h",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2016-11-30T01:01:12Z",
      "side": 1,
      "message": "libbacktrace_test.so on arm is built with both .debug_frame and .ARM.exidx info, both works. I want to test explicit either .debug_frame or .ARM_exidx, or both. So I need to a way to tell BacktraceOffline to only use .debug_frame, or only use .ARM.exidx, or use both.\nDebugFrameInfo is not exported outside BacktraceOffline.cpp, and is generated during unwinding (not before unwinding), so modifying DebugFrameInfo before unwinding doesn\u0027t work.",
      "parentUuid": "903934bb_5d848d5d",
      "range": {
        "startLine": 52,
        "startChar": 8,
        "endLine": 52,
        "endChar": 23
      },
      "revId": "329cfcbc19ecc229a159fa3c17858f499d56dc09",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d506749_a72a548b",
        "filename": "libbacktrace/BacktraceOffline.h",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2016-12-01T18:54:20Z",
      "side": 1,
      "message": "Why can\u0027t you have a test that has one or the other or both?\n\nThe way this is currently working indicates either a deficient test, or a deficient design. I think it\u0027s okay to expose some internal of an object to be able to test it, but adding in code specifically called test indicates something is wrong.",
      "parentUuid": "903934bb_20a08ed7",
      "range": {
        "startLine": 52,
        "startChar": 8,
        "endLine": 52,
        "endChar": 23
      },
      "revId": "329cfcbc19ecc229a159fa3c17858f499d56dc09",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "903934bb_5de80df7",
        "filename": "libbacktrace/BacktraceOffline.h",
        "patchSetId": 3
      },
      "lineNbr": 59,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2016-11-30T00:10:51Z",
      "side": 1,
      "message": "\u003d default instead of {}.",
      "range": {
        "startLine": 58,
        "startChar": 30,
        "endLine": 59,
        "endChar": 3
      },
      "revId": "329cfcbc19ecc229a159fa3c17858f499d56dc09",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "903934bb_a0863ea2",
        "filename": "libbacktrace/BacktraceOffline.h",
        "patchSetId": 3
      },
      "lineNbr": 59,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2016-11-30T01:01:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "903934bb_5de80df7",
      "range": {
        "startLine": 58,
        "startChar": 30,
        "endLine": 59,
        "endChar": 3
      },
      "revId": "329cfcbc19ecc229a159fa3c17858f499d56dc09",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}