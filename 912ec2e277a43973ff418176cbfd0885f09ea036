{
  "comments": [
    {
      "key": {
        "uuid": "cbd1e4e3_329b508c",
        "filename": "liblog/logd_write.c",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2015-02-13T16:46:09Z",
      "side": 1,
      "message": "Are we going to have build problems for simulator, host, or MAC builds? This may have to be #ifdef !FAKE_LOG_DEVICE if not universally available.",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 22,
        "endChar": 22
      },
      "revId": "912ec2e277a43973ff418176cbfd0885f09ea036",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b4cdc89_e7c2bc29",
        "filename": "liblog/logd_write.c",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-02-13T16:57:54Z",
      "side": 1,
      "message": "dude, we removed the simulator years before you joined. i think it\u0027s okay to let it go :-)\n\n[+danalbert] did a lot of work to make this work everywhere and in every combination of C and C++, and iirc there are no gaps.",
      "parentUuid": "cbd1e4e3_329b508c",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 22,
        "endChar": 22
      },
      "revId": "912ec2e277a43973ff418176cbfd0885f09ea036",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b40c074_3d648fad",
        "filename": "liblog/logd_write.c",
        "patchSetId": 5
      },
      "lineNbr": 313,
      "author": {
        "id": 1001401
      },
      "writtenOn": "2015-02-14T02:23:54Z",
      "side": 1,
      "message": "All other errors (i.e. negative values of ret) will have written something?",
      "revId": "912ec2e277a43973ff418176cbfd0885f09ea036",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b6c1415_56c4d466",
        "filename": "liblog/logd_write.c",
        "patchSetId": 5
      },
      "lineNbr": 313,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2015-02-14T03:55:17Z",
      "side": 1,
      "message": "This is the _only_ error worth tracking, all others mean dysfunctional logd. If anything else happens, you are not getting through.",
      "parentUuid": "2b40c074_3d648fad",
      "revId": "912ec2e277a43973ff418176cbfd0885f09ea036",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6b0c7878_2fc3c993",
        "filename": "liblog/logd_write.c",
        "patchSetId": 5
      },
      "lineNbr": 313,
      "author": {
        "id": 1001401
      },
      "writtenOn": "2015-02-14T15:21:01Z",
      "side": 1,
      "message": "Hmmm, so doesn\u0027t that mean we dropped log output, and in which case we should handle those errors the same way?",
      "parentUuid": "4b6c1415_56c4d466",
      "revId": "912ec2e277a43973ff418176cbfd0885f09ea036",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b69a006_98d3395f",
        "filename": "liblog/logd_write.c",
        "patchSetId": 5
      },
      "lineNbr": 313,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2015-02-14T17:13:01Z",
      "side": 1,
      "message": "Ok, I will need to be clearer about my reasoning and will detail why and my architectural concerns. You may have forced my hand to consider adding a README or local comment to this source submission.\n\nFirst off, the counter is a can not happen and meant to debug and notify about a structural issue. If it happens, the integrator/vendor/partner uses this as a signal to increase the value they tuned /proc/sys/net/unix/max_dgram_qlen; or realize they are producing spam or a Denial Of Service to the logging subsystem and take action to reduce it to a reasonable level. One missed log message is enough, and reason enough to take these mitigating actions. It is _not_ meant to aid triage by telling the developer there are missed message and let them ignore the underlying problem(s).\n\nBy sending the message from upstream we are taking advantage of a KISS design, but with the knowledge we are adding to the logging pressure when doing so by slipping the message through the very same log entry point that is prostrated.\n\nCan not handle them the same way, the other errors occur when the logger is typically incapable of propagating them (eg: selinux MAC violations to the sockets, DAC permission to access the socket, logger crashing and forgetting the logs, logger stopped). The only one we can deal with is ENOTCONN, and it is handled above, and if it continues, means the logger is likely stopped. Once restarted, if we take generic action, the logger will get a flurry of lost message events from _all_ participants right at the _beginning_ of the log (a \"duh, what did you think?\"). That situation signals a complete truncation of the logs.\n\nIn the past, under many similar situations outlined above in other server projects, we already have a perfect storm, not contributing to it, and not producing messages that are meaningless to the logger data flow or result in an increase pressure on the logger unnecessarily.\n\nThis is all in the name of graceful failure modes. I have experienced dogpiles many times in my life, they often do not bode well for the developer and usually result in other engineers muttering about the heritage and experience of that developer ;-} lol\n\nI will now consider how I can say this in a manner that is clear and concise ...",
      "parentUuid": "6b0c7878_2fc3c993",
      "revId": "912ec2e277a43973ff418176cbfd0885f09ea036",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b20ccdf_08dfe7e1",
        "filename": "liblog/logd_write.c",
        "patchSetId": 5
      },
      "lineNbr": 313,
      "author": {
        "id": 1005146
      },
      "writtenOn": "2015-02-16T15:10:09Z",
      "side": 1,
      "message": "Ok, perhaps my earlier comments can be ignored, then.  Please consider, though, that an OEM like ourselves that is downstream not only from AOSP, but also a chipset vendor, may receive a drop of software that is less than ideal, and still have to press forward with improving it functionally in many other subsystems in _parallel_ with investigating and fixing the performance issues causing the log drops.  At least from my end, having the drops reported in-band for each stream would likely increase the visibility and pressure for action to eliminate them.  We have monitoring in place for these drop messages now, wherever they reside, but once they appear there is still a time lag before they can be root-caused and fixed.  During that time, all other (triage) users potentially remain confused.",
      "parentUuid": "2b69a006_98d3395f",
      "revId": "912ec2e277a43973ff418176cbfd0885f09ea036",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8885328c_e0d4e2c4",
        "filename": "liblog/logd_write.c",
        "patchSetId": 5
      },
      "lineNbr": 313,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2015-02-23T16:28:41Z",
      "side": 1,
      "message": "I will think about a solution to this concern (as voiced in Patchset 2)",
      "parentUuid": "8b20ccdf_08dfe7e1",
      "revId": "912ec2e277a43973ff418176cbfd0885f09ea036",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}