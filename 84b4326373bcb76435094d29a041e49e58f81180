{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "01cee941_9543d922",
        "filename": "libprocessgroup/task_profiles.cpp",
        "patchSetId": 4
      },
      "lineNbr": 206,
      "author": {
        "id": 1105075
      },
      "writtenOn": "2022-02-03T05:49:53Z",
      "side": 1,
      "message": "for v2, I guess we won\u0027t be able to cache the fd (too many) so we potentially will have more open syscall...",
      "range": {
        "startLine": 206,
        "startChar": 9,
        "endLine": 206,
        "endChar": 26
      },
      "revId": "84b4326373bcb76435094d29a041e49e58f81180",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab5ee4ea_f3586464",
        "filename": "libprocessgroup/task_profiles.cpp",
        "patchSetId": 4
      },
      "lineNbr": 206,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2022-02-03T17:08:41Z",
      "side": 1,
      "message": "Yeah. We discussed that with Li yesterday and I need to change couple things to allow fds of attributes to be cached. Li filed b/217610371 for that.",
      "parentUuid": "01cee941_9543d922",
      "range": {
        "startLine": 206,
        "startChar": 9,
        "endLine": 206,
        "endChar": 26
      },
      "revId": "84b4326373bcb76435094d29a041e49e58f81180",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d63fb6d1_509f1689",
        "filename": "libprocessgroup/task_profiles.cpp",
        "patchSetId": 4
      },
      "lineNbr": 212,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2022-02-03T17:08:41Z",
      "side": 1,
      "message": "Wouldn\u0027t this spam the logcat?",
      "range": {
        "startLine": 211,
        "startChar": 12,
        "endLine": 212,
        "endChar": 53
      },
      "revId": "84b4326373bcb76435094d29a041e49e58f81180",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "19f117ab_5f64365c",
        "filename": "libprocessgroup/task_profiles.cpp",
        "patchSetId": 4
      },
      "lineNbr": 212,
      "author": {
        "id": 1869780
      },
      "writtenOn": "2022-02-03T17:54:28Z",
      "side": 1,
      "message": "If this log line would spam the logcat then to me this means that task_profiles.json must be improved. TaskProfile::ExecuteForProcess() and TaskProfile::ExecuteForTask() both give up if applying a single attribute fails. As a result, other attributes mentioned later in task_profiles.json are not applied after a failure occurred. So I think that every single failure to apply an attribute should be analyzed and annotated with \"IgnoreFailure\": \"true\" if necessary.",
      "parentUuid": "d63fb6d1_509f1689",
      "range": {
        "startLine": 211,
        "startChar": 12,
        "endLine": 212,
        "endChar": 53
      },
      "revId": "84b4326373bcb76435094d29a041e49e58f81180",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2bf4511_17509d38",
        "filename": "libprocessgroup/task_profiles.cpp",
        "patchSetId": 4
      },
      "lineNbr": 212,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2022-02-03T18:24:26Z",
      "side": 1,
      "message": "From the description of this patch: \"Cgroup attributes like io.weight or io.bfq.weight only exist if the corresponding I/O scheduler has been loaded.\"\nSo, this means we do expect that these attributes might not exist and therefore we mark them with \"IgnoreFailure\". I think a better name for this tag would be \"Optional\" so that it\u0027s clear that we expect that the attribute might not exist and that\u0027s not an error.\n\nWe should also check for (errno \u003d\u003d ENOENT) before we ignore the error reporting.\n\nCould you please clarify \"task_profiles.json must be improved\"? Worded as such it\u0027s not very actionable. If there are other cases when a missing attribute should not be considered as a failure then sure, we absolutely should mart them as Optional too.",
      "parentUuid": "19f117ab_5f64365c",
      "range": {
        "startLine": 211,
        "startChar": 12,
        "endLine": 212,
        "endChar": 53
      },
      "revId": "84b4326373bcb76435094d29a041e49e58f81180",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49fc96c4_229a55cb",
        "filename": "libprocessgroup/task_profiles.cpp",
        "patchSetId": 4
      },
      "lineNbr": 212,
      "author": {
        "id": 1869780
      },
      "writtenOn": "2022-02-03T18:42:27Z",
      "side": 1,
      "message": "I will rename \"IgnoreFailure\" into \"Optional\".\n\nIt is not clear to me why ENOENT should be checked separately? In case an attribute does not exist the attempt to write to the attribute will fail and PLOG() will report the value of errno in textual format.\n\nRegarding my comment \"task_profiles.json must be improved\": a failure to write to a cgroup attribute could indicate a typo in the attribute name or attribute value in task_profiles.json. Hence my comment.",
      "parentUuid": "e2bf4511_17509d38",
      "range": {
        "startLine": 211,
        "startChar": 12,
        "endLine": 212,
        "endChar": 53
      },
      "revId": "84b4326373bcb76435094d29a041e49e58f81180",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}