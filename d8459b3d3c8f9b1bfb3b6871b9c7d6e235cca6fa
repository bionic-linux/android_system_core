{
  "comments": [
    {
      "key": {
        "uuid": "048f817d_5bf7794d",
        "filename": "adb/transport.cpp",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2015-08-26T22:55:57Z",
      "side": 1,
      "message": "Technically tsan is clearly correct.  This is a data race, which has undefined behavior.  Whether it can actually fail in practice is complicated.  In the old version, I think it would be correct, for example, for the compiler to remove the second t-\u003ekicked load, since it can assume the first one doesn\u0027t race, and hence the value can\u0027t change.  That would allow t-\u003ekick(t) to execute more than once, which certainly violates the intent of the code.\n\nI suspect no current compiler does that.  I wouldn\u0027t be surprised if people are working on it.",
      "range": {
        "startLine": 46,
        "startChar": 7,
        "endLine": 46,
        "endChar": 20
      },
      "revId": "d8459b3d3c8f9b1bfb3b6871b9c7d6e235cca6fa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a47f9520_3e57fcd8",
        "filename": "adb/transport.cpp",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2015-08-27T17:42:21Z",
      "side": 1,
      "message": "But I can assume there is a load operation with memory_order_acquire in adb_mutex_lock. No memory accesses in the current thread can be reordered before this load. So I think the second t-\u003ekicked should never reuse the content of the first t-\u003ekicked. Not right?",
      "parentUuid": "048f817d_5bf7794d",
      "range": {
        "startLine": 46,
        "startChar": 7,
        "endLine": 46,
        "endChar": 20
      },
      "revId": "d8459b3d3c8f9b1bfb3b6871b9c7d6e235cca6fa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84253145_a748db81",
        "filename": "adb/transport.cpp",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2015-08-27T17:58:54Z",
      "side": 1,
      "message": "I\u0027m assuming more devious reasoning by the compiler than you are.  The compiler may assume that the first load of t-\u003ekicked is not involved in a data race, since the language spec says so.  Under that assumption, the value of t-\u003ekicked cannot change between the two loads.  Thus it \"knows\" the second load has to return the same value as the first.\n\nIf the first load were not there, you would be right that the compiler could not move the load out of the critical section.  But the load outside the critical section gives the compiler information (in this case false) about what might be concurrently modified.  Taking advantage of that introduces the possible bug here.\n\nAll of this assumes that the compiler understands some things about adb_mutex_lock, which it probably doesn\u0027t.\n\nThe bottom line is really that we need to fix such tsan-reported bugs before compilers really get this clever.",
      "parentUuid": "a47f9520_3e57fcd8",
      "range": {
        "startLine": 46,
        "startChar": 7,
        "endLine": 46,
        "endChar": 20
      },
      "revId": "d8459b3d3c8f9b1bfb3b6871b9c7d6e235cca6fa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4750d3f_ad0c2048",
        "filename": "adb/transport.cpp",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2015-08-27T18:25:00Z",
      "side": 1,
      "message": "I see. So it is at least possible for the compiler to do wrong optimization based on the assumption that t-\u003ekicked is not involved in a data race. Thanks!",
      "parentUuid": "84253145_a748db81",
      "range": {
        "startLine": 46,
        "startChar": 7,
        "endLine": 46,
        "endChar": 20
      },
      "revId": "d8459b3d3c8f9b1bfb3b6871b9c7d6e235cca6fa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}