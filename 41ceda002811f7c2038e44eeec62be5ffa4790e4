{
  "comments": [
    {
      "key": {
        "uuid": "ba37f7d9_6ca917c7",
        "filename": "liblog/event_tag_map.cpp",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2016-12-09T22:00:25Z",
      "side": 1,
      "message": "order important because alloc has to be initialized before str.",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 46,
        "endChar": 54
      },
      "revId": "41ceda002811f7c2038e44eeec62be5ffa4790e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba37f7d9_2cd66f08",
        "filename": "liblog/event_tag_map.cpp",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2016-12-09T22:28:49Z",
      "side": 1,
      "message": "For the record, this ordering problem _and_ the const constraint are why this must turn into a class ...\n\nIf we relax the const constraint, we may be able to force the initialization order by using std::experimental::string_view as a (IS-A) base class?",
      "parentUuid": "ba37f7d9_6ca917c7",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 46,
        "endChar": 54
      },
      "revId": "41ceda002811f7c2038e44eeec62be5ffa4790e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba37f7d9_5973b454",
        "filename": "liblog/event_tag_map.cpp",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-12-09T23:51:20Z",
      "side": 1,
      "message": "the STL assumes you\u0027re not subclassing it, so you\u0027ll only make trouble for yourself if you do.",
      "parentUuid": "ba37f7d9_2cd66f08",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 46,
        "endChar": 54
      },
      "revId": "41ceda002811f7c2038e44eeec62be5ffa4790e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba37f7d9_f94f08db",
        "filename": "liblog/event_tag_map.cpp",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2016-12-10T00:02:44Z",
      "side": 1,
      "message": "Good to know, so this approach is \u0027best\u0027 ;-\u003e",
      "parentUuid": "ba37f7d9_5973b454",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 46,
        "endChar": 54
      },
      "revId": "41ceda002811f7c2038e44eeec62be5ffa4790e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba37f7d9_eccd07c5",
        "filename": "liblog/event_tag_map.cpp",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2016-12-09T22:00:25Z",
      "side": 1,
      "message": "This whole class would go from typedef or IS-A to this because of the requirements.",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 77,
        "endChar": 2
      },
      "revId": "41ceda002811f7c2038e44eeec62be5ffa4790e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba37f7d9_8cdc3b34",
        "filename": "liblog/event_tag_map.cpp",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2016-12-09T22:28:49Z",
      "side": 1,
      "message": "We would need to add this also as we move from typedef to HAS-A.",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 87,
        "endChar": 2
      },
      "revId": "41ceda002811f7c2038e44eeec62be5ffa4790e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba37f7d9_ec0507c4",
        "filename": "liblog/event_tag_map.cpp",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2016-12-09T22:24:53Z",
      "side": 1,
      "message": "Confirm that this is the default \u003d\u003d operator?",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 94,
        "endChar": 5
      },
      "revId": "41ceda002811f7c2038e44eeec62be5ffa4790e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba37f7d9_0c096be0",
        "filename": "liblog/event_tag_map.cpp",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2016-12-09T22:24:53Z",
      "side": 1,
      "message": "If this is made a typedef, then initializer would be a std::make_pair(MapString(), MapString()) for both cases, and should work ... check for any performance implications.",
      "range": {
        "startLine": 96,
        "startChar": 0,
        "endLine": 101,
        "endChar": 48
      },
      "revId": "41ceda002811f7c2038e44eeec62be5ffa4790e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba37f7d9_ccda4379",
        "filename": "liblog/event_tag_map.cpp",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2016-12-09T22:00:25Z",
      "side": 1,
      "message": "This whole class would go from typedef or IS-A to this because of the requirements.",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 102,
        "endChar": 2
      },
      "revId": "41ceda002811f7c2038e44eeec62be5ffa4790e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}