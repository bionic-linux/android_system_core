{
  "comments": [
    {
      "key": {
        "uuid": "59bc528a_9e3fcf1c",
        "filename": "fs_mgr/libfiemap_writer/fiemap_writer.cpp",
        "patchSetId": 14
      },
      "lineNbr": 48,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2019-01-02T20:23:03Z",
      "side": 1,
      "message": "nit: \"const\" here is redundant (same on kMaxExtents as well)",
      "revId": "faa257ee0fe10224c3b86187ee2e420057178d9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5f7eb15_6d8ebdbe",
        "filename": "fs_mgr/libfiemap_writer/fiemap_writer.cpp",
        "patchSetId": 14
      },
      "lineNbr": 48,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2019-01-02T21:18:26Z",
      "side": 1,
      "message": "yes, I think I keep copy-pasting it everywhere. I will keep it for now and remove later with another change I have incoming.",
      "parentUuid": "59bc528a_9e3fcf1c",
      "revId": "faa257ee0fe10224c3b86187ee2e420057178d9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "978ba238_c9c358be",
        "filename": "fs_mgr/libfiemap_writer/fiemap_writer.cpp",
        "patchSetId": 14
      },
      "lineNbr": 53,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2018-12-29T19:18:20Z",
      "side": 1,
      "message": "I left this as is. I also don\u0027t like to have to write this \"cleanup\" function, but I do want to make sure we delete the file if we fail along the way. A lot of the initialization in Open() need the file created first, I couldn\u0027t defer it either.\n\nHonestly, all the cleanup() call sites are perfect candidates for something like \"goto error\" and I could have just put his 2 line code at the end of Open() as ..\n\n error:\n    if (create) unlink(file_path);\n\n.. ofcourse, it wasn\u0027t to be. Adding gotos for errors, makes \"goto skip over variable definitions\". :(",
      "range": {
        "startLine": 53,
        "startChar": 19,
        "endLine": 53,
        "endChar": 26
      },
      "revId": "faa257ee0fe10224c3b86187ee2e420057178d9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6351508f_c1b36a16",
        "filename": "fs_mgr/libfiemap_writer/fiemap_writer.cpp",
        "patchSetId": 14
      },
      "lineNbr": 343,
      "author": {
        "id": 1176763
      },
      "writtenOn": "2019-01-03T05:42:29Z",
      "side": 1,
      "message": "This does not indicate pin_status, but does # of blocks within the file being moved by GC. So, 0 means nothing was moved at all, and non-zero means some blocks were actually moved.",
      "range": {
        "startLine": 343,
        "startChar": 55,
        "endLine": 343,
        "endChar": 65
      },
      "revId": "faa257ee0fe10224c3b86187ee2e420057178d9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "183153be_28b2d2fd",
        "filename": "fs_mgr/libfiemap_writer/fiemap_writer.cpp",
        "patchSetId": 14
      },
      "lineNbr": 343,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2019-01-03T15:55:58Z",
      "side": 1,
      "message": "ack. that\u0027s weird though. What can user space do with the # of blocks moved? That makes the SET_PIN_FILE/GET_PIN_FILE asymmetrical too. Anyway, I\u0027ll fix this with the follow up CL",
      "parentUuid": "6351508f_c1b36a16",
      "range": {
        "startLine": 343,
        "startChar": 55,
        "endLine": 343,
        "endChar": 65
      },
      "revId": "faa257ee0fe10224c3b86187ee2e420057178d9c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}