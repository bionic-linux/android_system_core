{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "62006da5_0f95f69c",
        "filename": "libutils/Looper.cpp",
        "patchSetId": 1
      },
      "lineNbr": 110,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-03-31T18:02:33Z",
      "side": 1,
      "message": "handled in latest PS",
      "range": {
        "startLine": 110,
        "startChar": 11,
        "endLine": 110,
        "endChar": 60
      },
      "revId": "10aa7f24d92af473876f2f093f56c1cf76b586e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a5f26da_8f473df7",
        "filename": "libutils/include/utils/StrongPointer.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-03-31T16:10:28Z",
      "side": 1,
      "message": "idk why I didn\u0027t do something like this years ago.\n\nOne alternative would be to call this ANDROID_UTILS_SP_DISABLE_IMPLICIT_*CONSTRUCTION* and to remove this and L52-52 constructor. In that case, we would need to provide `sp\u003cT\u003e sp\u003cT\u003e::selfRef()`. Actually - let try that. No reason to have this partial solution.",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 42,
        "endChar": 26
      },
      "revId": "10aa7f24d92af473876f2f093f56c1cf76b586e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af9b799d_f2d7c125",
        "filename": "libutils/include/utils/StrongPointer.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2021-03-31T17:08:59Z",
      "side": 1,
      "message": "I\u0027m not sure I fully understand yet what you have in mind. What about Line 64?\n\nOtherwise I like the approach. There is the usual concern that repeated and nested includes don\u0027t really work as desired. We probably need a strong recommendation to only define ANDROID_UTILS_SP_DISABLE_IMPLICIT_* at the beginning of .cpp files or with compiler flags. And you may have to clean up a bunch of seemingly unrelated .h files to do that. But it still looks feasible.",
      "parentUuid": "1a5f26da_8f473df7",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 42,
        "endChar": 26
      },
      "revId": "10aa7f24d92af473876f2f093f56c1cf76b586e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6138b6b_0ff98864",
        "filename": "libutils/include/utils/StrongPointer.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-03-31T18:02:33Z",
      "side": 1,
      "message": "PS3 now has the strongest ownership semantics I can think of. Though, I could revert to PS2 if you think it\u0027s too much.\n\nI might also want to convert another big library to use the correct semantics before merging this.\n\nre re usual concerns - it comes with the trade - any specific place we could document it? For souls unfortunate enough to skip over how the C preprocessor works, I am not sure the most effective way to share this information. For the mentioned libbase flag, people always add it in cflags seemingly without prompt.",
      "parentUuid": "af9b799d_f2d7c125",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 42,
        "endChar": 26
      },
      "revId": "10aa7f24d92af473876f2f093f56c1cf76b586e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c9f7a88_75ed60c6",
        "filename": "libutils/include/utils/StrongPointer.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-03-31T18:05:22Z",
      "side": 1,
      "message": "if there was a possibility that a weaker variant would let us make this opt-out rather than opt-in, that might be interesting. otherwise, if we\u0027re going to be opt-in anyway, we may as well go for the safest variant?",
      "parentUuid": "f6138b6b_0ff98864",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 42,
        "endChar": 26
      },
      "revId": "10aa7f24d92af473876f2f093f56c1cf76b586e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "776ad030_4f5dc598",
        "filename": "libutils/include/utils/StrongPointer.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-03-31T18:07:52Z",
      "side": 1,
      "message": "Exactly - we are so far beyond opt-out here - for either approach.",
      "parentUuid": "5c9f7a88_75ed60c6",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 42,
        "endChar": 26
      },
      "revId": "10aa7f24d92af473876f2f093f56c1cf76b586e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "121a31de_e03dd971",
        "filename": "libutils/include/utils/StrongPointer.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2021-04-02T02:15:37Z",
      "side": 1,
      "message": "resolve",
      "parentUuid": "776ad030_4f5dc598",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 42,
        "endChar": 26
      },
      "revId": "10aa7f24d92af473876f2f093f56c1cf76b586e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}