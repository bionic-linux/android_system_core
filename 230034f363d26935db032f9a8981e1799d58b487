{
  "comments": [
    {
      "key": {
        "uuid": "202c208f_ff1eaa18",
        "filename": "fs_mgr/fs_mgr_fstab.cpp",
        "patchSetId": 6
      },
      "lineNbr": 331,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2017-07-27T09:58:42Z",
      "side": 1,
      "message": "maybe remove the \u0026 here? as it references to a local object in init_android_dt_dir().",
      "range": {
        "startLine": 331,
        "startChar": 28,
        "endLine": 331,
        "endChar": 29
      },
      "revId": "230034f363d26935db032f9a8981e1799d58b487",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86432ac3_84940fbb",
        "filename": "fs_mgr/fs_mgr_fstab.cpp",
        "patchSetId": 6
      },
      "lineNbr": 331,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2017-07-27T10:15:29Z",
      "side": 1,
      "message": "Oh, you have const here to bound the temp object.\nSo this looks fine.",
      "parentUuid": "202c208f_ff1eaa18",
      "range": {
        "startLine": 331,
        "startChar": 28,
        "endLine": 331,
        "endChar": 29
      },
      "revId": "230034f363d26935db032f9a8981e1799d58b487",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bad3c584_9ede5d8c",
        "filename": "fs_mgr/fs_mgr_fstab.cpp",
        "patchSetId": 6
      },
      "lineNbr": 331,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2017-07-27T17:53:14Z",
      "side": 1,
      "message": "Is it fine?  It still looks problematic to me.  const or not it\u0027s a static reference to a temporary object.  Once the temporary goes out of scope, we\u0027ll have a dangling reference.  So I agree with the original comment, no \u0026",
      "parentUuid": "86432ac3_84940fbb",
      "range": {
        "startLine": 331,
        "startChar": 28,
        "endLine": 331,
        "endChar": 29
      },
      "revId": "230034f363d26935db032f9a8981e1799d58b487",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6f8fa2b_1bac4150",
        "filename": "fs_mgr/fs_mgr_fstab.cpp",
        "patchSetId": 6
      },
      "lineNbr": 331,
      "author": {
        "id": 1057369
      },
      "writtenOn": "2017-07-28T02:27:00Z",
      "side": 1,
      "message": "This is a good question. I was assuming that the temporary object would be assigned the scope of the static local because the static local references it. A quick Google search for \"c++ return value scope\" leads to this post that supports my hypothesis:\n\nhttps://stackoverflow.com/questions/37067773/scope-of-a-return-value-of-a-function\n\n\"Yes, you can bind a reference to the return value of a function. This extends the lifetime of the returned object to that of the reference (if it\u0027s global or function-local), or to the end of the current function (if the reference is a data member).\n\nHowever, you cannot bind a temporary (prvalue) to a non-const lvalue reference.\"\n\nBut this answer doesn\u0027t list any reference. I\u0027ll try to find a more authoritative article on this topic. If I can\u0027t, I\u0027ll be happy just remove the \u0026\u0027s.",
      "parentUuid": "bad3c584_9ede5d8c",
      "range": {
        "startLine": 331,
        "startChar": 28,
        "endLine": 331,
        "endChar": 29
      },
      "revId": "230034f363d26935db032f9a8981e1799d58b487",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b11a79cc_8657f2c4",
        "filename": "fs_mgr/fs_mgr_fstab.cpp",
        "patchSetId": 6
      },
      "lineNbr": 331,
      "author": {
        "id": 1057369
      },
      "writtenOn": "2017-07-28T02:51:32Z",
      "side": 1,
      "message": "Here it is:\n\n\"The lifetime of a temporary object may be extended by binding to a const lvalue reference [or to an rvalue reference (since C++11)]\"\n\nquoted from: http://en.cppreference.com/w/cpp/language/lifetime\n\nThat said, I\u0027ve seen several posts mention Return Value Optimization, and that most C++ compilers are good at it:\n\nhttps://en.wikipedia.org/wiki/Return_value_optimization\n\nSo I\u0027ll remove the \u0026\u0027s anyway :)",
      "parentUuid": "f6f8fa2b_1bac4150",
      "range": {
        "startLine": 331,
        "startChar": 28,
        "endLine": 331,
        "endChar": 29
      },
      "revId": "230034f363d26935db032f9a8981e1799d58b487",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0016622_afaec9b3",
        "filename": "fs_mgr/fs_mgr_fstab.cpp",
        "patchSetId": 6
      },
      "lineNbr": 331,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2017-07-28T03:02:46Z",
      "side": 1,
      "message": "Oh, Tom is right. I forgot about the \u0027static\u0027 part.\n\nThis is ok: \n  const std::string\u0026 kAndroidDtDir \u003d init_android_dt_dir();\n\nBut not:\n  static const std::string\u0026 kAndroidDtDir \u003d init_android_dt_dir();\n\n\nThe life cycle of static is global, but the \u0027temp\u0027 object life cycle is only within this function.\n\nSo once the function returns, the temp object is no longer available. Then the static reference will become dangling and it won\u0027t be initialized anymore.\n\nChecked the standard:\nhttp://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3690.pdf\n\n12.2 Temporary objects\nThe destruction of a temporary whose lifetime is not extended by being bound to a reference is sequenced\nbefore the destruction of every temporary which is constructed earlier in the same full-expression.\n\nSo, +1 for Tom\u0027s and my original comment.",
      "parentUuid": "f6f8fa2b_1bac4150",
      "range": {
        "startLine": 331,
        "startChar": 28,
        "endLine": 331,
        "endChar": 29
      },
      "revId": "230034f363d26935db032f9a8981e1799d58b487",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f2e4f5f_7c587d1c",
        "filename": "fs_mgr/fs_mgr_fstab.cpp",
        "patchSetId": 6
      },
      "lineNbr": 331,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2017-07-28T03:07:20Z",
      "side": 1,
      "message": "Yup, adding \u0027\u0026\u0027 isn\u0027t necessary as we have copy elision.\nhttp://en.cppreference.com/w/cpp/language/copy_elision",
      "parentUuid": "f0016622_afaec9b3",
      "range": {
        "startLine": 331,
        "startChar": 28,
        "endLine": 331,
        "endChar": 29
      },
      "revId": "230034f363d26935db032f9a8981e1799d58b487",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a168b1d_b80b2f26",
        "filename": "fs_mgr/fs_mgr_fstab.cpp",
        "patchSetId": 6
      },
      "lineNbr": 331,
      "author": {
        "id": 1057369
      },
      "writtenOn": "2017-07-28T03:21:33Z",
      "side": 1,
      "message": "Thanks, Bowgo! My C++ knowledge is rusty now... I\u0027ll read the links you provided to understand the subtle difference made by \"static\".",
      "parentUuid": "5f2e4f5f_7c587d1c",
      "range": {
        "startLine": 331,
        "startChar": 28,
        "endLine": 331,
        "endChar": 29
      },
      "revId": "230034f363d26935db032f9a8981e1799d58b487",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}