{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9162088b_63d28c9f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2020-12-31T01:13:24Z",
      "side": 1,
      "message": "I am not against sorting the result of readdir because consistent behavior is almost always good to have. But, I think the very problem described here is a build system problem; we are not supposed to have both tethering and tethering.inprocess at the same time, are we?",
      "range": {
        "startLine": 15,
        "startChar": 3,
        "endLine": 17,
        "endChar": 63
      },
      "revId": "9449583bc36c9148fde4f7249bdb74a8e6d4d637",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22393aa0_f1b16e3d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1432579
      },
      "writtenOn": "2020-12-31T01:49:14Z",
      "side": 1,
      "message": "+1. Unless I\u0027m missing something, the output of the build system should contain both com.android.tethering and com.android.tethering.inprocess.",
      "parentUuid": "9162088b_63d28c9f",
      "range": {
        "startLine": 15,
        "startChar": 3,
        "endLine": 17,
        "endChar": 63
      },
      "revId": "9449583bc36c9148fde4f7249bdb74a8e6d4d637",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3d80d895_1ff2af86",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1075502
      },
      "writtenOn": "2020-12-30T22:01:46Z",
      "side": 1,
      "message": "Adding as reviewers as it affects the same handling as I74a4d0ee363761564225097c5949e5ce335ac6dc.\n\nTo give a bit of context for reference, the original issue is that the Settings app\nwould freeze blank upon access, timeout for 60s and crash as follows.\n\n\u003e AndroidRuntime: Caused by: java.lang.IllegalStateException: Callback timeout\n\u003e AndroidRuntime: \tat android.net.TetheringManager$RequestDispatcher.waitForResult(TetheringManager.java:407)\n\u003e AndroidRuntime: \tat android.net.TetheringManager.isTetheringSupported(TetheringManager.java:1321)\n\nThe issue appeared randomly on various LineageOS 18.1 (android-11.0.0_r19) devices,\nand on a permanent basis on my two devices built with Go configurations included.\n\nThe following product packages introduce a normal and an override package of the same APEX,\nwhich is another issue that I will attempt to cover later in a separate change.\n\nbuild/make/target/product/go_defaults_common.mk:\n\u003e PRODUCT_PACKAGES +\u003d InProcessNetworkStack\n\u003e PRODUCT_PACKAGES +\u003d com.android.tethering.inprocess\n\nOn master, with the \"apex-info-list.xml\" feature available,\nyou should be able to see the order vary between various devices and build machines.\n\nThe issue is deeper than just ordering, but at least the behaviour becomes consistent across builds and devices.",
      "revId": "9449583bc36c9148fde4f7249bdb74a8e6d4d637",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e2a58275_7764a4e2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1075502
      },
      "writtenOn": "2020-12-31T01:51:28Z",
      "side": 1,
      "message": "Thanks for the review and logic approval.\n\nAs you said, this change makes things consistent and cleaner,\nbut our original issue is much deeper than this for Tethering.\n\nAs state above, Go devices include \u0027build/make/target/product/go_defaults_common.mk\u0027, or some devices may add:\n\u003e PRODUCT_PACKAGES +\u003d InProcessNetworkStack com.android.tethering.inprocess\n\nIn this situation, from all the tests I did locally, I always end up with both being built.\n\n\u003e system/apex/com.android.tethering/javalib/framework-tethering.jar\n\u003e system/apex/com.android.tethering/priv-app/Tethering/Tethering.apk\n\u003e system/apex/com.android.tethering.inprocess/javalib/framework-tethering.jar\n\u003e system/apex/com.android.tethering.inprocess/priv-app/InProcessTethering/InProcessTethering.apk\n\nThe issue is resolved if I remove the global and default product addition\nof \u0027com.android.tethering\u0027 in \u0027build/make/target/product/base_system.mk\u0027.\n\nThis proves that the override itself is not effective.\n\nThe Tethering architecture of both modules is as such:\n\u003e com.android.tethering\n\u003e -\u003e apps: Tethering\n\u003e          -\u003e manifest: AndroidManifest.xml\n\n\u003e com.android.tethering.inprocess\n\u003e -\u003e base: com.android.tethering\n\u003e -\u003e apps: InProcessTethering\n\u003e          -\u003e overrides: [\"Tethering\"] # Most likely ignored\n\u003e          -\u003e manifest: AndroidManifest_InProcess.xml\n\nI added the missing \u0027overrides: [\"com.android.tethering\"]\u0027 to the \u0027override_apex\u0027,\nseen in the unit tests of apex.go, but the behaviour is the same.\nThe code documentation states it should clean the PRODUCT_PACKAGES, but apparently not.\n\nI tried using the \u0027override_android_app\u0027 for \u0027InProcessTethering\u0027,\nbut the result is exactly the same and it does not support the \u0027manifest:\u0027 key.\n\nMy guess is that some part of the \u0027override_apex\u0027 \u003e \u0027apps\u0027 \u003e \u0027overrides\u0027 chain is passing through the safeguards.\n\nIf possible, it would be helpful if you could have a look at it, given 1-2 days\nspent on digging this issue is not enough to know the full depth of soong/apex.",
      "revId": "9449583bc36c9148fde4f7249bdb74a8e6d4d637",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}