{
  "comments": [
    {
      "key": {
        "uuid": "feccfe3c_886fab9f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-02-03T18:31:11Z",
      "side": 1,
      "message": "are",
      "range": {
        "startLine": 9,
        "startChar": 36,
        "endLine": 9,
        "endChar": 38
      },
      "revId": "d561c090039f69d7633e28a7563be925e71ba589",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "005f9cdc_072d9a1e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2020-02-04T02:42:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "feccfe3c_886fab9f",
      "range": {
        "startLine": 9,
        "startChar": 36,
        "endLine": 9,
        "endChar": 38
      },
      "revId": "d561c090039f69d7633e28a7563be925e71ba589",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c0dc770f_2d61402b",
        "filename": "fs_mgr/fs_mgr.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1301,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2020-02-01T02:24:54Z",
      "side": 1,
      "message": "SetUpStandaloneAvbHashtree() is used here.",
      "range": {
        "startLine": 1301,
        "startChar": 27,
        "endLine": 1301,
        "endChar": 53
      },
      "revId": "d561c090039f69d7633e28a7563be925e71ba589",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a54086b4_420adf26",
        "filename": "fs_mgr/fs_mgr.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1698,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2020-02-01T02:24:54Z",
      "side": 1,
      "message": "And here.",
      "range": {
        "startLine": 1698,
        "startChar": 27,
        "endLine": 1698,
        "endChar": 53
      },
      "revId": "d561c090039f69d7633e28a7563be925e71ba589",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2bad2ab8_1693e6d3",
        "filename": "fs_mgr/libfs_avb/fs_avb.cpp",
        "patchSetId": 1
      },
      "lineNbr": 317,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-02-03T18:31:11Z",
      "side": 1,
      "message": "are",
      "range": {
        "startLine": 317,
        "startChar": 83,
        "endLine": 317,
        "endChar": 85
      },
      "revId": "d561c090039f69d7633e28a7563be925e71ba589",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ff94244_66a041b0",
        "filename": "fs_mgr/libfs_avb/fs_avb.cpp",
        "patchSetId": 1
      },
      "lineNbr": 317,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2020-02-04T02:42:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2bad2ab8_1693e6d3",
      "range": {
        "startLine": 317,
        "startChar": 83,
        "endLine": 317,
        "endChar": 85
      },
      "revId": "d561c090039f69d7633e28a7563be925e71ba589",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a03dd610_5dee3ccb",
        "filename": "fs_mgr/libfs_avb/fs_avb.cpp",
        "patchSetId": 1
      },
      "lineNbr": 322,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-02-03T18:31:11Z",
      "side": 1,
      "message": "We don\u0027t execute this else block if we do have allowed_key_blobs, but we didn\u0027t find public_key_data within them.  Is that intended behavior?",
      "revId": "d561c090039f69d7633e28a7563be925e71ba589",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b674b45_6a971ce6",
        "filename": "fs_mgr/libfs_avb/fs_avb.cpp",
        "patchSetId": 1
      },
      "lineNbr": 322,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2020-02-04T02:42:03Z",
      "side": 1,
      "message": "public_key_data is in L333 :) ?",
      "parentUuid": "a03dd610_5dee3ccb",
      "revId": "d561c090039f69d7633e28a7563be925e71ba589",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "764fcb15_22195078",
        "filename": "fs_mgr/libfs_avb/fs_avb.cpp",
        "patchSetId": 1
      },
      "lineNbr": 322,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-02-04T14:16:07Z",
      "side": 1,
      "message": "I mean, is there a situation where we\u0027d want to fall back to actually reading the files from fstab_entry.avb_keys if it\u0027s not found in allowed_key_blobs ?  \n\nSomething like: after the switch_root and after mounting vendor.img; we use a key listed in vendor.img for odm.img?\n\nI\u0027m guessing not but just thinking out loud.",
      "parentUuid": "7b674b45_6a971ce6",
      "revId": "d561c090039f69d7633e28a7563be925e71ba589",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "156697ff_a25efe48",
        "filename": "fs_mgr/libfs_avb/fs_avb.cpp",
        "patchSetId": 1
      },
      "lineNbr": 322,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2020-02-04T15:46:58Z",
      "side": 1,
      "message": "OK, I see. \nYou meant should we try allowed_key_blobs first then fallback to fstab_entry.avb_key paths.\n\nYup, my original intend is for caller to choose either allowed_key_blobs or fstab_entry.avb_keys (but not both). Otherwise, I would probably rename \"allowed_key_blobs\" to \"additional_allowed_key_blobs\".\n\n\u003e Something like: after the switch_root and after mounting vendor.img; we use a key listed in vendor.img for odm.img?\n\nI see, this looks a good idea (thanks for providing this).\nLet me think more about it.",
      "parentUuid": "764fcb15_22195078",
      "revId": "d561c090039f69d7633e28a7563be925e71ba589",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b21f6390_79419bd3",
        "filename": "fs_mgr/libfs_avb/fs_avb.cpp",
        "patchSetId": 1
      },
      "lineNbr": 322,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-02-04T16:53:22Z",
      "side": 1,
      "message": "Indeed.  Maybe we don\u0027t want to allow that, but in either case, I think it would be better if we had two public APIs (and use this function as an internal implementation detail): one that takes only allowed_key_blobs and one that only uses the fstab_entry.avb_keys.  I think it would make the usage clearer.",
      "parentUuid": "156697ff_a25efe48",
      "revId": "d561c090039f69d7633e28a7563be925e71ba589",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "09b73976_e05265dc",
        "filename": "fs_mgr/libfs_avb/fs_avb.cpp",
        "patchSetId": 1
      },
      "lineNbr": 333,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2020-02-04T02:42:03Z",
      "side": 1,
      "message": "check public_key_data here.",
      "range": {
        "startLine": 333,
        "startChar": 35,
        "endLine": 333,
        "endChar": 50
      },
      "revId": "d561c090039f69d7633e28a7563be925e71ba589",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c798776_39e8d822",
        "filename": "fs_mgr/libfs_avb/fs_avb.cpp",
        "patchSetId": 1
      },
      "lineNbr": 456,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2020-02-01T02:24:54Z",
      "side": 1,
      "message": "SetUpStandaloneAvbHashtree() is the 2nd user of  LoadAndVerifyVbmeta(*fstab_entry);\n\nThe 1st user is first-stage mount.",
      "range": {
        "startLine": 456,
        "startChar": 22,
        "endLine": 456,
        "endChar": 41
      },
      "revId": "d561c090039f69d7633e28a7563be925e71ba589",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ba43e29_18ffe47f",
        "filename": "fs_mgr/libfs_avb/include/fs_avb/fs_avb.h",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2020-02-01T02:24:54Z",
      "side": 1,
      "message": "This function has two users:\n 1) first-stage init to mount DSU standalone partitions.\n 2) mount_all or mount in fs_mgr.cpp for non-first-stage mounts.",
      "range": {
        "startLine": 92,
        "startChar": 24,
        "endLine": 92,
        "endChar": 43
      },
      "revId": "d561c090039f69d7633e28a7563be925e71ba589",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df6d2ec2_24c33d60",
        "filename": "init/first_stage_mount.cpp",
        "patchSetId": 1
      },
      "lineNbr": 569,
      "author": {
        "id": 1135739
      },
      "writtenOn": "2020-02-03T09:11:35Z",
      "side": 1,
      "message": "Is it possible to PreloadAvbKeys() before the UseDsuIfPresent() can make any changes.",
      "revId": "d561c090039f69d7633e28a7563be925e71ba589",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c40f73ce_144a1c25",
        "filename": "init/first_stage_mount.cpp",
        "patchSetId": 1
      },
      "lineNbr": 569,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2020-02-04T02:42:03Z",
      "side": 1,
      "message": "But UseDsuIfPresent() invokes TransformFstabForDsu(\u0026fstab_, dsu_partitions);\n\nIf we preload avb keys before, it would probably preload the wrong keys?\ne.g., normal fstab doesn\u0027t use fstab.avb_keys, so we preload nothing.\n\nLater in TransformFstabForDsu(), we add fstab.avb_keys\u003d\u0027/avb\u0027.",
      "parentUuid": "df6d2ec2_24c33d60",
      "revId": "d561c090039f69d7633e28a7563be925e71ba589",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5060dd0b_914c2691",
        "filename": "init/first_stage_mount.cpp",
        "patchSetId": 1
      },
      "lineNbr": 569,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2020-02-04T03:02:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c40f73ce_144a1c25",
      "revId": "d561c090039f69d7633e28a7563be925e71ba589",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}