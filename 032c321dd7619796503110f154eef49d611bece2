{
  "comments": [
    {
      "key": {
        "uuid": "160436f5_694061bc",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 4
      },
      "lineNbr": 895,
      "author": {
        "id": 1105075
      },
      "writtenOn": "2018-07-27T16:50:35Z",
      "side": 1,
      "message": "shall we cache this, e.g. make this a static and move this to some init code, so we can save one call for logging.",
      "range": {
        "startLine": 895,
        "startChar": 4,
        "endLine": 895,
        "endChar": 69
      },
      "revId": "032c321dd7619796503110f154eef49d611bece2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a66d29f5_8d9cd3e9",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 4
      },
      "lineNbr": 895,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2018-07-27T17:04:48Z",
      "side": 1,
      "message": "Judging from the examples Mark has in logd tests this should be created/destroyed every time. And looking at the implementation inside log_event_list.c I don\u0027t see a way to reset context-\u003epos to 0. So with the current implementation I think we have to create/destroy every time.",
      "parentUuid": "160436f5_694061bc",
      "range": {
        "startLine": 895,
        "startChar": 4,
        "endLine": 895,
        "endChar": 69
      },
      "revId": "032c321dd7619796503110f154eef49d611bece2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c25b86ce_b00c0d19",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 4
      },
      "lineNbr": 895,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-07-27T17:06:41Z",
      "side": 1,
      "message": "_destroy is the only way in the _current_ api to reset the accumulated event buffer contents.\n\nIf you want, add a android_log_reset(\u0026ctx) function to liblog?",
      "parentUuid": "160436f5_694061bc",
      "range": {
        "startLine": 895,
        "startChar": 4,
        "endLine": 895,
        "endChar": 69
      },
      "revId": "032c321dd7619796503110f154eef49d611bece2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f66d2e95_22242c4a",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 4
      },
      "lineNbr": 895,
      "author": {
        "id": 1105075
      },
      "writtenOn": "2018-07-27T20:30:55Z",
      "side": 1,
      "message": "we already have reset_log_context(ctx)\nhttps://cs.corp.google.com/android/system/core/libstats/stats_event_list.c?g\u003d0\u0026l\u003d47\nwhich is also used in https://cs.corp.google.com/android/system/core/lmkd/statslog.c",
      "parentUuid": "c25b86ce_b00c0d19",
      "range": {
        "startLine": 895,
        "startChar": 4,
        "endLine": 895,
        "endChar": 69
      },
      "revId": "032c321dd7619796503110f154eef49d611bece2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b66f292_f1fcf3a5",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 4
      },
      "lineNbr": 895,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-07-27T21:02:43Z",
      "side": 1,
      "message": "And now we see why all development should have been done in AOSP ;-}, or the change should have been made as part of liblog rather than in a private one-of library ... surenb@ has his public candidate in the patch set; please review.",
      "parentUuid": "f66d2e95_22242c4a",
      "range": {
        "startLine": 895,
        "startChar": 4,
        "endLine": 895,
        "endChar": 69
      },
      "revId": "032c321dd7619796503110f154eef49d611bece2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0981b08_c986d9ae",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 4
      },
      "lineNbr": 897,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-07-27T17:00:34Z",
      "side": 1,
      "message": "NB: pedantically correct to specify an array before listing series of values, but a single level array can do without the _begin() and _end(), the library looks after that. As soon as you write two entries in a row, it \u0027just happens\u0027 to differentiate an array of values as opposed to a single.",
      "range": {
        "startLine": 897,
        "startChar": 3,
        "endLine": 897,
        "endChar": 38
      },
      "revId": "032c321dd7619796503110f154eef49d611bece2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12dd14bc_28599430",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 4
      },
      "lineNbr": 899,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-07-27T17:00:34Z",
      "side": 1,
      "message": "We should max out the value so tha caller can know if it went too large (so we can diagnose and fix should it ever happen).\n\nmin(mi-\u003earr[field_idx] * page_k, UINT32_MAX)",
      "range": {
        "startLine": 899,
        "startChar": 47,
        "endLine": 899,
        "endChar": 74
      },
      "revId": "032c321dd7619796503110f154eef49d611bece2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c35b4323_4bf162f8",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 4
      },
      "lineNbr": 899,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-07-27T17:00:34Z",
      "side": 1,
      "message": "It is OK to use uint32_t here to register your intent, yes logcat will report negative numbers, but the caller can deal with that ...",
      "range": {
        "startLine": 899,
        "startChar": 38,
        "endLine": 899,
        "endChar": 45
      },
      "revId": "032c321dd7619796503110f154eef49d611bece2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6737bf3b_3c34a3d6",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 4
      },
      "lineNbr": 899,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2018-07-27T17:10:08Z",
      "side": 1,
      "message": "Sigh, ok will do (int32_t)min(mi-\u003earr[field_idx] * page_k, INT32_MAX)",
      "parentUuid": "12dd14bc_28599430",
      "range": {
        "startLine": 899,
        "startChar": 47,
        "endLine": 899,
        "endChar": 74
      },
      "revId": "032c321dd7619796503110f154eef49d611bece2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41636369_e32e002b",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 4
      },
      "lineNbr": 899,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2018-07-27T17:10:08Z",
      "side": 1,
      "message": "I think we are well protected against overflows here, so no need for uint32. INT_MAX\u003d2147483647, all the values are in KB, 2147483647KB\u003d2048GB. On mobile devices I think it will be awhile until we hit this physical RAM size.",
      "parentUuid": "c35b4323_4bf162f8",
      "range": {
        "startLine": 899,
        "startChar": 38,
        "endLine": 899,
        "endChar": 45
      },
      "revId": "032c321dd7619796503110f154eef49d611bece2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f1a7fd8_149a0f45",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 4
      },
      "lineNbr": 899,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-07-27T17:14:15Z",
      "side": 1,
      "message": "(the limit will probably be hit by a _kernel_ or _parsing_ bug or _change_ in here before we need this much memory, I agree. read: can never happen! :-). This is a CYA thingy and if you did not add min() in a refresh of the CL, I would probably silently accept it ...)",
      "parentUuid": "6737bf3b_3c34a3d6",
      "range": {
        "startLine": 899,
        "startChar": 47,
        "endLine": 899,
        "endChar": 74
      },
      "revId": "032c321dd7619796503110f154eef49d611bece2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50822341_668c624a",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 4
      },
      "lineNbr": 904,
      "author": {
        "id": 1105075
      },
      "writtenOn": "2018-07-27T16:50:35Z",
      "side": 1,
      "message": "also here to before\n#1564:\nALOGI(\"exiting\");\n?",
      "range": {
        "startLine": 904,
        "startChar": 4,
        "endLine": 904,
        "endChar": 23
      },
      "revId": "032c321dd7619796503110f154eef49d611bece2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}