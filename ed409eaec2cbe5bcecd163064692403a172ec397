{
  "comments": [
    {
      "key": {
        "uuid": "e4e6dc28_7a149bd6",
        "filename": "adb/client/fastdeploy.cpp",
        "patchSetId": 32
      },
      "lineNbr": 54,
      "author": {
        "id": 1096713
      },
      "writtenOn": "2018-08-23T14:58:02Z",
      "side": 1,
      "message": "We\u0027re checking \"statusCode \u003d\u003d 0\" twice here.  Did we intend to check something else instead, or is this just an accidental second check of the same thing?",
      "revId": "ed409eaec2cbe5bcecd163064692403a172ec397",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82fc5e3b_1590ea71",
        "filename": "adb/client/fastdeploy.cpp",
        "patchSetId": 32
      },
      "lineNbr": 54,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-08-23T15:08:06Z",
      "side": 1,
      "message": "chh,gibv: clang static analyzer doesn\u0027t spot this?",
      "parentUuid": "e4e6dc28_7a149bd6",
      "revId": "ed409eaec2cbe5bcecd163064692403a172ec397",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbe81ae3_1d169eba",
        "filename": "adb/client/fastdeploy.cpp",
        "patchSetId": 32
      },
      "lineNbr": 54,
      "author": {
        "id": 1269249
      },
      "writtenOn": "2018-08-23T16:13:55Z",
      "side": 1,
      "message": "Well, that\u0027s is embarrassing. Will create a new cl :(",
      "parentUuid": "82fc5e3b_1590ea71",
      "revId": "ed409eaec2cbe5bcecd163064692403a172ec397",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "880764cd_168ba2e6",
        "filename": "adb/client/fastdeploy.cpp",
        "patchSetId": 32
      },
      "lineNbr": 54,
      "author": {
        "id": 1096946
      },
      "writtenOn": "2018-08-23T18:08:01Z",
      "side": 1,
      "message": "\u003e chh,gibv: clang static analyzer doesn\u0027t spot this?\n\nSeems like something we should check for as a clang warning, given that we have things like -Wtautological-overlap-compare. -Weverything doesn\u0027t complain, though: https://godbolt.org/z/YXZ0uP :/",
      "parentUuid": "cbe81ae3_1d169eba",
      "revId": "ed409eaec2cbe5bcecd163064692403a172ec397",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55e7304b_a5efc76b",
        "filename": "adb/client/fastdeploy.cpp",
        "patchSetId": 32
      },
      "lineNbr": 54,
      "author": {
        "id": 1052399
      },
      "writtenOn": "2018-08-23T18:34:43Z",
      "side": 1,
      "message": "clang-tidy can report this as misc-redundant-expression.\n warning: logical expression is always false [misc-redundant-expression]\n    return i \u003e 0 \u0026\u0026 i \u003c 0;\n warning: both sides of operator are equivalent [misc-redundant-expression]\n    return i \u003d\u003d 0 \u0026\u0026 i \u003d\u003d 0;\nBut we don\u0027t enable misc-redundant-expression check globally, like many other non-critical checks. You can use tidy_checks in local Android.bp file to add more checks.",
      "parentUuid": "880764cd_168ba2e6",
      "revId": "ed409eaec2cbe5bcecd163064692403a172ec397",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb0f4f89_42217c87",
        "filename": "adb/client/fastdeploy.cpp",
        "patchSetId": 32
      },
      "lineNbr": 54,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-08-23T18:56:42Z",
      "side": 1,
      "message": "does the cost depend on how much you turn on? that is: can we turn on these simple ones without slowing down builds too much?\n\n(you guys were out, so i suggested he try to find you next week, but codewiz@ was saying the other day that he\u0027s unpopular on his team because he turned on clang tidy for their project and now everyone\u0027s complaining their build is too slow...)",
      "parentUuid": "55e7304b_a5efc76b",
      "revId": "ed409eaec2cbe5bcecd163064692403a172ec397",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64ff0261_8b224f82",
        "filename": "adb/client/fastdeploy.cpp",
        "patchSetId": 32
      },
      "lineNbr": 110,
      "author": {
        "id": 1096713
      },
      "writtenOn": "2018-08-23T14:58:02Z",
      "side": 1,
      "message": "send_shell_command() takes a std::string.  It\u0027s (mildly) inefficient to pass in a \"const char*\", which then implicitly constructs a new std::string.  We should just pass \"chmodCommand\" here.",
      "revId": "ed409eaec2cbe5bcecd163064692403a172ec397",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5fe058c0_40fa1c4c",
        "filename": "adb/client/fastdeploy.cpp",
        "patchSetId": 32
      },
      "lineNbr": 110,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-08-23T15:08:06Z",
      "side": 1,
      "message": "chh,gbiv: i thought i\u0027d seen you reporting instances of this already? is it not as semi-automated as the \"you introduced a memory leak\" stuff?\n\nis there any way we can get these checks into the regular build, since they\u0027re quite common mistakes but trivially fixed?",
      "parentUuid": "64ff0261_8b224f82",
      "revId": "ed409eaec2cbe5bcecd163064692403a172ec397",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a8cd63c_6e8b7f22",
        "filename": "adb/client/fastdeploy.cpp",
        "patchSetId": 32
      },
      "lineNbr": 110,
      "author": {
        "id": 1269249
      },
      "writtenOn": "2018-08-23T16:13:55Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "5fe058c0_40fa1c4c",
      "revId": "ed409eaec2cbe5bcecd163064692403a172ec397",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ebea19b6_4a4d48c9",
        "filename": "adb/client/fastdeploy.cpp",
        "patchSetId": 32
      },
      "lineNbr": 110,
      "author": {
        "id": 1096946
      },
      "writtenOn": "2018-08-23T18:08:01Z",
      "side": 1,
      "message": "\u003e chh,gbiv: i thought i\u0027d seen you reporting instances of this already?\n\n(The only related things I remember reporting were \"there\u0027s a memory leak here, and this is an obvious additional improvement, FWIW)\n\nLooks like it\u0027s part of the clang-tidy `readability-redundant-string-cstr` checks. That primarily handles things like \"std::string foo \u003d string2.c_str();` (hence \u0027readability\u0027), but tests indicate that it can also detect calling `foo(const string \u0026)` like `foo(cmd.c_str())`.\n\n\u003e is it not as semi-automated as the \"you introduced a memory leak\" stuff?\n\nWe get tidy lints as a part of the static analyzer pipeline, yeah. They\u0027re all classified as tiny style or perf nits rather than high-priority issues, though, so we don\u0027t have alerting set up when they get introduced. Looks like we blanket disable readability-* checks. We could enable this readability check, but that won\u0027t make people start caring until we start gating builds on it. :)\n\ne.g. \n\t\nhttps://android-build.googleplex.com/builds/submitted/4972266/taimen_analyzer-userdebug/latest/logs/warnings.html\n\n\u003e is there any way we can get these checks into the regular build, since they\u0027re quite common mistakes but trivially fixed?\n\nchh@ knows more about what can be done with per-project tidy settings than I do. If a project can reject CLs that introduce instances of a new tidy warning, though ...",
      "parentUuid": "5a8cd63c_6e8b7f22",
      "revId": "ed409eaec2cbe5bcecd163064692403a172ec397",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c2ddbc7_35d97663",
        "filename": "adb/client/fastdeploy.cpp",
        "patchSetId": 32
      },
      "lineNbr": 110,
      "author": {
        "id": 1052399
      },
      "writtenOn": "2018-08-23T18:34:43Z",
      "side": 1,
      "message": "Use tidy_checks in Android.bp to add local checks, or LOCAL_TIDY_CHECKS in Android.mk files.\nNone of the -clang-analyzer-* checks are in global default because they are too slow.\nWe have nightly builds that enable static analysis, but exclude many less critical clang-tidy checks.",
      "parentUuid": "ebea19b6_4a4d48c9",
      "revId": "ed409eaec2cbe5bcecd163064692403a172ec397",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0186b5a6_ee4794d9",
        "filename": "adb/client/fastdeploy.cpp",
        "patchSetId": 32
      },
      "lineNbr": 251,
      "author": {
        "id": 1096713
      },
      "writtenOn": "2018-08-23T14:58:02Z",
      "side": 1,
      "message": "send_shell_command() takes a std::string.  It\u0027s (mildly) inefficient to pass in a \"const char*\", which then implicitly constructs a new std::string.  We should just pass \"extractCommand\" here.",
      "revId": "ed409eaec2cbe5bcecd163064692403a172ec397",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "964a3ebc_ec45e293",
        "filename": "adb/client/fastdeploy.cpp",
        "patchSetId": 32
      },
      "lineNbr": 251,
      "author": {
        "id": 1269249
      },
      "writtenOn": "2018-08-23T16:13:55Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0186b5a6_ee4794d9",
      "revId": "ed409eaec2cbe5bcecd163064692403a172ec397",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}