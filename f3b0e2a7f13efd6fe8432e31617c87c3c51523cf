{
  "comments": [
    {
      "key": {
        "uuid": "d6bb729e_0af7fbb7",
        "filename": "adb/commandline.cpp",
        "patchSetId": 2
      },
      "lineNbr": 448,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2015-11-03T22:08:36Z",
      "side": 1,
      "message": "nit: raw ShellProtocol* might be preferable here, doesn\u0027t really matter to me I just remembered the C++ primer saying something about this.\n\n(from C++ primer: \"In general, if you find yourself wanting to use a pointer or reference to a unique_ptr, you\u0027re probably not transferring ownership, so you should usually just pass a pointer or reference to the underlying object, and keep unique_ptr out of it.\")",
      "range": {
        "startLine": 448,
        "startChar": 44,
        "endLine": 448,
        "endChar": 75
      },
      "revId": "f3b0e2a7f13efd6fe8432e31617c87c3c51523cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6335e1f_e17c4650",
        "filename": "adb/commandline.cpp",
        "patchSetId": 2
      },
      "lineNbr": 470,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2015-11-03T22:08:36Z",
      "side": 1,
      "message": "Is it safe to do this in a signal handler? I can\u0027t seem to find concrete information in the man pages but the articles/forum posts that I can find indicate this is unsafe.\n\nWould it be feasible to drop the lock and instead only enable SIGWINCH handling after the read thread has been set up?",
      "range": {
        "startLine": 470,
        "startChar": 4,
        "endLine": 470,
        "endChar": 18
      },
      "revId": "f3b0e2a7f13efd6fe8432e31617c87c3c51523cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b65c3e65_5c987159",
        "filename": "adb/commandline.cpp",
        "patchSetId": 2
      },
      "lineNbr": 470,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2015-11-03T22:52:39Z",
      "side": 1,
      "message": "Why not just set a volatile sig_atomic_t flag here and read it when read() returns EINTR? As well as David\u0027s idea.",
      "parentUuid": "b6335e1f_e17c4650",
      "range": {
        "startLine": 470,
        "startChar": 4,
        "endLine": 470,
        "endChar": 18
      },
      "revId": "f3b0e2a7f13efd6fe8432e31617c87c3c51523cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6a3167e_26feb823",
        "filename": "adb/commandline.cpp",
        "patchSetId": 2
      },
      "lineNbr": 470,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-11-04T00:11:30Z",
      "side": 1,
      "message": "because read won\u0027t return EINTR unless i send the SIGUSR1. the SIGWINCH goes to the main thread (strictly, an arbitrary thread not of our choosing) so this signal handler exists merely to ensure that _some_ signal gets sent to the stdin read thread, which will cause the read to fail with EINTR.",
      "parentUuid": "b65c3e65_5c987159",
      "range": {
        "startLine": 470,
        "startChar": 4,
        "endLine": 470,
        "endChar": 18
      },
      "revId": "f3b0e2a7f13efd6fe8432e31617c87c3c51523cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36aa0e54_6821db2f",
        "filename": "adb/commandline.cpp",
        "patchSetId": 2
      },
      "lineNbr": 470,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2015-11-04T00:31:02Z",
      "side": 1,
      "message": "If you do David\u0027s suggestion, can you kill the mutex \u0026 check of stdin_read_thread?",
      "parentUuid": "f6a3167e_26feb823",
      "range": {
        "startLine": 470,
        "startChar": 4,
        "endLine": 470,
        "endChar": 18
      },
      "revId": "f3b0e2a7f13efd6fe8432e31617c87c3c51523cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36aa0e54_0baf0157",
        "filename": "adb/commandline.cpp",
        "patchSetId": 2
      },
      "lineNbr": 470,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-11-04T01:08:48Z",
      "side": 1,
      "message": "there\u0027s no good way in our current code to implement the \"after\" part. (this lock is my implementation of the \"after\" part. it\u0027s how we know that the other thread got far enough for us to safely start sending it signals.) i think the real fix is to not have two threads, but that\u0027s a big enough change we should do it separately.",
      "parentUuid": "36aa0e54_6821db2f",
      "range": {
        "startLine": 470,
        "startChar": 4,
        "endLine": 470,
        "endChar": 18
      },
      "revId": "f3b0e2a7f13efd6fe8432e31617c87c3c51523cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16d0aae3_fb9b5be2",
        "filename": "adb/commandline.cpp",
        "patchSetId": 2
      },
      "lineNbr": 470,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2015-11-04T17:02:51Z",
      "side": 1,
      "message": "I may be misunderstanding the problem here, but according to signal(7), signals will be delivered to an arbitrary thread selected from those which do not block the signal.\n\nCan we just block SIGWINCH before spawning the thread, and then use pthread_sigmask() to unblock it only for this thread, guaranteeing that it\u0027s delivered to only this thread? Then we can avoid the SIGUSR1 secondary signal altogether.",
      "parentUuid": "36aa0e54_0baf0157",
      "range": {
        "startLine": 470,
        "startChar": 4,
        "endLine": 470,
        "endChar": 18
      },
      "revId": "f3b0e2a7f13efd6fe8432e31617c87c3c51523cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6335e1f_eab6dba4",
        "filename": "adb/commandline.cpp",
        "patchSetId": 2
      },
      "lineNbr": 470,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-11-04T18:45:00Z",
      "side": 1,
      "message": "i couldn\u0027t get that to work before, but i just gave it another go, and it\u0027s working now.\n\ni think i gave up too early last time because i was under the misapprehension that this was running in the _server_ so we\u0027d need to notify multiple threads anyway. when i realized it was in the client and simplified the working code i had, i didn\u0027t try hard enough to go back to using SIGWINCH directly.\n\nthanks for encouraging me to backtrack further!",
      "parentUuid": "16d0aae3_fb9b5be2",
      "range": {
        "startLine": 470,
        "startChar": 4,
        "endLine": 470,
        "endChar": 18
      },
      "revId": "f3b0e2a7f13efd6fe8432e31617c87c3c51523cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96401a44_8ded56e9",
        "filename": "adb/commandline.cpp",
        "patchSetId": 2
      },
      "lineNbr": 532,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-11-03T19:33:00Z",
      "side": 1,
      "message": "as an aside: now we\u0027re always building for Windows too, i wonder if we should just get rid of these #defines for Unix? (but keep them for Windows.) that way Unix-only code doesn\u0027t need to do stuff like this, but we\u0027ll still know straight away if we\u0027ve tried to use bare \u0027read\u0027 in code that runs on Windows.",
      "revId": "f3b0e2a7f13efd6fe8432e31617c87c3c51523cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6335e1f_a126be93",
        "filename": "adb/commandline.cpp",
        "patchSetId": 2
      },
      "lineNbr": 532,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2015-11-03T22:08:36Z",
      "side": 1,
      "message": "Makes sense to me, enabling a 3rd read() function is kind of a bummer but it seems necessary, and better than having to mess with macros for a legitimate use case like this.",
      "parentUuid": "96401a44_8ded56e9",
      "revId": "f3b0e2a7f13efd6fe8432e31617c87c3c51523cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16a98a5f_e783bcb7",
        "filename": "adb/commandline.cpp",
        "patchSetId": 2
      },
      "lineNbr": 532,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2015-11-03T22:52:39Z",
      "side": 1,
      "message": "It\u0027s up to you guys. I guess there\u0027s two main schools of thought:\n\n- Make read() on Windows work with C Runtime fds and sysdeps fds.\n- Split read() into unix_read() which works with C Runtime fds and adb_read() which works with sysdeps fds.\n\nSo the proposal is for a 3rd option?",
      "parentUuid": "b6335e1f_a126be93",
      "revId": "f3b0e2a7f13efd6fe8432e31617c87c3c51523cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36c12e1a_50ccd23e",
        "filename": "adb/commandline.cpp",
        "patchSetId": 2
      },
      "lineNbr": 532,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-11-04T00:11:30Z",
      "side": 1,
      "message": "a 4th option would be \"remove the TEMP_FAILURE_RETRY from unix_read on Unix, and explicitly write TEMP_FAILURE_RETRY in all but one call site\". (which is the real problem that brought me here, not so much the fact that we have two different reads.)\n\ni wasn\u0027t planning on doing anything about this right now, just throwing out another idea.",
      "parentUuid": "16a98a5f_e783bcb7",
      "revId": "f3b0e2a7f13efd6fe8432e31617c87c3c51523cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6a3167e_c935751d",
        "filename": "adb/commandline.cpp",
        "patchSetId": 2
      },
      "lineNbr": 532,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2015-11-04T00:31:02Z",
      "side": 1,
      "message": "4th option sounds ok if you generally want to keep the codebase unix-ish (which is fine).",
      "parentUuid": "36c12e1a_50ccd23e",
      "revId": "f3b0e2a7f13efd6fe8432e31617c87c3c51523cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56c6a231_54d7e4e4",
        "filename": "adb/commandline.cpp",
        "patchSetId": 2
      },
      "lineNbr": 532,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-11-04T01:08:48Z",
      "side": 1,
      "message": "there are very few uses of unix_read, and most of them are in non-Windows code. this and copy_to_file are the only exceptions. if we ripped out the STDIN_FILENO support from copy_to_file (and just asserted that we\u0027re _not_ dealing with stdin, which we currently never are), we\u0027d really just have this call site, and it really just wants _console_read.\n\nbut i don\u0027t have a particularly strong opinion. things aren\u0027t too bad right now, and mostly work.\n\ni\u0027ll copy the #define read ___xxx_read here for now, to preserve the status quo.",
      "parentUuid": "f6a3167e_c935751d",
      "revId": "f3b0e2a7f13efd6fe8432e31617c87c3c51523cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96401a44_cdd35e29",
        "filename": "adb/commandline.cpp",
        "patchSetId": 2
      },
      "lineNbr": 682,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-11-03T19:33:00Z",
      "side": 1,
      "message": "(i\u0027d like to move all this code out into a separate file, but i\u0027ve been disruptive enough here already.)",
      "revId": "f3b0e2a7f13efd6fe8432e31617c87c3c51523cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}