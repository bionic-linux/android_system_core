{
  "comments": [
    {
      "key": {
        "uuid": "925dcc5f_5fede717",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 6
      },
      "lineNbr": 65,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-06-29T21:33:18Z",
      "side": 1,
      "message": "S_ISDIR(st.st_mode);",
      "range": {
        "startLine": 65,
        "startChar": 38,
        "endLine": 65,
        "endChar": 73
      },
      "revId": "1dba27204913fb772c785baa8c06060ea32e2584",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5b41df8_49e901f9",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 6
      },
      "lineNbr": 68,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-06-29T21:33:18Z",
      "side": 1,
      "message": "Drop this comment since we no longer make them up.",
      "revId": "1dba27204913fb772c785baa8c06060ea32e2584",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5fddd4d3_d29aaa3c",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 6
      },
      "lineNbr": 81,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-06-29T21:33:18Z",
      "side": 1,
      "message": "Why isn\u0027t checking the permissions bits from stat() good enough?\n\nWhen would this ever not be true?  If setup() failed?  Does mount() fail in the case that this isn\u0027t writable or do we get a latent error later when trying to use the mount?",
      "revId": "1dba27204913fb772c785baa8c06060ea32e2584",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78e03af2_b530d11f",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 6
      },
      "lineNbr": 81,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-06-29T22:03:02Z",
      "side": 1,
      "message": "The following is the test used by the driver, having permissions to create a directory is one thing, but they want to address filesystems in readonly mode, a full filesystem, and having both MAC and DAC permissions to do so. stat does not clue us into MAC permissions or whether the filesystem is full (inode or space).",
      "parentUuid": "5fddd4d3_d29aaa3c",
      "revId": "1dba27204913fb772c785baa8c06060ea32e2584",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "522069de_d2752f3e",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 6
      },
      "lineNbr": 89,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-06-29T21:33:18Z",
      "side": 1,
      "message": "I\u0027m still a little iffy about having both options.  Where is fs_mgr_overlayfs_mount_all() going to be called?  If it\u0027s in mount_all --late, then it\u0027ll always pick data if it exists.  I guess that\u0027s your intention though?\n\nAs a side note, enh@ filed b/110824790 recently which would make debugging directly if data doesn\u0027t mount impossible.",
      "revId": "1dba27204913fb772c785baa8c06060ea32e2584",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b800c65e_45735a39",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 6
      },
      "lineNbr": 89,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-06-29T22:03:02Z",
      "side": 1,
      "message": "If /cache mounts in --early, and /data mounts in --late, then we will mount_all /cache, and busy/want checks will prevent /data. (future CL for other locations like \"/scratch\" to be introduced for LRAP)",
      "parentUuid": "522069de_d2752f3e",
      "revId": "1dba27204913fb772c785baa8c06060ea32e2584",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "201889a7_ec09dfe7",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 6
      },
      "lineNbr": 95,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-06-29T21:33:18Z",
      "side": 1,
      "message": "You can drop this check.  This is a static function and all of the callers pass a non-null entry.\n\nBetter, why not just pass this as a std::string?  It\u0027s better to always work with std::strings until needing to interact with C APIs.  (The fact that we really could/should/maybe will rewrite fstab and fstab_rec notwithstanding)",
      "revId": "1dba27204913fb772c785baa8c06060ea32e2584",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78b1532e_d1f24764",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 6
      },
      "lineNbr": 108,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-06-29T21:33:18Z",
      "side": 1,
      "message": "Would you even want this to happen if it were possible?  It seems to imply that the work dir exists but is not writable.  Wouldn\u0027t it be better to not set this and let this function return an empty string?",
      "revId": "1dba27204913fb772c785baa8c06060ea32e2584",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28f24e7b_84043492",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 6
      },
      "lineNbr": 108,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-06-29T22:03:02Z",
      "side": 1,
      "message": "If workdir exists and is not writable (eg, filesystem is full), and there are no candidates that are r/w, then perhaps the upperdir may have r/o overrides we need to use _anyways_, otherwise as soon as the filesystem is full, we end up throwing away everything we have pushed to the device. \n\nWe will not be able to do a adb remount, but at least a weak candidate overlayfs mounted. What I should check is for _any_ files in the upperdir, because if it is empty of content, it is not a candidate for mounting broken (readonly).\n\nBut this does bring up another check I am missing: workdir and upperdir _must_ be on the same filesystem, we need to do a stat on each directory to make sure they match st_dev. If they are not, then the overlayfs override work readonly then.",
      "parentUuid": "78b1532e_d1f24764",
      "revId": "1dba27204913fb772c785baa8c06060ea32e2584",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c17c2e57_13344c29",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 6
      },
      "lineNbr": 112,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-06-29T21:33:18Z",
      "side": 1,
      "message": "It should be an error if context is empty, right?\n\nDid you check whether or not the context is set automatically if the context of the upper and work dir are the context of the mount?  It\u0027d be ideal if so.  Perhaps the checks can be to fail with an error message if the contexts are not all the same and then not need to specify rootcontext (since we\u0027ll already have checked that they\u0027re proper).",
      "revId": "1dba27204913fb772c785baa8c06060ea32e2584",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4fe84497_05a225d9",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 6
      },
      "lineNbr": 112,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-06-29T22:03:02Z",
      "side": 1,
      "message": "Note to self: check what happens if rootcontext\u003d is not provided, and retest all failure conditions surrounding it. It\u0027s main purpose is to ensure that /system lower is assigned to /system mount, and does not inherit a (broken) /system upper context.",
      "parentUuid": "c17c2e57_13344c29",
      "revId": "1dba27204913fb772c785baa8c06060ea32e2584",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca259536_6c41c963",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 6
      },
      "lineNbr": 118,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-06-29T21:33:18Z",
      "side": 1,
      "message": "Why isn\u0027t the default Fstab always used?  I wouldn\u0027t even let users of this API pass a different Fstab as we\u0027ve never shown a valid use case for this.",
      "revId": "1dba27204913fb772c785baa8c06060ea32e2584",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a1e0407_978be721",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 6
      },
      "lineNbr": 118,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-06-29T22:03:02Z",
      "side": 1,
      "message": "This is all about propagating non-default fstabs to mount_all and still having it work. Until it is _impossible_, we must propagate it.",
      "parentUuid": "ca259536_6c41c963",
      "revId": "1dba27204913fb772c785baa8c06060ea32e2584",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "398db8cb_1229dead",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 6
      },
      "lineNbr": 118,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-02T18:57:29Z",
      "side": 1,
      "message": "Do we though?  I can look into removing that option from init (we\u0027ve historically kept backwards compatibility, though it may be time to change the language based on shipping API level so we can deprecate some of the mistakes anyway).\n\nBut just because we\u0027re living with a bad API from init doesn\u0027t mean that we need to propagate its mistakes.  I don\u0027t think it\u0027s unreasonable to say that fs_mgr \"creates overlayfs mounts for all applicable partitions in the default fstab\" and ignore the non-default fstabs in mount_all, of which we have 0 internal users.",
      "parentUuid": "5a1e0407_978be721",
      "revId": "1dba27204913fb772c785baa8c06060ea32e2584",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5691da55_7033823c",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 6
      },
      "lineNbr": 118,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-07-02T20:11:34Z",
      "side": 1,
      "message": "(my latest update dropped fstab being supplied to the functions, if a non-standard fstab is selected, then they get what they paid for).",
      "parentUuid": "398db8cb_1229dead",
      "revId": "1dba27204913fb772c785baa8c06060ea32e2584",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "956f1efb_bed6e078",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 6
      },
      "lineNbr": 257,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-06-29T21:33:18Z",
      "side": 1,
      "message": "setfscreatecon() instead.",
      "range": {
        "startLine": 246,
        "startChar": 3,
        "endLine": 257,
        "endChar": 5
      },
      "revId": "1dba27204913fb772c785baa8c06060ea32e2584",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47819ce3_b198f59f",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 6
      },
      "lineNbr": 257,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-07-02T15:31:35Z",
      "side": 1,
      "message": "I did want it to report \u0027change\u0027 if the directory was something else and got corrected by the action. setfscreatecon will not change the context if the directory already exists AFAIK?",
      "parentUuid": "956f1efb_bed6e078",
      "range": {
        "startLine": 246,
        "startChar": 3,
        "endLine": 257,
        "endChar": 5
      },
      "revId": "1dba27204913fb772c785baa8c06060ea32e2584",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19ffc1f0_e24e0f0b",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 6
      },
      "lineNbr": 257,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-02T18:57:29Z",
      "side": 1,
      "message": "I guess not in that case then.",
      "parentUuid": "47819ce3_b198f59f",
      "range": {
        "startLine": 246,
        "startChar": 3,
        "endLine": 257,
        "endChar": 5
      },
      "revId": "1dba27204913fb772c785baa8c06060ea32e2584",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cca68eda_b16007e9",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 6
      },
      "lineNbr": 257,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-07-02T20:11:34Z",
      "side": 1,
      "message": "(I switched to setfscreatecon and accept that the condition where the directory has the wrong creation sepolicy to be a result of someone else creating the directory, and they get what they pay for).",
      "parentUuid": "19ffc1f0_e24e0f0b",
      "range": {
        "startLine": 246,
        "startChar": 3,
        "endLine": 257,
        "endChar": 5
      },
      "revId": "1dba27204913fb772c785baa8c06060ea32e2584",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b067d61_4ba3f0ca",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 6
      },
      "lineNbr": 262,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-06-29T21:33:18Z",
      "side": 1,
      "message": "You\u0027re a private function and your only caller already ensures this.",
      "revId": "1dba27204913fb772c785baa8c06060ea32e2584",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1dd3814_bced0bb3",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 6
      },
      "lineNbr": 303,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-06-29T21:33:18Z",
      "side": 1,
      "message": "I wouldn\u0027t accept other fstabs.",
      "range": {
        "startLine": 303,
        "startChar": 32,
        "endLine": 303,
        "endChar": 50
      },
      "revId": "1dba27204913fb772c785baa8c06060ea32e2584",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76e23247_fc9a899a",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 6
      },
      "lineNbr": 303,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-06-29T22:03:02Z",
      "side": 1,
      "message": "And, yet, there are ones passed to mount_all ... please fix/enforce that in init?",
      "parentUuid": "f1dd3814_bced0bb3",
      "range": {
        "startLine": 303,
        "startChar": 32,
        "endLine": 303,
        "endChar": 50
      },
      "revId": "1dba27204913fb772c785baa8c06060ea32e2584",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "202b1007_50367773",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 6
      },
      "lineNbr": 316,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-06-29T21:33:18Z",
      "side": 1,
      "message": "fs_mgr_read_fstab_default() already includes entries from DT.",
      "revId": "1dba27204913fb772c785baa8c06060ea32e2584",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21a37997_dc4948a1",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 6
      },
      "lineNbr": 316,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-06-29T22:03:02Z",
      "side": 1,
      "message": "True, but not when a file is specified to mount_all command.",
      "parentUuid": "202b1007_50367773",
      "revId": "1dba27204913fb772c785baa8c06060ea32e2584",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b693aced_892a488f",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 6
      },
      "lineNbr": 331,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-06-29T21:33:18Z",
      "side": 1,
      "message": "What is all the logic for !fstab here?  This should be simpler.  Read the default Fstab, which includes the DT fstab and won\u0027t be null (otherwise the system isn\u0027t going to boot...) and call fs_mgr_overlayfs_setup() with the folders in overlay_mount_points.",
      "revId": "1dba27204913fb772c785baa8c06060ea32e2584",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8d8f865_8b35fd8e",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 6
      },
      "lineNbr": 383,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-06-29T21:33:18Z",
      "side": 1,
      "message": "Similarly this looks like it could be more simple if just always use the default fstab.",
      "revId": "1dba27204913fb772c785baa8c06060ea32e2584",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}