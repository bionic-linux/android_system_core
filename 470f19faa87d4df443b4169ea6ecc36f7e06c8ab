{
  "comments": [
    {
      "key": {
        "uuid": "2ac210e0_b675a196",
        "filename": "libcutils/fs_config.cpp",
        "patchSetId": 7
      },
      "lineNbr": 181,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-04-16T17:48:12Z",
      "side": 1,
      "message": "Why not specify the capabilities in the .rc file?  That should be preferred to here as it\u0027ll allow all aspects of a service (user, groups, capabilities, files to open, etc) to be specified in a single location next to the service itself.",
      "revId": "470f19faa87d4df443b4169ea6ecc36f7e06c8ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "199b6b30_bb13f8f3",
        "filename": "libcutils/fs_config.cpp",
        "patchSetId": 7
      },
      "lineNbr": 181,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-04-16T18:21:21Z",
      "side": 1,
      "message": "Executing manually (eg: via gdb) will always result in a capability restricted service removing one more heisenberg uncertainty when debugging.",
      "parentUuid": "2ac210e0_b675a196",
      "revId": "470f19faa87d4df443b4169ea6ecc36f7e06c8ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f95d1354_0970f01a",
        "filename": "libcutils/fs_config.cpp",
        "patchSetId": 7
      },
      "lineNbr": 181,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-04-16T18:38:18Z",
      "side": 1,
      "message": "I\u0027d rather we fix that head on than have the configuration spread out more than is necessary.  I\u0027d been thinking of making a tool that launches a process as if init were launching it, e.g. sets the user, groups, capabilities, opens files, sockets, calls writepid, etc.  It could then be used with gdb, etc for testing.\n\nThat would remove all of the uncertainty and allow all of the service information to be stored in a single location next to the service.",
      "parentUuid": "199b6b30_bb13f8f3",
      "revId": "470f19faa87d4df443b4169ea6ecc36f7e06c8ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5862bb53_2f173582",
        "filename": "libcutils/fs_config.cpp",
        "patchSetId": 7
      },
      "lineNbr": 181,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-04-16T20:34:30Z",
      "side": 1,
      "message": "Until a tool is available, I would be tempted to set _both_ places ... Should we wait for this tool? Should probably be integrated into something very close to run-as, or a library that gdb server could count on? I would be concerned such a tool represents a security risk itself (can not be delivered on \"user\" builds) since it would need to be granted full set of capabilities in order to provide service. At least with fs_config it would come up the wrong user from shell, but the accurate capabilities without creating a security hole.\n\nWith a tool, there remains the various gotchas through mistakes bypassing them (su root /system/bin/lmkd will execute _wrong_ w/o fs_config).",
      "parentUuid": "f95d1354_0970f01a",
      "revId": "470f19faa87d4df443b4169ea6ecc36f7e06c8ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "891bfba8_7c82c1ee",
        "filename": "libcutils/fs_config.cpp",
        "patchSetId": 7
      },
      "lineNbr": 181,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-04-16T21:20:34Z",
      "side": 1,
      "message": "Services are virtually always going to be run incorrectly unless run by init (or a tool that parses them .  Even with fs_config setting the capability bits, users, groups, SELinux domains, etc all need to be set up.\n\nsu can set up users and groups, but not selinux domains or capabilities\nfs_config can set up capabilities and users but not all groups of selinux domains\nrun-as can set up users and selinux domains but not capabilities or all groups\n\nNot to mention the files and sockets that init can open, etc.\n\nThe chances of developers getting that all right is 0%.\n\nGiven that, I don\u0027t see any reason to include these bits in fs_config and especially not duplicate them.  Developers should not be starting init services from the shell at all right now.\n\nAs for the tool: it shouldn\u0027t take too long to create.  It\u0027d probably be split from run-as since it\u0027ll share a majority of its code with init as it\u0027ll directly take an init script as an input parameter.  It would be userdebug/eng only and only intended for developers.  It would need to be started as root, so it wouldn\u0027t be able to open any holes.",
      "parentUuid": "5862bb53_2f173582",
      "revId": "470f19faa87d4df443b4169ea6ecc36f7e06c8ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d45912d7_34736158",
        "filename": "libcutils/fs_config.cpp",
        "patchSetId": 7
      },
      "lineNbr": 190,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-04-16T21:33:38Z",
      "side": 1,
      "message": "Case in point, I have used this to ensure that logd is run correctly on user builds when I debug it. logd can open its own sockets if not provided by caller.",
      "range": {
        "startLine": 187,
        "startChar": 0,
        "endLine": 190,
        "endChar": 66
      },
      "revId": "470f19faa87d4df443b4169ea6ecc36f7e06c8ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2f42b1b_473f38cf",
        "filename": "libcutils/fs_config.cpp",
        "patchSetId": 7
      },
      "lineNbr": 190,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-04-16T21:41:55Z",
      "side": 1,
      "message": "Those lines plus the procedure here, https://cs.corp.google.com/android/system/core/logd/main.cpp?l\u003d68 right?  I don\u0027t see anywhere where the system package_info readproc groups are added, so this still isn\u0027t quite 100% what the init scripts would do.\n\nRegardless, that\u0027s a huge bit of complexity that no developer should need to go through.  Currently, the best option would be attaching gdb at runtime and I can write a tool that starts a service precisely as init would.  \n\nIn any case, I think this is the wrong file to specify capabilities.  It is better to keep them along with the rest of the collateral for starting a service in the init script in the same directory as the service itself.",
      "parentUuid": "d45912d7_34736158",
      "range": {
        "startLine": 187,
        "startChar": 0,
        "endLine": 190,
        "endChar": 66
      },
      "revId": "470f19faa87d4df443b4169ea6ecc36f7e06c8ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80370b7d_2d667b48",
        "filename": "libcutils/fs_config.cpp",
        "patchSetId": 7
      },
      "lineNbr": 190,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-04-16T22:03:59Z",
      "side": 1,
      "message": "The Rule we are establishing:\n\n1) files that can be directly executed by shell or indirectly through fork/exec, land capabilities in fs_config and follow POSIX filesystem rules.\n2) executable files that are only executed by init, land capabilities in associated .rc file\n\nToDo:\n1) a shell and gdb server tool that allows execution to follow .rc file rules. Association should be automated, startup by service name only? What about exec rules (executables that for all intents and purposes can be also run from shell)?\n2) daemons that can only be started by init should have MAC/DAC rules to prevent them from ever being executed directly by shell/adb/gdb. Perhaps daemons should move out of /system/bin ?",
      "parentUuid": "a2f42b1b_473f38cf",
      "range": {
        "startLine": 187,
        "startChar": 0,
        "endLine": 190,
        "endChar": 66
      },
      "revId": "470f19faa87d4df443b4169ea6ecc36f7e06c8ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}