{
  "comments": [
    {
      "key": {
        "uuid": "56e699e0_99db2d6d",
        "filename": "libstats/socket/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-12-20T01:22:54Z",
      "side": 1,
      "message": "add versions property here. You can start with version 1 (but can start with any version number actually.",
      "revId": "1d72c79ad7a840f2e2e2d775c324903a5623ad5c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e84f6200_326e549b",
        "filename": "libstats/socket/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1286922
      },
      "writtenOn": "2019-12-20T02:19:56Z",
      "side": 1,
      "message": "All of this is not super important right now, but how much versioning support is there? If we want to add a new API and bump the version, can clients also link to a new version? \n\nAdditionally, will the build tool catch a non-backwards compatible change? Would it force a version bump on any change?",
      "parentUuid": "56e699e0_99db2d6d",
      "revId": "1d72c79ad7a840f2e2e2d775c324903a5623ad5c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16ec282e_76bba326",
        "filename": "libstats/socket/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-12-20T03:08:16Z",
      "side": 1,
      "message": "Yeah, shared_libs: [\"libstatssocket\"] will link to the latest version. Clients can specify the version with \"libstatssocket#10\" for example.\n\n\u003e build tool catch a non-backwards compatible change? \n\nUnfortunately no, and that\u0027s the same for NDK libraries. You need to only add symbols to the map.txt file.",
      "parentUuid": "e84f6200_326e549b",
      "revId": "1d72c79ad7a840f2e2e2d775c324903a5623ad5c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a82dcab8_ab22a1b3",
        "filename": "libstats/socket/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1557575
      },
      "writtenOn": "2019-12-27T23:08:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "16ec282e_76bba326",
      "revId": "1d72c79ad7a840f2e2e2d775c324903a5623ad5c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8b94e32_b7ff30c4",
        "filename": "libstats/socket/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1286922
      },
      "writtenOn": "2019-12-30T20:19:16Z",
      "side": 1,
      "message": "What if a client links to libstatssocket#10, and that version isn\u0027t available on a mainline update? \n\nOr if they link the latest version, but then the version on the device is an earlier one and an API doesn\u0027t exist?",
      "parentUuid": "a82dcab8_ab22a1b3",
      "revId": "1d72c79ad7a840f2e2e2d775c324903a5623ad5c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26b1236e_7eb03e43",
        "filename": "libstats/socket/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2020-01-01T07:37:26Z",
      "side": 1,
      "message": "The existence of the version 10 implies that any mainline update on the device will provide libstatssocket of version 10 or greater.",
      "parentUuid": "d8b94e32_b7ff30c4",
      "revId": "1d72c79ad7a840f2e2e2d775c324903a5623ad5c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51f49348_a2625a8f",
        "filename": "libstats/socket/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1286922
      },
      "writtenOn": "2020-01-02T22:24:30Z",
      "side": 1,
      "message": "Is this enforced in any way?",
      "parentUuid": "26b1236e_7eb03e43",
      "revId": "1d72c79ad7a840f2e2e2d775c324903a5623ad5c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ea6e2c5_4996a6ee",
        "filename": "libstats/socket/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2020-01-03T12:19:46Z",
      "side": 1,
      "message": "I am not sure if I understood your question correctly.\n\nEvery successive version of the APIs should be compatible with the previous version and that can be enforced by not allowing (via code review) removal of APIs in the map file. \n\nFor example, let\u0027s imagine that we have version 10 for R and version 11 for S. Clients of libstatssocket that are shipped in R devices are all built with version 10 of the stub. We build the stats APEX in S source tree. libstatssocket library in the APEX implements version 11 (as well as version 10!!!). So, when this APEX is installed to R devices, the clients can still use the same set of APIs.",
      "parentUuid": "51f49348_a2625a8f",
      "revId": "1d72c79ad7a840f2e2e2d775c324903a5623ad5c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "061df034_8ff83a42",
        "filename": "libstats/socket/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1286922
      },
      "writtenOn": "2020-01-03T16:46:37Z",
      "side": 1,
      "message": "That all makes sense in non-mainline, where we are primarily doing dessert releases. However, libstatssocket will be exported in the statsd apex. My concern is that Module A can build against version 11 (or the latest version) of libstatssocket (because it\u0027s in the source tree), but on the device, only version 10 exists. \n\nThis builds a dependency of Module A on the statsd module exporting version 11 or greater before Module A can update in mainline. Is this dependency enforced in any way, since statsd would need to be updated in the same train or an earlier train?",
      "parentUuid": "5ea6e2c5_4996a6ee",
      "revId": "1d72c79ad7a840f2e2e2d775c324903a5623ad5c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7971f961_43471c3a",
        "filename": "libstats/socket/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2020-01-06T02:08:20Z",
      "side": 1,
      "message": "Ah, got it. If you (statsd apex) has published the version 11 of libstatssocket, then you should have released the APEX already. In other words, you should not expose the new version 11 unless the APEX has already released or it will be released in the next train (along with the updated clients of the new version).",
      "parentUuid": "061df034_8ff83a42",
      "revId": "1d72c79ad7a840f2e2e2d775c324903a5623ad5c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}