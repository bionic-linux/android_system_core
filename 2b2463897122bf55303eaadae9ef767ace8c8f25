{
  "comments": [
    {
      "key": {
        "uuid": "cdf0ad81_f5f15d07",
        "filename": "init/first_stage_init.cpp",
        "patchSetId": 4
      },
      "lineNbr": 104,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2019-05-07T20:05:21Z",
      "side": 1,
      "message": "Do I feel safe moving this to before RebootSignalHandlers?\n\nIf this picks up from vDSO, it _can_ trap, but you have bigger problems than init when that occurs, but admittedly _will_ be the first call to use vDSO timestamp.",
      "range": {
        "startLine": 104,
        "startChar": 4,
        "endLine": 104,
        "endChar": 44
      },
      "revId": "2b2463897122bf55303eaadae9ef767ace8c8f25",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea20bc67_aeaf47ef",
        "filename": "init/first_stage_init.cpp",
        "patchSetId": 4
      },
      "lineNbr": 104,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-05-07T22:09:20Z",
      "side": 1,
      "message": "The reboot handlers are just so that devices that fail early on don\u0027t get caught in a bootloop (particularly to help test farms).  Given that they\u0027re just calling sigaction() a few times, it probably doesn\u0027t matter in the grand scheme of things.  For the sake of our test farms, we may want to leave the reboot handlers first; it\u0027s compiled out in user builds anyway, so it\u0027s not too important to track.",
      "parentUuid": "cdf0ad81_f5f15d07",
      "range": {
        "startLine": 104,
        "startChar": 4,
        "endLine": 104,
        "endChar": 44
      },
      "revId": "2b2463897122bf55303eaadae9ef767ace8c8f25",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00441b71_bb2aa38e",
        "filename": "init/init.cpp",
        "patchSetId": 4
      },
      "lineNbr": 632,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2019-05-07T20:05:21Z",
      "side": 1,
      "message": "I feel very safe here because there are at least two others before this one tickling vDSO time collection, one in ramdisk, and another in _this_ environment setting up sepolicy.",
      "range": {
        "startLine": 632,
        "startChar": 0,
        "endLine": 632,
        "endChar": 58
      },
      "revId": "2b2463897122bf55303eaadae9ef767ace8c8f25",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa9941e6_8b0d0ffe",
        "filename": "init/init.cpp",
        "patchSetId": 4
      },
      "lineNbr": 671,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-05-07T22:09:20Z",
      "side": 1,
      "message": "This all seems a bit strange, especially using second_stage_start_time as the indicator that the value isn\u0027t right.  duration::count() should actually be returning a signed value, so we can do int64_t through this and use -1 as the bad value.\n\nWe don\u0027t need the checks that \"selinux_start_time \u003e first_stage_start_time\" either; if the timers are actually reporting bad values, we probably want to know that and report it as is.\n\nMaybe easier too if this is put into its own function and some of it is shortcutted if the values are bad, e.g. if SELINUX_STARTED_AT isn\u0027t set or doesn\u0027t parse, then there\u0027s not much that can be done.",
      "revId": "2b2463897122bf55303eaadae9ef767ace8c8f25",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0b9ead2_352f3626",
        "filename": "init/selinux.cpp",
        "patchSetId": 4
      },
      "lineNbr": 525,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2019-05-07T20:05:21Z",
      "side": 1,
      "message": "Collecting time here could tickle vDSO too, and with a shared libc.so version of the library. Do I feel safe putting this before Reboot Signal Handlers?",
      "range": {
        "startLine": 525,
        "startChar": 0,
        "endLine": 525,
        "endChar": 58
      },
      "revId": "2b2463897122bf55303eaadae9ef767ace8c8f25",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}