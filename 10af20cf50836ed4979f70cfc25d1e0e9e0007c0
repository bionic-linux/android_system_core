{
  "comments": [
    {
      "key": {
        "uuid": "5c240ef3_336693fd",
        "filename": "libbacktrace/BacktraceOffline.cpp",
        "patchSetId": 1
      },
      "lineNbr": 649,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2016-03-21T18:21:57Z",
      "side": 1,
      "message": "Extra space.",
      "range": {
        "startLine": 649,
        "startChar": 60,
        "endLine": 649,
        "endChar": 61
      },
      "revId": "10af20cf50836ed4979f70cfc25d1e0e9e0007c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c240ef3_b3260397",
        "filename": "libbacktrace/BacktraceOffline.cpp",
        "patchSetId": 1
      },
      "lineNbr": 649,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2016-03-21T18:35:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5c240ef3_336693fd",
      "range": {
        "startLine": 649,
        "startChar": 60,
        "endLine": 649,
        "endChar": 61
      },
      "revId": "10af20cf50836ed4979f70cfc25d1e0e9e0007c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c240ef3_730c8b1d",
        "filename": "libbacktrace/BacktraceOffline.cpp",
        "patchSetId": 1
      },
      "lineNbr": 678,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-03-21T18:19:42Z",
      "side": 1,
      "message": "+narayan in case he has thoughts about this.",
      "range": {
        "startLine": 667,
        "startChar": 0,
        "endLine": 678,
        "endChar": 2
      },
      "revId": "10af20cf50836ed4979f70cfc25d1e0e9e0007c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c240ef3_333b33b3",
        "filename": "libbacktrace/BacktraceOffline.cpp",
        "patchSetId": 1
      },
      "lineNbr": 678,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2016-03-21T18:21:57Z",
      "side": 1,
      "message": "I was going to comment that I think you can do this with a unique_ptr and a deleter.",
      "parentUuid": "5c240ef3_730c8b1d",
      "range": {
        "startLine": 667,
        "startChar": 0,
        "endLine": 678,
        "endChar": 2
      },
      "revId": "10af20cf50836ed4979f70cfc25d1e0e9e0007c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c240ef3_d393b7d1",
        "filename": "libbacktrace/BacktraceOffline.cpp",
        "patchSetId": 1
      },
      "lineNbr": 678,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2016-03-21T18:35:02Z",
      "side": 1,
      "message": "I have considered using unique_ptr. But unique_ptr holds a pointer, not a value (Although I know ZipArchiveHandle is in fact a pointer).\nSo I can\u0027t use unique_ptr\u003cZiparchiveHandle, decltype(CloseArchive)\u003e.\n\nAFAIK, I can only use unique_ptr like this: unique_ptr\u003cvoid, decltype(\u0026CloseArchive)\u003e p(handle, CloseArchive); Is it fine to take advantage of knowing that ZiparchiveHandle is void*?",
      "parentUuid": "5c240ef3_333b33b3",
      "range": {
        "startLine": 667,
        "startChar": 0,
        "endLine": 678,
        "endChar": 2
      },
      "revId": "10af20cf50836ed4979f70cfc25d1e0e9e0007c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9cb846d6_fc732572",
        "filename": "libbacktrace/BacktraceOffline.cpp",
        "patchSetId": 1
      },
      "lineNbr": 678,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2016-03-21T18:44:47Z",
      "side": 1,
      "message": "Sorry, this API is badly designed and one of my biggest regrets. I should have foreseen a future where there\u0027d be more C++ callers than C callers.",
      "parentUuid": "5c240ef3_d393b7d1",
      "range": {
        "startLine": 667,
        "startChar": 0,
        "endLine": 678,
        "endChar": 2
      },
      "revId": "10af20cf50836ed4979f70cfc25d1e0e9e0007c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c240ef3_f3ccfbda",
        "filename": "libbacktrace/BacktraceOffline.cpp",
        "patchSetId": 1
      },
      "lineNbr": 678,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-03-21T18:45:36Z",
      "side": 1,
      "message": "it was this \"all the choices with this API are bad\" that made me +narayan. it seems like ZipArchiveHandles tend to just be stack-allocated and only used to pass to a heap-allocated ZipArchive (the destructor of which calls CloseZipArchive).\n\nlooks like art has a better API wrapping this. is the right answer \"don\u0027t use the C OpenArchiveFd API, use the ZipArchive::OpenFromFd API instead\"? then you\u0027d just have a regular unique_ptr. but we\u0027d have to have something more like the ART API in libziparchive itself.\n\n_alternatively_ yabinc\u0027s approach here is the minimal approach. and if we want it here, we probably want it in the public header so others can use it. isn\u0027t the code in the dynamic linker wrong, for example? i see two \u0027continue\u0027s before the CloseArchive scope_guard. the fastboot code looks right, would be cleaner using this.",
      "parentUuid": "5c240ef3_d393b7d1",
      "range": {
        "startLine": 667,
        "startChar": 0,
        "endLine": 678,
        "endChar": 2
      },
      "revId": "10af20cf50836ed4979f70cfc25d1e0e9e0007c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c240ef3_e646fbf9",
        "filename": "libbacktrace/BacktraceOffline.cpp",
        "patchSetId": 1
      },
      "lineNbr": 678,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2016-03-22T00:54:04Z",
      "side": 1,
      "message": "copy ZipArchive class from art.",
      "parentUuid": "5c240ef3_f3ccfbda",
      "range": {
        "startLine": 667,
        "startChar": 0,
        "endLine": 678,
        "endChar": 2
      },
      "revId": "10af20cf50836ed4979f70cfc25d1e0e9e0007c0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}