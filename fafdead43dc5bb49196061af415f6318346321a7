{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "16068159_c7a6246e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1096946
      },
      "writtenOn": "2024-08-12T13:21:39Z",
      "side": 1,
      "message": "lgtm % nits. i\u0027ll leave to enh to +2, since he has more context on android than me. ;)\n\nthanks!",
      "revId": "fafdead43dc5bb49196061af415f6318346321a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f797f77b_bbf1d59e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-08-12T19:14:24Z",
      "side": 1,
      "message": "(i\u0027d probably stick this in bionic/ rather than the dumping ground that is system/core/... the only change you should need in system/core/ is the one to add it to the default shell + utilities list so it\u0027s guaranteed to be on the device: https://source.corp.google.com/h/android/platform/superproject/main/+/main:system/core/shell_and_utilities/Android.bp;l\u003d22?q\u003dfile:bp$%20ldd\u0026sq\u003drepo:android%2Fplatform%2Fsuperproject%2Fmain%20b:main%20-file:prebuilts%2Fvndk%2F%20-file:prebuilts%2Fruntime%2F )",
      "revId": "fafdead43dc5bb49196061af415f6318346321a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "003dcd08_2fdaf7c3",
        "filename": "cpu_target_features/Android.bp",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-08-12T19:14:24Z",
      "side": 1,
      "message": "cpp :-)",
      "range": {
        "startLine": 21,
        "startChar": 14,
        "endLine": 21,
        "endChar": 16
      },
      "revId": "fafdead43dc5bb49196061af415f6318346321a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dd9b9be0_7faf671a",
        "filename": "cpu_target_features/Android.bp",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1873222
      },
      "writtenOn": "2024-08-12T20:37:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "003dcd08_2fdaf7c3",
      "range": {
        "startLine": 21,
        "startChar": 14,
        "endLine": 21,
        "endChar": 16
      },
      "revId": "fafdead43dc5bb49196061af415f6318346321a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f146811_577a0b52",
        "filename": "cpu_target_features/main.cc",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1096946
      },
      "writtenOn": "2024-08-12T13:21:39Z",
      "side": 1,
      "message": "nit: i\u0027m surprised this doesn\u0027t warn with `-Wunreachable-code` or similar.\n\nplease prefer a build-time error though:\n\n```suggestion\n#else\n#error Unsupported arch. This binary only supports aarch64, arm, x86, and x86-64.\n#endif\n}\n```",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 34,
        "endChar": 0
      },
      "revId": "fafdead43dc5bb49196061af415f6318346321a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9da4d668_f81f7b66",
        "filename": "cpu_target_features/main.cc",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-08-12T19:14:24Z",
      "side": 1,
      "message": "especially because we need `__riscv` too :-)",
      "parentUuid": "2f146811_577a0b52",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 34,
        "endChar": 0
      },
      "revId": "fafdead43dc5bb49196061af415f6318346321a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7081f21_f611b32b",
        "filename": "cpu_target_features/main.cc",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1873222
      },
      "writtenOn": "2024-08-12T19:50:41Z",
      "side": 1,
      "message": "Ah, interesting. Yeah I compiled this and checked with clang-tidy and cpplint.py, and nothing for this in particular.\n\nThanks for the catch, fixed!\n\n\u003e especially because we need __riscv too :-)\n\nWould you like riscv here now too?",
      "parentUuid": "2f146811_577a0b52",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 34,
        "endChar": 0
      },
      "revId": "fafdead43dc5bb49196061af415f6318346321a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9f92358_02ff9942",
        "filename": "cpu_target_features/main.cc",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-08-13T18:33:16Z",
      "side": 1,
      "message": "yes, this will break in postsubmit otherwise. (riscv64 is postsubmit only atm :-( )",
      "parentUuid": "c7081f21_f611b32b",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 34,
        "endChar": 0
      },
      "revId": "fafdead43dc5bb49196061af415f6318346321a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "123556b2_609377e5",
        "filename": "cpu_target_features/main.cc",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1873222
      },
      "writtenOn": "2024-08-13T19:11:43Z",
      "side": 1,
      "message": "Gotcha! Have added risc-v defines in the bionic change I have. Will upload shortly, but still no genrule yet.",
      "parentUuid": "a9f92358_02ff9942",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 34,
        "endChar": 0
      },
      "revId": "fafdead43dc5bb49196061af415f6318346321a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d9c4a2f_7ee259e9",
        "filename": "cpu_target_features/print_target_features.cc",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1096946
      },
      "writtenOn": "2024-08-12T13:21:39Z",
      "side": 1,
      "message": "these functions seem prone to copy-paste issues. did you use a script to generate their bodies? if so, please include that.",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 68
      },
      "revId": "fafdead43dc5bb49196061af415f6318346321a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0ec850e_943a18cb",
        "filename": "cpu_target_features/print_target_features.cc",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-08-12T19:14:24Z",
      "side": 1,
      "message": "...and then switch to a genrule in the .bp file :-)",
      "parentUuid": "0d9c4a2f_7ee259e9",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 68
      },
      "revId": "fafdead43dc5bb49196061af415f6318346321a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7aeee833_1538700d",
        "filename": "cpu_target_features/print_target_features.cc",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1873222
      },
      "writtenOn": "2024-08-12T19:50:41Z",
      "side": 1,
      "message": "\u003e did you use a script to generate their bodies\n\nUnfortunately not. Each file had a slightly different test format, and there was no quick universal trick to get everything right. I got 90% of the way there though with ripgrep commands like:\n\n```\nrg -o \u0027\\w+\\s+\\w+$\u0027 ~/aarch64_defines | awk \u0027{print $2}\u0027 | sort -u \u003e aarch64_target_features\n```\n\nAnd vim macros (which is how basically all the code is written). Then went back and checked if I missed anything.\n\nCould try to write a script for this, but there\u0027s not one now.\n\nI could commit the target_features that I used for each architecture, mind you. Assuming that list is correct, it would be trivial to write a python script to do this. Not sure how Android feels about that.\n\n\u003e ...and then switch to a genrule in the .bp file :-)\n\nDo you have any pointers or examples so I can find out how to do this? More advanced Bazel and definitely all of Android .bp are a bit outside my normal day-to-day.",
      "parentUuid": "0d9c4a2f_7ee259e9",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 68
      },
      "revId": "fafdead43dc5bb49196061af415f6318346321a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1412d8bf_c9dc5045",
        "filename": "cpu_target_features/print_target_features.cc",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1096946
      },
      "writtenOn": "2024-08-12T20:02:38Z",
      "side": 1,
      "message": "\u003e I could commit the target_features that I used for each architecture, mind you. Assuming that list is correct, it would be trivial to write a python script to do this\n\nthis is what I had in mind, FWIW. :) \n\n```\nPER_ARCH_FEATURES \u003d {\n  \"arm32\": [\"__ARM_FEATURE_CRYPTO\", ...],\n}\n\nf \u003d open(opts.output_file, \"w\")\nwrite_file_header(f)\nfor arch, feature_list in PER_ARCH_FEATURES.items():\n  write_fn_start(arch, f)\n  for feature in feature_list:\n    write_feature_to_file(feature, f)\n  write_fn_end(arch, f)\n```\n\nit\u0027s perfectly fine for us to add things to support to an allowlist on an as-needed basis, rather than trying to grep clang files for it",
      "parentUuid": "7aeee833_1538700d",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 68
      },
      "revId": "fafdead43dc5bb49196061af415f6318346321a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "651bef5a_a714b91c",
        "filename": "cpu_target_features/print_target_features.cc",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-08-13T18:33:16Z",
      "side": 1,
      "message": "yeah, gbiv\u0027s \"we\u0027ll just curate the ones we\u0027ve found are actually interesting/useful\" sgtm too.\n\nalternatively, if you do want to go the way of completeness, you could just run the compiler, right, and get it to dump what it\u0027s set the preprocessor for?\n\nthere are many examples of genrules -- https://source.corp.google.com/search?q\u003dfile:bp$%20%5Cbgenrule%5C%20%5C%7B\u0026sq\u003drepo:android%2Fplatform%2Fsuperproject%2Fmain%20b:main%20-file:prebuilts%2Fvndk%2F%20-file:prebuilts%2Fruntime%2F -- but i think my ones in external/one-true-awk/Android.bp are some of the simplest? or if you go with gbiv\u0027s suggestion, https://source.corp.google.com/h/android/platform/superproject/main/+/main:system/core/toolbox/Android.bp;l\u003d28?q\u003dfile:bp%20genrule%20file:system%2Fcore\u0026sq\u003drepo:android%2Fplatform%2Fsuperproject%2Fmain%20b:main%20-file:prebuilts%2Fvndk%2F%20-file:prebuilts%2Fruntime%2F is very similar, being a small python script that takes an input file and outputs some source to build.",
      "parentUuid": "1412d8bf_c9dc5045",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 68
      },
      "revId": "fafdead43dc5bb49196061af415f6318346321a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd45d704_074344c1",
        "filename": "cpu_target_features/print_target_features.cc",
        "patchSetId": 3
      },
      "lineNbr": 348,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-08-12T19:14:24Z",
      "side": 1,
      "message": "this seems like it tells you more about the compiler than anything?",
      "revId": "fafdead43dc5bb49196061af415f6318346321a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b290228_505544b7",
        "filename": "cpu_target_features/print_target_features.cc",
        "patchSetId": 3
      },
      "lineNbr": 348,
      "author": {
        "id": 1873222
      },
      "writtenOn": "2024-08-12T19:50:41Z",
      "side": 1,
      "message": "Not sure I understand. This is set in both GCC and Clang. There are more of these than listed, but I\u0027m only going after the ones Clang definitely supports. I\u0027ve not looked too closely at what GCC specifies.",
      "parentUuid": "cd45d704_074344c1",
      "revId": "fafdead43dc5bb49196061af415f6318346321a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8bce513_347fcd4b",
        "filename": "cpu_target_features/print_target_features.cc",
        "patchSetId": 3
      },
      "lineNbr": 348,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-08-13T18:33:16Z",
      "side": 1,
      "message": "that just seems oddly arbitrary? if we\u0027re going to be arbitrary, gbiv\u0027s \"let\u0027s just do the ones we know we care about\" is the \"least arbitrary arbitrary\" :-) the closer we get to \"everything the compiler sets\", the more i wonder whether we shouldn\u0027t have _everything_ the compiler sets (as mentioned above).",
      "parentUuid": "3b290228_505544b7",
      "revId": "fafdead43dc5bb49196061af415f6318346321a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf0384f2_b0ba232c",
        "filename": "cpu_target_features/print_target_features.cc",
        "patchSetId": 3
      },
      "lineNbr": 348,
      "author": {
        "id": 1873222
      },
      "writtenOn": "2024-08-13T19:11:43Z",
      "side": 1,
      "message": "My intent of this was very much \"everything the compiler sets\". If we can agree on a subsets of what defines would be best, I\u0027d be happy to strip this down to that!\n\nUnfortunately, I do not know exactly which defines are (or are not) important, and my thought was there\u0027s zero harm in adding more define checks. Thus,the goal was to get as many as I could find, and not worry about bikeshedding of exactly which ones I missed.",
      "parentUuid": "e8bce513_347fcd4b",
      "revId": "fafdead43dc5bb49196061af415f6318346321a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}