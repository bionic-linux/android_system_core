{
  "comments": [
    {
      "key": {
        "uuid": "e4e8aef8_b107e01f",
        "filename": "include/binderwrapper/binder_wrapper.h",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1076138
      },
      "writtenOn": "2015-09-08T20:50:59Z",
      "side": 1,
      "message": "How many? Or do you want to leave it undefined on purpose?",
      "range": {
        "startLine": 54,
        "startChar": 39,
        "endLine": 54,
        "endChar": 42
      },
      "revId": "57e86896a6dc38e71fec07cf02e5bbca7357724a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a40b16a8_47e7ce19",
        "filename": "include/binderwrapper/binder_wrapper.h",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1074340
      },
      "writtenOn": "2015-09-08T22:18:17Z",
      "side": 1,
      "message": "heh. i left it undefined because IServiceManager in libbinder leaves it undefined:\n\n    /**\n     * Retrieve an existing service, blocking for a few seconds\n     * if it doesn\u0027t yet exist.\n     */\n    ...\n    virtual sp\u003cIBinder\u003e getService(const String16\u0026 name) const\n    {\n        unsigned n;\n        for (n \u003d 0; n \u003c 5; n++){\n            sp\u003cIBinder\u003e svc \u003d checkService(name);\n            if (svc !\u003d NULL) return svc;\n            ALOGI(\"Waiting for service %s...\\n\", String8(name).string());\n            sleep(1);\n        }\n        return NULL;\n    }\n\nafter looking at the implementation of that, i\u0027m just going to delete this silly thing. callers can write their own sleep loop if they want (although they shouldn\u0027t).",
      "parentUuid": "e4e8aef8_b107e01f",
      "range": {
        "startLine": 54,
        "startChar": 39,
        "endLine": 54,
        "endChar": 42
      },
      "revId": "57e86896a6dc38e71fec07cf02e5bbca7357724a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4d56a01_c341282a",
        "filename": "libbinderwrapper/Android.mk",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 1052976
      },
      "writtenOn": "2015-09-08T21:22:41Z",
      "side": 1,
      "message": "As unit tests generally run on the host, should you build host versions of these too?",
      "range": {
        "startLine": 63,
        "startChar": 10,
        "endLine": 63,
        "endChar": 30
      },
      "revId": "57e86896a6dc38e71fec07cf02e5bbca7357724a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84d9b271_2e40276b",
        "filename": "libbinderwrapper/Android.mk",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 1074340
      },
      "writtenOn": "2015-09-08T22:18:17Z",
      "side": 1,
      "message": "the host probably isn\u0027t going to have binder in its kernel, right? any tests that use this are still going to be instantiating IBinder objects, which i think will fail... no?\n\nin general, i hate this trend of us duplicating everything to build host versions even though we don\u0027t really care about running the underlying code on the host, and then needing to do the same for all of its dependencies, etc.",
      "parentUuid": "c4d56a01_c341282a",
      "range": {
        "startLine": 63,
        "startChar": 10,
        "endLine": 63,
        "endChar": 30
      },
      "revId": "57e86896a6dc38e71fec07cf02e5bbca7357724a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4d8763b_625cd8df",
        "filename": "libbinderwrapper/real_binder_wrapper.cc",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1052976
      },
      "writtenOn": "2015-09-08T21:22:41Z",
      "side": 1,
      "message": "These two function are the same apart from the {get|check|Service call. Could you have a common function?\nsp\u003cIBinder\u003e RealBinderWrapper::GetServiceImp(const std::string\u0026 service_name, bool wait)",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 78,
        "endChar": 1
      },
      "revId": "57e86896a6dc38e71fec07cf02e5bbca7357724a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64d4be37_8d2281e2",
        "filename": "libbinderwrapper/real_binder_wrapper.cc",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1074340
      },
      "writtenOn": "2015-09-08T22:18:17Z",
      "side": 1,
      "message": "i\u0027m just going to kill WaitForService() because it is dumb",
      "parentUuid": "a4d8763b_625cd8df",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 78,
        "endChar": 1
      },
      "revId": "57e86896a6dc38e71fec07cf02e5bbca7357724a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}