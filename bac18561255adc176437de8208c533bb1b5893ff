{
  "comments": [
    {
      "key": {
        "uuid": "66259842_b22909b7",
        "filename": "logd/LogStatistics.cpp",
        "patchSetId": 5
      },
      "lineNbr": 197,
      "author": {
        "id": 1015340
      },
      "writtenOn": "2015-03-20T20:30:34Z",
      "side": 1,
      "message": "This is just complex/fragile enough that copy-and-pasting it feels like a bad idea.  If you can easily break this out into a single helper (using C++ templates to handle the different return value types) then I\u0027d feel better with that.",
      "range": {
        "startLine": 183,
        "startChar": 4,
        "endLine": 197,
        "endChar": 18
      },
      "revId": "bac18561255adc176437de8208c533bb1b5893ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "66259842_521e75e7",
        "filename": "logd/LogStatistics.cpp",
        "patchSetId": 5
      },
      "lineNbr": 197,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2015-03-20T21:14:01Z",
      "side": 1,
      "message": "Agreed, I was chatting with you about an idea to wrap an internal hash type around the BasicHashtable class but did not take any action.\n\nI would like to have some time to get an education on the libc++ alternative for hash tables as BasicHashtable was freshly introduced into logd in the previous CL. Before I started using it, there was effectively only _one_ other user of BasicHashtable. That low of a population bothered me then, and bothers me even more now ...",
      "parentUuid": "66259842_b22909b7",
      "range": {
        "startLine": 183,
        "startChar": 4,
        "endLine": 197,
        "endChar": 18
      },
      "revId": "bac18561255adc176437de8208c533bb1b5893ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "460974dc_7aab3982",
        "filename": "logd/LogStatistics.cpp",
        "patchSetId": 5
      },
      "lineNbr": 197,
      "author": {
        "id": 1015340
      },
      "writtenOn": "2015-03-20T23:09:57Z",
      "side": 1,
      "message": "C++11 has std::unordered_map.\n\nLike I said, I think you should get this patch stack in and then do a project-wide sweep to get rid of C-style and libutils-style data structures.  If all you do is modify these new patches to use libc++, you\u0027ll just wind up with logd doing things *three* ways instead of the existing two.",
      "parentUuid": "66259842_521e75e7",
      "range": {
        "startLine": 183,
        "startChar": 4,
        "endLine": 197,
        "endChar": 18
      },
      "revId": "bac18561255adc176437de8208c533bb1b5893ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "46825452_63473da8",
        "filename": "logd/LogStatistics.cpp",
        "patchSetId": 5
      },
      "lineNbr": 388,
      "author": {
        "id": 1015340
      },
      "writtenOn": "2015-03-20T20:30:34Z",
      "side": 1,
      "message": "Likewise it looks like you could break this out into a templatized helper.  Though this is more straightforward so I\u0027m not sure how critical that would be.",
      "range": {
        "startLine": 388,
        "startChar": 8,
        "endLine": 388,
        "endChar": 72
      },
      "revId": "bac18561255adc176437de8208c533bb1b5893ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "068cdc85_b6031ec5",
        "filename": "logd/LogStatistics.cpp",
        "patchSetId": 5
      },
      "lineNbr": 403,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2015-03-20T21:14:01Z",
      "side": 1,
      "message": "I agree, this should be templated.",
      "range": {
        "startLine": 388,
        "startChar": 0,
        "endLine": 403,
        "endChar": 13
      },
      "revId": "bac18561255adc176437de8208c533bb1b5893ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "46825452_c37e29df",
        "filename": "logd/LogStatistics.h",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1015340
      },
      "writtenOn": "2015-03-20T20:30:34Z",
      "side": 1,
      "message": "enablePidStats?\n\nIf I\u0027m reading this right, this selectively enables the PID statistics, but UID statistics are unconditionally enabled.  Which would make this variable name deceptive.",
      "range": {
        "startLine": 73,
        "startChar": 9,
        "endLine": 73,
        "endChar": 15
      },
      "revId": "bac18561255adc176437de8208c533bb1b5893ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "46825452_9ee95a2c",
        "filename": "logd/LogStatistics.h",
        "patchSetId": 5
      },
      "lineNbr": 73,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2015-03-20T21:14:01Z",
      "side": 1,
      "message": "The only essential statistics (in support of worst-UID pruning) is the UID statistics. There is no analog for this statistic performed in post-processing since UID is internal to the logger. The sizes are necessary for the general pruning algorithm; they are essential for the operations of the logger.\n\nEverything else is optional, adds memory pressure and will be turned off on \"user\" builds. We have a request to add a per-event-tag report as well in the future, another developer is considering adding it himself rather than waiting for me to get to it.\n\nFor these two reasons alone I would prefer to leave this as a generic label.\n\nI am lukewarm on creeping statistics featurism since the per-PID table can actually be generated by post-processing the logcat output since all the data is present. The same can be said of the per-tag statistics being requested. Only rationalization is that the data is useful and _someone_ wants them generated.",
      "parentUuid": "46825452_c37e29df",
      "range": {
        "startLine": 73,
        "startChar": 9,
        "endLine": 73,
        "endChar": 15
      },
      "revId": "bac18561255adc176437de8208c533bb1b5893ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}