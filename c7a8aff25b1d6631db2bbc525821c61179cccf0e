{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9b593538_df231941",
        "filename": "libcutils/ashmem-host.cpp",
        "patchSetId": 16
      },
      "lineNbr": 75,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-08T23:37:41Z",
      "side": 1,
      "message": "std::unique_ptr on L69 instead of duplicating all these.",
      "revId": "c7a8aff25b1d6631db2bbc525821c61179cccf0e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d728c42d_4f0e0277",
        "filename": "libcutils/ashmem-host.cpp",
        "patchSetId": 16
      },
      "lineNbr": 75,
      "author": {
        "id": 1396566
      },
      "writtenOn": "2024-03-09T00:50:30Z",
      "side": 1,
      "message": "Done. Not sure if there is a cleaner way to do it, it still seems like it needs a custom delete function to do fclose.",
      "parentUuid": "9b593538_df231941",
      "revId": "c7a8aff25b1d6631db2bbc525821c61179cccf0e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b6efdd3_a33611d0",
        "filename": "libcutils/ashmem-host.cpp",
        "patchSetId": 16
      },
      "lineNbr": 75,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-05-28T18:29:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d728c42d_4f0e0277",
      "revId": "c7a8aff25b1d6631db2bbc525821c61179cccf0e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "deaed4e4_3ee11aaa",
        "filename": "libcutils/ashmem-host.cpp",
        "patchSetId": 16
      },
      "lineNbr": 85,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-08T23:37:41Z",
      "side": 1,
      "message": "unique_fd (from libbase) on L78 rather than this.",
      "revId": "c7a8aff25b1d6631db2bbc525821c61179cccf0e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e1c86a67_59cc7d0a",
        "filename": "libcutils/ashmem-host.cpp",
        "patchSetId": 16
      },
      "lineNbr": 85,
      "author": {
        "id": 1396566
      },
      "writtenOn": "2024-03-09T00:50:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "deaed4e4_3ee11aaa",
      "revId": "c7a8aff25b1d6631db2bbc525821c61179cccf0e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46b3bcf4_20698b3e",
        "filename": "libcutils/ashmem_base_test.cpp",
        "patchSetId": 16
      },
      "lineNbr": 38,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-08T23:37:41Z",
      "side": 1,
      "message": "that\u0027s not what FillData was doing.\n\nwhat does the change to ashmem_test.cpp actually look like? you can\u0027t have something like\n```\n#if defined(_WIN32)\nstatic inline size_t getpagesize() { return 4096; }\nstatic inline int munmap(void*, size_t) { return 0; }\n#endif\n```\nin there instead?",
      "revId": "c7a8aff25b1d6631db2bbc525821c61179cccf0e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c75d83fe_f6084b12",
        "filename": "libcutils/ashmem_base_test.cpp",
        "patchSetId": 16
      },
      "lineNbr": 38,
      "author": {
        "id": 1396566
      },
      "writtenOn": "2024-03-09T00:50:30Z",
      "side": 1,
      "message": "Added getpagesize override for Windows.\n\nmmap is not available on Windows either, so having munmap inline feels moot. What\u0027s the issue with using MappedFile in the test?",
      "parentUuid": "46b3bcf4_20698b3e",
      "revId": "c7a8aff25b1d6631db2bbc525821c61179cccf0e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af6f2175_b58315d9",
        "filename": "libcutils/ashmem_base_test.cpp",
        "patchSetId": 16
      },
      "lineNbr": 38,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-05-28T18:29:11Z",
      "side": 1,
      "message": "nothing. if that\u0027s a good fix, just move ashmem_test.cpp over to that.",
      "parentUuid": "c75d83fe_f6084b12",
      "revId": "c7a8aff25b1d6631db2bbc525821c61179cccf0e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a19e3e1_71e448ff",
        "filename": "libcutils/ashmem_base_test.cpp",
        "patchSetId": 16
      },
      "lineNbr": 38,
      "author": {
        "id": 1396566
      },
      "writtenOn": "2024-05-28T22:32:02Z",
      "side": 1,
      "message": "I would be happy to migrate ashmem_test.cpp to use MappedFile, but that feels like it should be in a separate CL, since it would be a fairly large refector of ashmem_test.cpp, and much of that refactoring would be unrelated to getting it working on host Windows.\n\nI looked at all of the tests in ashmem_test.cpp and the BasicTest is the only one that currently works on all host platforms. FileOperationsTest fails because MinGW does not have SEEK_HOLE and SEEK_DATA, the Prot* tests do not work because ashmem-host does not support protection bit. The fork tests fail because Windows has slightly different behavior with inheriting file descriptors. For ashmem-host.cpp, it\u0027s not a requirement to support fork, ashmem-host.cpp is only used in single process environments as far as I know.",
      "parentUuid": "af6f2175_b58315d9",
      "revId": "c7a8aff25b1d6631db2bbc525821c61179cccf0e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed21d4f3_b33de7c6",
        "filename": "libcutils/ashmem_base_test.cpp",
        "patchSetId": 16
      },
      "lineNbr": 38,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-05-30T20:52:13Z",
      "side": 1,
      "message": "ah, okay. yeah, all the choices look bad in that case, so i guess this is okay...\n\n(if the tests would _build_ on Windows and just fail, i\u0027d be tempted to `GTEST_SKIP()` them with your comments as to why, since you\u0027ve already done the work to work that out, but since we\u0027d actually need to #ifdef each one, that seems like a cure that\u0027s at least as bad as the disease :-( )",
      "parentUuid": "8a19e3e1_71e448ff",
      "revId": "c7a8aff25b1d6631db2bbc525821c61179cccf0e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6757dcc2_040cd69a",
        "filename": "libcutils/ashmem_base_test.cpp",
        "patchSetId": 16
      },
      "lineNbr": 38,
      "author": {
        "id": 1396566
      },
      "writtenOn": "2024-07-02T05:03:13Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "ed21d4f3_b33de7c6",
      "revId": "c7a8aff25b1d6631db2bbc525821c61179cccf0e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}