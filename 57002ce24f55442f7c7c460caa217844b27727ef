{
  "comments": [
    {
      "key": {
        "uuid": "d1ed4583_60b12ec7",
        "filename": "logd/LogTags.cpp",
        "patchSetId": 15
      },
      "lineNbr": 65,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-02-01T01:27:23Z",
      "side": 1,
      "message": "false",
      "range": {
        "startLine": 65,
        "startChar": 42,
        "endLine": 65,
        "endChar": 52
      },
      "revId": "57002ce24f55442f7c7c460caa217844b27727ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8edfa0f5_6fcb36b1",
        "filename": "logd/LogTags.cpp",
        "patchSetId": 15
      },
      "lineNbr": 67,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-02-01T01:27:23Z",
      "side": 1,
      "message": "does not cause a return value of false.",
      "range": {
        "startLine": 66,
        "startChar": 71,
        "endLine": 67,
        "endChar": 15
      },
      "revId": "57002ce24f55442f7c7c460caa217844b27727ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e61ea481_686bd1c5",
        "filename": "logd/LogTags.cpp",
        "patchSetId": 15
      },
      "lineNbr": 68,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-02-01T01:27:23Z",
      "side": 1,
      "message": "nit: suggest Rebuild or Rewrite",
      "range": {
        "startLine": 68,
        "startChar": 14,
        "endLine": 68,
        "endChar": 21
      },
      "revId": "57002ce24f55442f7c7c460caa217844b27727ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0663d726_a850a68c",
        "filename": "logd/LogTags.cpp",
        "patchSetId": 15
      },
      "lineNbr": 72,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-02-01T01:27:23Z",
      "side": 1,
      "message": "Usage of rwlock here wasn\u0027t clear to me.  Is only a read lock (for the in-memory data structure) needed when it protects whether the file must be rebuilt?  Is it possible (and OK) to have multiple readers running this code concurrently?",
      "range": {
        "startLine": 72,
        "startChar": 35,
        "endLine": 72,
        "endChar": 43
      },
      "revId": "57002ce24f55442f7c7c460caa217844b27727ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94a10db4_dcd81840",
        "filename": "logd/LogTags.cpp",
        "patchSetId": 15
      },
      "lineNbr": 72,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-02-01T21:21:54Z",
      "side": 1,
      "message": "rwlock is used purely to protect the internal data structures. I want all actual access to the internal unordered_map to be pedantically atomically protected regardless if it is needed or not in the specific path.\n\nThis function is called whenever a new registration occurs, which is a single threaded action, so there is no need to protect file2watermark setting, or the file update.\n\nI agree that this is confusing, and can cause bugs in the future if the algorithms change, there would be less FUD if I made the entire function write-protected; but the performance difference between a read lock (which has minimal contention) and a write lock is why I do this.",
      "range": {
        "startLine": 72,
        "startChar": 35,
        "endLine": 72,
        "endChar": 43
      },
      "revId": "57002ce24f55442f7c7c460caa217844b27727ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90c58735_161410c2",
        "filename": "logd/LogTags.cpp",
        "patchSetId": 15
      },
      "lineNbr": 88,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-02-01T01:27:23Z",
      "side": 1,
      "message": "nit: suggest make this a statement, not a question",
      "range": {
        "startLine": 88,
        "startChar": 55,
        "endLine": 88,
        "endChar": 56
      },
      "revId": "57002ce24f55442f7c7c460caa217844b27727ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c07898b_610f5006",
        "filename": "logd/LogTags.cpp",
        "patchSetId": 15
      },
      "lineNbr": 120,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-02-01T01:27:23Z",
      "side": 1,
      "message": "Not sure about the sequence of hold-read-lock, check watermark, rebuild file, drop lock, grab write lock, update watermark.  Does this not need to be atomic with the code that writes the file above?",
      "range": {
        "startLine": 120,
        "startChar": 35,
        "endLine": 120,
        "endChar": 44
      },
      "revId": "57002ce24f55442f7c7c460caa217844b27727ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ccae74a_8941e0f9",
        "filename": "logd/LogTags.cpp",
        "patchSetId": 15
      },
      "lineNbr": 356,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-02-01T01:27:23Z",
      "side": 1,
      "message": "event",
      "range": {
        "startLine": 356,
        "startChar": 15,
        "endLine": 356,
        "endChar": 21
      },
      "revId": "57002ce24f55442f7c7c460caa217844b27727ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59542cb2_3571d08e",
        "filename": "logd/LogTags.cpp",
        "patchSetId": 15
      },
      "lineNbr": 357,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-02-01T01:27:23Z",
      "side": 1,
      "message": "nit: inconsistent use of \"type* var\" vs. \"type *var\" in this file.",
      "range": {
        "startLine": 357,
        "startChar": 6,
        "endLine": 357,
        "endChar": 11
      },
      "revId": "57002ce24f55442f7c7c460caa217844b27727ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be15aae5_31a1a68f",
        "filename": "logd/LogTags.cpp",
        "patchSetId": 15
      },
      "lineNbr": 357,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-02-01T21:21:54Z",
      "side": 1,
      "message": "there is, will audit for type\u003cspace\u003e* as all new files must comply with Android coding standard.",
      "range": {
        "startLine": 357,
        "startChar": 6,
        "endLine": 357,
        "endChar": 11
      },
      "revId": "57002ce24f55442f7c7c460caa217844b27727ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d46fa7db_eae1c7d2",
        "filename": "logd/LogTags.cpp",
        "patchSetId": 15
      },
      "lineNbr": 368,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-02-01T01:27:23Z",
      "side": 1,
      "message": "Add a comment to distinguish this from above?",
      "range": {
        "startLine": 368,
        "startChar": 12,
        "endLine": 368,
        "endChar": 30
      },
      "revId": "57002ce24f55442f7c7c460caa217844b27727ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c61ba27a_cfa64534",
        "filename": "logd/LogTags.cpp",
        "patchSetId": 15
      },
      "lineNbr": 384,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-02-01T01:27:23Z",
      "side": 1,
      "message": "event",
      "range": {
        "startLine": 384,
        "startChar": 15,
        "endLine": 384,
        "endChar": 21
      },
      "revId": "57002ce24f55442f7c7c460caa217844b27727ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "505c287f_8a1c25b6",
        "filename": "logd/LogTags.cpp",
        "patchSetId": 15
      },
      "lineNbr": 413,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-02-01T01:27:23Z",
      "side": 1,
      "message": "lock.  We",
      "range": {
        "startLine": 413,
        "startChar": 3,
        "endLine": 413,
        "endChar": 10
      },
      "revId": "57002ce24f55442f7c7c460caa217844b27727ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4f7a8a20_8a8f7812",
        "filename": "logd/LogTags.cpp",
        "patchSetId": 15
      },
      "lineNbr": 414,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-02-01T01:27:23Z",
      "side": 1,
      "message": "If",
      "range": {
        "startLine": 414,
        "startChar": 31,
        "endLine": 414,
        "endChar": 33
      },
      "revId": "57002ce24f55442f7c7c460caa217844b27727ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cee8920e_3c47105a",
        "filename": "logd/LogTags.cpp",
        "patchSetId": 15
      },
      "lineNbr": 488,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-02-01T01:27:23Z",
      "side": 1,
      "message": "suggest add a named const int for this",
      "range": {
        "startLine": 488,
        "startChar": 61,
        "endLine": 488,
        "endChar": 70
      },
      "revId": "57002ce24f55442f7c7c460caa217844b27727ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8cbc24e_4b31d724",
        "filename": "logd/LogTags.cpp",
        "patchSetId": 15
      },
      "lineNbr": 639,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-02-01T01:27:23Z",
      "side": 1,
      "message": "But no lock is needed?",
      "range": {
        "startLine": 639,
        "startChar": 29,
        "endLine": 639,
        "endChar": 60
      },
      "revId": "57002ce24f55442f7c7c460caa217844b27727ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2c34b798_2c963864",
        "filename": "logd/LogTags.cpp",
        "patchSetId": 15
      },
      "lineNbr": 639,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-02-01T21:21:54Z",
      "side": 1,
      "message": "Single threaded here. Lock is pedantically applied to all accesses to unordered_map as it is very fragile. It may have been too pedantic here since this is the only writer for tag2total.",
      "range": {
        "startLine": 639,
        "startChar": 29,
        "endLine": 639,
        "endChar": 60
      },
      "revId": "57002ce24f55442f7c7c460caa217844b27727ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "018e2781_c6f45696",
        "filename": "logd/LogTags.cpp",
        "patchSetId": 15
      },
      "lineNbr": 653,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-02-01T01:27:23Z",
      "side": 1,
      "message": "similar uncertainty over use of write lock to update info that wasn\u0027t generated under the lock.",
      "range": {
        "startLine": 653,
        "startChar": 31,
        "endLine": 653,
        "endChar": 40
      },
      "revId": "57002ce24f55442f7c7c460caa217844b27727ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7eddd69_7b8524d5",
        "filename": "logd/LogTags.cpp",
        "patchSetId": 15
      },
      "lineNbr": 653,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-02-01T21:21:54Z",
      "side": 1,
      "message": "View this as equivalent to changing tag2total to an atomic to prevent corrupted content, except it is an unordered_map, so we pedantically protect it with a lock.",
      "range": {
        "startLine": 653,
        "startChar": 31,
        "endLine": 653,
        "endChar": 40
      },
      "revId": "57002ce24f55442f7c7c460caa217844b27727ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51b3da7c_61859fae",
        "filename": "logd/LogTags.cpp",
        "patchSetId": 15
      },
      "lineNbr": 809,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-02-01T01:27:23Z",
      "side": 1,
      "message": "is groot a thing?",
      "range": {
        "startLine": 809,
        "startChar": 53,
        "endLine": 809,
        "endChar": 58
      },
      "revId": "57002ce24f55442f7c7c460caa217844b27727ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bdd537a0_c76d7e85",
        "filename": "logd/LogTags.cpp",
        "patchSetId": 15
      },
      "lineNbr": 809,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-02-01T21:21:54Z",
      "side": 1,
      "message": "There is no space for coding humour. I mispelled root on purpose and you caught me ...",
      "range": {
        "startLine": 809,
        "startChar": 53,
        "endLine": 809,
        "endChar": 58
      },
      "revId": "57002ce24f55442f7c7c460caa217844b27727ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ccdc7f1e_f8fb8f4e",
        "filename": "logd/LogTags.h",
        "patchSetId": 15
      },
      "lineNbr": 2,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-02-01T21:21:54Z",
      "side": 1,
      "message": "2017",
      "range": {
        "startLine": 2,
        "startChar": 17,
        "endLine": 2,
        "endChar": 21
      },
      "revId": "57002ce24f55442f7c7c460caa217844b27727ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dff11fd9_cfa34435",
        "filename": "logd/LogTags.h",
        "patchSetId": 15
      },
      "lineNbr": 27,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-02-01T21:21:54Z",
      "side": 1,
      "message": "I need a comment here so it is clear that this is protecting _all_ the unodered_map accesses only.\n\nThere is a single threaded ness for all updates. However other activities in the logger (isloggable for instance in the logging path) _reading_ these data structures can cause asynchronous access.\n\nI need to audit all of those activities again to ensure that there is no FUD or confusion (since we have some added value that snuck in that I need to make sure does not trigger a write).",
      "range": {
        "startLine": 27,
        "startChar": 4,
        "endLine": 27,
        "endChar": 27
      },
      "revId": "57002ce24f55442f7c7c460caa217844b27727ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dfe6c657_f0ae4f1a",
        "filename": "logd/logtagd.rc",
        "patchSetId": 15
      },
      "lineNbr": 2,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-02-01T01:27:23Z",
      "side": 1,
      "message": "scripts?",
      "range": {
        "startLine": 2,
        "startChar": 7,
        "endLine": 2,
        "endChar": 17
      },
      "revId": "57002ce24f55442f7c7c460caa217844b27727ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f408bba5_feb3bdfb",
        "filename": "logd/logtagd.rc",
        "patchSetId": 15
      },
      "lineNbr": 2,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-02-01T21:21:54Z",
      "side": 1,
      "message": "I\u0027d prefer incantations ;-}\n\nToo much weirdness? will drop \u0027init scriptures for\u0027",
      "range": {
        "startLine": 2,
        "startChar": 7,
        "endLine": 2,
        "endChar": 17
      },
      "revId": "57002ce24f55442f7c7c460caa217844b27727ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b526885d_93fbc7a0",
        "filename": "logd/tests/logd_test.cpp",
        "patchSetId": 15
      },
      "lineNbr": 42,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-02-01T01:27:23Z",
      "side": 1,
      "message": "nit: inconsistent \"type* var\" vs. \"type *var\"",
      "range": {
        "startLine": 42,
        "startChar": 28,
        "endLine": 42,
        "endChar": 33
      },
      "revId": "57002ce24f55442f7c7c460caa217844b27727ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "655b5af8_c89db8a5",
        "filename": "logd/tests/logd_test.cpp",
        "patchSetId": 15
      },
      "lineNbr": 42,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-02-01T21:21:54Z",
      "side": 1,
      "message": "Android coding standard is type*\n\nAll changes gently move us into that direction.",
      "range": {
        "startLine": 42,
        "startChar": 28,
        "endLine": 42,
        "endChar": 33
      },
      "revId": "57002ce24f55442f7c7c460caa217844b27727ef",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}