{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fe0cdd1b_f2f81813",
        "filename": "fs_mgr/libsnapshot/snapuserd/user-space-merge/merge_worker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2024-05-29T14:20:49Z",
      "side": 1,
      "message": "Akilesh should take a look but I believe we may not have access to properties here (if resuming a merge).",
      "revId": "5664587313c505a7036417948212ea669a1af6d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3949a980_83998eee",
        "filename": "fs_mgr/libsnapshot/snapuserd/user-space-merge/merge_worker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1964171
      },
      "writtenOn": "2024-06-11T20:24:28Z",
      "side": 1,
      "message": "does this mean the merge get\u0027s interrupted and has to restart? It seems available if we don\u0027t interrupt the merge process.",
      "parentUuid": "fe0cdd1b_f2f81813",
      "revId": "5664587313c505a7036417948212ea669a1af6d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2593e710_a8cc6041",
        "filename": "fs_mgr/libsnapshot/snapuserd/user-space-merge/merge_worker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2024-06-11T20:28:59Z",
      "side": 1,
      "message": "Normally a merge starts in second-stage init, where we have access to properties. But if you reboot in the middle, the merge resumes in first-stage init, where properties aren\u0027t loaded yet. In fact, IIRC, reading a property could lead to a deadlock, unless we fixed that unilaterally. This is a case where it\u0027s safest to pipe it through the status protobuf and argv, but Akilesh should make the call on whether that\u0027s needed.\n\nEither way, I would definitely make this a parameter to the Handler, and not have it read here. Otherwise it\u0027s much more difficult to change this value in tests.",
      "parentUuid": "3949a980_83998eee",
      "revId": "5664587313c505a7036417948212ea669a1af6d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3289b04e_de24f615",
        "filename": "fs_mgr/libsnapshot/snapuserd/user-space-merge/merge_worker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-06-11T20:35:07Z",
      "side": 1,
      "message": "I think this is ok here as we don\u0027t start the merge until after properties are loaded. This is true even for merge resume section as well. Snapshot-merge (start or resume) is driven by update-engine process - so, this should be ok.\n\n\u003e the merge resumes in first-stage init, where properties aren\u0027t loaded yet.\n\nYes - This is true in the world of dm-snapshot merge wherein snapshot-merge would immediately kick off as soon as we mount the partition as merge target. However, when we moved to userspace snapshots, we decided not to do it and let update-engine process drive the snapshot-merge.",
      "parentUuid": "2593e710_a8cc6041",
      "revId": "5664587313c505a7036417948212ea669a1af6d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "437a9fb6_348af7c9",
        "filename": "fs_mgr/libsnapshot/snapuserd/user-space-merge/merge_worker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2024-06-11T23:25:14Z",
      "side": 1,
      "message": "Makes sense. I\u0027d still argue for passing in via Handler, as that makes testing easier. (merge size definitely seems like something more sensitive than say thread priority)",
      "parentUuid": "3289b04e_de24f615",
      "revId": "5664587313c505a7036417948212ea669a1af6d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}