{
  "comments": [
    {
      "key": {
        "uuid": "a562de48_c34d0b74",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 20,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2018-06-04T01:49:52Z",
      "side": 1,
      "message": "Did you also run netd_unit_test, netd_integration_test, and the benchmarks in system/netd/tests/benchmarks? If so, please run them, and make sure none of the new error messages you added in this CL, such as \"fd vanished\" appear in the logs.",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 47
      },
      "revId": "0ad41cf3f44e5403132f7f620d8199446cb815b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ddc2cd2a_5f560774",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 20,
      "author": {
        "id": 1273909
      },
      "writtenOn": "2018-06-04T06:12:25Z",
      "side": 1,
      "message": "I ran netd_benchmark with and without this patch applied, and all results seem comparable:\n\nSelect: https://paste.googleplex.com/6233622524723200?raw\nPoll: https://paste.googleplex.com/5928896407011328?raw\n\nI ran all benchmarks on a marlin with just one core enabled and clock scaling disabled.\nI did 3 runs of the poll() benchmark to make sure the jitter was in the same order of magnitude of the difference.\n\nThe only tests were poll() seems to be slower than select are:\n\n  DnsFixture/getaddrinfo_log_nothing/real_time/threads:16 +15%\n  DnsFixture/getaddrinfo_log_nothing/real_time/threads:32 +7%\n\nWe should probably come up with narrower microbenchmarks if we want to ensure that this and future changes are a performance win... I could bake this into the unit tests I\u0027m currently writing.\n\nEven if we decide that C10K scalability isn\u0027t something worth pursuing on a mobile device, a microbenchmark would ensure that we don\u0027t accidentally introduce a huge performance regression which which hurts even with a few hundreds sockets.",
      "parentUuid": "a562de48_c34d0b74",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 47
      },
      "revId": "0ad41cf3f44e5403132f7f620d8199446cb815b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "625b67c0_eda807fb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 20,
      "author": {
        "id": 1273909
      },
      "writtenOn": "2018-06-04T06:51:31Z",
      "side": 1,
      "message": "As for the netd unit tests, I ran system/netd/tests/runtests.sh, but I forgot to mention it in the commit message.",
      "parentUuid": "ddc2cd2a_5f560774",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 47
      },
      "revId": "0ad41cf3f44e5403132f7f620d8199446cb815b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0702e33d_5bb1d552",
        "filename": "libsysutils/src/SocketListener.cpp",
        "patchSetId": 7
      },
      "lineNbr": 191,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2018-06-04T01:49:52Z",
      "side": 1,
      "message": "Storing clients in a map indexed by fd means that if the socket is closed before the entry is removed from the map, a subsequent accept4() could return the same fd number, causing us to overwrite an existing map entry.\n\nI looked at this CL and couldn\u0027t see any uses of decRef() before release(), so I don\u0027t think this can happen. Did you check this while writing the change as well?",
      "range": {
        "startLine": 191,
        "startChar": 12,
        "endLine": 191,
        "endChar": 23
      },
      "revId": "0ad41cf3f44e5403132f7f620d8199446cb815b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}