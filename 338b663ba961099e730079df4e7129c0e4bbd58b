{
  "comments": [
    {
      "key": {
        "uuid": "0bbc7394_0a8de863",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 5
      },
      "lineNbr": 1912,
      "author": {
        "id": 1275554
      },
      "writtenOn": "2019-08-30T14:47:06Z",
      "side": 1,
      "message": "You used threshold term instead of watermark but still field names are wmark.\nI\u0027m okay either watermark and threshold. But let\u0027s use consistent term with structure name and field name.",
      "range": {
        "startLine": 1912,
        "startChar": 12,
        "endLine": 1912,
        "endChar": 22
      },
      "revId": "338b663ba961099e730079df4e7129c0e4bbd58b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4a5d15e_a5d1b8fa",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 5
      },
      "lineNbr": 1912,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-08-30T16:38:49Z",
      "side": 1,
      "message": "Agree, will change to zone_watermark_levels",
      "parentUuid": "0bbc7394_0a8de863",
      "range": {
        "startLine": 1912,
        "startChar": 12,
        "endLine": 1912,
        "endChar": 22
      },
      "revId": "338b663ba961099e730079df4e7129c0e4bbd58b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c63a62a_a0de2804",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 5
      },
      "lineNbr": 1924,
      "author": {
        "id": 1275554
      },
      "writtenOn": "2019-08-30T14:47:06Z",
      "side": 1,
      "message": "CMA pages are allocatable resource for MOVABLE allocation which is major consumption for the system. IOW, if system ask MOVABLE allocation, CMA free pages are definitely free pages.\nWhy do you always subtract the amount of CMA pages from free page?\nWhat you want is to be conservative?",
      "range": {
        "startLine": 1924,
        "startChar": 52,
        "endLine": 1924,
        "endChar": 73
      },
      "revId": "338b663ba961099e730079df4e7129c0e4bbd58b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b72eeb7d_f51d48c6",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 5
      },
      "lineNbr": 1924,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-08-30T16:38:49Z",
      "side": 1,
      "message": "Yes, I have no way of knowing what kind of allocation will come next and want to be on more conservative side. If you think another approach makes more sense please chime in, I\u0027m open to suggestions.",
      "parentUuid": "3c63a62a_a0de2804",
      "range": {
        "startLine": 1924,
        "startChar": 52,
        "endLine": 1924,
        "endChar": 73
      },
      "revId": "338b663ba961099e730079df4e7129c0e4bbd58b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f348230f_7292f31e",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 5
      },
      "lineNbr": 1924,
      "author": {
        "id": 1275554
      },
      "writtenOn": "2019-09-04T17:26:58Z",
      "side": 1,
      "message": "It\u0027s a fundamental issue with userspace memory manager so I don\u0027t have any idea, either. :)\n\nI think primary allocation workload in the system will be movable allocation so generally, we are okay without cma_free consideration. With that approach, the concern is LMKD will not kill apps when there are enough CMA free pages but the allocation is non-movable allocation(e.g., ION) so it could make slow start up like CAMERA. Otherwise, if we always substract CMA free from freeable memory, it will kill more apps unnecessary. It wouldn\u0027t be a problem with vendor who uses QC kernel because QC modified allocation path in the MM of the kernel so CMA allocation will happen first than any other movable zones so CMA free is very low usually. However, vanilla kernel will not use CMA area until the other area in zone is full so they will see more kill.\n\nI don\u0027t like to introduce a new knob but I imagine it\u0027s candidate of new knob.\nWhat do you think?",
      "parentUuid": "b72eeb7d_f51d48c6",
      "range": {
        "startLine": 1924,
        "startChar": 52,
        "endLine": 1924,
        "endChar": 73
      },
      "revId": "338b663ba961099e730079df4e7129c0e4bbd58b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2556d7c8_e08f1ea2",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 5
      },
      "lineNbr": 1924,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-09-04T17:50:57Z",
      "side": 1,
      "message": "I think it would be an issue for in-kernel lmk as well unless we are in direct reclaim and know what kind of allocation we are trying to fulfill.\n\nI would like to avoid yet another configurable. Let\u0027s add it when we see it causes actual problems. Agree?",
      "parentUuid": "f348230f_7292f31e",
      "range": {
        "startLine": 1924,
        "startChar": 52,
        "endLine": 1924,
        "endChar": 73
      },
      "revId": "338b663ba961099e730079df4e7129c0e4bbd58b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e0fca6e_bfdf234d",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 5
      },
      "lineNbr": 1924,
      "author": {
        "id": 1275554
      },
      "writtenOn": "2019-09-04T18:11:22Z",
      "side": 1,
      "message": "The allocation constraint is passed to kswapd as well as direct reclaim so it\u0027s not issue in the kernel side.\nI\u0027m okay if you want to add it when we see the problem. Up to you. :)\nI wanted to notice it could make different behavior between QC-based kernel vs. vanilla kernel depending on how CMA works.",
      "parentUuid": "2556d7c8_e08f1ea2",
      "range": {
        "startLine": 1924,
        "startChar": 52,
        "endLine": 1924,
        "endChar": 73
      },
      "revId": "338b663ba961099e730079df4e7129c0e4bbd58b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0d665bc_94935769",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 5
      },
      "lineNbr": 2063,
      "author": {
        "id": 1275554
      },
      "writtenOn": "2019-08-30T14:47:06Z",
      "side": 1,
      "message": "I understand you want to catch up the min_free_kbytes and friends change under us.\nHowever, it\u0027s not nice to monitor the change periodically.\ndumb questions: Can\u0027t we poll some proc files related to watermark?",
      "range": {
        "startLine": 2063,
        "startChar": 38,
        "endLine": 2063,
        "endChar": 94
      },
      "revId": "338b663ba961099e730079df4e7129c0e4bbd58b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2210563_4210ed29",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 5
      },
      "lineNbr": 2063,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-08-30T16:38:49Z",
      "side": 1,
      "message": "Unfortunately no, I tried. Polling on most of the proc files including zoneinfo and friends is not supported.\n\nWe can isolate this update logic and change it so that lmkd gets notified by the system software when these vm paramaters are modified, but for now I wanted this to be as simple as possible and new strategy to be localized in one function.",
      "parentUuid": "a0d665bc_94935769",
      "range": {
        "startLine": 2063,
        "startChar": 38,
        "endLine": 2063,
        "endChar": 94
      },
      "revId": "338b663ba961099e730079df4e7129c0e4bbd58b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "143e8ff0_b809fb50",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 5
      },
      "lineNbr": 2063,
      "author": {
        "id": 1275554
      },
      "writtenOn": "2019-09-04T17:26:58Z",
      "side": 1,
      "message": "Thanks for the trial, Suren.\nSince we don\u0027t have nice idea yet, okay, let\u0027s leave some comment about our TODO and proceed.",
      "parentUuid": "d2210563_4210ed29",
      "range": {
        "startLine": 2063,
        "startChar": 38,
        "endLine": 2063,
        "endChar": 94
      },
      "revId": "338b663ba961099e730079df4e7129c0e4bbd58b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a89f1f4_c6b5f844",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 5
      },
      "lineNbr": 2063,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-09-04T17:50:57Z",
      "side": 1,
      "message": "Will add a TODO comment.",
      "parentUuid": "143e8ff0_b809fb50",
      "range": {
        "startLine": 2063,
        "startChar": 38,
        "endLine": 2063,
        "endChar": 94
      },
      "revId": "338b663ba961099e730079df4e7129c0e4bbd58b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76efdc71_77132592",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 5
      },
      "lineNbr": 2067,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2019-09-04T18:00:35Z",
      "side": 1,
      "message": "Failing to parse should be a fatal error. It indicates something very wrong with the system. Trying to continue will just mask errors that really ought to be fixed immediately.",
      "range": {
        "startLine": 2067,
        "startChar": 31,
        "endLine": 2067,
        "endChar": 38
      },
      "revId": "338b663ba961099e730079df4e7129c0e4bbd58b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eff730ae_04fcac6b",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 5
      },
      "lineNbr": 2067,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-09-04T18:29:39Z",
      "side": 1,
      "message": "I haven\u0027t see yet a case when we fail to read and parse zoneinfo, so not sure what\u0027s the best way to handle such a case. Thought if it\u0027s some temporary error we would just log it and wait for the next update cycle to try reading it again.",
      "parentUuid": "76efdc71_77132592",
      "range": {
        "startLine": 2067,
        "startChar": 31,
        "endLine": 2067,
        "endChar": 38
      },
      "revId": "338b663ba961099e730079df4e7129c0e4bbd58b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ddf08b9_0c068ac4",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 5
      },
      "lineNbr": 2067,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2019-09-04T18:37:45Z",
      "side": 1,
      "message": "If you\u0027ve never seen a zoneinfo parse failure, what are you worried about? It\u0027s better to fail fast in unexpected situations than try to muddle onward into some untested and unknown state.",
      "parentUuid": "eff730ae_04fcac6b",
      "range": {
        "startLine": 2067,
        "startChar": 31,
        "endLine": 2067,
        "endChar": 38
      },
      "revId": "338b663ba961099e730079df4e7129c0e4bbd58b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}