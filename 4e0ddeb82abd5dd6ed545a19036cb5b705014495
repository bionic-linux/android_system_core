{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5017d1cd_d8fac488",
        "filename": "trusty/storage/proxy/storage.c",
        "patchSetId": 2
      },
      "lineNbr": 339,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2021-12-14T23:53:05Z",
      "side": 1,
      "message": "This is only used if we actually created the file. Since this happens one per per factory reset, would it be simpler to just fsync the parent directory immediately in that case instead of waiting? Also if the parent path is a symlink, does this open call follow the link to get to the actual directory, or does it open the symlink itself?",
      "revId": "4e0ddeb82abd5dd6ed545a19036cb5b705014495",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25fc7ffa_00c36e71",
        "filename": "trusty/storage/proxy/storage.c",
        "patchSetId": 2
      },
      "lineNbr": 339,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-12-15T00:12:59Z",
      "side": 1,
      "message": "open(2) on linux opens the actual directory afaik (O_NOFOLLOW would cause the open to fail, the symlink itself can\u0027t be opened).\n\nI\u0027d much prefer we remove the complexity around syncind directories and immediately sync when creating or removing a file so the directory metadata is always synced. If you\u0027re ok with that I\u0027ll redo this with the simplified implementation and remove ssdir_fd.",
      "parentUuid": "5017d1cd_d8fac488",
      "revId": "4e0ddeb82abd5dd6ed545a19036cb5b705014495",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5371bd18_ab0e4a3c",
        "filename": "trusty/storage/proxy/storage.c",
        "patchSetId": 2
      },
      "lineNbr": 339,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2021-12-15T00:19:20Z",
      "side": 1,
      "message": "Yes. I\u0027m OK with a simpler version. This code predates the current fs design and was written to support a secure storage implementation where every file that a trusty app created, would create a file here as well. In that case the extra sync operations could have happened in typical use cases, so we tried to avoid unnecessary io.",
      "parentUuid": "25fc7ffa_00c36e71",
      "revId": "4e0ddeb82abd5dd6ed545a19036cb5b705014495",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7336e59a_8b0599d1",
        "filename": "trusty/storage/proxy/storage.c",
        "patchSetId": 2
      },
      "lineNbr": 583,
      "author": {
        "id": 1000205
      },
      "writtenOn": "2021-12-14T23:53:05Z",
      "side": 1,
      "message": "Or we could do a full sync of all filesystems. We should not actually hit this code path under normal conditions as the table size should be large enough to hold all our files",
      "revId": "4e0ddeb82abd5dd6ed545a19036cb5b705014495",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}