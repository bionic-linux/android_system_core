{
  "comments": [
    {
      "key": {
        "uuid": "fe90b1de_c40f9f4f",
        "filename": "adb/tls/adb_ca_list.cpp",
        "patchSetId": 24
      },
      "lineNbr": 41,
      "author": {
        "id": 1031048
      },
      "writtenOn": "2020-02-15T00:33:28Z",
      "side": 1,
      "message": "https://boringssl-review.googlesource.com/c/boringssl/+/39764 is the CL to fix it (though it looks like it slipped through and hasn\u0027t landed yet). Maybe add a link to it so we know what to look for.",
      "revId": "4293e322f27cdef47f9cf629990d361974e9e1b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10252cd3_7af063af",
        "filename": "adb/tls/adb_ca_list.cpp",
        "patchSetId": 24
      },
      "lineNbr": 58,
      "author": {
        "id": 1031048
      },
      "writtenOn": "2020-02-15T00:33:28Z",
      "side": 1,
      "message": "Optional: I usually see return std::nullopt (well, base::nullopt) in Chromium, but ignore me if {} is the prevailing Android style. Ditto throughout.",
      "revId": "4293e322f27cdef47f9cf629990d361974e9e1b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d5c2589_a38cc648",
        "filename": "adb/tls/adb_ca_list.cpp",
        "patchSetId": 24
      },
      "lineNbr": 64,
      "author": {
        "id": 1031048
      },
      "writtenOn": "2020-02-15T00:33:28Z",
      "side": 1,
      "message": "I like how you have two levels of implicit conversions going on. :-)",
      "revId": "4293e322f27cdef47f9cf629990d361974e9e1b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc1d3b0e_d214fb54",
        "filename": "adb/tls/adb_ca_list.cpp",
        "patchSetId": 24
      },
      "lineNbr": 94,
      "author": {
        "id": 1031048
      },
      "writtenOn": "2020-02-15T00:33:28Z",
      "side": 1,
      "message": "Doesn\u0027t this mean you don\u0027t actually have versions? If you add AdbKey-1, this code will still expect it to have the same syntax as AdbKey-0.\n\nI was envisioning you\u0027d just have AdbKey-0 as a token somewhere and, if you add a new scheme, that\u0027ll be AdbKey-1 which this code ignores and new code can recognize both. That then saves you from pulling in std::to_string and reassembly identifiers.",
      "range": {
        "startLine": 94,
        "startChar": 16,
        "endLine": 94,
        "endChar": 73
      },
      "revId": "4293e322f27cdef47f9cf629990d361974e9e1b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17e7a181_eb9dcad0",
        "filename": "adb/tls/adb_ca_list.cpp",
        "patchSetId": 24
      },
      "lineNbr": 107,
      "author": {
        "id": 1031048
      },
      "writtenOn": "2020-02-15T00:33:28Z",
      "side": 1,
      "message": "Optional: So, sha256[i] is a char, which is usually a signed char (aaargh). Then you\u0027re taking 0x00ff \u0026 it. 0xff is an unsigned int. Integer promotion rules I believe then turn sha256[i] into an unsigned int which, since it\u0027s negative, sign-extends. Then you eat away the sign extension via the bitwise AND.\n\nThat works and all, but I do wonder whether static_cast\u003cuint8_t\u003e(sha256[i]) would have been clearer. :-)",
      "range": {
        "startLine": 107,
        "startChar": 30,
        "endLine": 107,
        "endChar": 50
      },
      "revId": "4293e322f27cdef47f9cf629990d361974e9e1b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1b6403a_9781b63e",
        "filename": "adb/tls/include/adb/tls/tls_connection.h",
        "patchSetId": 24
      },
      "lineNbr": 59,
      "author": {
        "id": 1031048
      },
      "writtenOn": "2020-02-15T00:33:28Z",
      "side": 1,
      "message": "Looks like EnableCertificateVerification is gone now. Probably needs to be updated now that it\u0027s the callback.",
      "range": {
        "startLine": 59,
        "startChar": 8,
        "endLine": 59,
        "endChar": 37
      },
      "revId": "4293e322f27cdef47f9cf629990d361974e9e1b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e2691ba_46132b4d",
        "filename": "adb/tls/tests/tls_connection_test.cpp",
        "patchSetId": 24
      },
      "lineNbr": 207,
      "author": {
        "id": 1031048
      },
      "writtenOn": "2020-02-15T00:33:28Z",
      "side": 1,
      "message": "Optional: if you remove the failing comma, I think clang-format will smash it into one line.",
      "range": {
        "startLine": 207,
        "startChar": 27,
        "endLine": 207,
        "endChar": 29
      },
      "revId": "4293e322f27cdef47f9cf629990d361974e9e1b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4272eaf_6690019d",
        "filename": "adb/tls/tests/tls_connection_test.cpp",
        "patchSetId": 24
      },
      "lineNbr": 228,
      "author": {
        "id": 1031048
      },
      "writtenOn": "2020-02-15T00:33:28Z",
      "side": 1,
      "message": "Looks like you\u0027ve done this?",
      "revId": "4293e322f27cdef47f9cf629990d361974e9e1b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "732a63ad_f1309143",
        "filename": "adb/tls/tests/tls_connection_test.cpp",
        "patchSetId": 24
      },
      "lineNbr": 341,
      "author": {
        "id": 1031048
      },
      "writtenOn": "2020-02-15T00:33:28Z",
      "side": 1,
      "message": "You\u0027re expecting I believe TlsError::PeerRejectedCertificate, right? May as well assert on that to also test error handling.\n\nDitto throughout.",
      "revId": "4293e322f27cdef47f9cf629990d361974e9e1b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ab0ec9b_c8e83791",
        "filename": "adb/tls/tests/tls_connection_test.cpp",
        "patchSetId": 24
      },
      "lineNbr": 442,
      "author": {
        "id": 1031048
      },
      "writtenOn": "2020-02-15T00:33:28Z",
      "side": 1,
      "message": "What if, rather than StartClientHandshakeAsync taking a boolean, it took an expected TlsError. Then you don\u0027t need to break abstraction here and better test the error mapping.",
      "revId": "4293e322f27cdef47f9cf629990d361974e9e1b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a569635f_78121645",
        "filename": "adb/tls/tls_connection.cpp",
        "patchSetId": 24
      },
      "lineNbr": 86,
      "author": {
        "id": 1031048
      },
      "writtenOn": "2020-02-15T00:33:28Z",
      "side": 1,
      "message": "These can fail if the inputs are invalid, but it doesn\u0027t look like you check anywhere.\n\nYou could make DoHandshake check and return an error, or add some CHECK failures here if you\u0027re okay crashing.",
      "revId": "4293e322f27cdef47f9cf629990d361974e9e1b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b259632e_69e725b6",
        "filename": "adb/tls/tls_connection.cpp",
        "patchSetId": 24
      },
      "lineNbr": 208,
      "author": {
        "id": 1031048
      },
      "writtenOn": "2020-02-15T00:33:28Z",
      "side": 1,
      "message": "This isn\u0027t used until way down in line 265. Move it down there?",
      "revId": "4293e322f27cdef47f9cf629990d361974e9e1b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dce14ba7_69335fd9",
        "filename": "adb/tls/tls_connection.cpp",
        "patchSetId": 24
      },
      "lineNbr": 273,
      "author": {
        "id": 1031048
      },
      "writtenOn": "2020-02-15T00:33:28Z",
      "side": 1,
      "message": "Optional: you can avoid the err thing by doing:\n\n  switch (role_) {\n    case Role::Server:\n      SSL_set_accept_state(ssl_.get());\n      break;\n    case Role::Client:\n      SSL_set_connect_state(ssl_.get());\n      break;\n  }\n  if (SSL_do_handshake(ssl_.get()) !\u003d 1) {\n    // ...\n  }",
      "revId": "4293e322f27cdef47f9cf629990d361974e9e1b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d43bc2c6_e2f89c64",
        "filename": "adb/tls/tls_connection.cpp",
        "patchSetId": 24
      },
      "lineNbr": 285,
      "author": {
        "id": 1031048
      },
      "writtenOn": "2020-02-15T00:33:28Z",
      "side": 1,
      "message": "Optional: you can avoid the err thing by doing:\n\n  if (SSL_peek(...) \u003c\u003d 0) {\n    ...\n  }",
      "revId": "4293e322f27cdef47f9cf629990d361974e9e1b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}