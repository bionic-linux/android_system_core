{
  "comments": [
    {
      "key": {
        "uuid": "63dba606_f0ee202d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 33,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2013-11-26T15:31:59Z",
      "side": 1,
      "message": "I found this wording a bit confusing. Are you trying to say that iterating over the entries just to look at their metadata isn\u0027t as efficient as it could be?",
      "revId": "efb6b9041f56c882c327dd57c7761f59c6b881a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3a0765c_9c7825db",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 33,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2013-11-26T17:52:18Z",
      "side": 1,
      "message": "I\u0027m just saying we\u0027re optimizing for the case where we intend to access the data of every entry. In particular, we do additional work to find the \"real\" offset where the data starts, not just the offset of the local file header.\n\nIt\u0027s pretty straightforward to support fast iteration without data retrieval, all we need is another knob in the API (const bool find_data_offset passed in to the FindEntry and Iterate methods)",
      "parentUuid": "63dba606_f0ee202d",
      "revId": "efb6b9041f56c882c327dd57c7761f59c6b881a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43e062af_0f01451c",
        "filename": "libziparchive/zip_archive.h",
        "patchSetId": 8
      },
      "lineNbr": 166,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2013-11-26T15:31:59Z",
      "side": 1,
      "message": "art wants to extract to memory, so needs an alternative to this that takes a pointer to memory and a length. I think its worth having the redundant length to make sure it matches the ZipEntry uncompressed size.\n\nalso, all logging internally should be return as error messages instead (and we sure make sure that all error returns set an error message). It seems like the allocation for the error can be on the ZipArchiveHandle and deleted on CloseArchive. alternatively you can provide a function to map from unique negative error codes to error strings.",
      "revId": "efb6b9041f56c882c327dd57c7761f59c6b881a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3a0765c_bc75e1e3",
        "filename": "libziparchive/zip_archive.h",
        "patchSetId": 8
      },
      "lineNbr": 166,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2013-11-26T17:52:18Z",
      "side": 1,
      "message": "My plan is to have a unique negative error code for each failure type and provide a function to map them to error strings.",
      "parentUuid": "43e062af_0f01451c",
      "revId": "efb6b9041f56c882c327dd57c7761f59c6b881a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43e062af_2f068935",
        "filename": "libziparchive/zip_archive_test.cc",
        "patchSetId": 8
      },
      "lineNbr": 22,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2013-11-26T15:31:59Z",
      "side": 1,
      "message": "we need some negative test cases for prior issues.",
      "revId": "efb6b9041f56c882c327dd57c7761f59c6b881a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e37956b6_14be344b",
        "filename": "libziparchive/zip_archive_test.cc",
        "patchSetId": 8
      },
      "lineNbr": 22,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2013-11-26T17:52:18Z",
      "side": 1,
      "message": "Oh most certainly. I need some time to come up with them though, I won\u0027t submit this change before that\u0027s done. I wanted a preliminary review of the code before I get down to that.",
      "parentUuid": "43e062af_2f068935",
      "revId": "efb6b9041f56c882c327dd57c7761f59c6b881a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}