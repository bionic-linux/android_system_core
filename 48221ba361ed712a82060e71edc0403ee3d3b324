{
  "comments": [
    {
      "key": {
        "uuid": "efac0943_b433ef2c",
        "filename": "logd/LogBuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 178,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-02-15T19:18:20Z",
      "side": 1,
      "message": "android::strnstr only returns if lenl \u003e strlen(avc) by design.\n\nThere has to be a better way to tell clang SANITIZE it\u0027s error is wrong (if it demanded for lenl \u003e strlen(avc) below). Sadly it can not just peek into LogKlog.cpp to find that out, is there a way we can tell the checker that this function has this side-effect?\n\nRegardless (if we can, or cannot), we should add a comment above line 178 to state that this is a side-effect of this call.",
      "range": {
        "startLine": 178,
        "startChar": 23,
        "endLine": 178,
        "endChar": 57
      },
      "revId": "48221ba361ed712a82060e71edc0403ee3d3b324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee78d0b3_4b375dcc",
        "filename": "logd/LogBuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 178,
      "author": {
        "id": 1137865
      },
      "writtenOn": "2017-02-15T23:19:48Z",
      "side": 1,
      "message": "Sorry, I don\u0027t quite get your point. asan warned us that fastcmp\u003cmemcmp\u003e ventured beyond the buffer, which happened because lenl/lenr were not adjusted enough in the next block. \nasan does not have any problem with this line of code.",
      "parentUuid": "efac0943_b433ef2c",
      "range": {
        "startLine": 178,
        "startChar": 23,
        "endLine": 178,
        "endChar": 57
      },
      "revId": "48221ba361ed712a82060e71edc0403ee3d3b324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e9db3490_83755f9a",
        "filename": "logd/LogBuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 185,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-02-15T19:18:20Z",
      "side": 1,
      "message": "This just dropped, in a small way, a hot path efficiency we fought hard for in the heat of battle. fastcmp\u003cmemcmp\u003e is a FAST version of comparison that helped us save precious background cgroup cycles and was part of the list of changes we had to do to allow bullhead to be functional and android::strnstr was recognized for its side-effects.\n\nstrlen(avc) reduces to sizeof(avc) - 1 in the optimizer, which is our only saving grace.",
      "range": {
        "startLine": 185,
        "startChar": 8,
        "endLine": 185,
        "endChar": 29
      },
      "revId": "48221ba361ed712a82060e71edc0403ee3d3b324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c8ddc68d_5812256a",
        "filename": "logd/LogBuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 185,
      "author": {
        "id": 1137865
      },
      "writtenOn": "2017-02-15T23:19:48Z",
      "side": 1,
      "message": "I added this check to do not crash when msgl/msgr ends with \"...): avc: \". Arguably, the possibility is slim, but we should not crash anyway, right?",
      "parentUuid": "e9db3490_83755f9a",
      "range": {
        "startLine": 185,
        "startChar": 8,
        "endLine": 185,
        "endChar": 29
      },
      "revId": "48221ba361ed712a82060e71edc0403ee3d3b324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27fae01e_20e435be",
        "filename": "logd/LogBuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 185,
      "author": {
        "id": 1137865
      },
      "writtenOn": "2017-02-16T17:31:06Z",
      "side": 1,
      "message": "If the performace is a concern, this is pretty much comparing a register with a constant (plus, there\u0027s \"lenl - strlen(avc)\" in the following expression and compiler might use the result here anyway), do you think it is going to have a noticeable effect? But again, we have to do something to prevent out of buffer access.",
      "parentUuid": "c8ddc68d_5812256a",
      "range": {
        "startLine": 185,
        "startChar": 8,
        "endLine": 185,
        "endChar": 29
      },
      "revId": "48221ba361ed712a82060e71edc0403ee3d3b324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5e81031e_dae3b030",
        "filename": "logd/LogBuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 185,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-02-16T21:12:47Z",
      "side": 1,
      "message": "When it comes to performance, you just do -not_ perform superfluous checks. This is already checked in strnstr above. This path was hot enough that shaving off a branch could be measured.\n\nMy concern is that the SANITIZER complains that you do not check if lenl \u003e strlen(avc).\n\nNB: fastcmp\u003cmemcmp\u003e is _not_ the same as memcmp behavior.",
      "parentUuid": "27fae01e_20e435be",
      "range": {
        "startLine": 185,
        "startChar": 8,
        "endLine": 185,
        "endChar": 29
      },
      "revId": "48221ba361ed712a82060e71edc0403ee3d3b324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e362439_29cb4d6a",
        "filename": "logd/LogBuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 185,
      "author": {
        "id": 1137865
      },
      "writtenOn": "2017-02-16T21:50:49Z",
      "side": 1,
      "message": "I did look at fastcmp\u003cmemcmp\u003e implementation and I\u0027m aware of the difference. Your concern is unfounded, SANITIZER does not complain on the absence of checks, it complains on access beyond the buffer boundaries (which is fixed by adjusting lenl for fastcmp\u003c\u003e call).\n\nWhat is checked in strnstr? Ok, imagine the simplest case possible, msgl and msgr happened to be \"): avc: \", exactly equal to avc. What is going to happen? avcl \u003d\u003d msgl, lenl \u003d\u003d strlen(avc), right? Now we\u0027re calling fastcmp\u003cmemcmp\u003e(avcl + strlen(avc), avcr + strlen(avc), 0);, and fastcmp access beyond buffer again. That\u0027s the simplest example of the repro case I mentioned earlier, but any msg string ending with \"): avc: \" will lead to the same problem.",
      "parentUuid": "5e81031e_dae3b030",
      "range": {
        "startLine": 185,
        "startChar": 8,
        "endLine": 185,
        "endChar": 29
      },
      "revId": "48221ba361ed712a82060e71edc0403ee3d3b324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7cfdb87b_58bc218b",
        "filename": "logd/LogBuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 185,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-02-16T23:09:37Z",
      "side": 1,
      "message": "strnstr _only_ returns if lenl \u003e strlen(avc) so 0 can not happen.",
      "parentUuid": "4e362439_29cb4d6a",
      "range": {
        "startLine": 185,
        "startChar": 8,
        "endLine": 185,
        "endChar": 29
      },
      "revId": "48221ba361ed712a82060e71edc0403ee3d3b324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6352492a_9316c84a",
        "filename": "logd/LogBuffer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 188,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-02-15T19:18:20Z",
      "side": 1,
      "message": "Now here is the bona-fide bugfix, Thanks!",
      "range": {
        "startLine": 188,
        "startChar": 24,
        "endLine": 188,
        "endChar": 42
      },
      "revId": "48221ba361ed712a82060e71edc0403ee3d3b324",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}