{
  "comments": [
    {
      "key": {
        "uuid": "c5c37fc9_ea712323",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-04-29T18:33:23Z",
      "side": 1,
      "message": "...because...",
      "revId": "71c322a3ee146d72802642c17a473363f9ce8efd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05caf7dd_2f3ea949",
        "filename": "libbacktrace/BacktraceThread.cpp",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-04-29T18:33:23Z",
      "side": 1,
      "message": "in a header file?\n\nalso, we use SIGRTMIN for our POSIX timers. the timer thread takes a non-timer SIGRTMIN to mean \"please exit\".\n\nlibcore uses (SIGRTMIN + 2). so (SIGRTMIN + 1)?\n\n(i\u0027m starting to wish we had some kind of central registry to claim free RT signals from...)",
      "revId": "71c322a3ee146d72802642c17a473363f9ce8efd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5c37fc9_8e96bc68",
        "filename": "libbacktrace/BacktraceThread.cpp",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2014-04-30T04:39:23Z",
      "side": 1,
      "message": "I moved this to BacktraceThread.h and I\u0027m using SIGRTMIN+1. However, as I understand these signals, it is recommended that SIGRTMIN be redefined to be the first unused real time signal. The man pages say that two or three are being used by glibc so the value has been modified there. It would seem we should at least resereve that first one and bump up SIGRTMIN by one. If the others are fundamental to the system, it would seem a good idea to reserve them too and bump RTMIN by three.",
      "parentUuid": "05caf7dd_2f3ea949",
      "revId": "71c322a3ee146d72802642c17a473363f9ce8efd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ae7d493_c25fc29d",
        "filename": "libbacktrace/BacktraceThread.cpp",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-04-30T16:18:36Z",
      "side": 1,
      "message": "huh. i did not know that. you\u0027re right:\n\nprinting the constants:\n\n  SIGRTMIN\u003d34 (__SIGRTMIN\u003d32) SIGRTMAX\u003d64 (__SIGRTMAX\u003d64)\n\nand there\u0027s a gap in kill -l\u0027s list:\n\n  ~$ kill -l\n  31) SIGSYS\t34) SIGRTMIN\t35) SIGRTMIN+1\t36) SIGRTMIN+2\t37) SIGRTMIN+3\n\n(i checked and kill will let you send signals 32 and 33. they\u0027re just not in the list.)\n\nso how about you take (__SIGRTMIN + 0), posix timers take (__SIGRTMIN + 1), libcore takes (__SIGRTMIN + 2), and we hide them behind a function like glibc does so we can take more in future if we need to. i\u0027ll document who\u0027s got who in the function implementation.\n\nif this is blocking something feel free to submit now. we\u0027ll have to switch libcore to __SIGRTMIN anyway.",
      "parentUuid": "c5c37fc9_8e96bc68",
      "revId": "71c322a3ee146d72802642c17a473363f9ce8efd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4af15c4f_a035da63",
        "filename": "libbacktrace/BacktraceThread.cpp",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-04-30T16:23:27Z",
      "side": 1,
      "message": "looks like strsignal needs to change too:\n\n  strsignal(31)\u003d\"Bad system call\"\n  strsignal(32)\u003d\"Unknown signal 32\"\n  strsignal(33)\u003d\"Unknown signal 33\"\n  strsignal(34)\u003d\"Real-time signal 0\"",
      "parentUuid": "8ae7d493_c25fc29d",
      "revId": "71c322a3ee146d72802642c17a473363f9ce8efd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4af15c4f_89ee8169",
        "filename": "libbacktrace/BacktraceThread.cpp",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2014-04-30T18:22:04Z",
      "side": 1,
      "message": "Not blocking anything, and the reservation seems good to me.\n\nAnd following glibc\u0027s pattern of a function to get the min and max seem good.",
      "parentUuid": "4af15c4f_a035da63",
      "revId": "71c322a3ee146d72802642c17a473363f9ce8efd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}