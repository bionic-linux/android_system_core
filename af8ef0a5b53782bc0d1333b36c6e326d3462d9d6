{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fd9c2bab_62a21c6a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2021-12-29T00:43:28Z",
      "side": 1,
      "message": "Thanks David.\n\nSteven and Elliott, I need your vote for ErrorsMacros.h where David is not an owner of.",
      "revId": "af8ef0a5b53782bc0d1333b36c6e326d3462d9d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be52d93d_79160b85",
        "filename": "libutils/include/utils/ErrorsMacros.h",
        "patchSetId": 7
      },
      "lineNbr": 59,
      "author": {
        "id": 1574221
      },
      "writtenOn": "2021-12-22T20:10:44Z",
      "side": 1,
      "message": "If I understand correctly, for base::expected, Unwrap() asserts that the result is OK and extracts the value. It seems inconsistent for Unwrap operating over a pure error code to return the error code itself.\n\nWhat is the meaning of Unwrapping an error value? Do we actually need this contract for pure error values? If so, would it make more sense for consistency\u0027s sake to return void in that case?",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 59,
        "endChar": 42
      },
      "revId": "af8ef0a5b53782bc0d1333b36c6e326d3462d9d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6107efd9_ecb63cc3",
        "filename": "libutils/include/utils/ErrorsMacros.h",
        "patchSetId": 7
      },
      "lineNbr": 59,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2021-12-27T05:05:13Z",
      "side": 1,
      "message": "For status_t, unwrapping doesn\u0027t do anything interesting because it can carry both a success value and failure values. But other types like Result definitely need this. The existence of Unwrap is needed just to satisfy the contract with the macros.",
      "parentUuid": "be52d93d_79160b85",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 59,
        "endChar": 42
      },
      "revId": "af8ef0a5b53782bc0d1333b36c6e326d3462d9d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e863506e_3c087309",
        "filename": "libutils/include/utils/ErrorsMacros.h",
        "patchSetId": 7
      },
      "lineNbr": 59,
      "author": {
        "id": 1574221
      },
      "writtenOn": "2021-12-29T18:07:20Z",
      "side": 1,
      "message": "But why return the error and not void in this case? Isn\u0027t this inconsistent?",
      "parentUuid": "6107efd9_ecb63cc3",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 59,
        "endChar": 42
      },
      "revId": "af8ef0a5b53782bc0d1333b36c6e326d3462d9d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a5adc66e_138dc65c",
        "filename": "libutils/include/utils/ErrorsMacros.h",
        "patchSetId": 7
      },
      "lineNbr": 59,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2021-12-31T02:05:39Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "e863506e_3c087309",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 59,
        "endChar": 42
      },
      "revId": "af8ef0a5b53782bc0d1333b36c6e326d3462d9d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5344ac46_2b1a6b54",
        "filename": "libutils/include/utils/ErrorsMacros.h",
        "patchSetId": 7
      },
      "lineNbr": 73,
      "author": {
        "id": 1574221
      },
      "writtenOn": "2021-12-29T20:49:37Z",
      "side": 1,
      "message": "I could not get this to work with OR_RETURN(Result\u003cT, StatusT\u003e) in a function returning status_t.",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 73,
        "endChar": 1
      },
      "revId": "af8ef0a5b53782bc0d1333b36c6e326d3462d9d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b123900c_71015e56",
        "filename": "libutils/include/utils/ErrorsMacros.h",
        "patchSetId": 7
      },
      "lineNbr": 73,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2021-12-31T02:05:39Z",
      "side": 1,
      "message": "This is fixed in the new patchset and I\u0027ve added a test for it.",
      "parentUuid": "5344ac46_2b1a6b54",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 73,
        "endChar": 1
      },
      "revId": "af8ef0a5b53782bc0d1333b36c6e326d3462d9d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79621bd1_7dadf6a4",
        "filename": "libutils/include/utils/ErrorsMacros.h",
        "patchSetId": 7
      },
      "lineNbr": 73,
      "author": {
        "id": 1574221
      },
      "writtenOn": "2022-01-04T21:03:02Z",
      "side": 1,
      "message": "Did you forget to upload the new PS?",
      "parentUuid": "b123900c_71015e56",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 73,
        "endChar": 1
      },
      "revId": "af8ef0a5b53782bc0d1333b36c6e326d3462d9d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8903588e_9e640ceb",
        "filename": "libutils/include/utils/ErrorsMacros.h",
        "patchSetId": 7
      },
      "lineNbr": 78,
      "author": {
        "id": 1574221
      },
      "writtenOn": "2021-12-29T19:14:35Z",
      "side": 1,
      "message": "Isn\u0027t this forcing me to use Result? One of the explicit requirements was that I can use the macros with any base::expected, for example, base::expected\u003cT, status_t\u003e.\nWhat I don\u0027t like about Result is that it is opinionated about the error type (specifically, that it carries a string, instead of the \"error code with string\" being just one possible type that can be used),",
      "range": {
        "startLine": 78,
        "startChar": 13,
        "endLine": 78,
        "endChar": 19
      },
      "revId": "af8ef0a5b53782bc0d1333b36c6e326d3462d9d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98e3705a_00296dfb",
        "filename": "libutils/include/utils/ErrorsMacros.h",
        "patchSetId": 7
      },
      "lineNbr": 78,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2021-12-31T02:05:39Z",
      "side": 1,
      "message": "android::base::expected is NOT expected to be used outside of libbase from the beginning. If you want a Result that does not carry a string, we could make a specialization of ResultError for StatusT (possibly in a follow-up change).",
      "parentUuid": "8903588e_9e640ceb",
      "range": {
        "startLine": 78,
        "startChar": 13,
        "endLine": 78,
        "endChar": 19
      },
      "revId": "af8ef0a5b53782bc0d1333b36c6e326d3462d9d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f080aa70_91098a8c",
        "filename": "libutils/include/utils/ErrorsMacros.h",
        "patchSetId": 7
      },
      "lineNbr": 78,
      "author": {
        "id": 1574221
      },
      "writtenOn": "2022-01-04T21:03:02Z",
      "side": 1,
      "message": "\u003e android::base::expected is NOT expected to be used outside of libbase\nWhy is this the case? What\u0027s wrong with it (esp. given that it might become a standard C++ feature and is a well-understood feature in other languages such as Rust)?\nWhat is the benefit that Result adds other than adding a string to its error value?\n\n\u003e we could make a specialization of ResultError for StatusT\nWhy do you regard special-casing as a superior solution? And what if someone else does want \u003cstatus_t + string\u003e? I don\u0027t see any benefit in limiting the flexibility here.",
      "parentUuid": "98e3705a_00296dfb",
      "range": {
        "startLine": 78,
        "startChar": 13,
        "endLine": 78,
        "endChar": 19
      },
      "revId": "af8ef0a5b53782bc0d1333b36c6e326d3462d9d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}