{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c32d99ee_8f26c062",
        "filename": "fastboot/device/flashing.cpp",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2021-11-04T18:50:35Z",
      "side": 1,
      "message": "nit: move down to C++ include block below (or use string.h)",
      "revId": "d0c7919e32b5df2ae537e6299de93f857b77a12b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4de0872b_ed54de30",
        "filename": "fastboot/device/flashing.cpp",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1590141
      },
      "writtenOn": "2021-11-04T19:06:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c32d99ee_8f26c062",
      "revId": "d0c7919e32b5df2ae537e6299de93f857b77a12b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9958e3f0_9814dcf4",
        "filename": "fastboot/device/flashing.cpp",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-11-04T19:15:07Z",
      "side": 1,
      "message": "(in general you should always prefer the .h headers... my rule of thumb is that if you can\u0027t name _three_ differences between the .h and the \u003cc headers, and you don\u0027t _need_ one of those things, stick with the .h headers because everyone already knows what they do.)",
      "parentUuid": "4de0872b_ed54de30",
      "revId": "d0c7919e32b5df2ae537e6299de93f857b77a12b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "547e6660_62926fb6",
        "filename": "fastboot/device/flashing.cpp",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1590141
      },
      "writtenOn": "2021-11-04T20:25:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9958e3f0_9814dcf4",
      "revId": "d0c7919e32b5df2ae537e6299de93f857b77a12b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a34966aa_25c82e80",
        "filename": "fastboot/device/flashing.cpp",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 1869780
      },
      "writtenOn": "2021-11-04T18:38:59Z",
      "side": 1,
      "message": "From the man page: \"aligned_alloc(), memalign(), valloc(), and pvalloc() return a pointer  to  the  allocated memory on success.  On error, NULL is returned, and errno is set to indicate the cause of the error.\"\n\nShould \"if (posix_memalign(\" perhaps be changed into \"if (!posix_memalign(\"?\n\nAn additional comment: many C++ maintainers prefer that std::unique_ptr\u003c\u003e is used instead of explicit allocation and deallocation calls. An example:\n\nposix_memalign(\u0026aligned_buffer, 4096, max_write_size);\nauto aligned_buffer_unique_ptr \u003d std::unique_ptr\u003cvoid, decltype(\u0026free)\u003e{aligned_buffer, free};",
      "range": {
        "startLine": 84,
        "startChar": 8,
        "endLine": 84,
        "endChar": 22
      },
      "revId": "d0c7919e32b5df2ae537e6299de93f857b77a12b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bca8ad8_2d42e006",
        "filename": "fastboot/device/flashing.cpp",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2021-11-04T18:50:35Z",
      "side": 1,
      "message": "Thanks, using RAII here would definitely be preferable.",
      "parentUuid": "a34966aa_25c82e80",
      "range": {
        "startLine": 84,
        "startChar": 8,
        "endLine": 84,
        "endChar": 22
      },
      "revId": "d0c7919e32b5df2ae537e6299de93f857b77a12b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e63a6d8f_651c664c",
        "filename": "fastboot/device/flashing.cpp",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 1590141
      },
      "writtenOn": "2021-11-04T18:55:48Z",
      "side": 1,
      "message": "I do test my code Bart :)\n\nPer https://man7.org/linux/man-pages/man3/posix_memalign.3.html\nposix_memalign() returns zero on success, or one of the error\n       values listed in the next section on failure.  The value of errno\n       is not set.  On Linux (and other systems), posix_memalign() does\n       not modify memptr on failure.  A requirement standardizing this\n       behavior was added in POSIX.1-2008 TC2.",
      "parentUuid": "4bca8ad8_2d42e006",
      "range": {
        "startLine": 84,
        "startChar": 8,
        "endLine": 84,
        "endChar": 22
      },
      "revId": "d0c7919e32b5df2ae537e6299de93f857b77a12b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "efab7dc3_f7fbe08e",
        "filename": "fastboot/device/flashing.cpp",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 1590141
      },
      "writtenOn": "2021-11-04T19:06:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e63a6d8f_651c664c",
      "range": {
        "startLine": 84,
        "startChar": 8,
        "endLine": 84,
        "endChar": 22
      },
      "revId": "d0c7919e32b5df2ae537e6299de93f857b77a12b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}