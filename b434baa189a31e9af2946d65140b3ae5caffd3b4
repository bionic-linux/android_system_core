{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3445d4d0_4f50504d",
        "filename": "libprocessgroup/setup/cgroup_map_write.cpp",
        "patchSetId": 4
      },
      "lineNbr": 343,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2023-02-09T23:06:16Z",
      "side": 1,
      "message": "Maybe `ActivationResult::kNotMounted`? That\u0027s what really happening here, isn\u0027t it?",
      "range": {
        "startLine": 343,
        "startChar": 69,
        "endLine": 343,
        "endChar": 86
      },
      "revId": "b434baa189a31e9af2946d65140b3ae5caffd3b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dbd83441_60a62ec5",
        "filename": "libprocessgroup/setup/cgroup_map_write.cpp",
        "patchSetId": 4
      },
      "lineNbr": 343,
      "author": {
        "id": 1869780
      },
      "writtenOn": "2023-02-09T23:12:47Z",
      "side": 1,
      "message": "Failure of the mount() system call can have multiple causes. The mount() system call will fail if the cgroup controller has not been enabled in the kernel configuration. It will also fail if invalid flags have been specified or if another process would have removed the mountpoint after the Mkdir() call returned and before mount() is called. Do you perhaps want me to inspect errno and to translate errno into a status code?",
      "parentUuid": "3445d4d0_4f50504d",
      "range": {
        "startLine": 343,
        "startChar": 69,
        "endLine": 343,
        "endChar": 86
      },
      "revId": "b434baa189a31e9af2946d65140b3ae5caffd3b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "715881eb_28c215e2",
        "filename": "libprocessgroup/setup/cgroup_map_write.cpp",
        "patchSetId": 4
      },
      "lineNbr": 343,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2023-02-09T23:32:58Z",
      "side": 1,
      "message": "How about checking for controller to be optional here and returning just true/false in all these functions? IOW doing\n```\n    if (res \u003d\u003d 0) return true;\n\n    bool optional \u003d controller-\u003eflags() \u0026 CGROUPRC_CONTROLLER_FLAG_OPTIONAL;\n    if (optional) {\n        // Optional controllers are allowed to fail to mount if kernel does not support them\n        LOG(INFO) \u003c\u003c \"Optional \" \u003c\u003c controller-\u003ename() \u003c\u003c \" cgroup controller is not mounted\";\n        return true;\n    }\n    return false;\n```\nin here.\nI want to simplify the logic here.",
      "parentUuid": "dbd83441_60a62ec5",
      "range": {
        "startLine": 343,
        "startChar": 69,
        "endLine": 343,
        "endChar": 86
      },
      "revId": "b434baa189a31e9af2946d65140b3ae5caffd3b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d230c791_c2179f10",
        "filename": "libprocessgroup/setup/cgroup_map_write.cpp",
        "patchSetId": 4
      },
      "lineNbr": 343,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2023-02-09T23:40:39Z",
      "side": 1,
      "message": "In later patch I see ActivationResult::kNoSuchController being used again. So moving this check for optional controller and deciding whether it should be considered a success or failure can be placed in a separate function and reused.",
      "parentUuid": "715881eb_28c215e2",
      "range": {
        "startLine": 343,
        "startChar": 69,
        "endLine": 343,
        "endChar": 86
      },
      "revId": "b434baa189a31e9af2946d65140b3ae5caffd3b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "112bd0fd_f9720fdc",
        "filename": "libprocessgroup/setup/cgroup_map_write.cpp",
        "patchSetId": 4
      },
      "lineNbr": 343,
      "author": {
        "id": 1869780
      },
      "writtenOn": "2023-02-10T00:55:35Z",
      "side": 1,
      "message": "I think that would result in duplication of the loop in CgroupMap::ActivateControllers(). CgroupMap::ActivateControllers() would have to iterate over all controllers to activate them and the caller of that function would have to iterate a second time over all controllers to check whether any of these controllers are optional. Is that what you want me to do?",
      "parentUuid": "d230c791_c2179f10",
      "range": {
        "startLine": 343,
        "startChar": 69,
        "endLine": 343,
        "endChar": 86
      },
      "revId": "b434baa189a31e9af2946d65140b3ae5caffd3b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10499dce_cbfa6d31",
        "filename": "libprocessgroup/setup/cgroup_map_write.cpp",
        "patchSetId": 4
      },
      "lineNbr": 343,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2023-02-10T02:07:36Z",
      "side": 1,
      "message": "Something like this:\n```\nstatic bool IsOpionalController(const format::CgroupController* controller)\n{\n    return (controller-\u003eflags() \u0026 CGROUPRC_CONTROLLER_FLAG_OPTIONAL) !\u003d 0;\n}\n\nstatic bool MountV1CgroupController(const CgroupDescriptor\u0026 descriptor) {\n    ...\n    res \u003d mount(...)\n    if (res \u003d\u003d 0)\n        return true;\n\n    if (IsOpionalController(controller)) {\n        LOG(INFO) \u003c\u003c \"Optional \" \u003c\u003c controller-\u003ename() \u003c\u003c \" cgroup controller is not mounted\";\n        return true;\n    }\n    return false;\n}\n\nstatic bool ActivateV2CgroupController(const CgroupDescriptor\u0026 descriptor) {\n    const format::CgroupController* controller \u003d descriptor.controller();\n\n    if (!Mkdir(controller-\u003epath(), descriptor.mode(), descriptor.uid(), descriptor.gid())) {\n        LOG(ERROR) \u003c\u003c \"Failed to create directory for \" \u003c\u003c controller-\u003ename() \u003c\u003c \" cgroup\";\n        return false;\n    }\n\n    if (controller-\u003eflags() \u0026 CGROUPRC_CONTROLLER_FLAG_NEEDS_ACTIVATION) {\n        std::string str \u003d \"+\";\n        str +\u003d controller-\u003ename();\n        std::string path \u003d controller-\u003epath();\n        path +\u003d \"/cgroup.subtree_control\";\n\n        if (!base::WriteStringToFile(str, path)) {\n            if (!IsOpionalController(controller))\n                return false;\n            LOG(INFO) \u003c\u003c \"Failed to activate optional controller \" \u003c\u003c controller-\u003ename();\n        }\n    }\n\n    return true;\n}\n```",
      "parentUuid": "112bd0fd_f9720fdc",
      "range": {
        "startLine": 343,
        "startChar": 69,
        "endLine": 343,
        "endChar": 86
      },
      "revId": "b434baa189a31e9af2946d65140b3ae5caffd3b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "952a3ff1_d2cd8c1c",
        "filename": "libprocessgroup/setup/cgroup_map_write.cpp",
        "patchSetId": 4
      },
      "lineNbr": 343,
      "author": {
        "id": 1869780
      },
      "writtenOn": "2023-02-10T18:07:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "10499dce_cbfa6d31",
      "range": {
        "startLine": 343,
        "startChar": 69,
        "endLine": 343,
        "endChar": 86
      },
      "revId": "b434baa189a31e9af2946d65140b3ae5caffd3b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a701cc89_1712f927",
        "filename": "libprocessgroup/setup/cgroup_map_write.cpp",
        "patchSetId": 4
      },
      "lineNbr": 377,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2023-02-09T23:02:06Z",
      "side": 1,
      "message": "How about this:\n```\nif (result \u003d\u003d ActivationResult::kSuccess)\n    return true;\n\nif (result \u003d\u003d ActivationResult::kNoSuchController) {\n    bool optional \u003d controller-\u003eflags() \u0026 CGROUPRC_CONTROLLER_FLAG_OPTIONAL;\n    if (optional) {\n        // Optional controllers are allowed to fail to mount if kernel does not support them\n        LOG(INFO) \u003c\u003c \"Optional \" \u003c\u003c controller-\u003ename() \u003c\u003c \" cgroup controller is not mounted\";\n        return true;\n    }\n\n    PLOG(ERROR) \u003c\u003c \"Failed to mount \" \u003c\u003c controller-\u003ename() \u003c\u003c \" cgroup\";\n}\nreturn false;\n```\na bit easier to follow IMO.",
      "range": {
        "startLine": 360,
        "startChar": 1,
        "endLine": 377,
        "endChar": 17
      },
      "revId": "b434baa189a31e9af2946d65140b3ae5caffd3b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c98d6e87_1c3ad0bc",
        "filename": "libprocessgroup/setup/cgroup_map_write.cpp",
        "patchSetId": 4
      },
      "lineNbr": 377,
      "author": {
        "id": 1869780
      },
      "writtenOn": "2023-02-10T00:59:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a701cc89_1712f927",
      "range": {
        "startLine": 360,
        "startChar": 1,
        "endLine": 377,
        "endChar": 17
      },
      "revId": "b434baa189a31e9af2946d65140b3ae5caffd3b4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}