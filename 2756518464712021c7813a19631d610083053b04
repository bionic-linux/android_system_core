{
  "comments": [
    {
      "key": {
        "uuid": "a856d212_4444d179",
        "filename": "libbacktrace/b.cpp",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2017-01-20T21:17:20Z",
      "side": 1,
      "message": "b? What\u0027s b?",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ef3f5ae_fa2b83eb",
        "filename": "libbacktrace/b.cpp",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-01-25T00:13:27Z",
      "side": 1,
      "message": "Oops, this got caught up in a add -A.\n\nRemoved.",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_d0ae3742",
        "filename": "libunwindstack/Android.bp",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-01-21T01:03:36Z",
      "side": 1,
      "message": "Remove these?",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 25,
        "endChar": 13
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d79eb5db_21e696d0",
        "filename": "libunwindstack/Android.bp",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-01-25T00:13:27Z",
      "side": 1,
      "message": "Done",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 25,
        "endChar": 13
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_c438c110",
        "filename": "libunwindstack/Android.bp",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2017-01-20T20:17:06Z",
      "side": 1,
      "message": "Oh, I\u0027m going to have trouble doing it that way anyway. I\u0027ll just take prebuilts from the platform probably.",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0eab3bf_d0b197c8",
        "filename": "libunwindstack/Android.bp",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-01-25T00:13:27Z",
      "side": 1,
      "message": "At some point, I\u0027ll be removing the libbase dependency. I didn\u0027t want to do this yet though.",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_90b8bf86",
        "filename": "libunwindstack/Android.bp",
        "patchSetId": 3
      },
      "lineNbr": 78,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-01-21T01:03:36Z",
      "side": 1,
      "message": "The defaults already do this?",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 78,
        "endChar": 6
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2b76490_16fd9596",
        "filename": "libunwindstack/Android.bp",
        "patchSetId": 3
      },
      "lineNbr": 78,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-01-25T00:13:27Z",
      "side": 1,
      "message": "Yeah, I left the defaults for testing purposes and forgot about them.\n\nSo with those deleted, these now apply.",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 78,
        "endChar": 6
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_f076dbed",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-01-21T01:03:36Z",
      "side": 1,
      "message": "This is pretty inefficient, is this only called in debug scenarios?",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1e492aa8_d0dcbd73",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-01-25T00:13:27Z",
      "side": 1,
      "message": "Yes, I made no effort to optimize the log code. I intentionally made the log path slightly inefficient if it made the normal path more efficient.",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_d0b197ed",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-01-21T01:03:36Z",
      "side": 1,
      "message": "You don\u0027t seem to ever read the address of the described function? Should the name of this function actually be \"ExtractEntryData\" or something along those lines?",
      "range": {
        "startLine": 36,
        "startChar": 15,
        "endLine": 36,
        "endChar": 27
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b467eb6_bee4b473",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-01-25T00:13:27Z",
      "side": 1,
      "message": "Sure, that sounds good to me.\n\nDone.",
      "range": {
        "startLine": 36,
        "startChar": 15,
        "endLine": 36,
        "endChar": 27
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_b0a063e6",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-01-21T01:03:36Z",
      "side": 1,
      "message": "I assume entry has to be aligned, add an assertion for it?\n\n(If not, wtf)",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bce68ebe_f4db394d",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-01-25T00:13:27Z",
      "side": 1,
      "message": "I don\u0027t see anything that specifies the necessary alignment. I\u0027ll assume at least two byte alignment unless you see something different.\n\nI don\u0027t want to assert though, I\u0027ll simply return an error since the elf could be mal-formed in some way.\n\nI also added a test for this condition.",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_b0b74338",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-01-21T01:03:36Z",
      "side": 1,
      "message": "This was confusing to me at first. Renaming the entry variable to entry_offset might help (but it might be confusing as well, since entry_offset points to an offset?)",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 41,
        "endChar": 28
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4374d83c_9f1fc7c2",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-01-25T00:13:27Z",
      "side": 1,
      "message": "In code not here, I use the term entry_offset, so renaming entry_offset. I don\u0027t think it\u0027s too confusing to name it this way, but let me know.",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_4ba85c61",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-01-21T01:03:36Z",
      "side": 1,
      "message": "Don\u0027t you need to get the personality from the MSB?",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "31c93f0a_ab748648",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-01-25T00:13:27Z",
      "side": 1,
      "message": "Since a non-zero value is not used by any compiler and libunwind just ignores this value, I\u0027m going to simply error out if this is non-zero value.\n\nI added a test for this too.",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_0bcb8429",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-01-21T01:03:36Z",
      "side": 1,
      "message": "Or:\n  data.push_back(data \u0026 0xff);\n  if (data.back() !\u003d ARM_OP_FINISH)",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 66,
        "endChar": 35
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0bf9b032_d13b030c",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-01-25T00:13:27Z",
      "side": 1,
      "message": "Why prefer this though? My version avoids a function call, and most compilers will probably put the value to push in a register already.\n\nAlthough, it probably doesn\u0027t matter in the grand scheme of things.",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 66,
        "endChar": 35
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_10fe0fb7",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-01-21T01:03:36Z",
      "side": 1,
      "message": "You should mention that the specification states that an implicit finish op is added.",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e15e248b_bbf6a211",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-01-25T00:13:27Z",
      "side": 1,
      "message": "What\u0027s the purpose of mentioning anything about the spec in the comment?\n\nIs the worry that people will get confused and think that this is an ad hoc addition?",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_4bff3c3d",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 78,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-01-21T01:03:36Z",
      "side": 1,
      "message": "Isn\u0027t this UB?",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfc02f6f_a59d9d9a",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 78,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-01-25T00:13:27Z",
      "side": 1,
      "message": "Ah, yes, the first shift is technically undefined behavior.\n\nChanged cast after the first shift so this works and is not undefined any more.",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_447e1181",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 108,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2017-01-20T21:17:20Z",
      "side": 1,
      "message": "Why not?",
      "range": {
        "startLine": 108,
        "startChar": 42,
        "endLine": 108,
        "endChar": 68
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ba06530_81fcc0bf",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 108,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-01-25T00:13:27Z",
      "side": 1,
      "message": "It doesn\u0027t contain any information that helps to decode the unwind data. I\u0027ll update the comment.",
      "range": {
        "startLine": 108,
        "startChar": 42,
        "endLine": 108,
        "endChar": 68
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_04925976",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 174,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2017-01-20T21:17:20Z",
      "side": 1,
      "message": "This bit pattern is never guaranteed by this function. Is it a precondition? DCHECK it?",
      "range": {
        "startLine": 174,
        "startChar": 5,
        "endLine": 174,
        "endChar": 9
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3993c429_641166b8",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 174,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-01-25T00:13:27Z",
      "side": 1,
      "message": "Aren\u0027t DCHECK just compiled out?\n\nMy test cases are exhaustive, so I think I can get away without the DCHECKs.",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22277e45_d117967a",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 174,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2017-01-25T00:33:10Z",
      "side": 1,
      "message": "The test cases are actually where you\u0027d want DCHECK on. They get compiled out for normal builds, but you can add an additional libunwindstackd with -UNDEBUG that gets linked into the tests. (Might want to actually build the tests in both forms just to make sure you don\u0027t accidentally do work in a DCHECK.)\n\nMight even go so far as to set up a system property or something to configure the system to use the DCHECKED variant of the library. If something is behaving funky, flip the switch and see if it aborts. (I think this is how ART does it.)",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7f4834d_497e5985",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 174,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-01-25T20:26:39Z",
      "side": 1,
      "message": "DCHECK doesn\u0027t appear to be as portable, so I\u0027m using straight assert.\n\nWhat I did is to create two versions of the unit tests, one which uses the shared library with all of the asserts disabled, and one that uses a static version of the library that has asserts which are enabled. The debug enabled version also has the source code  compiled with -O0 and -g so that it\u0027s easier to debug and I don\u0027t have to keep flipping on flags when something goes wrong.",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a856d212_a44f0d28",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 177,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2017-01-20T21:17:20Z",
      "side": 1,
      "message": "https://xkcd.com/859/",
      "range": {
        "startLine": 177,
        "startChar": 27,
        "endLine": 177,
        "endChar": 28
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7008fa6d_7a6437d6",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 177,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-01-25T00:13:27Z",
      "side": 1,
      "message": "I know, I know, but it makes it easier to break the code up.",
      "range": {
        "startLine": 177,
        "startChar": 27,
        "endLine": 177,
        "endChar": 28
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6d9e632_52ffc004",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 177,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2017-01-25T00:33:10Z",
      "side": 1,
      "message": "Oh, I actually hadn\u0027t seen the closing on L187. I thought it was missing in the log. Never mind :)",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_305b5365",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 181,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-01-21T01:03:36Z",
      "side": 1,
      "message": "Doesn\u0027t this print an extra trailing comma?",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6b753921_bf7770ab",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 181,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-01-25T00:13:27Z",
      "side": 1,
      "message": "No, the code right below it always adds a rXX after the comma.",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_d702b182",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 193,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2017-01-20T21:17:20Z",
      "side": 1,
      "message": "I think that\u0027s spelled DCHECK :)",
      "range": {
        "startLine": 193,
        "startChar": 11,
        "endLine": 193,
        "endChar": 21
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a8c4f461_0b882109",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 193,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-01-25T00:13:27Z",
      "side": 1,
      "message": "I rewrote the code below so it\u0027s obvious what registers can be set.",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "585ccb9c_967fc56d",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 193,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2017-01-25T00:33:10Z",
      "side": 1,
      "message": "Yep, that\u0027s more clear. Thanks.",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "29f788b5_d532b815",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 204,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-01-25T00:13:27Z",
      "side": 1,
      "message": "I rewrote this. Even though this is clever, it\u0027s hard to read and it really only wins if only a few bits are set. And even then, I don\u0027t think it\u0027s worth it.",
      "range": {
        "startLine": 196,
        "startChar": 0,
        "endLine": 204,
        "endChar": 22
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_be86ed3a",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 205,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2017-01-23T20:56:10Z",
      "side": 1,
      "message": "set cfa if popping r13?",
      "range": {
        "startLine": 205,
        "startChar": 2,
        "endLine": 205,
        "endChar": 3
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9372c07_3e62574b",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 205,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-01-25T00:13:27Z",
      "side": 1,
      "message": "Good catch, I completely forgot that case.\n\nFixed, and test updated.",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_978679b4",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 269,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2017-01-20T21:17:20Z",
      "side": 1,
      "message": "I feel like this should be broken into smaller functions for each of the cases since it\u0027s essentially a giant switch with a lot of code in each case, but I\u0027m not really sure what most of them would be named...",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39b5fe1f_319c44d8",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 269,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-01-25T00:13:27Z",
      "side": 1,
      "message": "I agree. I broke this up by pulling the code up to the previous function and then sub dividing there.\n\nTake a look at see if this is much better than this massive function.",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba20a4ec_ef0c94f0",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 269,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2017-01-25T00:33:10Z",
      "side": 1,
      "message": "Yep, much better imo.",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_043ed9f5",
        "filename": "libunwindstack/ArmExidx.h",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2017-01-20T21:17:20Z",
      "side": 1,
      "message": "Hmm. So we\u0027re going to have a circular dependency here. libc++ will use this unwinder, and this uses libc++. I think as long as I use a static version of the unwinder in libc++ this is okay?\n\nAt the moment anything using this will have two unwinders in its address space. Executables using libc++ have libunwind_llvm statically linked and hidden, which means that unwinder will take precedence.",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9e8812fc_89125b5d",
        "filename": "libunwindstack/ArmExidx.h",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-01-25T00:13:27Z",
      "side": 1,
      "message": "Yes, we\u0027ll have to figure this out when we use it to replace the unwinder everywhere.",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_3831f50d",
        "filename": "libunwindstack/Memory.cpp",
        "patchSetId": 3
      },
      "lineNbr": 79,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2017-01-23T20:56:10Z",
      "side": 1,
      "message": "In MemoryFileAtOffset::Read and MemoryOffline::Read, we use data_[addr + offset_ + ...] to read. To make it more clear and reduce overhead, how about add offset_ to data_ here, and munmap(data_ - offset_, size_) in ~MemoryFileAtOffset?",
      "range": {
        "startLine": 79,
        "startChar": 2,
        "endLine": 79,
        "endChar": 7
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "553a1888_56688409",
        "filename": "libunwindstack/Memory.cpp",
        "patchSetId": 3
      },
      "lineNbr": 79,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-01-25T00:13:27Z",
      "side": 1,
      "message": "I did something close to this. data_ points to the first byte as you mentioned, but I subtracted offset_ from size_ so that it simplifies the check down below.",
      "range": {
        "startLine": 79,
        "startChar": 2,
        "endLine": 79,
        "endChar": 7
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_186511f7",
        "filename": "libunwindstack/Memory.cpp",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2017-01-23T20:56:10Z",
      "side": 1,
      "message": "size_ - offset_?",
      "range": {
        "startLine": 85,
        "startChar": 20,
        "endLine": 85,
        "endChar": 35
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c154f0f_b144b8ea",
        "filename": "libunwindstack/Memory.cpp",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-01-25T00:13:27Z",
      "side": 1,
      "message": "Changed to correspond with above comment.",
      "range": {
        "startLine": 85,
        "startChar": 20,
        "endLine": 85,
        "endChar": 35
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_3878d58f",
        "filename": "libunwindstack/Memory.cpp",
        "patchSetId": 3
      },
      "lineNbr": 141,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2017-01-23T20:56:10Z",
      "side": 1,
      "message": "why? because of the linux version?",
      "range": {
        "startLine": 141,
        "startChar": 36,
        "endLine": 141,
        "endChar": 56
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61f458ec_2ca5e078",
        "filename": "libunwindstack/Memory.cpp",
        "patchSetId": 3
      },
      "lineNbr": 141,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-01-25T00:13:27Z",
      "side": 1,
      "message": "It\u0027s not allowed unless you forked the process yourself, or you are root. Neither of these conditions is true for almost all remote unwinds.",
      "range": {
        "startLine": 141,
        "startChar": 36,
        "endLine": 141,
        "endChar": 56
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_f8a0fde6",
        "filename": "libunwindstack/Memory.cpp",
        "patchSetId": 3
      },
      "lineNbr": 142,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2017-01-23T20:56:10Z",
      "side": 1,
      "message": "In the man page, process_vm_readv is used to read from different process. But here it is used to read from the same process, why just memcpy() doesn\u0027t work here?",
      "range": {
        "startLine": 142,
        "startChar": 16,
        "endLine": 142,
        "endChar": 62
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "503f8ccf_912ca003",
        "filename": "libunwindstack/Memory.cpp",
        "patchSetId": 3
      },
      "lineNbr": 142,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-01-25T00:13:27Z",
      "side": 1,
      "message": "It works, but this avoids crashes. I added a comment describing why this is used.",
      "range": {
        "startLine": 142,
        "startChar": 16,
        "endLine": 142,
        "endChar": 62
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_fe946529",
        "filename": "libunwindstack/Memory.h",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2017-01-23T20:56:10Z",
      "side": 1,
      "message": "will it be more reasonable by making max_read \u003d UINT64_MAX?",
      "range": {
        "startLine": 35,
        "startChar": 62,
        "endLine": 35,
        "endChar": 83
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8c99be4f_fabc21d8",
        "filename": "libunwindstack/Memory.h",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-01-25T00:13:27Z",
      "side": 1,
      "message": "That does simplify the code a bit.\n\nDone.",
      "range": {
        "startLine": 35,
        "startChar": 62,
        "endLine": 35,
        "endChar": 83
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_9e532925",
        "filename": "libunwindstack/tests/ArmExidxDecodeTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 115,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2017-01-23T20:56:10Z",
      "side": 1,
      "message": "1",
      "range": {
        "startLine": 115,
        "startChar": 6,
        "endLine": 115,
        "endChar": 7
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "574840d2_f8573763",
        "filename": "libunwindstack/tests/ArmExidxDecodeTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 115,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-01-25T00:13:27Z",
      "side": 1,
      "message": "Done",
      "range": {
        "startLine": 115,
        "startChar": 6,
        "endLine": 115,
        "endChar": 7
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_731d4e2e",
        "filename": "libunwindstack/tests/MemoryFileTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2017-01-23T20:56:10Z",
      "side": 1,
      "message": "looks the same as the above test.",
      "range": {
        "startLine": 65,
        "startChar": 23,
        "endLine": 65,
        "endChar": 59
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b7b6165_229830e7",
        "filename": "libunwindstack/tests/MemoryFileTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-01-25T00:13:27Z",
      "side": 1,
      "message": "Oops, its the same, but it was meant to be different.\n\nFixed now.",
      "range": {
        "startLine": 65,
        "startChar": 23,
        "endLine": 65,
        "endChar": 59
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_be5f0d81",
        "filename": "libunwindstack/tests/MemoryRemoteTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 126,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2017-01-23T20:56:10Z",
      "side": 1,
      "message": "already verified by L123?",
      "range": {
        "startLine": 124,
        "startChar": 0,
        "endLine": 126,
        "endChar": 3
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fe1c4646_ecbc3a44",
        "filename": "libunwindstack/tests/MemoryRemoteTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 126,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-01-25T00:13:27Z",
      "side": 1,
      "message": "Yeah, the memcmp was just for speed, but when something goes wrong it\u0027s pretty useless to figure out what went wrong.\n\nI removed the memcmp and added a better error message when the check fails.",
      "range": {
        "startLine": 124,
        "startChar": 0,
        "endLine": 126,
        "endChar": 3
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}