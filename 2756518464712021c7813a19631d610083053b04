{
  "comments": [
    {
      "key": {
        "uuid": "a856d212_4444d179",
        "filename": "libbacktrace/b.cpp",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2017-01-20T21:17:20Z",
      "side": 1,
      "message": "b? What\u0027s b?",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_d0ae3742",
        "filename": "libunwindstack/Android.bp",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-01-21T01:03:36Z",
      "side": 1,
      "message": "Remove these?",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 25,
        "endChar": 13
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_c438c110",
        "filename": "libunwindstack/Android.bp",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2017-01-20T20:17:06Z",
      "side": 1,
      "message": "Oh, I\u0027m going to have trouble doing it that way anyway. I\u0027ll just take prebuilts from the platform probably.",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_90b8bf86",
        "filename": "libunwindstack/Android.bp",
        "patchSetId": 3
      },
      "lineNbr": 78,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-01-21T01:03:36Z",
      "side": 1,
      "message": "The defaults already do this?",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 78,
        "endChar": 6
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_f076dbed",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-01-21T01:03:36Z",
      "side": 1,
      "message": "This is pretty inefficient, is this only called in debug scenarios?",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_d0b197ed",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-01-21T01:03:36Z",
      "side": 1,
      "message": "You don\u0027t seem to ever read the address of the described function? Should the name of this function actually be \"ExtractEntryData\" or something along those lines?",
      "range": {
        "startLine": 36,
        "startChar": 15,
        "endLine": 36,
        "endChar": 27
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_b0a063e6",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-01-21T01:03:36Z",
      "side": 1,
      "message": "I assume entry has to be aligned, add an assertion for it?\n\n(If not, wtf)",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_b0b74338",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-01-21T01:03:36Z",
      "side": 1,
      "message": "This was confusing to me at first. Renaming the entry variable to entry_offset might help (but it might be confusing as well, since entry_offset points to an offset?)",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 41,
        "endChar": 28
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_4ba85c61",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-01-21T01:03:36Z",
      "side": 1,
      "message": "Don\u0027t you need to get the personality from the MSB?",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_0bcb8429",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 66,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-01-21T01:03:36Z",
      "side": 1,
      "message": "Or:\n  data.push_back(data \u0026 0xff);\n  if (data.back() !\u003d ARM_OP_FINISH)",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 66,
        "endChar": 35
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_10fe0fb7",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-01-21T01:03:36Z",
      "side": 1,
      "message": "You should mention that the specification states that an implicit finish op is added.",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_4bff3c3d",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 78,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-01-21T01:03:36Z",
      "side": 1,
      "message": "Isn\u0027t this UB?",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_447e1181",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 108,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2017-01-20T21:17:20Z",
      "side": 1,
      "message": "Why not?",
      "range": {
        "startLine": 108,
        "startChar": 42,
        "endLine": 108,
        "endChar": 68
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_04925976",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 174,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2017-01-20T21:17:20Z",
      "side": 1,
      "message": "This bit pattern is never guaranteed by this function. Is it a precondition? DCHECK it?",
      "range": {
        "startLine": 174,
        "startChar": 5,
        "endLine": 174,
        "endChar": 9
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_a44f0d28",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 177,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2017-01-20T21:17:20Z",
      "side": 1,
      "message": "https://xkcd.com/859/",
      "range": {
        "startLine": 177,
        "startChar": 27,
        "endLine": 177,
        "endChar": 28
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_305b5365",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 181,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-01-21T01:03:36Z",
      "side": 1,
      "message": "Doesn\u0027t this print an extra trailing comma?",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_d702b182",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 193,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2017-01-20T21:17:20Z",
      "side": 1,
      "message": "I think that\u0027s spelled DCHECK :)",
      "range": {
        "startLine": 193,
        "startChar": 11,
        "endLine": 193,
        "endChar": 21
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_be86ed3a",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 205,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2017-01-23T20:56:10Z",
      "side": 1,
      "message": "set cfa if popping r13?",
      "range": {
        "startLine": 205,
        "startChar": 2,
        "endLine": 205,
        "endChar": 3
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_978679b4",
        "filename": "libunwindstack/ArmExidx.cpp",
        "patchSetId": 3
      },
      "lineNbr": 269,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2017-01-20T21:17:20Z",
      "side": 1,
      "message": "I feel like this should be broken into smaller functions for each of the cases since it\u0027s essentially a giant switch with a lot of code in each case, but I\u0027m not really sure what most of them would be named...",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_043ed9f5",
        "filename": "libunwindstack/ArmExidx.h",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2017-01-20T21:17:20Z",
      "side": 1,
      "message": "Hmm. So we\u0027re going to have a circular dependency here. libc++ will use this unwinder, and this uses libc++. I think as long as I use a static version of the unwinder in libc++ this is okay?\n\nAt the moment anything using this will have two unwinders in its address space. Executables using libc++ have libunwind_llvm statically linked and hidden, which means that unwinder will take precedence.",
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_3831f50d",
        "filename": "libunwindstack/Memory.cpp",
        "patchSetId": 3
      },
      "lineNbr": 79,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2017-01-23T20:56:10Z",
      "side": 1,
      "message": "In MemoryFileAtOffset::Read and MemoryOffline::Read, we use data_[addr + offset_ + ...] to read. To make it more clear and reduce overhead, how about add offset_ to data_ here, and munmap(data_ - offset_, size_) in ~MemoryFileAtOffset?",
      "range": {
        "startLine": 79,
        "startChar": 2,
        "endLine": 79,
        "endChar": 7
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_186511f7",
        "filename": "libunwindstack/Memory.cpp",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2017-01-23T20:56:10Z",
      "side": 1,
      "message": "size_ - offset_?",
      "range": {
        "startLine": 85,
        "startChar": 20,
        "endLine": 85,
        "endChar": 35
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_3878d58f",
        "filename": "libunwindstack/Memory.cpp",
        "patchSetId": 3
      },
      "lineNbr": 141,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2017-01-23T20:56:10Z",
      "side": 1,
      "message": "why? because of the linux version?",
      "range": {
        "startLine": 141,
        "startChar": 36,
        "endLine": 141,
        "endChar": 56
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_f8a0fde6",
        "filename": "libunwindstack/Memory.cpp",
        "patchSetId": 3
      },
      "lineNbr": 142,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2017-01-23T20:56:10Z",
      "side": 1,
      "message": "In the man page, process_vm_readv is used to read from different process. But here it is used to read from the same process, why just memcpy() doesn\u0027t work here?",
      "range": {
        "startLine": 142,
        "startChar": 16,
        "endLine": 142,
        "endChar": 62
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_fe946529",
        "filename": "libunwindstack/Memory.h",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2017-01-23T20:56:10Z",
      "side": 1,
      "message": "will it be more reasonable by making max_read \u003d UINT64_MAX?",
      "range": {
        "startLine": 35,
        "startChar": 62,
        "endLine": 35,
        "endChar": 83
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_9e532925",
        "filename": "libunwindstack/tests/ArmExidxDecodeTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 115,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2017-01-23T20:56:10Z",
      "side": 1,
      "message": "1",
      "range": {
        "startLine": 115,
        "startChar": 6,
        "endLine": 115,
        "endChar": 7
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_731d4e2e",
        "filename": "libunwindstack/tests/MemoryFileTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2017-01-23T20:56:10Z",
      "side": 1,
      "message": "looks the same as the above test.",
      "range": {
        "startLine": 65,
        "startChar": 23,
        "endLine": 65,
        "endChar": 59
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a856d212_be5f0d81",
        "filename": "libunwindstack/tests/MemoryRemoteTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 126,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2017-01-23T20:56:10Z",
      "side": 1,
      "message": "already verified by L123?",
      "range": {
        "startLine": 124,
        "startChar": 0,
        "endLine": 126,
        "endChar": 3
      },
      "revId": "2756518464712021c7813a19631d610083053b04",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}