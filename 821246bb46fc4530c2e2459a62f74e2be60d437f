{
  "comments": [
    {
      "key": {
        "uuid": "99fc76b2_b07e831e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-02-07T20:13:32Z",
      "side": 1,
      "message": "Overall question: Does it make sense for bootanim, surfaceflinger etc to have these dependencies on libnative*? If not, shouldn\u0027t we open a ticket to track properly disentangling them so that we can clean up these shims again?\n\nTaking it one step further, it would also be good to have support in the build system so it statically checks for bad dependencies like that, something similar to the VNDK dependency checks (http://cs/aosp-master/build/soong/cc/vndk.go?l\u003d162-191\u0026rcl\u003d17c85f098af453781438f9383dbfe1968b8f861f).\n\n+ngeoffray",
      "revId": "821246bb46fc4530c2e2459a62f74e2be60d437f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c98937d9_4c159e8a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-02-09T03:25:51Z",
      "side": 1,
      "message": "The dependencies from bootanim/surfaceflinger to libnative* is not direct. For example, it\u0027s libvuklan who is tragging the dependency. Unless we have two variants of libvulkan that is for bootanim/surfaceflinger and for others, we can\u0027t completely disentangle the dependency.",
      "parentUuid": "99fc76b2_b07e831e",
      "revId": "821246bb46fc4530c2e2459a62f74e2be60d437f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a21890a_d648f5ba",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-02-11T22:32:50Z",
      "side": 1,
      "message": "There\u0027s also the dependency through libandroid_runtime.\n\nLet\u0027s not discuss what/if we can do anything about them here. I think it would be safer to have a static guarantee that we can\u0027t get code paths that fail to open these libs, so I\u0027ve opened http://b/124250621 to track it and discuss further. Please add that bug to this CL.",
      "parentUuid": "c98937d9_4c159e8a",
      "revId": "821246bb46fc4530c2e2459a62f74e2be60d437f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa60445b_773233a0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-02-12T05:12:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3a21890a_d648f5ba",
      "revId": "821246bb46fc4530c2e2459a62f74e2be60d437f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3038153e_6d9fded9",
        "filename": "libnativebridge/tests/Android.bp",
        "patchSetId": 7
      },
      "lineNbr": 101,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-02-07T20:13:32Z",
      "side": 1,
      "message": "Nit: Please remove dup empty line.",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 101,
        "endChar": 0
      },
      "revId": "821246bb46fc4530c2e2459a62f74e2be60d437f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c328a5cc_dcc8413c",
        "filename": "libnativebridge/tests/Android.bp",
        "patchSetId": 7
      },
      "lineNbr": 101,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-02-09T03:25:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3038153e_6d9fded9",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 101,
        "endChar": 0
      },
      "revId": "821246bb46fc4530c2e2459a62f74e2be60d437f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "498d7ebd_cda86455",
        "filename": "libnativeloader/test/Android.bp",
        "patchSetId": 7
      },
      "lineNbr": 22,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-02-07T20:13:32Z",
      "side": 1,
      "message": "Is libnativeloader exercised indirectly through this? Is it possible to add a test that goes through libnativeloader_lazy?",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 22,
        "endChar": 18
      },
      "revId": "821246bb46fc4530c2e2459a62f74e2be60d437f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c11bdf5_87b96605",
        "filename": "libnativeloader/test/Android.bp",
        "patchSetId": 7
      },
      "lineNbr": 22,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-02-09T03:25:51Z",
      "side": 1,
      "message": "No. These cc_libraries are the ones that are loaded from the test app. libnativeloader is assumed to be already loaded in zygote. (now via libnativeloader_lazy). As we haven\u0027t had a unit test for the library itself, I feel less obliged to add it with this change. IMO, boot test is enough because the functionality of libnativeloader is critical to that.",
      "parentUuid": "498d7ebd_cda86455",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 22,
        "endChar": 18
      },
      "revId": "821246bb46fc4530c2e2459a62f74e2be60d437f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}