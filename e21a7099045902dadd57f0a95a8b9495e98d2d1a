{
  "comments": [
    {
      "key": {
        "uuid": "8999f4fd_fe7dfab4",
        "filename": "libunwindstack/DwarfMemory.cpp",
        "patchSetId": 1
      },
      "lineNbr": 169,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2017-03-22T22:04:20Z",
      "side": 1,
      "message": "can we directly pass \u0026value here, if we set value \u003d 0 before switch? I assume ReadBytes() already only supports little-endian.",
      "range": {
        "startLine": 169,
        "startChar": 22,
        "endLine": 169,
        "endChar": 29
      },
      "revId": "e21a7099045902dadd57f0a95a8b9495e98d2d1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39db8579_2a4983f2",
        "filename": "libunwindstack/DwarfMemory.cpp",
        "patchSetId": 1
      },
      "lineNbr": 169,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-03-24T21:07:04Z",
      "side": 1,
      "message": "I did something similar to your suggestion, but added an if check that should be compiled out depending on the templated value.",
      "parentUuid": "8999f4fd_fe7dfab4",
      "range": {
        "startLine": 169,
        "startChar": 22,
        "endLine": 169,
        "endChar": 29
      },
      "revId": "e21a7099045902dadd57f0a95a8b9495e98d2d1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae33f281_cf803038",
        "filename": "libunwindstack/DwarfMemory.cpp",
        "patchSetId": 1
      },
      "lineNbr": 192,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2017-03-22T22:04:20Z",
      "side": 1,
      "message": "This format is a little surprise. why not move break inside the brace?",
      "range": {
        "startLine": 192,
        "startChar": 4,
        "endLine": 192,
        "endChar": 12
      },
      "revId": "e21a7099045902dadd57f0a95a8b9495e98d2d1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c590be0c_7000f5e0",
        "filename": "libunwindstack/DwarfMemory.cpp",
        "patchSetId": 1
      },
      "lineNbr": 192,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-03-24T21:07:04Z",
      "side": 1,
      "message": "clang_format did this for me. I don\u0027t really like it, but not enough to try and change clang-format.",
      "parentUuid": "ae33f281_cf803038",
      "range": {
        "startLine": 192,
        "startChar": 4,
        "endLine": 192,
        "endChar": 12
      },
      "revId": "e21a7099045902dadd57f0a95a8b9495e98d2d1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a42a40da_7db0ebad",
        "filename": "libunwindstack/tests/DwarfMemoryTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2017-03-22T22:04:20Z",
      "side": 1,
      "message": "use DW_EH_PE_udata1 to make it more clear?\nSeveral tests below are all testing GetEncodedSize(), how about using a table containing (encoding, size) pairs, so it can reduce duplication of the test code.",
      "range": {
        "startLine": 190,
        "startChar": 34,
        "endLine": 190,
        "endChar": 38
      },
      "revId": "e21a7099045902dadd57f0a95a8b9495e98d2d1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c0302cdb_ffa812dc",
        "filename": "libunwindstack/tests/DwarfMemoryTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-03-24T21:07:04Z",
      "side": 1,
      "message": "I don\u0027t like a table because it\u0027s harder to tell when something goes wrong. However, I rewrote this to be more clear about what\u0027s going on. Take a look and see if this is easier to understand.",
      "parentUuid": "a42a40da_7db0ebad",
      "range": {
        "startLine": 190,
        "startChar": 34,
        "endLine": 190,
        "endChar": 38
      },
      "revId": "e21a7099045902dadd57f0a95a8b9495e98d2d1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "219522ed_63032b9d",
        "filename": "libunwindstack/tests/DwarfMemoryTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 306,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2017-03-22T22:04:20Z",
      "side": 1,
      "message": "more readable if replaced by DW_EH_PE_aligned, and others.",
      "range": {
        "startLine": 306,
        "startChar": 54,
        "endLine": 306,
        "endChar": 58
      },
      "revId": "e21a7099045902dadd57f0a95a8b9495e98d2d1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19683846_411dee89",
        "filename": "libunwindstack/tests/DwarfMemoryTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 306,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-03-24T21:07:04Z",
      "side": 1,
      "message": "I don\u0027t want to use the values from dwarf encoding header. By using the literal value I guarantee that if somehow I accidentally set that value incorrectly, this test would fail.",
      "parentUuid": "219522ed_63032b9d",
      "range": {
        "startLine": 306,
        "startChar": 54,
        "endLine": 306,
        "endChar": 58
      },
      "revId": "e21a7099045902dadd57f0a95a8b9495e98d2d1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}