{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a0acad33_6a4a3456",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-04-03T16:47:29Z",
      "side": 1,
      "message": "why not?",
      "revId": "2c89336b87314b4269e6335c3eedf803ada89435",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3fa37c7c_15f71b33",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 2067490
      },
      "writtenOn": "2024-04-07T07:06:46Z",
      "side": 1,
      "message": "here is what happaned:\ni add a log in is_permissive_mte():\n \u003easync_safe_format_log(ANDROID_LOG_INFO, \"libc\", \"looking for property: %s\", \nprocess_sysprop_name);\n \u003easync_safe_format_log(ANDROID_LOG_INFO, \"libc\", \"is_permissive_mte use getprogname at %p\\n\", getprogname);\n\nmeanwhile, app \"com.sample.nativetest\" has code:\n\n \u003esprintf(tmp, \"app use getprogname at %p\\n\", getprogname);\n \u003ereturn std::string(getprogname()) + std::string(tmp);\n    \nthen i set properties:\n\n \u003esetprop persist.device_config.memory_safety_native.permissive.process.com.sample.nativetest true\n \u003esetprop persist.sys.mte.permissive false\n\nrun app , fire a mte error, app crashed. get log:\n\n\u003e2024-03-24 22:18:37.140  8609-8609  libc                    pid-8609                             I  looking for property: persist.device_config.memory_safety_native.permissive.process.(null)\n\u003e2024-03-24 22:18:37.140  8609-8609  libc                    pid-8609                   I is_permissive_mte use getprogname at 0x71e8dd8b30\n\u003e2024-03-24 22:18:37.140  8609-8609  com.sample.nativetest                    pid-8609 I com.sample.nativetest app use getprogname at 0x71e3de7400\n\napperently, is_permissive_mte doesn\u0027t get the right progname and permissive mode not work. libdebuggerd_handler and app use different getprogname().\n\ni guess the problem is:\nlibdebuggerd_handler_core is staticly linked to linker64, it uses a staticly linked getprogname(). But app dynamicly links getprogname() which can get the right value set by setprogname().",
      "parentUuid": "a0acad33_6a4a3456",
      "revId": "2c89336b87314b4269e6335c3eedf803ada89435",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "308b4658_3d22039e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-04-03T16:48:50Z",
      "side": 1,
      "message": "are you saying you have MTE crashes in the linker itself?",
      "range": {
        "startLine": 11,
        "startChar": 27,
        "endLine": 11,
        "endChar": 35
      },
      "revId": "2c89336b87314b4269e6335c3eedf803ada89435",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0564d68_97d3c89a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 2067490
      },
      "writtenOn": "2024-04-07T07:06:46Z",
      "side": 1,
      "message": "no, not the linker itself. see #9 reply.",
      "parentUuid": "308b4658_3d22039e",
      "range": {
        "startLine": 11,
        "startChar": 27,
        "endLine": 11,
        "endChar": 35
      },
      "revId": "2c89336b87314b4269e6335c3eedf803ada89435",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5799aea0_c1de1642",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 2067490
      },
      "writtenOn": "2024-04-07T07:06:46Z",
      "side": 1,
      "message": "thank you for your comments.",
      "revId": "2c89336b87314b4269e6335c3eedf803ada89435",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60d6a6aa_8b8cb194",
        "filename": "debuggerd/handler/debuggerd_handler.cpp",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2024-04-25T23:05:54Z",
      "side": 1,
      "message": "this is duplicated code from get_main_thread_name, I suggest you factor it out into a helper function",
      "revId": "2c89336b87314b4269e6335c3eedf803ada89435",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce58d8ee_ea6cbddc",
        "filename": "debuggerd/handler/debuggerd_handler.cpp",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-04-27T00:54:22Z",
      "side": 1,
      "message": "error log here?",
      "revId": "2c89336b87314b4269e6335c3eedf803ada89435",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e51f0ef1_d8640589",
        "filename": "debuggerd/handler/debuggerd_handler.cpp",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2024-04-25T23:05:54Z",
      "side": 1,
      "message": "there is no trailing newline in that file",
      "revId": "2c89336b87314b4269e6335c3eedf803ada89435",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ded5ef7_4b77af49",
        "filename": "debuggerd/handler/debuggerd_handler.cpp",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-04-27T00:54:22Z",
      "side": 1,
      "message": "remove trailing space\n```suggestion\n  //get rid of /xxx/xxx/progname\n```",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 120,
        "endChar": 33
      },
      "revId": "2c89336b87314b4269e6335c3eedf803ada89435",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81815deb_301c9b03",
        "filename": "debuggerd/handler/debuggerd_handler.cpp",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-04-27T00:54:22Z",
      "side": 1,
      "message": "please follow variable style: `last_slash`\n\nwouldn\u0027t it be easier and cheaper to have this function return the `char*` into the buffer, then we don\u0027t need to move it around. \n\n```suggestion\n  char* last_slash \u003d strrchr(buf, \u0027/\u0027);\n  if (last_slash !\u003d nullptr) {\n    return last_slash+1;\n  }\n  return buf;\n```",
      "range": {
        "startLine": 121,
        "startChar": 8,
        "endLine": 121,
        "endChar": 17
      },
      "revId": "2c89336b87314b4269e6335c3eedf803ada89435",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}