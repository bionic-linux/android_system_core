{
  "comments": [
    {
      "key": {
        "uuid": "15c5111c_f4a2c118",
        "filename": "init/README.md",
        "patchSetId": 9
      },
      "lineNbr": 205,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-02-14T20:48:17Z",
      "side": 1,
      "message": "explicitly reference `cpuset`, and give an example of what `writepid` is still useful for?",
      "revId": "b7a6f7e526f72677d7559ece2733b25ac3fbb33f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6dffc43d_9b67de0d",
        "filename": "init/README.md",
        "patchSetId": 9
      },
      "lineNbr": 205,
      "author": {
        "id": 1076863
      },
      "writtenOn": "2017-02-14T23:06:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "15c5111c_f4a2c118",
      "revId": "b7a6f7e526f72677d7559ece2733b25ac3fbb33f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2c191a8f_f16d2a00",
        "filename": "init/service.cpp",
        "patchSetId": 9
      },
      "lineNbr": 58,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-02-14T20:48:17Z",
      "side": 1,
      "message": "static constexpr these instead.\n\nis \"tasks\" really worth a constant? seems harder to read with the constant than the literal.",
      "revId": "b7a6f7e526f72677d7559ece2733b25ac3fbb33f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43ffeaca_da2e7e75",
        "filename": "init/service.cpp",
        "patchSetId": 9
      },
      "lineNbr": 58,
      "author": {
        "id": 1076863
      },
      "writtenOn": "2017-02-14T20:56:32Z",
      "side": 1,
      "message": "I\u0027ll fix the constexpr. As for \"tasks\" since it is used in a couple places (once when we remove /tasks from path in the old writepid instructions) and once when we add that to the file name when opening an fd I decided to have this in one place (since these are very related usages and should always be in sync). I mean, I don\u0027t feel strongly otherwise, but just wanted to explain my reasoning.",
      "parentUuid": "2c191a8f_f16d2a00",
      "revId": "b7a6f7e526f72677d7559ece2733b25ac3fbb33f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "425d24b0_32b5051a",
        "filename": "init/service.cpp",
        "patchSetId": 9
      },
      "lineNbr": 58,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-02-14T20:58:19Z",
      "side": 1,
      "message": "yeah, \"/dev/cpuset\" makes _some_ sense (though personally i wouldn\u0027t have bothered with that either), but a trivial literal like \"tasks\"...\n\n(what we really need is _tests_, but init\u0027s code is in no fit state for testing yet.)",
      "parentUuid": "43ffeaca_da2e7e75",
      "revId": "b7a6f7e526f72677d7559ece2733b25ac3fbb33f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff4b3de6_975a210e",
        "filename": "init/service.cpp",
        "patchSetId": 9
      },
      "lineNbr": 58,
      "author": {
        "id": 1076863
      },
      "writtenOn": "2017-02-14T23:06:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2c191a8f_f16d2a00",
      "revId": "b7a6f7e526f72677d7559ece2733b25ac3fbb33f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c6b74410_9b5492fa",
        "filename": "init/service.cpp",
        "patchSetId": 9
      },
      "lineNbr": 58,
      "author": {
        "id": 1076863
      },
      "writtenOn": "2017-02-14T23:06:46Z",
      "side": 1,
      "message": "Ok, I have removed the kCpuSetTasks",
      "parentUuid": "425d24b0_32b5051a",
      "revId": "b7a6f7e526f72677d7559ece2733b25ac3fbb33f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "67a70b0c_ed06f3e9",
        "filename": "init/service.cpp",
        "patchSetId": 9
      },
      "lineNbr": 521,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-02-14T20:48:17Z",
      "side": 1,
      "message": "if you\u0027re going to do that, why warn? seems like we should either warn and not fix up, or fix up and not warn.",
      "revId": "b7a6f7e526f72677d7559ece2733b25ac3fbb33f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c0cec875_770a0fb9",
        "filename": "init/service.cpp",
        "patchSetId": 9
      },
      "lineNbr": 521,
      "author": {
        "id": 1076863
      },
      "writtenOn": "2017-02-14T20:56:32Z",
      "side": 1,
      "message": "Without fixing, I\u0027m afraid that this change can cause significant issues to vendor (closed-source) devices which we cannot fix ourselves. So I feel like fixing this up is important to make sure the devices continue to function. However I still wanted to let vendors know that then need to upgrade their init scripts...",
      "parentUuid": "67a70b0c_ed06f3e9",
      "revId": "b7a6f7e526f72677d7559ece2733b25ac3fbb33f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "117160c4_0b2f78ae",
        "filename": "init/service.cpp",
        "patchSetId": 9
      },
      "lineNbr": 521,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-02-14T20:58:48Z",
      "side": 1,
      "message": "how so? we haven\u0027t changed the meaning of writepid.",
      "parentUuid": "c0cec875_770a0fb9",
      "revId": "b7a6f7e526f72677d7559ece2733b25ac3fbb33f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "524a3fe9_67a55c31",
        "filename": "init/service.cpp",
        "patchSetId": 9
      },
      "lineNbr": 521,
      "author": {
        "id": 1076863
      },
      "writtenOn": "2017-02-14T22:34:17Z",
      "side": 1,
      "message": "Right now, if \u0027cpuset\u0027 is not set, then we try to put the process into a cpuset specified by the system default (in ro.cpuset.default system property). Now, consider a legacy file that uses writepid for cpusets. Since \u0027cpuset\u0027 wasn\u0027t specified and we do not have the current special code to filter out the /dev/cpuset/ from writepid, when we fork the process, the code (see line 660 below) will try to get the property value use that as the cpuset for the process.",
      "parentUuid": "117160c4_0b2f78ae",
      "revId": "b7a6f7e526f72677d7559ece2733b25ac3fbb33f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9c995e8_186768a7",
        "filename": "init/service.cpp",
        "patchSetId": 9
      },
      "lineNbr": 521,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-02-14T23:19:58Z",
      "side": 1,
      "message": "so why have `cpuset`? why not just make `writepid` do the right thing for cpuset writes, and interpret the case where there\u0027s no `writepid` writing to a cpuset as a request for the default (if set)?\n\nthis seems like we\u0027ve written all the code to just do the right thing, but we\u0027re making humans jump through hoops. (and, worse, since they\u0027re lazy they won\u0027t clean up the warnings anyway.)",
      "parentUuid": "524a3fe9_67a55c31",
      "revId": "b7a6f7e526f72677d7559ece2733b25ac3fbb33f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6c2b18c3_68cfa45f",
        "filename": "init/service.cpp",
        "patchSetId": 9
      },
      "lineNbr": 521,
      "author": {
        "id": 1076863
      },
      "writtenOn": "2017-02-15T00:27:16Z",
      "side": 1,
      "message": "I hope the special handling in ParseWritepid for /dev/cpuset is temporary. I\u0027ve added this only because I\u0027m paranoid and I don\u0027t want to risk breaking existing devices whose code we don\u0027t have under our control.\n\nI still feel that \u0027cpuset\u0027 option is better because it accepts only one cpuset, is better suited at handling default cpuset allocation for systems that define one and frankly more straight-forward to use.",
      "parentUuid": "b9c995e8_186768a7",
      "revId": "b7a6f7e526f72677d7559ece2733b25ac3fbb33f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6aff9603_c39be2f2",
        "filename": "init/service.cpp",
        "patchSetId": 9
      },
      "lineNbr": 521,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-02-15T06:10:06Z",
      "side": 1,
      "message": "it\u0027s not temporary though, is it? there\u0027s no way to get rid of it.\n\nwe can error `writepid` calls that have two cpusets, and i already suggested that `writepid` without a cpuset can mean \"use the default\".",
      "parentUuid": "6c2b18c3_68cfa45f",
      "revId": "b7a6f7e526f72677d7559ece2733b25ac3fbb33f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f9403b05_0eb60b09",
        "filename": "init/service.cpp",
        "patchSetId": 9
      },
      "lineNbr": 521,
      "author": {
        "id": 1076863
      },
      "writtenOn": "2017-02-15T18:02:12Z",
      "side": 1,
      "message": "Sure there is a way to remove this code. I mean, my plan was as follows:\n\n1. Introduce \u0027cpuset\u0027 and change the behavior of \u0027writepid\u0027 with filtering out cpuset targets and issuing a warning.\n2. Let this code be for some time to let people migrate.\n3. Add another patch that removes the fixups in writepid and instead make it fail if anyone tries to use writepid to write to cpuset.\n\nWhen a particular vendor gets affected by #3 down the road, they have a choice: 1) fix up their init scripts [hopefully] or 2) revert #3 for their device(s). Either way, they still have \u0027cpuset\u0027 handling.\n\nAs for your other question regarding using writepid and add code for handling system defaults, this is certainly doable, but is quite awkward. Right now, \u0027cpuset\u0027 option specifies just the cpuset \"name\" and automatically constructs a path like /dev/cpuset/\u003ccpuset-name\u003e/tasks. The ro.cpuset.default property also specifies the \u003ccpuset-name\u003e.\n\nIf we were to delegate this to writepid, we\u0027d use the actual full path /dev/cpuset/\u003ccpuset-name\u003e/tasks in the file list. Now, if we want to specify a system default cpuset, would we set ro.cpuset.default to, say, \"foreground\" or \"/dev/cpuset/foreground/tasks\"? I would say it should be the latter to stay consistent with how writepid works, but on the other hand, \"foreground\" seems better and straight to the point.",
      "parentUuid": "6aff9603_c39be2f2",
      "revId": "b7a6f7e526f72677d7559ece2733b25ac3fbb33f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a703163_e32a1323",
        "filename": "init/service.cpp",
        "patchSetId": 9
      },
      "lineNbr": 521,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-02-15T18:07:35Z",
      "side": 1,
      "message": "my point is that 2 never really happens --- there\u0027s always going to be a use for `writepid`, and we\u0027ll always have to explain the difference, and you\u0027ll always prefer that they use `cpuset` for the defaulting behavior unless we implement that for `writepid`, so we may as well just do that.\n\nwe currently have 100 lines of code trying to teach humans when to use which option, when we can just give them one option instead and do the right thing all the time.\n\n(either interpretation of ro.cpuset.default sounds fine to me.)",
      "parentUuid": "f9403b05_0eb60b09",
      "revId": "b7a6f7e526f72677d7559ece2733b25ac3fbb33f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}