{
  "comments": [
    {
      "key": {
        "uuid": "6def0f0a_cd19b0a8",
        "filename": "debuggerd/Android.bp",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-03-09T00:47:38Z",
      "side": 1,
      "message": "Since this code relies on this always being true, should there be a comment in the logging headers that this is async signal safe?",
      "range": {
        "startLine": 11,
        "startChar": 7,
        "endLine": 12,
        "endChar": 61
      },
      "revId": "f49fefb4f50f03aaa7f61c4e1123baa1dd5c48bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "152d4fc6_e6a9d71d",
        "filename": "debuggerd/Android.bp",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-03-09T05:47:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6def0f0a_cd19b0a8",
      "range": {
        "startLine": 11,
        "startChar": 7,
        "endLine": 12,
        "endChar": 61
      },
      "revId": "f49fefb4f50f03aaa7f61c4e1123baa1dd5c48bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "027c8b2d_bcd64e3f",
        "filename": "debuggerd/handler/debuggerd_handler.cpp",
        "patchSetId": 3
      },
      "lineNbr": 366,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-03-09T00:47:38Z",
      "side": 1,
      "message": "Doesn\u0027t this potentially unlock crash_mutex? But at this point you are not holding the crash_mutex lock.\n\nIn fact, I think it would be better if you explicitly locked and unlocked crash mutex in this function rather than relying on resend_signal. It\u0027s hard to tell from looking at the code whether you have lock/unlock unbalanced since the lock occurs here, but the unlock occurs in another function.",
      "range": {
        "startLine": 366,
        "startChar": 4,
        "endLine": 366,
        "endChar": 17
      },
      "revId": "f49fefb4f50f03aaa7f61c4e1123baa1dd5c48bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "380eaa27_86540f6b",
        "filename": "debuggerd/handler/debuggerd_handler.cpp",
        "patchSetId": 3
      },
      "lineNbr": 366,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-03-09T05:47:51Z",
      "side": 1,
      "message": "You\u0027re right. I moved the pthread_mutex_unlock out to the only other invocation of resend_signal.",
      "parentUuid": "027c8b2d_bcd64e3f",
      "range": {
        "startLine": 366,
        "startChar": 4,
        "endLine": 366,
        "endChar": 17
      },
      "revId": "f49fefb4f50f03aaa7f61c4e1123baa1dd5c48bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3634d352_45a1d5a4",
        "filename": "debuggerd/libdebuggerd/backtrace.cpp",
        "patchSetId": 3
      },
      "lineNbr": 70,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-03-09T00:47:38Z",
      "side": 1,
      "message": "Is there a reason this isn\u0027t directly included in log_thread_name? This function is only called once from and log_thread_name is a really small function. In addition, this function only has a single early out point, so you could just use threadname directly.",
      "range": {
        "startLine": 70,
        "startChar": 13,
        "endLine": 70,
        "endChar": 28
      },
      "revId": "f49fefb4f50f03aaa7f61c4e1123baa1dd5c48bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6c5af2d1_adfed1b5",
        "filename": "debuggerd/libdebuggerd/backtrace.cpp",
        "patchSetId": 3
      },
      "lineNbr": 70,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-03-09T05:47:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3634d352_45a1d5a4",
      "range": {
        "startLine": 70,
        "startChar": 13,
        "endLine": 70,
        "endChar": 28
      },
      "revId": "f49fefb4f50f03aaa7f61c4e1123baa1dd5c48bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1dc57209_d964b2e4",
        "filename": "debuggerd/libdebuggerd/backtrace.cpp",
        "patchSetId": 3
      },
      "lineNbr": 125,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-03-09T00:47:38Z",
      "side": 1,
      "message": "It\u0027s not clear, but do you only anticipate that Backtrace::Create will be called once with this function? Otherwise, we did an optimization to pass in the map so that it isn\u0027t created multiple times for the same process. The call below to Create would create a map.\n\nThis is fine if you only ever call this once, and don\u0027t expect to create any other Backtrace objects for the same pid.",
      "range": {
        "startLine": 125,
        "startChar": 5,
        "endLine": 125,
        "endChar": 28
      },
      "revId": "f49fefb4f50f03aaa7f61c4e1123baa1dd5c48bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a978ff41_a293d1d9",
        "filename": "debuggerd/libdebuggerd/backtrace.cpp",
        "patchSetId": 3
      },
      "lineNbr": 125,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-03-09T05:47:51Z",
      "side": 1,
      "message": "I expect it to be called multiple times, but this will only be used for two processes. Sharing the backtrace map across threads seems nontrivial, I\u0027m pretty sure it\u0027d need memory fences to be correct?",
      "parentUuid": "1dc57209_d964b2e4",
      "range": {
        "startLine": 125,
        "startChar": 5,
        "endLine": 125,
        "endChar": 28
      },
      "revId": "f49fefb4f50f03aaa7f61c4e1123baa1dd5c48bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8620c45c_d9317201",
        "filename": "debuggerd/libdebuggerd/backtrace.cpp",
        "patchSetId": 3
      },
      "lineNbr": 125,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-03-09T18:05:17Z",
      "side": 1,
      "message": "Do you mean two threads of the same process or two different processes? If two different processes, then sharing the map doesn\u0027t make sense and this is the best way to do this.\n\nAlthough, if you only have two that could be called with the same map, then it\u0027s not worth the extra complexity to do it.",
      "parentUuid": "a978ff41_a293d1d9",
      "range": {
        "startLine": 125,
        "startChar": 5,
        "endLine": 125,
        "endChar": 28
      },
      "revId": "f49fefb4f50f03aaa7f61c4e1123baa1dd5c48bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca72466a_f10dcb9b",
        "filename": "debuggerd/tombstoned_client.cpp",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-03-09T00:47:38Z",
      "side": 1,
      "message": "Would this be better as WriteFully?",
      "range": {
        "startLine": 45,
        "startChar": 25,
        "endLine": 45,
        "endChar": 30
      },
      "revId": "f49fefb4f50f03aaa7f61c4e1123baa1dd5c48bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10bcbaaf_d39cc5d8",
        "filename": "debuggerd/tombstoned_client.cpp",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2017-03-09T05:47:51Z",
      "side": 1,
      "message": "No, it\u0027s a SOCK_SEQPACKET packet, so short writes can\u0027t happen.",
      "parentUuid": "ca72466a_f10dcb9b",
      "range": {
        "startLine": 45,
        "startChar": 25,
        "endLine": 45,
        "endChar": 30
      },
      "revId": "f49fefb4f50f03aaa7f61c4e1123baa1dd5c48bc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}