{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c6ebc216_f6e02230",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 11
      },
      "lineNbr": 230,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2023-12-05T18:39:58Z",
      "side": 1,
      "message": "above we use !ret, here ret \u003c 0. Let\u0027s be consistent, one way or the other.",
      "range": {
        "startLine": 230,
        "startChar": 8,
        "endLine": 230,
        "endChar": 15
      },
      "revId": "5587ee338bfea8eaf72d862350f806380c9b3ce0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4afcdedd_85e0ef42",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 11
      },
      "lineNbr": 230,
      "author": {
        "id": 1930620
      },
      "writtenOn": "2023-12-05T22:27:28Z",
      "side": 1,
      "message": "They are two different checks. One for success (above), and one for error (here).",
      "parentUuid": "c6ebc216_f6e02230",
      "range": {
        "startLine": 230,
        "startChar": 8,
        "endLine": 230,
        "endChar": 15
      },
      "revId": "5587ee338bfea8eaf72d862350f806380c9b3ce0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96c65297_539e96e8",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 11
      },
      "lineNbr": 232,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2023-12-05T18:39:58Z",
      "side": 1,
      "message": "This is a new warning. Why does the user care if the cgroup was already removed? Why is this a warning?",
      "range": {
        "startLine": 232,
        "startChar": 7,
        "endLine": 232,
        "endChar": 71
      },
      "revId": "5587ee338bfea8eaf72d862350f806380c9b3ce0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65ac7161_1ddac0c8",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 11
      },
      "lineNbr": 232,
      "author": {
        "id": 1930620
      },
      "writtenOn": "2023-12-05T22:27:28Z",
      "side": 1,
      "message": "This should still never happen so this is really an error, but this function was made idempotent by a previous change, so we can\u0027t use `ERROR` here.",
      "parentUuid": "96c65297_539e96e8",
      "range": {
        "startLine": 232,
        "startChar": 7,
        "endLine": 232,
        "endChar": 71
      },
      "revId": "5587ee338bfea8eaf72d862350f806380c9b3ce0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5dba86df_142ded21",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 11
      },
      "lineNbr": 413,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2023-12-05T18:39:58Z",
      "side": 1,
      "message": "why not place into the `else` branch of `if (CgroupsAvailable())` and drop the comment?",
      "range": {
        "startLine": 413,
        "startChar": 32,
        "endLine": 413,
        "endChar": 54
      },
      "revId": "5587ee338bfea8eaf72d862350f806380c9b3ce0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3c24e48_ffc33640",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 11
      },
      "lineNbr": 413,
      "author": {
        "id": 1930620
      },
      "writtenOn": "2023-12-05T22:27:28Z",
      "side": 1,
      "message": "Even if we have cgroups we should still always attempt to kill the leader regardless of `cgroup.procs` content. This was changed recently by Bart for the case where the leader was (erroneously) migrated out of the cgroup under aosp/2832972. We do that in the error case for cgroups above (`kill(-initialPid,...)`), but you asked me to remove that in the next commit. So we can add the `kill:` goto label above this line and change the kill above to a `goto`, or keep this and drop the comment.",
      "parentUuid": "5dba86df_142ded21",
      "range": {
        "startLine": 413,
        "startChar": 32,
        "endLine": 413,
        "endChar": 54
      },
      "revId": "5587ee338bfea8eaf72d862350f806380c9b3ce0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65c46cac_9fd2a3d1",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 11
      },
      "lineNbr": 453,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2023-12-05T18:39:58Z",
      "side": 1,
      "message": "Why not make this function return `ret` and log in the caller. That way this function would not have to assume it\u0027s always used against PROCESSGROUP_CGROUP_EVENTS_FILE. Also the caller can make different decision based on the return value.",
      "range": {
        "startLine": 453,
        "startChar": 8,
        "endLine": 453,
        "endChar": 11
      },
      "revId": "5587ee338bfea8eaf72d862350f806380c9b3ce0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc52f6cf_e59c74ba",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 11
      },
      "lineNbr": 453,
      "author": {
        "id": 1930620
      },
      "writtenOn": "2023-12-05T22:27:28Z",
      "side": 1,
      "message": "Huh? There is no way to make this work without `PROCESSGROUP_CGROUP_EVENTS_FILE`. The condition checked after this is called is whether the cgroup still exists and is populated, not the return value of poll (# events or timeout). The return value of poll doesn\u0027t matter at all here, we just want the blocking behavior. If we ever need to poll on some other file we can change the function then, but I\u0027d rather not make the populated check -\u003e kill -\u003e poll loop larger than it is unless we need to. Otherwise, there\u0027s no point to having this function at all instead of calling poll directly.",
      "parentUuid": "65c46cac_9fd2a3d1",
      "range": {
        "startLine": 453,
        "startChar": 8,
        "endLine": 453,
        "endChar": 11
      },
      "revId": "5587ee338bfea8eaf72d862350f806380c9b3ce0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0339472e_d3d0fe62",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 11
      },
      "lineNbr": 462,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2023-12-05T18:39:58Z",
      "side": 1,
      "message": "enum would be more readable.",
      "range": {
        "startLine": 460,
        "startChar": 1,
        "endLine": 462,
        "endChar": 24
      },
      "revId": "5587ee338bfea8eaf72d862350f806380c9b3ce0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01084c0b_e37c15e8",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 11
      },
      "lineNbr": 462,
      "author": {
        "id": 1930620
      },
      "writtenOn": "2023-12-05T22:27:28Z",
      "side": 1,
      "message": "I actually want to use `std::expected` here, but that\u0027s blocked by b/175635923.",
      "parentUuid": "0339472e_d3d0fe62",
      "range": {
        "startLine": 460,
        "startChar": 1,
        "endLine": 462,
        "endChar": 24
      },
      "revId": "5587ee338bfea8eaf72d862350f806380c9b3ce0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0745f69_dca19604",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 11
      },
      "lineNbr": 470,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2023-12-05T18:39:58Z",
      "side": 1,
      "message": "you can do this with one pread() syscall",
      "range": {
        "startLine": 469,
        "startChar": 4,
        "endLine": 470,
        "endChar": 78
      },
      "revId": "5587ee338bfea8eaf72d862350f806380c9b3ce0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2fa6d29a_baec89c9",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 11
      },
      "lineNbr": 470,
      "author": {
        "id": 1930620
      },
      "writtenOn": "2023-12-05T22:27:28Z",
      "side": 1,
      "message": "Thanks, will get rid of the `lseek`.",
      "parentUuid": "d0745f69_dca19604",
      "range": {
        "startLine": 469,
        "startChar": 4,
        "endLine": 470,
        "endChar": 78
      },
      "revId": "5587ee338bfea8eaf72d862350f806380c9b3ce0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a915cfc_4b47ad14",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 11
      },
      "lineNbr": 475,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2023-12-05T18:39:58Z",
      "side": 1,
      "message": "Do we want an error even on ENOENT?",
      "range": {
        "startLine": 475,
        "startChar": 8,
        "endLine": 475,
        "endChar": 18
      },
      "revId": "5587ee338bfea8eaf72d862350f806380c9b3ce0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ca795c1_4450e133",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 11
      },
      "lineNbr": 475,
      "author": {
        "id": 1930620
      },
      "writtenOn": "2023-12-05T22:27:28Z",
      "side": 1,
      "message": "As the comment says, the cgroup should not disappear underneath us any time this function is called. If it does, that means somebody other than libprocessgroup is removing cgroups, or someone tried to kill the cgroup twice. Both of those things should not be happening.",
      "parentUuid": "8a915cfc_4b47ad14",
      "range": {
        "startLine": 475,
        "startChar": 8,
        "endLine": 475,
        "endChar": 18
      },
      "revId": "5587ee338bfea8eaf72d862350f806380c9b3ce0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92f13983_587e3ea9",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 11
      },
      "lineNbr": 516,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2023-12-05T18:39:58Z",
      "side": 1,
      "message": "we do this in sendSignalToProcessGroup() too. Can we do that once here and pass to that function?",
      "range": {
        "startLine": 515,
        "startChar": 4,
        "endLine": 516,
        "endChar": 75
      },
      "revId": "5587ee338bfea8eaf72d862350f806380c9b3ce0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ee5dbb70_458762cd",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 11
      },
      "lineNbr": 516,
      "author": {
        "id": 1930620
      },
      "writtenOn": "2023-12-05T22:27:28Z",
      "side": 1,
      "message": "No, `sendSignalToProcessGroup` is a public API.",
      "parentUuid": "92f13983_587e3ea9",
      "range": {
        "startLine": 515,
        "startChar": 4,
        "endLine": 516,
        "endChar": 75
      },
      "revId": "5587ee338bfea8eaf72d862350f806380c9b3ce0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44a1e4f8_236e12f2",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 11
      },
      "lineNbr": 566,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2023-12-05T18:39:58Z",
      "side": 1,
      "message": "This results in 2 log messages for every successful invocation of this function. Let\u0027s change it to one indicating that we successfully killed processes and removed a process group.",
      "range": {
        "startLine": 566,
        "startChar": 12,
        "endLine": 566,
        "endChar": 61
      },
      "revId": "5587ee338bfea8eaf72d862350f806380c9b3ce0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89b41fa2_b97231de",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 11
      },
      "lineNbr": 566,
      "author": {
        "id": 1930620
      },
      "writtenOn": "2023-12-05T22:27:28Z",
      "side": 1,
      "message": "Having had to try to guess what\u0027s going on from libprocessgroup logs in bugreports, I do not like this idea. The logs do not include enough info to really understand what is happening when and who triggered them, and having one log hides the duration of each step. There are two operations here, both of which can fail or be delayed for various reasons and I think we should have a log for success or failure of each.",
      "parentUuid": "44a1e4f8_236e12f2",
      "range": {
        "startLine": 566,
        "startChar": 12,
        "endLine": 566,
        "endChar": 61
      },
      "revId": "5587ee338bfea8eaf72d862350f806380c9b3ce0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82781eb1_ce893373",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 11
      },
      "lineNbr": 579,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2023-12-05T18:39:58Z",
      "side": 1,
      "message": "can we break this up into separate `if (...) break;`, otherwise it\u0027s really hard to follow all these conditions. Smth like:\n```\n    if (once) break;\n    if (std::chrono::steady_clock::now() \u003c until) break;\n} while (ret \u0026\u0026 errno \u003d\u003d EBUSY);\n\n```",
      "range": {
        "startLine": 579,
        "startChar": 6,
        "endLine": 579,
        "endChar": 89
      },
      "revId": "5587ee338bfea8eaf72d862350f806380c9b3ce0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "145d7498_be54d34d",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 11
      },
      "lineNbr": 579,
      "author": {
        "id": 1930620
      },
      "writtenOn": "2023-12-05T22:27:28Z",
      "side": 1,
      "message": "These are all anded together. The multiple lines look harder to read through to me, not easier. But I\u0027ll do whatever here.",
      "parentUuid": "82781eb1_ce893373",
      "range": {
        "startLine": 579,
        "startChar": 6,
        "endLine": 579,
        "endChar": 89
      },
      "revId": "5587ee338bfea8eaf72d862350f806380c9b3ce0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}