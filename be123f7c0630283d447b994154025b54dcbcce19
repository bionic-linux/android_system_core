{
  "comments": [
    {
      "key": {
        "uuid": "89e555e8_b879f2af",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-07T02:43:45Z",
      "side": 1,
      "message": "runtime",
      "range": {
        "startLine": 25,
        "startChar": 38,
        "endLine": 25,
        "endChar": 44
      },
      "revId": "be123f7c0630283d447b994154025b54dcbcce19",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1cdab25_ceff1882",
        "filename": "init/builtins.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1126,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-07T02:43:45Z",
      "side": 1,
      "message": "This effectively just bind mounts the same path to itself, given the paths?  Why is this needed?  Don\u0027t we have the same effect if we just do nothing until we create the \u0027runtime bionic\u0027 bind mounts?",
      "revId": "be123f7c0630283d447b994154025b54dcbcce19",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ae2230f_ea0f6b9d",
        "filename": "init/builtins.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1146,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-07T02:43:45Z",
      "side": 1,
      "message": "Function local instead?",
      "revId": "be123f7c0630283d447b994154025b54dcbcce19",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23489eca_e8ef6381",
        "filename": "init/service.cpp",
        "patchSetId": 4
      },
      "lineNbr": 144,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-07T02:43:45Z",
      "side": 1,
      "message": "This isn\u0027t actually dependent on the above code, right?\n\nI\u0027d leave this function untouched and create a new one SetupPreApexdMounts().  Call that function \"if (pre_apexd_ \u0026\u0026 ServiceList::GetInstance().IsRuntimeAvailable())\" and not the \"if (namespace_flags_ \u0026 CLONE_NEWNS || pre_apexd_)\" with the extra first check as it is now.",
      "revId": "be123f7c0630283d447b994154025b54dcbcce19",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f535ec9b_db8324c3",
        "filename": "init/service.cpp",
        "patchSetId": 4
      },
      "lineNbr": 150,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-07T02:43:45Z",
      "side": 1,
      "message": "does",
      "range": {
        "startLine": 150,
        "startChar": 27,
        "endLine": 150,
        "endChar": 32
      },
      "revId": "be123f7c0630283d447b994154025b54dcbcce19",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1a48331_3215b32a",
        "filename": "init/service.cpp",
        "patchSetId": 4
      },
      "lineNbr": 156,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-07T02:43:45Z",
      "side": 1,
      "message": "const auto\u0026",
      "range": {
        "startLine": 156,
        "startChar": 17,
        "endLine": 156,
        "endChar": 21
      },
      "revId": "be123f7c0630283d447b994154025b54dcbcce19",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4449a94d_e17b09be",
        "filename": "init/service.cpp",
        "patchSetId": 4
      },
      "lineNbr": 158,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-07T02:43:45Z",
      "side": 1,
      "message": "This is unused?",
      "revId": "be123f7c0630283d447b994154025b54dcbcce19",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}