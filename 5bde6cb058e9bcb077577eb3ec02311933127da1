{
  "comments": [
    {
      "key": {
        "uuid": "6a3a8b88_eda2daba",
        "filename": "adb/services.cpp",
        "patchSetId": 2
      },
      "lineNbr": 431,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-08-15T22:40:05Z",
      "side": 1,
      "message": "supplied value freed now that it is no longer needed.",
      "range": {
        "startLine": 431,
        "startChar": 4,
        "endLine": 431,
        "endChar": 15
      },
      "revId": "5bde6cb058e9bcb077577eb3ec02311933127da1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "053d8f6e_07b3c0a2",
        "filename": "adb/services.cpp",
        "patchSetId": 2
      },
      "lineNbr": 446,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-08-15T22:40:05Z",
      "side": 1,
      "message": "In any case, unique_ptr will manage freeing the resource on exit from this block.",
      "range": {
        "startLine": 446,
        "startChar": 8,
        "endLine": 446,
        "endChar": 58
      },
      "revId": "5bde6cb058e9bcb077577eb3ec02311933127da1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "95a57bba_2705387d",
        "filename": "adb/services.cpp",
        "patchSetId": 2
      },
      "lineNbr": 485,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-08-15T22:40:05Z",
      "side": 1,
      "message": "This (or the unique_ptr handling) may cause a use-after-free situation if the service thread has not started yet.\n\nThis _will_ cause a double-free.",
      "range": {
        "startLine": 483,
        "startChar": 0,
        "endLine": 485,
        "endChar": 9
      },
      "revId": "5bde6cb058e9bcb077577eb3ec02311933127da1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "35d1abf7_ad72c104",
        "filename": "adb/services.cpp",
        "patchSetId": 2
      },
      "lineNbr": 485,
      "author": {
        "id": 1096946
      },
      "writtenOn": "2017-08-15T22:47:32Z",
      "side": 1,
      "message": "How?\n\nAFAICT, create_service_thread will return -1 if and only if adb_socketpair fails, in which case the thread won\u0027t be spawned. I don\u0027t see what else could free `p` in that case.",
      "parentUuid": "95a57bba_2705387d",
      "range": {
        "startLine": 483,
        "startChar": 0,
        "endLine": 485,
        "endChar": 9
      },
      "revId": "5bde6cb058e9bcb077577eb3ec02311933127da1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a21cbc71_d602c65d",
        "filename": "adb/services.cpp",
        "patchSetId": 2
      },
      "lineNbr": 485,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-08-15T23:11:44Z",
      "side": 1,
      "message": "std::unique_ptr\u0027s whole purpose in life is to perform a delete of new state_info when it moves out of scope. It will automagically delete as part of the return call on 482. This will result in a double free (on error, thanks for the clarification).\n\nBut this causes another problem in that the return can happen before the thread uses p, which results in a use-after-free problem in the thread.\n\nDropping use of std::unique_ptr and moving the freeing to the thread when it is done using it, with error to delete here might be the full answer.",
      "parentUuid": "35d1abf7_ad72c104",
      "range": {
        "startLine": 483,
        "startChar": 0,
        "endLine": 485,
        "endChar": 9
      },
      "revId": "5bde6cb058e9bcb077577eb3ec02311933127da1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8fd2c80_b03f0e79",
        "filename": "adb/services.cpp",
        "patchSetId": 2
      },
      "lineNbr": 485,
      "author": {
        "id": 1096946
      },
      "writtenOn": "2017-08-15T23:33:25Z",
      "side": 1,
      "message": "\u003e It will automagically delete as part of the return call on 482\n\nNormally, yes, but we\u0027re release()ing it on line 481 (both in the old and new code), so it won\u0027t free anything for us after that. :)\n\nMaybe refactoring this to\n\nint fd \u003d create_service_thread(wait_for_state, sinfo.get());\nif (fd !\u003d -1) {\n  sinfo.release(); // the thread now owns this\n}\n\nwould be more clear?",
      "parentUuid": "a21cbc71_d602c65d",
      "range": {
        "startLine": 483,
        "startChar": 0,
        "endLine": 485,
        "endChar": 9
      },
      "revId": "5bde6cb058e9bcb077577eb3ec02311933127da1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d32fdc87_e78deed3",
        "filename": "adb/services.cpp",
        "patchSetId": 2
      },
      "lineNbr": 492,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-08-15T22:40:05Z",
      "side": 1,
      "message": "ditto (except connect_service() frees the entity after thread starts (which is the right thing to do and will prevent use-after-free)",
      "range": {
        "startLine": 490,
        "startChar": 0,
        "endLine": 492,
        "endChar": 9
      },
      "revId": "5bde6cb058e9bcb077577eb3ec02311933127da1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "844fa165_3d1dac27",
        "filename": "adb/services.cpp",
        "patchSetId": 2
      },
      "lineNbr": 492,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-08-15T23:11:44Z",
      "side": 1,
      "message": "In this case, if create_service_thread exits with -1, yes, from your comment above, it will need to be freed ... so this part of the fix stands correct.",
      "parentUuid": "d32fdc87_e78deed3",
      "range": {
        "startLine": 490,
        "startChar": 0,
        "endLine": 492,
        "endChar": 9
      },
      "revId": "5bde6cb058e9bcb077577eb3ec02311933127da1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}