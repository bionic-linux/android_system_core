{
  "comments": [
    {
      "key": {
        "uuid": "66dd2637_a49e9e2f",
        "filename": "init/README.md",
        "patchSetId": 5
      },
      "lineNbr": 509,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2017-04-21T16:13:16Z",
      "side": 1,
      "message": "remove \u0027the\u0027. We\u0027re using \u0027first stage mount\u0027 as an adjective here for \u0027devices\u0027, so no \u0027the\u0027",
      "range": {
        "startLine": 509,
        "startChar": 57,
        "endLine": 509,
        "endChar": 61
      },
      "revId": "62e08d8864c4e1247419c637e1081f7d1c635ae6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9af4074b_3c970858",
        "filename": "init/README.md",
        "patchSetId": 5
      },
      "lineNbr": 509,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2017-04-24T08:38:19Z",
      "side": 1,
      "message": "OK, thanks! my poor English :)",
      "parentUuid": "66dd2637_a49e9e2f",
      "range": {
        "startLine": 509,
        "startChar": 57,
        "endLine": 509,
        "endChar": 61
      },
      "revId": "62e08d8864c4e1247419c637e1081f7d1c635ae6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "361295c2_48996807",
        "filename": "init/README.md",
        "patchSetId": 5
      },
      "lineNbr": 522,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2017-04-21T16:13:16Z",
      "side": 1,
      "message": "same, remove \u0027the\u0027",
      "range": {
        "startLine": 522,
        "startChar": 35,
        "endLine": 522,
        "endChar": 38
      },
      "revId": "62e08d8864c4e1247419c637e1081f7d1c635ae6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2776902a_63c09d03",
        "filename": "init/init_first_stage.cpp",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2017-04-21T16:13:16Z",
      "side": 1,
      "message": "and/or",
      "range": {
        "startLine": 94,
        "startChar": 48,
        "endLine": 94,
        "endChar": 50
      },
      "revId": "62e08d8864c4e1247419c637e1081f7d1c635ae6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "889038b3_b31e01dc",
        "filename": "init/init_first_stage.cpp",
        "patchSetId": 5
      },
      "lineNbr": 135,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2017-04-21T15:47:17Z",
      "side": 1,
      "message": "It seems to me that \u0027need_dm_verity_\u0027 and \u0027device_init_partitions_\u0027 are better to be local vars here.\nBecause they\u0027re not used in other member functions.\nAlso, local vars provides better connection between the function calls here. LMK what do you think.\n\ne.g.,\n\n    if (!GetRequiredDevices(\u0026device_init_partitions, \u0026need_dm_verity)) return false;\n  \n    bool success \u003d false;\n    InitRequiredDevices(\u0026device_init_partitions);  // Creates the devices we need.\n\n    if (!device_init_partitions.empty()) {\n        LOG(ERROR) \u003c\u003c ...;\n    }\n\n    if (need_dm_verity) {\n        // Creates /dev/device-mapper.\n        device_init(\"/sys/devices/virtual/misc/device-mapper\",\n                    [\u0026](uevent* uevent) -\u003e coldboot_action_t { return COLDBOOT_STOP; });\n    }",
      "range": {
        "startLine": 116,
        "startChar": 0,
        "endLine": 135,
        "endChar": 5
      },
      "revId": "62e08d8864c4e1247419c637e1081f7d1c635ae6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "78c4bffe_e7f3c9b8",
        "filename": "init/init_first_stage.cpp",
        "patchSetId": 5
      },
      "lineNbr": 135,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2017-04-21T16:13:16Z",
      "side": 1,
      "message": "Okay, sgtm.  If you prefer local vars, then let\u0027s do this.  I\u0027m not sold on them being member variables either; I was just wondering if maybe it\u0027d be better?  But it looks like not.",
      "parentUuid": "889038b3_b31e01dc",
      "range": {
        "startLine": 116,
        "startChar": 0,
        "endLine": 135,
        "endChar": 5
      },
      "revId": "62e08d8864c4e1247419c637e1081f7d1c635ae6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3758391_77639bf6",
        "filename": "init/init_first_stage.cpp",
        "patchSetId": 5
      },
      "lineNbr": 233,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2017-04-21T23:29:20Z",
      "side": 1,
      "message": "bowogo, can you remind me if its possible to find the -\u003e verity_loc set for 2 fstab_recs in the fstab? I think it is totally possible and in that case that \"if (!meta_partition.empty())\" check will return true and we will needlessly fail.\n\nI think it needs to also do the comparison ...\n\nif (!meta_partition.empty() \u0026\u0026 meta_partition !\u003d std::string(fstab_rec-\u003everity_lock)) {\n  // fail here ..\n}",
      "range": {
        "startLine": 230,
        "startChar": 0,
        "endLine": 233,
        "endChar": 29
      },
      "revId": "62e08d8864c4e1247419c637e1081f7d1c635ae6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f630432_aeefa3fe",
        "filename": "init/init_first_stage.cpp",
        "patchSetId": 5
      },
      "lineNbr": 233,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2017-04-24T08:38:19Z",
      "side": 1,
      "message": "Oh, good catch, thanks!\n\nYup, I think it\u0027s possible by cs:\nhttps://cs.corp.google.com/search/?q\u003d%22verify%3D%22+p:android+file:fstab*\u0026type\u003dcs",
      "parentUuid": "d3758391_77639bf6",
      "range": {
        "startLine": 230,
        "startChar": 0,
        "endLine": 233,
        "endChar": 29
      },
      "revId": "62e08d8864c4e1247419c637e1081f7d1c635ae6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "267e0de5_d28086b3",
        "filename": "init/init_first_stage.cpp",
        "patchSetId": 5
      },
      "lineNbr": 254,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2017-04-21T23:29:20Z",
      "side": 1,
      "message": "do we need to do this check anymore? We can still do it I guess, but then return false if fstab_rec is not verified. Right now, we are returning failure only if record says its verified and we failed to setup dmverity ..",
      "range": {
        "startLine": 254,
        "startChar": 0,
        "endLine": 254,
        "endChar": 40
      },
      "revId": "62e08d8864c4e1247419c637e1081f7d1c635ae6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea8c4e94_543a3740",
        "filename": "init/init_first_stage.cpp",
        "patchSetId": 5
      },
      "lineNbr": 254,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2017-04-24T08:38:19Z",
      "side": 1,
      "message": "We still need the check here.\n\nOtherwise we\u0027ll need to check this in the base class (which I want to avoid): https://android-review.googlesource.com/#/c/373934/5/init/init_first_stage.cpp@200\n\nReturn true just simply means the derived class ignore the verity setup, because MF_VERIFY or MF_AVB isn\u0027t set.\nSimilar to what we did in the fs_mgr.cpp:\n\nhttps://cs.corp.google.com/android/system/core/fs_mgr/fs_mgr.cpp?q\u003dfs_mgr.cpp+p:android\u0026dr\u0026l\u003d863\n\nI think the logic is also similar to \"return true\" in early_mount():\n\nstatic bool early_mount() {                                                         \n    // skip early mount if we\u0027re in recovery mode                                   \n    if (access(\"/sbin/recovery\", F_OK) \u003d\u003d 0) {                                      \n        LOG(INFO) \u003c\u003c \"Early mount skipped (recovery mode)\";                         \n        return true;  \u003c--- return true here                                                              \n    }                                                                               \n                                                                                    \n    // first check if device tree fstab entries are compatible                      \n    if (!is_dt_fstab_compatible()) {                                                \n        LOG(INFO) \u003c\u003c \"Early mount skipped (missing/incompatible fstab in device tree)\";\n        return true;  \u003c--- return true here       \n    }     \n    ...",
      "parentUuid": "267e0de5_d28086b3",
      "range": {
        "startLine": 254,
        "startChar": 0,
        "endLine": 254,
        "endChar": 40
      },
      "revId": "62e08d8864c4e1247419c637e1081f7d1c635ae6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b66bc9b6_e35e640c",
        "filename": "init/init_first_stage.cpp",
        "patchSetId": 5
      },
      "lineNbr": 255,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2017-04-21T23:29:20Z",
      "side": 1,
      "message": "\"do not wait for verity_dev\"",
      "range": {
        "startLine": 255,
        "startChar": 58,
        "endLine": 255,
        "endChar": 77
      },
      "revId": "62e08d8864c4e1247419c637e1081f7d1c635ae6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28fb92b7_dc2ee21e",
        "filename": "init/init_first_stage.cpp",
        "patchSetId": 5
      },
      "lineNbr": 255,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2017-04-24T08:38:19Z",
      "side": 1,
      "message": "This is the function parameter, not a general comment.\nI usually do this for the literals. \n\nint fs_mgr_setup_verity(struct fstab_rec *fstab, bool wait_for_verity_dev);",
      "parentUuid": "b66bc9b6_e35e640c",
      "range": {
        "startLine": 255,
        "startChar": 58,
        "endLine": 255,
        "endChar": 77
      },
      "revId": "62e08d8864c4e1247419c637e1081f7d1c635ae6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aadb2d58_ccdcaf08",
        "filename": "init/init_first_stage.cpp",
        "patchSetId": 5
      },
      "lineNbr": 289,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2017-04-21T23:29:20Z",
      "side": 1,
      "message": "nit: TODO here if we are going to remove the prefix..",
      "range": {
        "startLine": 289,
        "startChar": 38,
        "endLine": 289,
        "endChar": 52
      },
      "revId": "62e08d8864c4e1247419c637e1081f7d1c635ae6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "191736bd_d456d63a",
        "filename": "init/init_first_stage.cpp",
        "patchSetId": 5
      },
      "lineNbr": 327,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2017-04-21T23:29:20Z",
      "side": 1,
      "message": "same comment as the V1 version, its an error if this is not set in fstab_rec, we are returning success anyway ..",
      "range": {
        "startLine": 327,
        "startChar": 8,
        "endLine": 327,
        "endChar": 21
      },
      "revId": "62e08d8864c4e1247419c637e1081f7d1c635ae6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce7c1c3a_e03aae34",
        "filename": "init/init_first_stage.cpp",
        "patchSetId": 5
      },
      "lineNbr": 327,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2017-04-24T08:38:19Z",
      "side": 1,
      "message": "Same as above. \n\nWe need to return true to allow mount partitions without verity. I knew that all early mount partitions should have verity, but this check should probably be done separately (e.g., a CTS check) and not an enforcement here.\n\nActually this is the current behavior before the refactoring.\ne.g., some existing project already early mounts /vendor without verity:\nhttps://b.corp.google.com/issues/37290841#comment2\n\nReturning false here will break them.",
      "parentUuid": "191736bd_d456d63a",
      "range": {
        "startLine": 327,
        "startChar": 8,
        "endLine": 327,
        "endChar": 21
      },
      "revId": "62e08d8864c4e1247419c637e1081f7d1c635ae6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "67cebf16_261a51c6",
        "filename": "init/init_first_stage.cpp",
        "patchSetId": 5
      },
      "lineNbr": 357,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2017-04-21T16:13:16Z",
      "side": 1,
      "message": "and/or, but maybe this comment can be phrased differently too.  Something like:\n\n\"Mount /system, /vendor, and/or /odm if they are present in the fstab provided by device-tree\"",
      "range": {
        "startLine": 357,
        "startChar": 24,
        "endLine": 357,
        "endChar": 26
      },
      "revId": "62e08d8864c4e1247419c637e1081f7d1c635ae6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25f2e007_bab058c4",
        "filename": "init/init_first_stage.h",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2017-04-21T23:29:20Z",
      "side": 1,
      "message": "nit: init_first_stage_mount.h or first_stage_mount.h",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 27
      },
      "revId": "62e08d8864c4e1247419c637e1081f7d1c635ae6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10f99b0a_f8ba294d",
        "filename": "init/init_first_stage.h",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2017-04-24T08:38:19Z",
      "side": 1,
      "message": "I\u0027d prefer to stay this to be more generic, because the next CL (SetInitAvbVersion) does not \u0027mount\u0027 anything. \n\nWe can also consider moving other first stage sources (before execv itself) to init_first_stage.cpp when it gets bloated later.\n\nhttps://cs.corp.google.com/android/system/core/init/init.cpp?q\u003dinit.cpp\u0026dr\u0026l\u003d1368",
      "parentUuid": "25f2e007_bab058c4",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 27
      },
      "revId": "62e08d8864c4e1247419c637e1081f7d1c635ae6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}