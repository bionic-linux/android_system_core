{
  "comments": [
    {
      "key": {
        "uuid": "0ee77a9e_49618844",
        "filename": "bootstat/bootstat.cpp",
        "patchSetId": 4
      },
      "lineNbr": 306,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-09-20T20:38:29Z",
      "side": 1,
      "message": "anon. namespace and kBitErrorRate naming conventions may be preferred, not sure.",
      "range": {
        "startLine": 306,
        "startChar": 2,
        "endLine": 306,
        "endChar": 27
      },
      "revId": "8194591f61da162735b39f55cfdf5b2dddda0a7f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7aab9377_6fb998d3",
        "filename": "bootstat/bootstat.cpp",
        "patchSetId": 4
      },
      "lineNbr": 309,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-09-20T20:38:29Z",
      "side": 1,
      "message": "differ",
      "range": {
        "startLine": 309,
        "startChar": 25,
        "endLine": 309,
        "endChar": 34
      },
      "revId": "8194591f61da162735b39f55cfdf5b2dddda0a7f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79159bf5_8c509b8d",
        "filename": "bootstat/bootstat.cpp",
        "patchSetId": 4
      },
      "lineNbr": 311,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-09-20T20:38:29Z",
      "side": 1,
      "message": "init: The name \"eq\" suggest a more traditional equality check to me, but don\u0027t care about the name that much.",
      "range": {
        "startLine": 311,
        "startChar": 9,
        "endLine": 311,
        "endChar": 11
      },
      "revId": "8194591f61da162735b39f55cfdf5b2dddda0a7f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "91f03700_c9b0de32",
        "filename": "bootstat/bootstat.cpp",
        "patchSetId": 4
      },
      "lineNbr": 319,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-09-20T20:38:29Z",
      "side": 1,
      "message": "I think LHS string must be (is guaranteed to be at line 340 by the caller) at least as long as RHS, yes?  A comment to that effect may be useful.",
      "range": {
        "startLine": 319,
        "startChar": 56,
        "endLine": 319,
        "endChar": 63
      },
      "revId": "8194591f61da162735b39f55cfdf5b2dddda0a7f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "726f86ae_799e349f",
        "filename": "bootstat/bootstat.cpp",
        "patchSetId": 4
      },
      "lineNbr": 321,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-09-20T20:38:29Z",
      "side": 1,
      "message": "Reuse of n for different purpose than above seems slightly confusing, suggest a new variable with a more descriptive name.",
      "range": {
        "startLine": 321,
        "startChar": 4,
        "endLine": 321,
        "endChar": 5
      },
      "revId": "8194591f61da162735b39f55cfdf5b2dddda0a7f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba2d4689_08177226",
        "filename": "bootstat/bootstat.cpp",
        "patchSetId": 4
      },
      "lineNbr": 345,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-09-20T20:38:29Z",
      "side": 1,
      "message": "I\u0027m probably just being dense, but: how did p get ahead of its starting position here?",
      "range": {
        "startLine": 345,
        "startChar": 15,
        "endLine": 345,
        "endChar": 18
      },
      "revId": "8194591f61da162735b39f55cfdf5b2dddda0a7f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b24cd9f_8ec9c015",
        "filename": "bootstat/bootstat.cpp",
        "patchSetId": 4
      },
      "lineNbr": 551,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-09-20T20:18:27Z",
      "side": 1,
      "message": "Idea (no action required) and editorial, in the face of the ever increasing complexity of the battery detection code (experiment).\n\nWe are going to way too much trouble over an unlikely feature, this _only works if ramoops is backed by trusted, private and secure one-time-key flash. Yet here we are acting like it is corruptible; we do this really to deal with corruption _causing_ a false signal.\n\nWe can harden this somewhat by checking the last minute, which if the device is awake, would be the last six reports (one every ten seconds). Check for consistency (voting + average or linear regression). Or we can just check all of them, and use linear regression to see a discharge rate and final point.\n\nWe have tools (batterybug etc) that will show us that the device most likely shutdown from battery discharge, we need to use their algorithms. So more study is required.\n\nYes, a _lot_ of work to go to in either case, in order to sense battery should we not provide its own via the bootloader or via user space; especially since it is generally considered _unlikely_ that there would be any pstore information on a battery shutdown unless ramoops is backed by secure one-time-key flash.\n\nThe real expectation is that if there is a preemptive battery shutdown by user space, it would report shutdown,battery. IF the bootloader could detect it from the pmic, it could report it. Otherwise the code here is all about a default backup plan for the devices that have no such support.",
      "range": {
        "startLine": 529,
        "startChar": 0,
        "endLine": 551,
        "endChar": 53
      },
      "revId": "8194591f61da162735b39f55cfdf5b2dddda0a7f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}