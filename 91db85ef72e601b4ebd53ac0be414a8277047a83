{
  "comments": [
    {
      "key": {
        "uuid": "3805684c_2c686506",
        "filename": "base/expected_test.cpp",
        "patchSetId": 7
      },
      "lineNbr": 732,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-05-21T16:09:35Z",
      "side": 1,
      "message": "\u003d delete?  As far as I can tell this is still a copy-able type.\n\nMaybe just use unique_ptr\u003cint\u003e to save ourselves from writing our own type.  We can static_assert that unique_ptr is only moveable in case that (super unexpectedly) changes.",
      "revId": "91db85ef72e601b4ebd53ac0be414a8277047a83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b179c1a1_8497307a",
        "filename": "base/expected_test.cpp",
        "patchSetId": 7
      },
      "lineNbr": 732,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-05-21T21:41:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3805684c_2c686506",
      "revId": "91db85ef72e601b4ebd53ac0be414a8277047a83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "274f6a2f_71461337",
        "filename": "base/include/android-base/expected.h",
        "patchSetId": 7
      },
      "lineNbr": 244,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-05-21T16:09:35Z",
      "side": 1,
      "message": "Unless this is a trivial fix; this is probably good enough while we wait for the full std::expected, no?",
      "revId": "91db85ef72e601b4ebd53ac0be414a8277047a83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "046494cb_a4dc58f8",
        "filename": "base/include/android-base/expected.h",
        "patchSetId": 7
      },
      "lineNbr": 244,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-05-21T21:41:29Z",
      "side": 1,
      "message": "Yeah, the lack of enable_if\u003c...\u003e isn\u0027t causing any real problem since we are calling the assignment operator of std::variant inside our assignment operator.\n\nBut I would like to leave these comment on the file, to be clear.",
      "parentUuid": "274f6a2f_71461337",
      "revId": "91db85ef72e601b4ebd53ac0be414a8277047a83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "60eac1cc_7438377d",
        "filename": "base/include/android-base/expected.h",
        "patchSetId": 7
      },
      "lineNbr": 244,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-05-21T22:20:30Z",
      "side": 1,
      "message": "I think doing it this way may subtly cause the entire expected instantiation to fail when it tries to instantiate the variant::operator\u003d template and the appropriate conditions aren\u0027t met ?\n\n---------\n\nIf we look at a reference implementation of this proposal here:\n\nhttps://github.com/martinmoene/expected-lite/blob/master/include/nonstd/expected.hpp#L1384\n\nThey fix this issue by making the return type an std::enable_if\u003c...\u003e::type\n\nhttps://raw.githubusercontent.com/martinmoene/expected-lite/master/include/nonstd/expected.hpp",
      "parentUuid": "046494cb_a4dc58f8",
      "revId": "91db85ef72e601b4ebd53ac0be414a8277047a83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e72deaf_719a207b",
        "filename": "base/include/android-base/expected.h",
        "patchSetId": 7
      },
      "lineNbr": 244,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-05-21T22:36:36Z",
      "side": 1,
      "message": "That\u0027s exactly what I was doing here and it doesn\u0027t work. SFNAIE can\u0027t be used here to disable the assignment operator since the type T and E are not used in the method signature.\n\nThe bigger problem is that assignment operator should be a non-template method.\n\nhttps://en.cppreference.com/w/cpp/language/copy_assignment\n\nA copy assignment operator of class T is a non-template non-static member function with the name operator\u003d that takes exactly one parameter of type T, T\u0026, const T\u0026, volatile T\u0026, or const volatile T\u0026.",
      "parentUuid": "60eac1cc_7438377d",
      "revId": "91db85ef72e601b4ebd53ac0be414a8277047a83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "33a0a4a4_3cda8f97",
        "filename": "base/include/android-base/expected.h",
        "patchSetId": 7
      },
      "lineNbr": 263,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-05-21T22:20:30Z",
      "side": 1,
      "message": "Ditto here.",
      "revId": "91db85ef72e601b4ebd53ac0be414a8277047a83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fda2316a_b3cf2bf7",
        "filename": "base/include/android-base/expected.h",
        "patchSetId": 7
      },
      "lineNbr": 263,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-05-21T22:36:36Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "33a0a4a4_3cda8f97",
      "revId": "91db85ef72e601b4ebd53ac0be414a8277047a83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d16fc562_76f167c7",
        "filename": "base/include/android-base/expected.h",
        "patchSetId": 7
      },
      "lineNbr": 286,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-05-21T22:20:30Z",
      "side": 1,
      "message": "Why is this a TODO?",
      "revId": "91db85ef72e601b4ebd53ac0be414a8277047a83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b00e1c74_09b04fa4",
        "filename": "base/include/android-base/expected.h",
        "patchSetId": 7
      },
      "lineNbr": 286,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-05-21T22:36:36Z",
      "side": 1,
      "message": "I will fix this in a follow-up CL.",
      "parentUuid": "d16fc562_76f167c7",
      "revId": "91db85ef72e601b4ebd53ac0be414a8277047a83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}