{
  "comments": [
    {
      "key": {
        "uuid": "3805684c_2c686506",
        "filename": "base/expected_test.cpp",
        "patchSetId": 7
      },
      "lineNbr": 732,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-05-21T16:09:35Z",
      "side": 1,
      "message": "\u003d delete?  As far as I can tell this is still a copy-able type.\n\nMaybe just use unique_ptr\u003cint\u003e to save ourselves from writing our own type.  We can static_assert that unique_ptr is only moveable in case that (super unexpectedly) changes.",
      "revId": "91db85ef72e601b4ebd53ac0be414a8277047a83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b179c1a1_8497307a",
        "filename": "base/expected_test.cpp",
        "patchSetId": 7
      },
      "lineNbr": 732,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-05-21T21:41:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3805684c_2c686506",
      "revId": "91db85ef72e601b4ebd53ac0be414a8277047a83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "274f6a2f_71461337",
        "filename": "base/include/android-base/expected.h",
        "patchSetId": 7
      },
      "lineNbr": 244,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-05-21T16:09:35Z",
      "side": 1,
      "message": "Unless this is a trivial fix; this is probably good enough while we wait for the full std::expected, no?",
      "revId": "91db85ef72e601b4ebd53ac0be414a8277047a83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "046494cb_a4dc58f8",
        "filename": "base/include/android-base/expected.h",
        "patchSetId": 7
      },
      "lineNbr": 244,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-05-21T21:41:29Z",
      "side": 1,
      "message": "Yeah, the lack of enable_if\u003c...\u003e isn\u0027t causing any real problem since we are calling the assignment operator of std::variant inside our assignment operator.\n\nBut I would like to leave these comment on the file, to be clear.",
      "parentUuid": "274f6a2f_71461337",
      "revId": "91db85ef72e601b4ebd53ac0be414a8277047a83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "60eac1cc_7438377d",
        "filename": "base/include/android-base/expected.h",
        "patchSetId": 7
      },
      "lineNbr": 244,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-05-21T22:20:30Z",
      "side": 1,
      "message": "I think doing it this way may subtly cause the entire expected instantiation to fail when it tries to instantiate the variant::operator\u003d template and the appropriate conditions aren\u0027t met ?\n\n---------\n\nIf we look at a reference implementation of this proposal here:\n\nhttps://github.com/martinmoene/expected-lite/blob/master/include/nonstd/expected.hpp#L1384\n\nThey fix this issue by making the return type an std::enable_if\u003c...\u003e::type\n\nhttps://raw.githubusercontent.com/martinmoene/expected-lite/master/include/nonstd/expected.hpp",
      "parentUuid": "046494cb_a4dc58f8",
      "revId": "91db85ef72e601b4ebd53ac0be414a8277047a83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e72deaf_719a207b",
        "filename": "base/include/android-base/expected.h",
        "patchSetId": 7
      },
      "lineNbr": 244,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-05-21T22:36:36Z",
      "side": 1,
      "message": "That\u0027s exactly what I was doing here and it doesn\u0027t work. SFNAIE can\u0027t be used here to disable the assignment operator since the type T and E are not used in the method signature.\n\nThe bigger problem is that assignment operator should be a non-template method.\n\nhttps://en.cppreference.com/w/cpp/language/copy_assignment\n\nA copy assignment operator of class T is a non-template non-static member function with the name operator\u003d that takes exactly one parameter of type T, T\u0026, const T\u0026, volatile T\u0026, or const volatile T\u0026.",
      "parentUuid": "60eac1cc_7438377d",
      "revId": "91db85ef72e601b4ebd53ac0be414a8277047a83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0207e465_aed7b285",
        "filename": "base/include/android-base/expected.h",
        "patchSetId": 7
      },
      "lineNbr": 244,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-05-21T22:38:32Z",
      "side": 1,
      "message": "According to 23.7.3.3 [variant.assign] from the C++17 standard\n\n \u003e variant\u0026 operator\u003d(const variant\u0026 rhs);\n \u003e\n \u003e Remarks: This operator shall be defined as deleted unless is_copy_constructible_v\u003cTi\u003e \u0026\u0026 is_ copy_assignable_v\u003cTi\u003e is true for all i.\n\nThe move operator has a similar remark.\n------\n\nSo I would expect that this should be valid:\n\n  class DefaultConstructibleOnly{\n     DefaultConstructibleOnly() \u003d default;\n     DefaultConstructibleOnly(const\u0026 DefaultConstructibleOnly) \u003d delete;\n     DefaultConstructibleOnly(DefaultConstructibleOnly\u0026\u0026) \u003d delete;\n  };\n\n  expected\u003cDefaultConstructibleOnly, int\u003e ok{};\n\nHowever right now it looks like that it would try to instantiate std::variant\u003cDefaultConstructibleOnly,int\u003e::operator\u003d which cannot exist since it violates the requirements ?",
      "parentUuid": "60eac1cc_7438377d",
      "revId": "91db85ef72e601b4ebd53ac0be414a8277047a83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d858651b_04811dcb",
        "filename": "base/include/android-base/expected.h",
        "patchSetId": 7
      },
      "lineNbr": 244,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-05-21T22:40:57Z",
      "side": 1,
      "message": "\u003e That\u0027s exactly what I was doing here and it doesn\u0027t work. SFNAIE can\u0027t be used here to disable the assignment operator since the type T and E are not used in the method signature.\n\u003e \n\u003e The bigger problem is that assignment operator should be a non-template method.\n\nhttps://github.com/martinmoene/expected-lite/blob/master/include/nonstd/expected.hpp#L1384\n\nWhere is the template? There is no \u0027template\u0027 keyword there or in the macro expansion.",
      "parentUuid": "0207e465_aed7b285",
      "revId": "91db85ef72e601b4ebd53ac0be414a8277047a83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42cefdfd_a02b1d6e",
        "filename": "base/include/android-base/expected.h",
        "patchSetId": 7
      },
      "lineNbr": 244,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-05-21T22:57:57Z",
      "side": 1,
      "message": "When I do as the github link does, it fails with following error:\n\nsystem/core/base/include/android-base/expected.h:252:5: error: failed requirement \u0027std::is_copy_assignable_v\u003cstd::__1::unique_ptr\u003cint, std::__1::default_delete\u003cint\u003e \u003e \u003e\u0027; \u0027enable_if\u0027 cannot be used to disable this declaration\n    std::is_copy_assignable_v\u003cT\u003e \u0026\u0026\n    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nsource code:\n  typename std::enable_if\u003c(\n      std::is_copy_assignable_v\u003cT\u003e \u0026\u0026\n      std::is_copy_constructible_v\u003cT\u003e \u0026\u0026\n      std::is_copy_assignable_v\u003cE\u003e \u0026\u0026\n      std::is_copy_constructible_v\u003cE\u003e \u0026\u0026\n      (std::is_nothrow_move_constructible_v\u003cE\u003e ||\n       std::is_nothrow_move_constructible_v\u003cT\u003e)\n    ), expected\u0026\u003e::type\n    operator\u003d(const expected\u0026 rhs) {\n      var_ \u003d rhs.var_;\n      return *this;\n    }",
      "parentUuid": "d858651b_04811dcb",
      "revId": "91db85ef72e601b4ebd53ac0be414a8277047a83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "33a0a4a4_3cda8f97",
        "filename": "base/include/android-base/expected.h",
        "patchSetId": 7
      },
      "lineNbr": 263,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-05-21T22:20:30Z",
      "side": 1,
      "message": "Ditto here.",
      "revId": "91db85ef72e601b4ebd53ac0be414a8277047a83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fda2316a_b3cf2bf7",
        "filename": "base/include/android-base/expected.h",
        "patchSetId": 7
      },
      "lineNbr": 263,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-05-21T22:36:36Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "33a0a4a4_3cda8f97",
      "revId": "91db85ef72e601b4ebd53ac0be414a8277047a83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d16fc562_76f167c7",
        "filename": "base/include/android-base/expected.h",
        "patchSetId": 7
      },
      "lineNbr": 286,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-05-21T22:20:30Z",
      "side": 1,
      "message": "Why is this a TODO?",
      "revId": "91db85ef72e601b4ebd53ac0be414a8277047a83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b00e1c74_09b04fa4",
        "filename": "base/include/android-base/expected.h",
        "patchSetId": 7
      },
      "lineNbr": 286,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-05-21T22:36:36Z",
      "side": 1,
      "message": "I will fix this in a follow-up CL.",
      "parentUuid": "d16fc562_76f167c7",
      "revId": "91db85ef72e601b4ebd53ac0be414a8277047a83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}