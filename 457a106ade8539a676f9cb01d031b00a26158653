{
  "comments": [
    {
      "key": {
        "uuid": "7b5b3704_0e56cfb7",
        "filename": "libnativeloader/library_namespaces.cpp",
        "patchSetId": 9
      },
      "lineNbr": 222,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-05-13T21:27:01Z",
      "side": 1,
      "message": "This drops a lot of conditions wrt the if clause where the assertion was before. Isn\u0027t it better to introduce a bool up there so that the same result is reused?",
      "range": {
        "startLine": 222,
        "startChar": 6,
        "endLine": 222,
        "endChar": 73
      },
      "revId": "457a106ade8539a676f9cb01d031b00a26158653",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3b3e6fd_127af4ba",
        "filename": "libnativeloader/library_namespaces.cpp",
        "patchSetId": 9
      },
      "lineNbr": 222,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-05-14T02:12:29Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "7b5b3704_0e56cfb7",
      "range": {
        "startLine": 222,
        "startChar": 6,
        "endLine": 222,
        "endChar": 73
      },
      "revId": "457a106ade8539a676f9cb01d031b00a26158653",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12ef1870_d228dc76",
        "filename": "libnativeloader/library_namespaces.cpp",
        "patchSetId": 9
      },
      "lineNbr": 245,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-05-13T21:27:01Z",
      "side": 1,
      "message": "Provided that is as it should be, this can be in an if statement before retrieving vndk_ns.",
      "range": {
        "startLine": 245,
        "startChar": 26,
        "endLine": 245,
        "endChar": 53
      },
      "revId": "457a106ade8539a676f9cb01d031b00a26158653",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67aae72b_0f6ae72e",
        "filename": "libnativeloader/library_namespaces.cpp",
        "patchSetId": 9
      },
      "lineNbr": 245,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-05-13T21:27:01Z",
      "side": 1,
      "message": "The logic has changed here - before these links were only added when apk_origin stuff above was true, now all it takes is that a \"vndk\" namespace exists and vndksp_libraries() isn\u0027t empty.",
      "range": {
        "startLine": 245,
        "startChar": 7,
        "endLine": 245,
        "endChar": 14
      },
      "revId": "457a106ade8539a676f9cb01d031b00a26158653",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3bbe4fe_b5de1994",
        "filename": "libnativeloader/library_namespaces.cpp",
        "patchSetId": 9
      },
      "lineNbr": 245,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-05-14T02:12:29Z",
      "side": 1,
      "message": "Good catch. Fixed.",
      "parentUuid": "67aae72b_0f6ae72e",
      "range": {
        "startLine": 245,
        "startChar": 7,
        "endLine": 245,
        "endChar": 14
      },
      "revId": "457a106ade8539a676f9cb01d031b00a26158653",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "53007d08_f53267d9",
        "filename": "libnativeloader/library_namespaces.cpp",
        "patchSetId": 9
      },
      "lineNbr": 245,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-05-14T02:12:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "12ef1870_d228dc76",
      "range": {
        "startLine": 245,
        "startChar": 26,
        "endLine": 245,
        "endChar": 53
      },
      "revId": "457a106ade8539a676f9cb01d031b00a26158653",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf6d25f1_2fd5ae60",
        "filename": "libnativeloader/library_namespaces.cpp",
        "patchSetId": 9
      },
      "lineNbr": 252,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-05-13T21:27:01Z",
      "side": 1,
      "message": "Nit: It no longer returns a nullptr.",
      "range": {
        "startLine": 252,
        "startChar": 48,
        "endLine": 252,
        "endChar": 81
      },
      "revId": "457a106ade8539a676f9cb01d031b00a26158653",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95094be6_1eb048c0",
        "filename": "libnativeloader/library_namespaces.cpp",
        "patchSetId": 9
      },
      "lineNbr": 252,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-05-14T02:12:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bf6d25f1_2fd5ae60",
      "range": {
        "startLine": 252,
        "startChar": 48,
        "endLine": 252,
        "endChar": 81
      },
      "revId": "457a106ade8539a676f9cb01d031b00a26158653",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf8a9d44_913974a9",
        "filename": "libnativeloader/library_namespaces.cpp",
        "patchSetId": 9
      },
      "lineNbr": 256,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-05-13T21:27:01Z",
      "side": 1,
      "message": "Can go before the vendor_ns initialisation.",
      "range": {
        "startLine": 256,
        "startChar": 2,
        "endLine": 256,
        "endChar": 43
      },
      "revId": "457a106ade8539a676f9cb01d031b00a26158653",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff381bb7_e0d167ed",
        "filename": "libnativeloader/library_namespaces.cpp",
        "patchSetId": 9
      },
      "lineNbr": 256,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-05-14T02:12:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bf8a9d44_913974a9",
      "range": {
        "startLine": 256,
        "startChar": 2,
        "endLine": 256,
        "endChar": 43
      },
      "revId": "457a106ade8539a676f9cb01d031b00a26158653",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4210338f_fb885c0e",
        "filename": "libnativeloader/native_loader_namespace.cpp",
        "patchSetId": 9
      },
      "lineNbr": 66,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-05-13T21:27:01Z",
      "side": 1,
      "message": "This should probably be const char* since that\u0027s what\u0027s being passed to it in LibraryNamespaces::Create.",
      "range": {
        "startLine": 66,
        "startChar": 45,
        "endLine": 66,
        "endChar": 68
      },
      "revId": "457a106ade8539a676f9cb01d031b00a26158653",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25ab6cbe_25e48442",
        "filename": "libnativeloader/native_loader_namespace.cpp",
        "patchSetId": 9
      },
      "lineNbr": 66,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-05-14T02:12:29Z",
      "side": 1,
      "message": "In the future it could be std::string if we wanted to use more meaningful (context-aware) names for the namespaces.",
      "parentUuid": "4210338f_fb885c0e",
      "range": {
        "startLine": 66,
        "startChar": 45,
        "endLine": 66,
        "endChar": 68
      },
      "revId": "457a106ade8539a676f9cb01d031b00a26158653",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "027bea32_0b28c3b3",
        "filename": "libnativeloader/native_loader_namespace.cpp",
        "patchSetId": 9
      },
      "lineNbr": 66,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-05-14T16:51:45Z",
      "side": 1,
      "message": "Sure, otoh should be a simple change to do at that point. This leads to an extra string copy, but I suppose that doesn\u0027t really matter in these code paths.\n\nAnother cleaner option is to start use std::string_view that came with C++ 17 - it works with both strings and char*. That switch ought to happen all over the place though.\n\nAnyway, this is fine.",
      "parentUuid": "25ab6cbe_25e48442",
      "range": {
        "startLine": 66,
        "startChar": 45,
        "endLine": 66,
        "endChar": 68
      },
      "revId": "457a106ade8539a676f9cb01d031b00a26158653",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4d52305_85bf1fdd",
        "filename": "libnativeloader/native_loader_namespace.cpp",
        "patchSetId": 9
      },
      "lineNbr": 97,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-05-13T21:27:01Z",
      "side": 1,
      "message": "This is becoming a bit too much logic to fit in a constructor. Suggest making it a factory function instead so it can grow to contain more error handling etc. That would also allow the traditional error message passing through an std::string* argument.\n\nIt\u0027d also be reassuring if all constructors initialise raw_ in the initialiser lists, to make it more clear that it can\u0027t become an android_namespace_t* nullptr just by virtue of the type order in std::variant.",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 97,
        "endChar": 3
      },
      "revId": "457a106ade8539a676f9cb01d031b00a26158653",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ece2966_7388dfcf",
        "filename": "libnativeloader/native_loader_namespace.cpp",
        "patchSetId": 9
      },
      "lineNbr": 97,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-05-14T02:12:29Z",
      "side": 1,
      "message": "Will do that with expected\u003cT, E\u003e",
      "parentUuid": "e4d52305_85bf1fdd",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 97,
        "endChar": 3
      },
      "revId": "457a106ade8539a676f9cb01d031b00a26158653",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4950d796_a104cb6e",
        "filename": "libnativeloader/native_loader_namespace.cpp",
        "patchSetId": 9
      },
      "lineNbr": 97,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-05-14T16:54:33Z",
      "side": 1,
      "message": "See other comment. Changing this to a factory function is still a worthwhile improvement.",
      "parentUuid": "6ece2966_7388dfcf",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 97,
        "endChar": 3
      },
      "revId": "457a106ade8539a676f9cb01d031b00a26158653",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2516ae4_42cbecdf",
        "filename": "libnativeloader/native_loader_namespace.cpp",
        "patchSetId": 9
      },
      "lineNbr": 97,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-05-15T04:40:02Z",
      "side": 1,
      "message": "Ok. Create a factory method. But returning error would be after the \u0027expected\u0027 support.",
      "parentUuid": "4950d796_a104cb6e",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 97,
        "endChar": 3
      },
      "revId": "457a106ade8539a676f9cb01d031b00a26158653",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4415040d_3d4df533",
        "filename": "libnativeloader/native_loader_namespace.h",
        "patchSetId": 9
      },
      "lineNbr": 44,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-05-13T21:27:01Z",
      "side": 1,
      "message": "Consider keeping these as ordinary methods. They\u0027re much easier to search for.",
      "range": {
        "startLine": 43,
        "startChar": 2,
        "endLine": 44,
        "endChar": 37
      },
      "revId": "457a106ade8539a676f9cb01d031b00a26158653",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ccc3628_cd090eae",
        "filename": "libnativeloader/native_loader_namespace.h",
        "patchSetId": 9
      },
      "lineNbr": 44,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-05-14T02:12:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4415040d_3d4df533",
      "range": {
        "startLine": 43,
        "startChar": 2,
        "endLine": 44,
        "endChar": 37
      },
      "revId": "457a106ade8539a676f9cb01d031b00a26158653",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f153e7f_b8de78c4",
        "filename": "libnativeloader/native_loader_namespace.h",
        "patchSetId": 9
      },
      "lineNbr": 47,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-05-13T21:27:01Z",
      "side": 1,
      "message": "\"Android namespace\" isn\u0027t that clear since any linker namespace is arguably an Android thing. When I saw the is_android_ns flags I had to look at the implementation to understand what they really meant. Can we invert the bool and call it IsNativeBridgeNamespace/is_native_brigde_ns instead? (Another even tidier alternative is to introduce an enum for it, but I\u0027m ok with a renamed bool too.)",
      "range": {
        "startLine": 47,
        "startChar": 7,
        "endLine": 47,
        "endChar": 25
      },
      "revId": "457a106ade8539a676f9cb01d031b00a26158653",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0db3d487_77b5067d",
        "filename": "libnativeloader/native_loader_namespace.h",
        "patchSetId": 9
      },
      "lineNbr": 47,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-05-14T02:12:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2f153e7f_b8de78c4",
      "range": {
        "startLine": 47,
        "startChar": 7,
        "endLine": 47,
        "endChar": 25
      },
      "revId": "457a106ade8539a676f9cb01d031b00a26158653",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "773e818f_370aeec4",
        "filename": "libnativeloader/native_loader_namespace.h",
        "patchSetId": 9
      },
      "lineNbr": 54,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-05-13T21:27:01Z",
      "side": 1,
      "message": "Suggest replacing this with std::string* arguments to Link, Load etc so that it follows the common pattern for error message propagation. C.f. other comment about changing the constructor to a factory function.",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 54,
        "endChar": 25
      },
      "revId": "457a106ade8539a676f9cb01d031b00a26158653",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14c5ba61_a1733ee4",
        "filename": "libnativeloader/native_loader_namespace.h",
        "patchSetId": 9
      },
      "lineNbr": 54,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-05-14T02:12:29Z",
      "side": 1,
      "message": "I will fix that when expected\u003cT, E\u003e support is added. b/132145659",
      "parentUuid": "773e818f_370aeec4",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 54,
        "endChar": 25
      },
      "revId": "457a106ade8539a676f9cb01d031b00a26158653",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "58398f4c_dbd38af7",
        "filename": "libnativeloader/native_loader_namespace.h",
        "patchSetId": 9
      },
      "lineNbr": 54,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-05-14T16:51:45Z",
      "side": 1,
      "message": "Interesting, I\u0027m all for adopting the StatusOr pattern from google3. But that seems like a somewhat distant goal, so I think it\u0027s worthwhile to change to the usual Android approach in the meantime, i.e. return false/nullptr/etc on error and set a passed std::string* argument to an error message. None of the three functions (Link, Load, and the factory function to replace the large constructor) would have any problem with that.\n\nTo be clear, I don\u0027t think a separate error retrieval function like this is good practice - it almost encourages sloppy error propagation.",
      "parentUuid": "14c5ba61_a1733ee4",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 54,
        "endChar": 25
      },
      "revId": "457a106ade8539a676f9cb01d031b00a26158653",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83817c32_761e131e",
        "filename": "libnativeloader/native_loader_namespace.h",
        "patchSetId": 9
      },
      "lineNbr": 54,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-05-15T13:48:18Z",
      "side": 1,
      "message": "Although I agree expected\u003c\u003e is the way to go eventually, using std:string* error_msg args (like e.g. the caller LibraryNamespaces::Create already does) is clearly better than introducing this GetError function. I suppose you disagree, and I\u0027m curious why.",
      "parentUuid": "58398f4c_dbd38af7",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 54,
        "endChar": 25
      },
      "revId": "457a106ade8539a676f9cb01d031b00a26158653",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9cf71145_3f75df57",
        "filename": "libnativeloader/native_loader_namespace.h",
        "patchSetId": 9
      },
      "lineNbr": 54,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-05-15T14:37:21Z",
      "side": 1,
      "message": "expected\u003cT,E\u003e will be very soon. aosp/962611.\nI just don\u0027t want to do the similar refactoring twice.",
      "parentUuid": "83817c32_761e131e",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 54,
        "endChar": 25
      },
      "revId": "457a106ade8539a676f9cb01d031b00a26158653",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81e386_bde04a4a",
        "filename": "libnativeloader/native_loader_namespace.h",
        "patchSetId": 9
      },
      "lineNbr": 54,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-05-15T14:53:31Z",
      "side": 1,
      "message": "Ok. I\u0027d still prefer to decouple the two, but very well.",
      "parentUuid": "9cf71145_3f75df57",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 54,
        "endChar": 25
      },
      "revId": "457a106ade8539a676f9cb01d031b00a26158653",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}