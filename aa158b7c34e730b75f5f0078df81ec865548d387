{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ecc3da48_3387581b",
        "filename": "debuggerd/debuggerd_test.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1623,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2023-01-26T02:17:59Z",
      "side": 1,
      "message": "It might be better to use android::base::GetExecutablePath(). I don\u0027t think this would ever fail as written, but the libbase one is slightly more universal.",
      "range": {
        "startLine": 1623,
        "startChar": 30,
        "endLine": 1623,
        "endChar": 63
      },
      "revId": "aa158b7c34e730b75f5f0078df81ec865548d387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5896335b_02002850",
        "filename": "debuggerd/debuggerd_test.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1623,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2023-01-26T16:55:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ecc3da48_3387581b",
      "range": {
        "startLine": 1623,
        "startChar": 30,
        "endLine": 1623,
        "endChar": 63
      },
      "revId": "aa158b7c34e730b75f5f0078df81ec865548d387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "531e88a9_a690d188",
        "filename": "debuggerd/debuggerd_test.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1675,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2023-01-26T02:17:59Z",
      "side": 1,
      "message": "I presume you are making this volatile so the code is not optimized away. It would be good to add a comment saying this.",
      "range": {
        "startLine": 1675,
        "startChar": 2,
        "endLine": 1675,
        "endChar": 10
      },
      "revId": "aa158b7c34e730b75f5f0078df81ec865548d387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c5d52c96_2cb9d3c7",
        "filename": "debuggerd/debuggerd_test.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1675,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2023-01-26T16:55:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "531e88a9_a690d188",
      "range": {
        "startLine": 1675,
        "startChar": 2,
        "endLine": 1675,
        "endChar": 10
      },
      "revId": "aa158b7c34e730b75f5f0078df81ec865548d387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e2ee4cf_a7eabc9d",
        "filename": "debuggerd/handler/debuggerd_handler.cpp",
        "patchSetId": 8
      },
      "lineNbr": 569,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2023-01-26T02:17:59Z",
      "side": 1,
      "message": "This comment is more of a what, and isn\u0027t very informative.\n\nMaybe would be better to say something about how GWP-ASan can trigger crashes, and under some circumstances we want to ignore those crashes.",
      "range": {
        "startLine": 569,
        "startChar": 5,
        "endLine": 569,
        "endChar": 80
      },
      "revId": "aa158b7c34e730b75f5f0078df81ec865548d387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e040c05b_1efc64ab",
        "filename": "debuggerd/handler/debuggerd_handler.cpp",
        "patchSetId": 8
      },
      "lineNbr": 569,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2023-01-26T16:55:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2e2ee4cf_a7eabc9d",
      "range": {
        "startLine": 569,
        "startChar": 5,
        "endLine": 569,
        "endChar": 80
      },
      "revId": "aa158b7c34e730b75f5f0078df81ec865548d387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92cef329_18142f3a",
        "filename": "debuggerd/handler/debuggerd_handler.cpp",
        "patchSetId": 8
      },
      "lineNbr": 576,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2023-01-26T02:17:59Z",
      "side": 1,
      "message": "There is no requirement that these callback values are set. There is only one place that I can find where they are not set though.\n\nI guess I\u0027m a little nervous about have this check which will potentially cause a double failure.",
      "range": {
        "startLine": 575,
        "startChar": 0,
        "endLine": 576,
        "endChar": 78
      },
      "revId": "aa158b7c34e730b75f5f0078df81ec865548d387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f1b98d9_eba859ea",
        "filename": "debuggerd/handler/debuggerd_handler.cpp",
        "patchSetId": 8
      },
      "lineNbr": 576,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2023-01-26T16:55:28Z",
      "side": 1,
      "message": "all the gwp_asan_callbacks should be set, or none should be set.\n\nin a previous version of this patch, fmayer wanted me to move to CHECK()\u0027s to make that assertion clear to the programmer, but i\u0027ll move them back to being part of the branch to avoid a potential double fault.",
      "parentUuid": "92cef329_18142f3a",
      "range": {
        "startLine": 575,
        "startChar": 0,
        "endLine": 576,
        "endChar": 78
      },
      "revId": "aa158b7c34e730b75f5f0078df81ec865548d387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ebd80e6_cc61e019",
        "filename": "debuggerd/handler/debuggerd_handler.cpp",
        "patchSetId": 8
      },
      "lineNbr": 594,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2023-01-26T02:17:59Z",
      "side": 1,
      "message": "This shouldn\u0027t be locked at this time. It\u0027s locked at line 602.",
      "range": {
        "startLine": 594,
        "startChar": 0,
        "endLine": 594,
        "endChar": 41
      },
      "revId": "aa158b7c34e730b75f5f0078df81ec865548d387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02462e9f_b915c61c",
        "filename": "debuggerd/handler/debuggerd_handler.cpp",
        "patchSetId": 8
      },
      "lineNbr": 594,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2023-01-26T16:55:28Z",
      "side": 1,
      "message": "i was under the impression that this was basically the 2nd order recursion (first was the regular attempt at the signal handler which locked the mutex, and now we\u0027re in the fallback path) based on the comment above: \"it means that the fallback handler has been called once before and this function is being called again\".\n\nupdated the patch to remove the unlock, but if you could just double check that would be great. thanks :).",
      "parentUuid": "3ebd80e6_cc61e019",
      "range": {
        "startLine": 594,
        "startChar": 0,
        "endLine": 594,
        "endChar": 41
      },
      "revId": "aa158b7c34e730b75f5f0078df81ec865548d387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60061a31_9f7974c4",
        "filename": "debuggerd/handler/debuggerd_handler.cpp",
        "patchSetId": 8
      },
      "lineNbr": 594,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2023-02-01T04:20:17Z",
      "side": 1,
      "message": "Looking at the code and remembering how this works is a bit weird.\n\nThis really only happens when you do a debuggerd -b of a privileged process. In that case, it does hold the lock, but it should not be unlocked because what is happening is:\n\n- First crashing signal occurs in privileged process.\n- Grab lock.\n- Resend the signal to every live thread to dump that thread.\n- Finish dumping, unlock.\n\nWhen generating a tombstone, you don\u0027t do this process. You never re-send the signal on each thread to generate each thread\u0027s backtrace.",
      "parentUuid": "02462e9f_b915c61c",
      "range": {
        "startLine": 594,
        "startChar": 0,
        "endLine": 594,
        "endChar": 41
      },
      "revId": "aa158b7c34e730b75f5f0078df81ec865548d387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de3af85d_97b577b3",
        "filename": "debuggerd/handler/debuggerd_handler.cpp",
        "patchSetId": 8
      },
      "lineNbr": 594,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2023-02-01T04:20:17Z",
      "side": 1,
      "message": "This code is visited in two different cases, and I don\u0027t think it needs to unlock in either. Looking through, I believe it always unlocks before resending the signal.\n\nAlso, I\u0027m pretty sure that the gwp_asan_recoverable variable can never be true if it got into that code at about line 596. That\u0027s why the unlock didn\u0027t do anything.",
      "parentUuid": "02462e9f_b915c61c",
      "range": {
        "startLine": 594,
        "startChar": 0,
        "endLine": 594,
        "endChar": 41
      },
      "revId": "aa158b7c34e730b75f5f0078df81ec865548d387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc45017e_fca0dc2e",
        "filename": "debuggerd/handler/debuggerd_handler.cpp",
        "patchSetId": 8
      },
      "lineNbr": 594,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2023-02-01T23:28:25Z",
      "side": 1,
      "message": "for kDebuggerdFallbackSivalUintptrRequestDump, yep, makes sense.\n\nfor prctl(PR_GET_NO_NEW_PRIVS,...) \u003d\u003d 1, seems we definitely still need the unlock.  this codepath is triggered by processes (and the tests) running under seccomp, because they can\u0027t execve.\n\ni\u0027ve modified the branch to only call the fallback handlers in the prctl case.",
      "parentUuid": "de3af85d_97b577b3",
      "range": {
        "startLine": 594,
        "startChar": 0,
        "endLine": 594,
        "endChar": 41
      },
      "revId": "aa158b7c34e730b75f5f0078df81ec865548d387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3581832_e7dc3a59",
        "filename": "debuggerd/handler/debuggerd_handler.cpp",
        "patchSetId": 8
      },
      "lineNbr": 782,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2023-01-26T02:17:59Z",
      "side": 1,
      "message": "What happens if a GWP-ASan recoverable crash occurs, and then a regular crash occurs? Does this mean the ultimate crash never gets sent to the ActivityManager?",
      "range": {
        "startLine": 773,
        "startChar": 0,
        "endLine": 782,
        "endChar": 34
      },
      "revId": "aa158b7c34e730b75f5f0078df81ec865548d387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c431b4d_87e57d64",
        "filename": "debuggerd/handler/debuggerd_handler.cpp",
        "patchSetId": 8
      },
      "lineNbr": 782,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2023-01-26T16:55:28Z",
      "side": 1,
      "message": "ActivityManager gets notified about both the penultimate GWP-ASan crash, as well as the ultimate regular crash.\n\nThe idea here is basically that if you have an app that\u0027s doing multiple `malloc()-\u003euse-after-free`\u0027s in short succession, then naively ActivityManager would get one crash report per use-after-free, and this leads to ActivityManager terminating the app. Instead, we make it so only the first use-after-free is reported in any given app.\n\nNon-GWP-ASan crashes are unaffected. All are still delivered to ActivityManager as before.",
      "parentUuid": "a3581832_e7dc3a59",
      "range": {
        "startLine": 773,
        "startChar": 0,
        "endLine": 782,
        "endChar": 34
      },
      "revId": "aa158b7c34e730b75f5f0078df81ec865548d387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f73b9ef_d9fec356",
        "filename": "debuggerd/handler/debuggerd_handler.cpp",
        "patchSetId": 8
      },
      "lineNbr": 782,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2023-02-02T21:32:10Z",
      "side": 1,
      "message": "\u003cclosing\u003e",
      "parentUuid": "3c431b4d_87e57d64",
      "range": {
        "startLine": 773,
        "startChar": 0,
        "endLine": 782,
        "endChar": 34
      },
      "revId": "aa158b7c34e730b75f5f0078df81ec865548d387",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}