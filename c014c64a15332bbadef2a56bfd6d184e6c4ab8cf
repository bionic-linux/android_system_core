{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6ae46b12_e69d6338",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-07-19T19:07:14Z",
      "side": 1,
      "message": "I haven\u0027t really finished, but here\u0027s a start. I think maybe you should get rid of Invariant in the builders, unless you really plan to support multiple modes for each request.",
      "revId": "c014c64a15332bbadef2a56bfd6d184e6c4ab8cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a1bb4c6_75c90bf7",
        "filename": "trusty/keymaster/Android.bp",
        "patchSetId": 6
      },
      "lineNbr": 181,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-07-19T19:07:14Z",
      "side": 1,
      "message": "Add `canonical_path_from_root: false,` and change the proto import statements to be relative to this dir.",
      "revId": "c014c64a15332bbadef2a56bfd6d184e6c4ab8cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3abe5c0d_88b865e6",
        "filename": "trusty/keymaster/Android.bp",
        "patchSetId": 6
      },
      "lineNbr": 181,
      "author": {
        "id": 1880310
      },
      "writtenOn": "2021-07-20T16:50:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7a1bb4c6_75c90bf7",
      "revId": "c014c64a15332bbadef2a56bfd6d184e6c4ab8cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d13feb83_d541642b",
        "filename": "trusty/keymaster/fuzz/keymaster_defs_builder.h",
        "patchSetId": 6
      },
      "lineNbr": 16,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-07-19T19:07:14Z",
      "side": 1,
      "message": "Needs #pragma once (all headers need this).",
      "revId": "c014c64a15332bbadef2a56bfd6d184e6c4ab8cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1b91ada2_e9dbf794",
        "filename": "trusty/keymaster/fuzz/keymaster_defs_builder.h",
        "patchSetId": 6
      },
      "lineNbr": 16,
      "author": {
        "id": 1880310
      },
      "writtenOn": "2021-07-20T16:50:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d13feb83_d541642b",
      "revId": "c014c64a15332bbadef2a56bfd6d184e6c4ab8cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d17c370f_798bd074",
        "filename": "trusty/keymaster/fuzz/keymaster_defs_builder.h",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-07-19T19:07:14Z",
      "side": 1,
      "message": "Comment this enum to explain how invariants work and what these particular invariants do.",
      "revId": "c014c64a15332bbadef2a56bfd6d184e6c4ab8cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5caf87e9_86603ffb",
        "filename": "trusty/keymaster/fuzz/keymaster_protocol_fuzzer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 65,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-07-19T19:07:14Z",
      "side": 1,
      "message": "We\u0027re going to want to fuzz all supported versions eventually.",
      "revId": "c014c64a15332bbadef2a56bfd6d184e6c4ab8cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8a6afc0_76c9126d",
        "filename": "trusty/keymaster/fuzz/keymaster_protocol_fuzzer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 71,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-07-19T19:07:14Z",
      "side": 1,
      "message": "Comment describing what this is for.",
      "revId": "c014c64a15332bbadef2a56bfd6d184e6c4ab8cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39b8f3bc_cc6d060e",
        "filename": "trusty/keymaster/fuzz/keymaster_protocol_fuzzer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 93,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-07-19T19:07:14Z",
      "side": 1,
      "message": "Just return resp.Deserialize(...);",
      "revId": "c014c64a15332bbadef2a56bfd6d184e6c4ab8cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "493b7e38_cef2746d",
        "filename": "trusty/keymaster/fuzz/keymaster_protocol_fuzzer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 93,
      "author": {
        "id": 1880310
      },
      "writtenOn": "2021-07-20T16:50:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "39b8f3bc_cc6d060e",
      "revId": "c014c64a15332bbadef2a56bfd6d184e6c4ab8cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa5c5f5f_b3f571b9",
        "filename": "trusty/keymaster/fuzz/keymaster_protocol_fuzzer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 150,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-07-19T19:07:14Z",
      "side": 1,
      "message": "Do we really care about the abort command? Could just send one before the whole operation.",
      "revId": "c014c64a15332bbadef2a56bfd6d184e6c4ab8cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30960655_e6dc9c62",
        "filename": "trusty/keymaster/fuzz/keymaster_protocol_fuzzer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 150,
      "author": {
        "id": 1880310
      },
      "writtenOn": "2021-07-20T16:50:14Z",
      "side": 1,
      "message": "It\u0027s not strictly necessary, but it would ensure that keymaster\u0027s state (excluding generated keys) is reset between calls to `TestSigning`. The abort command takes an operation handle parameter which is why I planned on sending it after failed commands. But tracking the `op_handle` of the previous test case and calling it once before each test should also work.",
      "parentUuid": "fa5c5f5f_b3f571b9",
      "revId": "c014c64a15332bbadef2a56bfd6d184e6c4ab8cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98080063_f0aa2b2d",
        "filename": "trusty/keymaster/fuzz/keymaster_protocol_fuzzer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 153,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-07-19T19:07:14Z",
      "side": 1,
      "message": "This looks like a driver for UpdateOperation, would that be a better name?",
      "revId": "c014c64a15332bbadef2a56bfd6d184e6c4ab8cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4741a8d0_c1de10ae",
        "filename": "trusty/keymaster/fuzz/keymaster_protocol_fuzzer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 153,
      "author": {
        "id": 1880310
      },
      "writtenOn": "2021-07-21T19:23:22Z",
      "side": 1,
      "message": "The only fixed parts of these three requests is the `purpose` of the BeginOpRequest which is `KM_PURPOSE_SIGN` and the additional_params AuthorizationSet required for signing. Maybe `TestPurposeSign` might be clearer than `TestSigning`?",
      "parentUuid": "98080063_f0aa2b2d",
      "revId": "c014c64a15332bbadef2a56bfd6d184e6c4ab8cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09094824_3e8a835d",
        "filename": "trusty/keymaster/fuzz/keymaster_protocol_fuzzer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 165,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-07-19T19:07:14Z",
      "side": 1,
      "message": "These key_material assignments look unused?",
      "revId": "c014c64a15332bbadef2a56bfd6d184e6c4ab8cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e2fa183_c96065a8",
        "filename": "trusty/keymaster/fuzz/keymaster_protocol_fuzzer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 165,
      "author": {
        "id": 1880310
      },
      "writtenOn": "2021-07-21T18:11:16Z",
      "side": 1,
      "message": "Turns out this isn\u0027t necessary when `SetKeyMaterial` is used to set `begin_req`\u0027s key blob so we can remove it.",
      "parentUuid": "09094824_3e8a835d",
      "revId": "c014c64a15332bbadef2a56bfd6d184e6c4ab8cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a35c9d75_b57dc2c6",
        "filename": "trusty/keymaster/fuzz/keymaster_protocol_fuzzer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 165,
      "author": {
        "id": 1880310
      },
      "writtenOn": "2021-07-21T19:23:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7e2fa183_c96065a8",
      "revId": "c014c64a15332bbadef2a56bfd6d184e6c4ab8cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72592a4d_8f713251",
        "filename": "trusty/keymaster/fuzz/keymaster_protocol_fuzzer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 229,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-07-19T19:07:14Z",
      "side": 1,
      "message": "During fuzzing you won\u0027t want this print (or any prints) so that you don\u0027t slow down fuzzing.",
      "revId": "c014c64a15332bbadef2a56bfd6d184e6c4ab8cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1dec2ca_8a4d364c",
        "filename": "trusty/keymaster/fuzz/keymaster_protocol_fuzzer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 229,
      "author": {
        "id": 1880310
      },
      "writtenOn": "2021-07-20T16:50:14Z",
      "side": 1,
      "message": "Is there a standard way of logging to stdout/stderr in aosp or should I just keep all the logging stuff in my dev branch since it\u0027s just for debugging the fuzzer itself?",
      "parentUuid": "72592a4d_8f713251",
      "revId": "c014c64a15332bbadef2a56bfd6d184e6c4ab8cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "774a41e1_42470340",
        "filename": "trusty/keymaster/fuzz/keymaster_protocol_fuzzer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 229,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-07-20T19:29:49Z",
      "side": 1,
      "message": "You should probably log using the ALOG* macros from liblog (system/logging/liblog). However, you still don\u0027t want to do that during fuzzing because it\u0027s slow.",
      "parentUuid": "d1dec2ca_8a4d364c",
      "revId": "c014c64a15332bbadef2a56bfd6d184e6c4ab8cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ac3b8ba_41f0fd25",
        "filename": "trusty/keymaster/fuzz/keymaster_protocol_fuzzer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 229,
      "author": {
        "id": 1880310
      },
      "writtenOn": "2021-07-21T18:11:16Z",
      "side": 1,
      "message": "Good to know. I\u0027ll remove all the logging stuff then.",
      "parentUuid": "774a41e1_42470340",
      "revId": "c014c64a15332bbadef2a56bfd6d184e6c4ab8cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52b117f6_33c3d010",
        "filename": "trusty/keymaster/fuzz/keymaster_protocol_fuzzer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 233,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-07-19T19:07:14Z",
      "side": 1,
      "message": "You should reconnect to the service here to make sure it is still up. We want any crashes to be reported on the iteration they happen, not on the next iteration. See tipc_fuzzer.cpp.",
      "revId": "c014c64a15332bbadef2a56bfd6d184e6c4ab8cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f00ed959_a0a84363",
        "filename": "trusty/keymaster/fuzz/keymaster_protocol_fuzzer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 233,
      "author": {
        "id": 1880310
      },
      "writtenOn": "2021-07-20T16:50:14Z",
      "side": 1,
      "message": "Is it necessary to disconnect like in tipc_fuzzer.cpp?",
      "parentUuid": "52b117f6_33c3d010",
      "revId": "c014c64a15332bbadef2a56bfd6d184e6c4ab8cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34ab3833_75864209",
        "filename": "trusty/keymaster/fuzz/keymaster_protocol_fuzzer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 233,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-07-20T19:29:49Z",
      "side": 1,
      "message": "Yes, we need to disconnect and reconnect to make sure the service is still alive.",
      "parentUuid": "f00ed959_a0a84363",
      "revId": "c014c64a15332bbadef2a56bfd6d184e6c4ab8cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "819b1a39_a27819b9",
        "filename": "trusty/keymaster/fuzz/keymaster_protocol_fuzzer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 233,
      "author": {
        "id": 1880310
      },
      "writtenOn": "2021-07-21T18:11:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "34ab3833_75864209",
      "revId": "c014c64a15332bbadef2a56bfd6d184e6c4ab8cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcaf179b_6ee9c4e1",
        "filename": "trusty/keymaster/fuzz/requests_builder.cpp",
        "patchSetId": 6
      },
      "lineNbr": 32,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-07-19T19:07:14Z",
      "side": 1,
      "message": "I\u0027m wondering if it might make more sense to just make a different variant of the message builder (e.g., BuildBeginOpMsgFixed) rather than using a generic invariants enum. Are there going to be many examples of message builders that accept more than one invariant?",
      "revId": "c014c64a15332bbadef2a56bfd6d184e6c4ab8cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f630a71d_135b79f5",
        "filename": "trusty/keymaster/fuzz/requests_builder.cpp",
        "patchSetId": 6
      },
      "lineNbr": 32,
      "author": {
        "id": 1880310
      },
      "writtenOn": "2021-07-21T19:23:22Z",
      "side": 1,
      "message": "The two `BuildAuthorizationSet` variants were originally one function that accepted both values of the `Invariant` enum, but I ended up splitting it since it doesn\u0027t make sense to take in a random `proto_set` param when generating the initial key (in `LLVMFuzzerInitialize`). There are probably more cases where message builders could accept more than one enum value, but I agree that renaming the variants of the message builders would be simpler.",
      "parentUuid": "dcaf179b_6ee9c4e1",
      "revId": "c014c64a15332bbadef2a56bfd6d184e6c4ab8cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "110caa83_ce548fb6",
        "filename": "trusty/keymaster/fuzz/requests_builder.h",
        "patchSetId": 6
      },
      "lineNbr": 16,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-07-19T19:07:14Z",
      "side": 1,
      "message": "Missing import of \u003cfuzz/keymaster_defs_builder.h\u003e (alternatively move the declaration of Invariant to here).\n\nAlso, #pragma once.",
      "revId": "c014c64a15332bbadef2a56bfd6d184e6c4ab8cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8d45696_2ccb69f7",
        "filename": "trusty/keymaster/fuzz/requests_builder.h",
        "patchSetId": 6
      },
      "lineNbr": 16,
      "author": {
        "id": 1880310
      },
      "writtenOn": "2021-07-20T16:50:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "110caa83_ce548fb6",
      "revId": "c014c64a15332bbadef2a56bfd6d184e6c4ab8cf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}