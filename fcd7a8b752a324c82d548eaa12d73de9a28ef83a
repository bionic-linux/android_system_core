{
  "comments": [
    {
      "key": {
        "uuid": "39c42188_0348b457",
        "filename": "libion/ion.c",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1015340
      },
      "writtenOn": "2017-07-26T19:57:50Z",
      "side": 1,
      "message": "This isn\u0027t thread-safe, and ion_is_legacy() will always return 0 unless ion_open() has been called first.\n\nFrom our experience with libsync, try something like:\n\nenum ion_version {\n    ION_VERSION_UNKNOWN,\n    ION_VERSION_MODERN,\n    ION_VERSION_LEGACY\n};\nstatic atomic_int g_ion_version \u003d ATOMIC_VAR_INIT(ION_VERSION_LEGACY);\n\nint ion_is_legacy(int fd) {\n    int version \u003d atomic_load_explicit(\u0026g_ion_version, memory_order_acquire);\n    if (version \u003d\u003d ION_VERSION_UNKNOWN) {\n        struct ion_heap_query query;\n        memset(\u0026query, 0, sizeof(query));\n\n        int err \u003d ion_ioctl(fd, ION_IOC_HEAP_QUERY, \u0026query);\n        version \u003d (err \u003d\u003d -ENOTTY) ? ION_VERSION_LEGACY : ION_VERSION_MODERN;\n        atomic_store_explicit(\u0026g_ion_version, version, memory_order_release);\n\n    }\n\n    return version \u003d\u003d ION_VERSION_LEGACY;\n}",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 37,
        "endChar": 32
      },
      "revId": "fcd7a8b752a324c82d548eaa12d73de9a28ef83a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62c2b930_1c501bd4",
        "filename": "libion/ion.c",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1052193
      },
      "writtenOn": "2017-07-27T14:49:38Z",
      "side": 1,
      "message": "Thanks for your review, Greg.\n\nAnd, thanks for this tip - will update.",
      "parentUuid": "39c42188_0348b457",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 37,
        "endChar": 32
      },
      "revId": "fcd7a8b752a324c82d548eaa12d73de9a28ef83a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70bbbaa1_4ceb2954",
        "filename": "libion/ion.c",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1015340
      },
      "writtenOn": "2017-07-26T19:57:50Z",
      "side": 1,
      "message": "What are the rules for alignment with the new ion implementation?  Is it equivalent to setting align \u003d 0 with the old ion?",
      "range": {
        "startLine": 74,
        "startChar": 34,
        "endLine": 74,
        "endChar": 46
      },
      "revId": "fcd7a8b752a324c82d548eaa12d73de9a28ef83a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4c489acb_63d0be34",
        "filename": "libion/ion.c",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1052193
      },
      "writtenOn": "2017-07-27T14:49:38Z",
      "side": 1,
      "message": "the new ion kernel implementation just drops the align field since it was being used only for checking bounds, so yes, it should be equivalent to setting align \u003d 0.",
      "parentUuid": "70bbbaa1_4ceb2954",
      "range": {
        "startLine": 74,
        "startChar": 34,
        "endLine": 74,
        "endChar": 46
      },
      "revId": "fcd7a8b752a324c82d548eaa12d73de9a28ef83a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "122c5ea7_08bc1f93",
        "filename": "libion/ion.c",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 1015340
      },
      "writtenOn": "2017-07-26T19:57:50Z",
      "side": 1,
      "message": "Please match the existing style (system/core provides a .clang-format file).",
      "range": {
        "startLine": 83,
        "startChar": 12,
        "endLine": 83,
        "endChar": 82
      },
      "revId": "fcd7a8b752a324c82d548eaa12d73de9a28ef83a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8c5e719a_69f3557c",
        "filename": "libion/ion.c",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 1052193
      },
      "writtenOn": "2017-07-27T14:49:38Z",
      "side": 1,
      "message": "I had matched existing style, but this was actually the result of clang-related hooks in \u0027repo upload\u0027 - should I not let the hooks run, then? Or perhaps they need some update?",
      "parentUuid": "122c5ea7_08bc1f93",
      "range": {
        "startLine": 83,
        "startChar": 12,
        "endLine": 83,
        "endChar": 82
      },
      "revId": "fcd7a8b752a324c82d548eaa12d73de9a28ef83a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "53914a75_5d0a31f3",
        "filename": "libion/ion.c",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 1015340
      },
      "writtenOn": "2017-07-28T17:13:12Z",
      "side": 1,
      "message": "Weird.  Try manually running clang-format --style\u003dfile -i system/core/libion/ion.c and seeing what happens.  On my end clang-format makes a few changes where ion.c doesn\u0027t totally match our style guide, but it keeps the newline in struct declarations intact.",
      "parentUuid": "8c5e719a_69f3557c",
      "range": {
        "startLine": 83,
        "startChar": 12,
        "endLine": 83,
        "endChar": 82
      },
      "revId": "fcd7a8b752a324c82d548eaa12d73de9a28ef83a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1e08d79d_5c12bbb2",
        "filename": "libion/ion.c",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-07-29T01:15:20Z",
      "side": 1,
      "message": "perhaps a result of the fact that we use whatever clang-format is on your system rather than a prebuilt :-(",
      "parentUuid": "53914a75_5d0a31f3",
      "range": {
        "startLine": 83,
        "startChar": 12,
        "endLine": 83,
        "endChar": 82
      },
      "revId": "fcd7a8b752a324c82d548eaa12d73de9a28ef83a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22a5ebe2_3559edff",
        "filename": "libion/ion.c",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 1052193
      },
      "writtenOn": "2017-08-04T11:45:39Z",
      "side": 1,
      "message": "On my system, clang-format version 3.8.0-2ubuntu4 (tags/RELEASE_380/final), I still see it change the struct declarations to have all members in one line.\nIf you could let me know what to follow (not use the clang hooks, or let the struct declarations be), I could post next version of this out by today. Thanks!",
      "parentUuid": "53914a75_5d0a31f3",
      "range": {
        "startLine": 83,
        "startChar": 12,
        "endLine": 83,
        "endChar": 82
      },
      "revId": "fcd7a8b752a324c82d548eaa12d73de9a28ef83a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fe1c9313_c4fca1ba",
        "filename": "libion/ion.c",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 1015340
      },
      "writtenOn": "2017-08-04T19:51:44Z",
      "side": 1,
      "message": "enh is right.  My local clang-format is some kind of snapshot release.  It puts the struct fields on seperate lines, and so does ToT clang-format; but the (older) prebuilts in AOSP don\u0027t.\n\nFor now, please just override the clang-format hooks.",
      "parentUuid": "22a5ebe2_3559edff",
      "range": {
        "startLine": 83,
        "startChar": 12,
        "endLine": 83,
        "endChar": 82
      },
      "revId": "fcd7a8b752a324c82d548eaa12d73de9a28ef83a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27b3404e_0268e3ac",
        "filename": "libion/ion.c",
        "patchSetId": 2
      },
      "lineNbr": 97,
      "author": {
        "id": 1015340
      },
      "writtenOn": "2017-07-26T19:57:50Z",
      "side": 1,
      "message": "It seems like ion_alloc_fd() should call this ioctl, and ion_alloc() should return -EINVAL?\n\nThe new ION_IOC_ALLOC ioctl has basically the same semantics as our userspace ion_alloc_fd(): you get a dma-buf fd back, and should pass it to generic close()/mmap()/etc. routines rather than ion-specific ones.\n\nIf you swap these two around, then a small but useful subset of libion calls will work consistently on all kernels.  IMO this would be helpful for porting efforts.",
      "range": {
        "startLine": 89,
        "startChar": 6,
        "endLine": 97,
        "endChar": 5
      },
      "revId": "fcd7a8b752a324c82d548eaa12d73de9a28ef83a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12ea43c8_ed8c880d",
        "filename": "libion/ion.c",
        "patchSetId": 2
      },
      "lineNbr": 97,
      "author": {
        "id": 1052193
      },
      "writtenOn": "2017-07-27T14:49:38Z",
      "side": 1,
      "message": "Ok, understood. I will update as suggested.",
      "parentUuid": "27b3404e_0268e3ac",
      "range": {
        "startLine": 89,
        "startChar": 6,
        "endLine": 97,
        "endChar": 5
      },
      "revId": "fcd7a8b752a324c82d548eaa12d73de9a28ef83a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7814ee39_11f6d4bb",
        "filename": "libion/ion.c",
        "patchSetId": 2
      },
      "lineNbr": 203,
      "author": {
        "id": 1015340
      },
      "writtenOn": "2017-07-26T19:57:50Z",
      "side": 1,
      "message": "Can this be emulated using DMA_BUF_IOCTL_SYNC?",
      "range": {
        "startLine": 203,
        "startChar": 4,
        "endLine": 203,
        "endChar": 42
      },
      "revId": "fcd7a8b752a324c82d548eaa12d73de9a28ef83a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "888131e5_7c25bbd7",
        "filename": "libion/ion.c",
        "patchSetId": 2
      },
      "lineNbr": 203,
      "author": {
        "id": 1052193
      },
      "writtenOn": "2017-07-27T14:49:38Z",
      "side": 1,
      "message": "Had a quick chat with Laura on this: sync_fd looks semantically similar to SYNC_END, but since there\u0027s no logical place to mark the equivalent SYNC_START, her idea was to do the SYNC_START and SYNC_END back-to-back in ion_sync_fd(). Hope that seems to do the \u0027right\u0027 thing?",
      "parentUuid": "7814ee39_11f6d4bb",
      "range": {
        "startLine": 203,
        "startChar": 4,
        "endLine": 203,
        "endChar": 42
      },
      "revId": "fcd7a8b752a324c82d548eaa12d73de9a28ef83a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae9d2b35_d0501548",
        "filename": "libion/ion.c",
        "patchSetId": 2
      },
      "lineNbr": 203,
      "author": {
        "id": 1015340
      },
      "writtenOn": "2017-07-28T17:13:12Z",
      "side": 1,
      "message": "On second thought, I\u0027m not sure we should be emulating this.  DMA_BUF_IOCTL_SYNC is more targeted than ION_IOC_SYNC (e.g. you can specify a direction), and we should encourage people to use more targeted buffer syncing where it\u0027s available and appropriate.",
      "parentUuid": "888131e5_7c25bbd7",
      "range": {
        "startLine": 203,
        "startChar": 4,
        "endLine": 203,
        "endChar": 42
      },
      "revId": "fcd7a8b752a324c82d548eaa12d73de9a28ef83a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}