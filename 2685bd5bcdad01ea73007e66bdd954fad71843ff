{
  "comments": [
    {
      "key": {
        "uuid": "31b99b62_ce8ee8bb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2018-10-31T23:31:17Z",
      "side": 1,
      "message": "Is this comment still valid?",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 22,
        "endChar": 59
      },
      "revId": "2685bd5bcdad01ea73007e66bdd954fad71843ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7ca6573_de72a06b",
        "filename": "init/README.md",
        "patchSetId": 5
      },
      "lineNbr": 243,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2018-10-31T23:31:17Z",
      "side": 1,
      "message": "memcg.limit_percent seems to be missing here.",
      "revId": "2685bd5bcdad01ea73007e66bdd954fad71843ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b42c8f95_4d1bbf99",
        "filename": "init/README.md",
        "patchSetId": 5
      },
      "lineNbr": 243,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2018-10-31T23:57:39Z",
      "side": 1,
      "message": "Oh, I see it now. Never mind.",
      "parentUuid": "d7ca6573_de72a06b",
      "revId": "2685bd5bcdad01ea73007e66bdd954fad71843ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5f7fa23_f56e2c1a",
        "filename": "init/service.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1048,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2018-10-31T23:31:17Z",
      "side": 1,
      "message": "computed_limit_in_bytes will be overwritten if (!limit_property_.empty()). How about we check that first? The following \"if\" then can become \"else\".",
      "range": {
        "startLine": 1037,
        "startChar": 8,
        "endLine": 1048,
        "endChar": 9
      },
      "revId": "2685bd5bcdad01ea73007e66bdd954fad71843ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "011ddd70_722f713f",
        "filename": "init/service.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1048,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2018-11-01T00:05:48Z",
      "side": 1,
      "message": "Hmm, I see now what you are doing. That\u0027s quite confusing.. So limit_in_bytes can be overwritten by limit_percent_ and then overwritten if limit_property_ and such property is defined... Maybe add a comment to help understanding this logic?",
      "parentUuid": "c5f7fa23_f56e2c1a",
      "range": {
        "startLine": 1037,
        "startChar": 8,
        "endLine": 1048,
        "endChar": 9
      },
      "revId": "2685bd5bcdad01ea73007e66bdd954fad71843ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a23b0a7f_0937b79c",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 5
      },
      "lineNbr": 204,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2018-10-31T22:30:21Z",
      "side": 1,
      "message": "Killing process is usually a time critical operation (we kill because we are low on memory and want to free it as soon as possible) and if so adding a new syscall() in that path is a non-negligible performance hit. The way I outlined in my previous comment would avoid that additional cost in most of the cases (assuming you use ro.config.per_app_memcg to figure out what constitutes \"most of the cases\").",
      "range": {
        "startLine": 204,
        "startChar": 13,
        "endLine": 204,
        "endChar": 88
      },
      "revId": "2685bd5bcdad01ea73007e66bdd954fad71843ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55055967_ebd703f5",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 5
      },
      "lineNbr": 204,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2018-10-31T23:00:57Z",
      "side": 1,
      "message": "The tradeoff doesn\u0027t seem in favour of trying to save a syscall here versus the increased code complexity (i.e. higher chance of bugs) that it would introduce. Keep in mind that the function RemoveProcessGroup called below also needs to know which kind of cgroup is being used, so there would either need to be similar logic in that function or there would need to be a way of passing the kind of cgroup from DoKillProcessGroup to RemoveProcessGroup.",
      "parentUuid": "a23b0a7f_0937b79c",
      "range": {
        "startLine": 204,
        "startChar": 13,
        "endLine": 204,
        "endChar": 88
      },
      "revId": "2685bd5bcdad01ea73007e66bdd954fad71843ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f2631a1_878b10bf",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 5
      },
      "lineNbr": 204,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2018-10-31T23:31:17Z",
      "side": 1,
      "message": "ok, convinced. That would be ugly.",
      "parentUuid": "55055967_ebd703f5",
      "range": {
        "startLine": 204,
        "startChar": 13,
        "endLine": 204,
        "endChar": 88
      },
      "revId": "2685bd5bcdad01ea73007e66bdd954fad71843ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d06c252_1a86ca80",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 5
      },
      "lineNbr": 281,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2018-10-31T23:31:17Z",
      "side": 1,
      "message": "Sorry, missed this one.\nShould we cache this value like you do for memcg_supported isMemoryCgroupSupported()? Not sure how many times createProcessGroup() can be called within the same process context but seems like a reasonable optimization as we don\u0027t expect these ro.config properties to change at runtime.",
      "range": {
        "startLine": 281,
        "startChar": 9,
        "endLine": 281,
        "endChar": 96
      },
      "revId": "2685bd5bcdad01ea73007e66bdd954fad71843ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}