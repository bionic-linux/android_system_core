{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d87849f4_fd67788f",
        "filename": "init/property_service.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1095,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2024-02-29T01:57:48Z",
      "side": 1,
      "message": "we should really have android-base \u0027std::optional\u003cint\u003e GetIntProperty\u0027 etc.. variants",
      "range": {
        "startLine": 1093,
        "startChar": 66,
        "endLine": 1095,
        "endChar": 62
      },
      "revId": "bad3b85f8d6e7e4a356ac5687c18e153232c714e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2904afd1_eb413d18",
        "filename": "init/property_service.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1095,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2024-02-29T13:41:46Z",
      "side": 1,
      "message": "You may use `__system_property_find(\"name\")` which returns null if the prop doesn\u0027t exist.",
      "parentUuid": "d87849f4_fd67788f",
      "range": {
        "startLine": 1093,
        "startChar": 66,
        "endLine": 1095,
        "endChar": 62
      },
      "revId": "bad3b85f8d6e7e4a356ac5687c18e153232c714e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2e7c281_4550675f",
        "filename": "init/property_service.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1095,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-02-29T16:52:20Z",
      "side": 1,
      "message": "or just use 0 or -1 as the default if that\u0027s more obvious. most callers do actually want a default (which is why libbase takes a default), and those that don\u0027t can\u0027t just provide an invalid value as their default, like here.\n\n(forcing callers to think about the default also fixed a bunch of bugs for callers that moved over. std::optional equivalents tend to push those bugs back to runtime, like thrown exceptions.)",
      "parentUuid": "2904afd1_eb413d18",
      "range": {
        "startLine": 1093,
        "startChar": 66,
        "endLine": 1095,
        "endChar": 62
      },
      "revId": "bad3b85f8d6e7e4a356ac5687c18e153232c714e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45477061_252217b0",
        "filename": "init/property_service.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1095,
      "author": {
        "id": 1146974
      },
      "writtenOn": "2024-03-06T09:36:21Z",
      "side": 1,
      "message": "In this case, it checks if the property is defined or not and define the property here if not defined. So default value is not required.\nUpdated with `__system_property_find(\"name\")`.",
      "parentUuid": "e2e7c281_4550675f",
      "range": {
        "startLine": 1093,
        "startChar": 66,
        "endLine": 1095,
        "endChar": 62
      },
      "revId": "bad3b85f8d6e7e4a356ac5687c18e153232c714e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}