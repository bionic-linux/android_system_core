{
  "comments": [
    {
      "key": {
        "uuid": "729db2c7_637041aa",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1096946
      },
      "writtenOn": "2017-08-07T22:34:31Z",
      "side": 1,
      "message": "Just for my curiosity: so clion will do this analysis with not-Android\u0027s clang? Or do we have some way of telling it to use the clang/clang-tidy in prebuilts/?",
      "range": {
        "startLine": 13,
        "startChar": 22,
        "endLine": 13,
        "endChar": 36
      },
      "revId": "b9cb6175fd23fcdcd9c09d59a45571b10e2758d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63ad5943_87a5129c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-07T22:49:28Z",
      "side": 1,
      "message": "https://blog.jetbrains.com/clion/2017/07/clion-2017-2-released-clang-tidy-and-more/#clang-tidy\n\nis all I know.\n\nThat being said it seems to imply it has its own internal analyzer as well \"clion inspections\", but perhaps in 2017.2 we can disable clion inspects that are giving these false positives and hope that clang-tidy will still catch them.",
      "parentUuid": "729db2c7_637041aa",
      "range": {
        "startLine": 13,
        "startChar": 22,
        "endLine": 13,
        "endChar": 36
      },
      "revId": "b9cb6175fd23fcdcd9c09d59a45571b10e2758d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed0b742d_fcb0a6c6",
        "filename": "base/include/android-base/logging.h",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-07T23:28:42Z",
      "side": 1,
      "message": "Also fixed LOG(x) in PS2 which had the same problem.",
      "revId": "b9cb6175fd23fcdcd9c09d59a45571b10e2758d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39ca24c0_cf299071",
        "filename": "base/include/android-base/logging.h",
        "patchSetId": 1
      },
      "lineNbr": 181,
      "author": {
        "id": 1096946
      },
      "writtenOn": "2017-08-07T22:34:31Z",
      "side": 1,
      "message": "Can we tag this with a bug of some sort to know when we can remove it? This seems like something that should be fixed, whereas most of the workarounds here get around more fundamental limitations of the analyzer (e.g. it can\u0027t see across TUs, ...)",
      "revId": "b9cb6175fd23fcdcd9c09d59a45571b10e2758d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3708607_d90a46b3",
        "filename": "base/include/android-base/logging.h",
        "patchSetId": 1
      },
      "lineNbr": 181,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-07T22:49:28Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "39ca24c0_cf299071",
      "revId": "b9cb6175fd23fcdcd9c09d59a45571b10e2758d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76127b8a_fcf91436",
        "filename": "base/include/android-base/logging.h",
        "patchSetId": 1
      },
      "lineNbr": 181,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-07T23:28:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a3708607_d90a46b3",
      "revId": "b9cb6175fd23fcdcd9c09d59a45571b10e2758d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6b3d926d_021da15b",
        "filename": "base/include/android-base/logging.h",
        "patchSetId": 1
      },
      "lineNbr": 182,
      "author": {
        "id": 1096946
      },
      "writtenOn": "2017-08-07T22:34:31Z",
      "side": 1,
      "message": "Might this associate some `else` clauses with the wrong `if`?\n\ne.g.\n\nif (foo)\n  CHECK(bar);\nelse\n  baz;\n\n-\u003e\n\nif (foo)\n  if (bar)\n    expr_here;\n  else\n    baz;\n\nI\u0027d imagine something like `if (LIKELY((x))) (void)0; else` would work just as well, but I\u0027m unsure if there are other incantations that are better suited for this.\n\n(I realize that this is inconsistent with the DCHECKs below, but we explicitly test that code like the above works in system/core/base/logging_test.cpp, and we seem to rely on that behavior elsewhere)",
      "revId": "b9cb6175fd23fcdcd9c09d59a45571b10e2758d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "866b4e2a_21fc42a7",
        "filename": "base/include/android-base/logging.h",
        "patchSetId": 1
      },
      "lineNbr": 182,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-07T22:49:28Z",
      "side": 1,
      "message": "I believe that\u0027s indeed a problem.\n\nThough I\u0027m not sure how to fix it , I don\u0027t think we have that kind of code pattern in ART so it\u0027s not a problem there.\n\nDo you think this L182 should be #ifdef __CLION__IDE__ only?\n\n(It was really silly to make CHECK work that way but not DCHECK, it really neuters it. We mostly use DCHECKs in ART since CHECKs are too expensive).",
      "parentUuid": "6b3d926d_021da15b",
      "revId": "b9cb6175fd23fcdcd9c09d59a45571b10e2758d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ee1cb67_c5be453b",
        "filename": "base/include/android-base/logging.h",
        "patchSetId": 1
      },
      "lineNbr": 182,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-07T22:59:47Z",
      "side": 1,
      "message": "I will try this:\n\n   `if (LIKELY((x))) (void)0; else` \n\nSeems to work in a standalone test case.",
      "parentUuid": "866b4e2a_21fc42a7",
      "revId": "b9cb6175fd23fcdcd9c09d59a45571b10e2758d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d9b81af_f2f072b1",
        "filename": "base/include/android-base/logging.h",
        "patchSetId": 1
      },
      "lineNbr": 182,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2017-08-07T23:28:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5ee1cb67_c5be453b",
      "revId": "b9cb6175fd23fcdcd9c09d59a45571b10e2758d0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}