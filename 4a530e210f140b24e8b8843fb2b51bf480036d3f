{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "21bde3ce_834eca91",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2021-02-24T17:50:07Z",
      "side": 1,
      "message": "(halfway through; drop some comments; continue tomorrow)",
      "revId": "4a530e210f140b24e8b8843fb2b51bf480036d3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0fa502c3_bb0dcdce",
        "filename": "fastboot/bootimg_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2021-02-24T17:50:07Z",
      "side": 1,
      "message": "nit: __FUNCTION__ ?",
      "range": {
        "startLine": 144,
        "startChar": 58,
        "endLine": 144,
        "endChar": 64
      },
      "revId": "4a530e210f140b24e8b8843fb2b51bf480036d3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0d7caf9_4140405b",
        "filename": "fastboot/bootimg_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 188,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2021-02-24T17:50:07Z",
      "side": 1,
      "message": "*overflow",
      "range": {
        "startLine": 188,
        "startChar": 30,
        "endLine": 188,
        "endChar": 37
      },
      "revId": "4a530e210f140b24e8b8843fb2b51bf480036d3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2080c6d3_e1dd3bd0",
        "filename": "fastboot/bootimg_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 189,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2021-02-24T17:50:07Z",
      "side": 1,
      "message": "very-minor-nit: Boundary overflow\n\n(so it looks symmetric to the previous line...)",
      "range": {
        "startLine": 189,
        "startChar": 35,
        "endLine": 189,
        "endChar": 36
      },
      "revId": "4a530e210f140b24e8b8843fb2b51bf480036d3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "171ec5bd_19dc8143",
        "filename": "fastboot/bootimg_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 209,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2021-02-24T17:50:07Z",
      "side": 1,
      "message": "doesn\u0027t need \"else\" as the then-block doesn\u0027t fall-through",
      "range": {
        "startLine": 209,
        "startChar": 6,
        "endLine": 209,
        "endChar": 11
      },
      "revId": "4a530e210f140b24e8b8843fb2b51bf480036d3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3329bfd4_47fcf644",
        "filename": "fastboot/bootimg_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 209,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-02-25T00:47:02Z",
      "side": 1,
      "message": "(it just make less number of lines to use elseif... I\u0027ll probably use if without braces)",
      "parentUuid": "171ec5bd_19dc8143",
      "range": {
        "startLine": 209,
        "startChar": 6,
        "endLine": 209,
        "endChar": 11
      },
      "revId": "4a530e210f140b24e8b8843fb2b51bf480036d3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9b44a70_e47b3685",
        "filename": "fastboot/bootimg_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 218,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2021-02-24T17:50:07Z",
      "side": 1,
      "message": "why do we need this, I think the arguments of die() don\u0027t modify errno, so this shouldn\u0027t be needed?\n\nIf you are worried other agents might unexpectedly modify errno, you could do:\n\nconst char *cause \u003d strerror(errno);\ndie(\u003cother expr...\u003e, cause);\n\n// albeit this still have the possibility that \u003cother expr...\u003e might call strerror() and mess up the value pointed to by cause.",
      "range": {
        "startLine": 218,
        "startChar": 8,
        "endLine": 218,
        "endChar": 32
      },
      "revId": "4a530e210f140b24e8b8843fb2b51bf480036d3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "310c1d2b_ac6a999c",
        "filename": "fastboot/bootimg_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 218,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-02-25T00:47:02Z",
      "side": 1,
      "message": "Technically, snprintf inside die may set errno. Recording the result of strerror(errno) works, but it is the exact same thing as recording the errno here.\n\n\u003e If you are worried other agents might unexpectedly modify errno\n\nThis won\u0027t happen because errno is thread local. Besides, fastboot driver isn\u0027t multi-threaded.",
      "parentUuid": "b9b44a70_e47b3685",
      "range": {
        "startLine": 218,
        "startChar": 8,
        "endLine": 218,
        "endChar": 32
      },
      "revId": "4a530e210f140b24e8b8843fb2b51bf480036d3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ec67309_54425540",
        "filename": "fastboot/bootimg_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 218,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-02-25T00:53:31Z",
      "side": 1,
      "message": "https://linux.die.net/man/3/snprintf\n\nIt actually didn\u0027t specify that errno may be mutated or not. But since snprintf requires memory allocation, which is a syscall, errno could be changed. I think it is a good practice to record errno immediately after a syscall if it is used later, because one might accidentally call other syscalls before the errno is used.\n\nWe really should have used libbase\u0027s PLOG(FATAL) and not worry about recording errnos for logging. ðŸ˜ž",
      "parentUuid": "310c1d2b_ac6a999c",
      "range": {
        "startLine": 218,
        "startChar": 8,
        "endLine": 218,
        "endChar": 32
      },
      "revId": "4a530e210f140b24e8b8843fb2b51bf480036d3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cd6d27b_e50047a5",
        "filename": "fastboot/bootimg_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 218,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2021-02-25T05:58:47Z",
      "side": 1,
      "message": "\u003e But since snprintf requires memory allocation, which is a syscall, errno could be changed. \n\nFYI, `man 3 strerror 3` says \"No other library function, including perror(3), will modify this string.\"\n\nThat\u0027s exactly the reason I advertised saving the result of strerror() instead of |errno|, cause snprintf() shouldn\u0027t alter the return value of strerror(), but may or may not alter |errno|. However strerror() might not be thread-safe, in contrast |errno| is TLS... ðŸ˜ž\n\nThat said, die() is a function, not a macro, so the strerror() must be evaluated before snprintf() within die() is called (CMIIW). So I think \n  die(..., strerror(saved_errno))\nis exact same to\n  die(..., strerror(errno))\nright?\n\n\u003e I think it is a good practice to record errno immediately after a syscall if it is used later, because one might accidentally call other syscalls before the errno is used.\n\nagreed",
      "parentUuid": "3ec67309_54425540",
      "range": {
        "startLine": 218,
        "startChar": 8,
        "endLine": 218,
        "endChar": 32
      },
      "revId": "4a530e210f140b24e8b8843fb2b51bf480036d3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "472d3aa9_82824931",
        "filename": "fastboot/bootimg_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 223,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2021-02-24T17:50:07Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 223,
        "startChar": 12,
        "endLine": 223,
        "endChar": 32
      },
      "revId": "4a530e210f140b24e8b8843fb2b51bf480036d3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "caceabcd_b1fa0605",
        "filename": "fastboot/bootimg_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 227,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2021-02-24T17:50:07Z",
      "side": 1,
      "message": "I\u0027m purely in awe now. printf format-string scares me.",
      "range": {
        "startLine": 227,
        "startChar": 69,
        "endLine": 227,
        "endChar": 74
      },
      "revId": "4a530e210f140b24e8b8843fb2b51bf480036d3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "daf26b95_e1420d92",
        "filename": "fastboot/bootimg_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 227,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-02-25T00:47:02Z",
      "side": 1,
      "message": "That\u0027s the format string for size_t\u0027s",
      "parentUuid": "caceabcd_b1fa0605",
      "range": {
        "startLine": 227,
        "startChar": 69,
        "endLine": 227,
        "endChar": 74
      },
      "revId": "4a530e210f140b24e8b8843fb2b51bf480036d3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aed876d9_a49a6841",
        "filename": "fastboot/bootimg_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 227,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2021-02-25T05:58:47Z",
      "side": 1,
      "message": "yeah I had to look it up, and that\u0027s why it scares me. It scares me even more that %z is defined by C99 and not C++.* standard, though in practice the C++ toolchain we use do support %z. (I\u0027m not sure if this is a toolchain thing or runtime (libc/libc++) thing)",
      "parentUuid": "daf26b95_e1420d92",
      "range": {
        "startLine": 227,
        "startChar": 69,
        "endLine": 227,
        "endChar": 74
      },
      "revId": "4a530e210f140b24e8b8843fb2b51bf480036d3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3618a4a_8eebf758",
        "filename": "fastboot/bootimg_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 415,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2021-02-24T17:50:07Z",
      "side": 1,
      "message": "why do we need this cast? the callee check_vendor_boot_hdr doesn\u0027t receive vendor_boot_img_hdr_v4* either, it receives vendor_boot_img_hdr_v3*.\n\nHow about just static_cast\u003cvoid*\u003e here?",
      "range": {
        "startLine": 415,
        "startChar": 30,
        "endLine": 415,
        "endChar": 46
      },
      "revId": "4a530e210f140b24e8b8843fb2b51bf480036d3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27850a9d_39f95669",
        "filename": "fastboot/bootimg_utils.cpp",
        "patchSetId": 2
      },
      "lineNbr": 415,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2021-02-25T00:47:02Z",
      "side": 1,
      "message": "oops, this this should be casting to V3. Will fix.",
      "parentUuid": "e3618a4a_8eebf758",
      "range": {
        "startLine": 415,
        "startChar": 30,
        "endLine": 415,
        "endChar": 46
      },
      "revId": "4a530e210f140b24e8b8843fb2b51bf480036d3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}