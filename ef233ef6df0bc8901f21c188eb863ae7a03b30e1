{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "15929cc3_8b1ddd25",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1956079
      },
      "writtenOn": "2022-06-20T07:47:30Z",
      "side": 1,
      "message": "Please help review the patch",
      "revId": "ef233ef6df0bc8901f21c188eb863ae7a03b30e1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d01f80a_d6d886d9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2022-06-21T19:55:23Z",
      "side": 1,
      "message": "What filesystem is being used for the backing image here? There are users of gsid that require 4KiB block alignment, and if the requested size isn\u0027t equal to the final partition size, it could lead to bugs.",
      "revId": "ef233ef6df0bc8901f21c188eb863ae7a03b30e1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ebf6609_e52ab086",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1956079
      },
      "writtenOn": "2022-06-22T03:05:13Z",
      "side": 1,
      "message": "It\u0027s f2fs, the block size is 4KB. Here use block size to align instead of sector size can avoid this bug",
      "parentUuid": "7d01f80a_d6d886d9",
      "revId": "ef233ef6df0bc8901f21c188eb863ae7a03b30e1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9625f0a_8e500e30",
        "filename": "fs_mgr/libfiemap/image_manager.cpp",
        "patchSetId": 1
      },
      "lineNbr": 204,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2022-06-24T19:39:06Z",
      "side": 1,
      "message": "I think the only change you need is to align size here, and then you don\u0027t need the other changes in this patch. Something like:\n\n    uint64_t aligned_size \u003d size;\n    if (aligned_size % fw-\u003eblock_size()) {\n        aligned_size +\u003d fw-\u003eblock_size() - (size % fw-\u003eblock_size());\n        if (aligned_size \u003e fw-\u003esize()) {\n            LOG(ERROR) \u003c\u003c \"Fiemap alignment error, requested \" \u003c\u003c size\n                       \u003c\u003c \" bytes, needed \" \u003c\u003c aligned_size \u003c\u003c \", but got \"\n                       \u003c\u003c fw-\u003esize() \" bytes.\";\n            return false;\n        }\n    }\n\nThis will keep the partition size close to the requested size. If you align to fw-\u003esize(), it could be much bigger (f2fs has 2MiB granularity).",
      "revId": "ef233ef6df0bc8901f21c188eb863ae7a03b30e1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc338c63_a065926e",
        "filename": "fs_mgr/libfiemap/image_manager.cpp",
        "patchSetId": 1
      },
      "lineNbr": 204,
      "author": {
        "id": 1956079
      },
      "writtenOn": "2022-06-27T03:01:47Z",
      "side": 1,
      "message": "fw-\u003esize() is the real size of backing image file, it has been aligned in FiemapWriter::Open. So I think here to pass the fw-\u003esize() has no risk.",
      "parentUuid": "c9625f0a_8e500e30",
      "revId": "ef233ef6df0bc8901f21c188eb863ae7a03b30e1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "116fafe4_db2c722a",
        "filename": "fs_mgr/libfiemap/image_manager.cpp",
        "patchSetId": 1
      },
      "lineNbr": 204,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2022-06-27T17:54:44Z",
      "side": 1,
      "message": "The partition size should be the exact size requested, if properly aligned beforehand. But the filesize might be larger due to underlying alignment. This would break DSUs which lseek() to the end of the image based on block device size.",
      "parentUuid": "cc338c63_a065926e",
      "revId": "ef233ef6df0bc8901f21c188eb863ae7a03b30e1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bf33724_72310b60",
        "filename": "fs_mgr/libfiemap/image_manager.cpp",
        "patchSetId": 1
      },
      "lineNbr": 204,
      "author": {
        "id": 1956079
      },
      "writtenOn": "2022-06-28T02:54:48Z",
      "side": 1,
      "message": "When we do fallocate to a file, it will allocate disk space over the file size aligning the block size.\ne.g.\nPD:/data # touch a\nPD:/data # fallocate -l 2097159 a\nPD:/data # ls -ls a\n2052 -rw-rw-rw- 1 root root 2097159 2022-06-28 10:37 a\n\nThe file size is 2M+7 bytes, and it\u0027s disk size is (2048+4)kB. So if fseek over the file size, it will write the spare disk space of this file and will not bother other files.\n\nIf we want more safety and to make literally correct, I think we can pass \u0027fw-\u003esize() - fw-\u003eblock_size()\u0027 parameter here.",
      "parentUuid": "116fafe4_db2c722a",
      "revId": "ef233ef6df0bc8901f21c188eb863ae7a03b30e1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9bec61ba_defba16a",
        "filename": "fs_mgr/libfiemap/image_manager.cpp",
        "patchSetId": 1
      },
      "lineNbr": 204,
      "author": {
        "id": 1956079
      },
      "writtenOn": "2022-07-14T07:03:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4bf33724_72310b60",
      "revId": "ef233ef6df0bc8901f21c188eb863ae7a03b30e1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}