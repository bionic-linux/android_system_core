{
  "comments": [
    {
      "key": {
        "uuid": "dd44f361_19e7a18d",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 3
      },
      "lineNbr": 70,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-02-04T22:45:53Z",
      "side": 1,
      "message": "Do we know the minimum kernel version required for /sys/module or /sys/fs to report this information?  Assuming this will be there for all kernel versions over some point, it may be worth it to annotate it such that we can remove it in the future or at least be clear to readers why we check so many locations.",
      "revId": "03da05c076ae4b63f19451edb6c4be11f954ee19",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd75bb70_4ee0e478",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 3
      },
      "lineNbr": 70,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2019-02-04T23:25:15Z",
      "side": 1,
      "message": "/sys/module/ will depend on the filesystem implementation details, if it imports/exports any params. So this works for 4.9 and higher. Breaks for 3.18 and some 4.4 implementations. tiamen and marlin gave me problems for the overlayfs and for f2fs.\n\n/sys/fs/ similar issue with implementations details. Can give a false negative (device uses ext4 for userdata, then f2fs will not succeed). taimen and marlin gives us the scenario of a false negative for f2fs that needed fortification. When I added f2fs taimen picked up, marlin did not. taimen and marlin failed for overlay too.\n\n/proc/filesystems works on _all_ releases, but it is more costly to read, needs a parse which is greatly simplified here, and if it is \u003e1024 bytes (which is not the current state of affairs, so may be a red herring), ReadFileToString _could_ suffer from atomicity/races with updates (eg partners loading modules) to /proc/filesystems. I do not want to use it if the other two provide their immediate positive results. taimen and marlin picked up here for overlay and here we proved marlin (and taimen) did not have f2fs.",
      "parentUuid": "dd44f361_19e7a18d",
      "revId": "03da05c076ae4b63f19451edb6c4be11f954ee19",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6befa39c_1592dad4",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 3
      },
      "lineNbr": 70,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2019-02-04T23:40:12Z",
      "side": 1,
      "message": "Added one-line summaries",
      "parentUuid": "fd75bb70_4ee0e478",
      "revId": "03da05c076ae4b63f19451edb6c4be11f954ee19",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e122e010_9e9c9d47",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 3
      },
      "lineNbr": 70,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-02-05T02:56:43Z",
      "side": 1,
      "message": "How costly is it to read and how often are we reading it?  It looks like one of the places where we\u0027re reading it is when setting up scratch for the first time, which seems like a slow enough operation that we won\u0027t be impacted by a marginally slower read.  We pay the cost of maintenance for parsing already by having it as a fallback and it doesn\u0027t look like the parsing itself will be an intense operation.\n\nI don\u0027t understand the atomicity / race / file size limitation.  Are you saying that /proc/filesystems will be corrupted if multiple read calls happen to it?  Or just that we may miss some file systems if a kernel module is being loaded at the same time that we call it?  Neither of those seem likely to me; and if there is a fundamental race, we need to handle it by making sure that file systems kernel modules (if any... do we really expect anyone is going to do this?) are loaded before any of this code runs.\n\nAll to say, that it sounds like a good idea to drop the first two that rely on implementation details and go straight to the node that is specifically meant to tell us which filesystems are available on the device.",
      "parentUuid": "6befa39c_1592dad4",
      "revId": "03da05c076ae4b63f19451edb6c4be11f954ee19",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}