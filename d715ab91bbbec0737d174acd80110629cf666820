{
  "comments": [
    {
      "key": {
        "uuid": "194fc37f_25568e9a",
        "filename": "init/init_parser.c",
        "patchSetId": 1
      },
      "lineNbr": 662,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2014-03-28T18:05:19Z",
      "side": 1,
      "message": "This will cause every argument to every service to be in memory twice, which doesn\u0027t seem necessary.  Can you find a way to use the original copy if there were no properties in it?  It will probably be ugly, since you can\u0027t free args[i].",
      "revId": "d715ab91bbbec0737d174acd80110629cf666820",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f904af03_85b2e879",
        "filename": "init/init_parser.c",
        "patchSetId": 1
      },
      "lineNbr": 662,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2014-03-28T18:14:03Z",
      "side": 1,
      "message": "If you\u0027re ok with ugliness, then yes it\u0027s definitely possible. I\u0027ll change this.\n\nThere\u0027s also a performance (not memory) optimization I have in mind for expand_props for the case where there isn\u0027t an expansion. I\u0027ll apply that too.",
      "parentUuid": "194fc37f_25568e9a",
      "revId": "d715ab91bbbec0737d174acd80110629cf666820",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f94bcf71_242fb20c",
        "filename": "rootdir/init.rc",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1003723
      },
      "writtenOn": "2014-03-28T18:20:24Z",
      "side": 1,
      "message": "i figured we just have different imports for the different static configuration choices.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 30
      },
      "revId": "d715ab91bbbec0737d174acd80110629cf666820",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "194fc37f_055b92c0",
        "filename": "rootdir/init.rc",
        "patchSetId": 1
      },
      "lineNbr": 503,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2014-03-28T18:05:19Z",
      "side": 1,
      "message": "What do you expect extra_args to be used for?",
      "range": {
        "startLine": 503,
        "startChar": 88,
        "endLine": 503,
        "endChar": 111
      },
      "revId": "d715ab91bbbec0737d174acd80110629cf666820",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f904af03_45bce04b",
        "filename": "rootdir/init.rc",
        "patchSetId": 1
      },
      "lineNbr": 503,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2014-03-28T18:14:03Z",
      "side": 1,
      "message": "There are at least two things I have in mind :\n\n(i) --start_secondary : exec the secondary zygote as soon as the primary is started.\n(ii) (?) --zygote_abi\u003dabi : Unless there\u0027s a clean way for the zygote to determine what ABI it\u0027s using, it has to be told. That way, the ActivityManager can just say \"startProcess with String abi\u003d\"abi\" and the right zygote will start it.\n\nSo, (i) can be replaced by a system property, and so can (ii) .\n\nIn fact, if we want to be less general, we can assume there will be a maximum of two zygotes and one of them *must* be 64 bits and the other *must be 32*. Then the ActivityManager can say \"startProcess boolean is64\u003dfalse\" on it\u0027s zygote connection.\n\nDepends on how flexible we want to be, and how strong our aversion for additional arguments like this is.",
      "parentUuid": "194fc37f_055b92c0",
      "range": {
        "startLine": 503,
        "startChar": 88,
        "endLine": 503,
        "endChar": 111
      },
      "revId": "d715ab91bbbec0737d174acd80110629cf666820",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}