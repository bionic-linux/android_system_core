{
  "comments": [
    {
      "key": {
        "uuid": "f343a8c4_26a4dd18",
        "filename": "init/security.cpp",
        "patchSetId": 1
      },
      "lineNbr": 231,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-01-15T19:09:42Z",
      "side": 1,
      "message": "You don\u0027t need memset; with C++, you can do perf_event_attr pe \u003d {} to zero initialize the struct.\n\nYou can also use designated initializers with clang, so:\n\nperf_event_attr pe \u003d {\n  .type \u003d PERF_TYPE_SOFTWARE;\n  .size \u003d ...\n};\n\nIt will zero initialize the other parameters.",
      "revId": "2de08fb7af94debb4c2b89629814726f2e8c4d5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8a3d3cb_ae4b3987",
        "filename": "init/security.cpp",
        "patchSetId": 1
      },
      "lineNbr": 231,
      "author": {
        "id": 1128769
      },
      "writtenOn": "2020-01-15T20:55:29Z",
      "side": 1,
      "message": "Done. Didn\u0027t realize that platform code can use designated initializers, using them now.",
      "parentUuid": "f343a8c4_26a4dd18",
      "revId": "2de08fb7af94debb4c2b89629814726f2e8c4d5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4bac300_d699f194",
        "filename": "init/security.cpp",
        "patchSetId": 1
      },
      "lineNbr": 231,
      "author": {
        "id": 1040443
      },
      "writtenOn": "2020-01-15T20:59:21Z",
      "side": 1,
      "message": "Not sure how much Android follows the Google C++ style guide, but designated initializers are a non-standard c++ extensions and are banned: https://google.github.io/styleguide/cppguide.html#Nonstandard_Extensions",
      "parentUuid": "f343a8c4_26a4dd18",
      "revId": "2de08fb7af94debb4c2b89629814726f2e8c4d5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75018d87_3de564e5",
        "filename": "init/security.cpp",
        "patchSetId": 1
      },
      "lineNbr": 242,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-01-15T19:09:42Z",
      "side": 1,
      "message": "We have PLOG that appends strerror(errno) already, so this can be simply:\n\nPLOG(ERROR) \u003c\u003c \"Unexpected perf_event_open error\";\n\nThe same for the below parts.\n\nYou could also return an error, \n\nreturn ErrnoError() \u003c\u003c \"Unexpected perf_event_open error\"; that will have init print more context about this function, though the context here isn\u0027t as useful as it is in other places.",
      "revId": "2de08fb7af94debb4c2b89629814726f2e8c4d5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bbdad056_a61a655b",
        "filename": "init/security.cpp",
        "patchSetId": 1
      },
      "lineNbr": 242,
      "author": {
        "id": 1128769
      },
      "writtenOn": "2020-01-15T20:55:29Z",
      "side": 1,
      "message": "Done as PLOG. As you mention, it didn\u0027t seem like there\u0027s much to gain from marking the outcome of the builtin action as unsuccessful.",
      "parentUuid": "75018d87_3de564e5",
      "revId": "2de08fb7af94debb4c2b89629814726f2e8c4d5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f8f0533_f59e0213",
        "filename": "init/security.cpp",
        "patchSetId": 1
      },
      "lineNbr": 254,
      "author": {
        "id": 1128769
      },
      "writtenOn": "2020-01-15T19:05:12Z",
      "side": 1,
      "message": "Primiano remarked that to most readers, this looks like a potentially blocking syscall (even if we know that the kernel implementation shouldn\u0027t be).\n\nTo that point, I think testing ioctl() alone is sufficient, so I\u0027ll drop the read() test in the next revision.",
      "range": {
        "startLine": 246,
        "startChar": 0,
        "endLine": 254,
        "endChar": 5
      },
      "revId": "2de08fb7af94debb4c2b89629814726f2e8c4d5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33fceeea_2d0d6c83",
        "filename": "init/security.cpp",
        "patchSetId": 1
      },
      "lineNbr": 254,
      "author": {
        "id": 1128769
      },
      "writtenOn": "2020-01-15T20:55:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0f8f0533_f59e0213",
      "range": {
        "startLine": 246,
        "startChar": 0,
        "endLine": 254,
        "endChar": 5
      },
      "revId": "2de08fb7af94debb4c2b89629814726f2e8c4d5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c6bfb41f_47e2b388",
        "filename": "init/security.cpp",
        "patchSetId": 1
      },
      "lineNbr": 263,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2020-01-15T19:29:30Z",
      "side": 1,
      "message": "I don\u0027t understand. init runs as root, can it still be denied by selinux for PERF_EVENT__WRITE?",
      "range": {
        "startLine": 263,
        "startChar": 4,
        "endLine": 263,
        "endChar": 5
      },
      "revId": "2de08fb7af94debb4c2b89629814726f2e8c4d5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "581677d5_db673081",
        "filename": "init/security.cpp",
        "patchSetId": 1
      },
      "lineNbr": 263,
      "author": {
        "id": 1128769
      },
      "writtenOn": "2020-01-15T19:34:53Z",
      "side": 1,
      "message": "root implicitly passes all the DAC checks (think capabilities and uid ownership), however MAC (i.e. SELinux) still applies.\n\nIf you\u0027re comparing this with the \"su\" domain on debug builds - it\u0027s special-cased to be permissive:\nhttps://cs.android.com/android/_/android/platform/system/sepolicy/+/41a1b4af9c7425d5d17bc967f33a079d0b28a609:private/su.te;l\u003d20",
      "parentUuid": "c6bfb41f_47e2b388",
      "range": {
        "startLine": 263,
        "startChar": 4,
        "endLine": 263,
        "endChar": 5
      },
      "revId": "2de08fb7af94debb4c2b89629814726f2e8c4d5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61912610_e291371b",
        "filename": "rootdir/init.rc",
        "patchSetId": 1
      },
      "lineNbr": 951,
      "author": {
        "id": 1128769
      },
      "writtenOn": "2020-01-15T16:59:14Z",
      "side": 1,
      "message": "note to reviewers: not entirely convinced this block is right, currently checking what exactly the debug.* sysprops are used for (might be important to keep setting them on each security.perf_harden \u003c- 0 assignment, even if LSM hooks are up).",
      "range": {
        "startLine": 949,
        "startChar": 0,
        "endLine": 951,
        "endChar": 80
      },
      "revId": "2de08fb7af94debb4c2b89629814726f2e8c4d5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f741e6a_44a83e07",
        "filename": "rootdir/init.rc",
        "patchSetId": 1
      },
      "lineNbr": 951,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2020-01-15T19:29:30Z",
      "side": 1,
      "message": "Those debug properties are used by simpleperf to adjust memory/cpu-time used for recording. Since the proc files belong to root and can\u0027t be written by other users, simpleperf change them when disabling perf_harden.\n\nI\u0027d like those configs files still in control of simpleperf and security.perf_harden. So maybe add:\n\non property:security.perf_harden\u003d0 \u0026\u0026 property:sys.init.perf_lsm_hooks\u003d\"1\"\n      write /proc/sys/kernel/perf_event_max_sample_rate ${debug.perf_event_max_sample_rate:-100000}\n      write /proc/sys/kernel/perf_cpu_time_max_percent ${debug.perf_cpu_time_max_percent:-25}\n      write /proc/sys/kernel/perf_event_mlock_kb ${debug.perf_event_mlock_kb:-516}\n\nAlso you can remove lines writing to config files in sys.init.perf_lsm_hooks\u003d1.",
      "parentUuid": "61912610_e291371b",
      "range": {
        "startLine": 949,
        "startChar": 0,
        "endLine": 951,
        "endChar": 80
      },
      "revId": "2de08fb7af94debb4c2b89629814726f2e8c4d5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21f6d405_1d763c30",
        "filename": "rootdir/init.rc",
        "patchSetId": 1
      },
      "lineNbr": 951,
      "author": {
        "id": 1128769
      },
      "writtenOn": "2020-01-15T20:55:29Z",
      "side": 1,
      "message": "I\u0027ve refactored this into one block that\u0027s related to perf_event_paranoid, and one that is related to sysctls. Does this look sensible?\n\n(This also now restores the defaults once the system is returning to security.perf_harden\u003d1 state.)",
      "parentUuid": "2f741e6a_44a83e07",
      "range": {
        "startLine": 949,
        "startChar": 0,
        "endLine": 951,
        "endChar": 80
      },
      "revId": "2de08fb7af94debb4c2b89629814726f2e8c4d5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}