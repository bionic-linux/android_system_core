{
  "comments": [
    {
      "key": {
        "uuid": "f343a8c4_26a4dd18",
        "filename": "init/security.cpp",
        "patchSetId": 1
      },
      "lineNbr": 231,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-01-15T19:09:42Z",
      "side": 1,
      "message": "You don\u0027t need memset; with C++, you can do perf_event_attr pe \u003d {} to zero initialize the struct.\n\nYou can also use designated initializers with clang, so:\n\nperf_event_attr pe \u003d {\n  .type \u003d PERF_TYPE_SOFTWARE;\n  .size \u003d ...\n};\n\nIt will zero initialize the other parameters.",
      "revId": "2de08fb7af94debb4c2b89629814726f2e8c4d5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75018d87_3de564e5",
        "filename": "init/security.cpp",
        "patchSetId": 1
      },
      "lineNbr": 242,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-01-15T19:09:42Z",
      "side": 1,
      "message": "We have PLOG that appends strerror(errno) already, so this can be simply:\n\nPLOG(ERROR) \u003c\u003c \"Unexpected perf_event_open error\";\n\nThe same for the below parts.\n\nYou could also return an error, \n\nreturn ErrnoError() \u003c\u003c \"Unexpected perf_event_open error\"; that will have init print more context about this function, though the context here isn\u0027t as useful as it is in other places.",
      "revId": "2de08fb7af94debb4c2b89629814726f2e8c4d5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f8f0533_f59e0213",
        "filename": "init/security.cpp",
        "patchSetId": 1
      },
      "lineNbr": 254,
      "author": {
        "id": 1128769
      },
      "writtenOn": "2020-01-15T19:05:12Z",
      "side": 1,
      "message": "Primiano remarked that to most readers, this looks like a potentially blocking syscall (even if we know that the kernel implementation shouldn\u0027t be).\n\nTo that point, I think testing ioctl() alone is sufficient, so I\u0027ll drop the read() test in the next revision.",
      "range": {
        "startLine": 246,
        "startChar": 0,
        "endLine": 254,
        "endChar": 5
      },
      "revId": "2de08fb7af94debb4c2b89629814726f2e8c4d5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61912610_e291371b",
        "filename": "rootdir/init.rc",
        "patchSetId": 1
      },
      "lineNbr": 951,
      "author": {
        "id": 1128769
      },
      "writtenOn": "2020-01-15T16:59:14Z",
      "side": 1,
      "message": "note to reviewers: not entirely convinced this block is right, currently checking what exactly the debug.* sysprops are used for (might be important to keep setting them on each security.perf_harden \u003c- 0 assignment, even if LSM hooks are up).",
      "range": {
        "startLine": 949,
        "startChar": 0,
        "endLine": 951,
        "endChar": 80
      },
      "revId": "2de08fb7af94debb4c2b89629814726f2e8c4d5a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}