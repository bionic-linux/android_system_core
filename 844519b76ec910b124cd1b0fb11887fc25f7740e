{
  "comments": [
    {
      "key": {
        "uuid": "dcbf42c0_1d1457b2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2016-10-13T04:39:22Z",
      "side": 1,
      "message": "why does webview_zygote need access to emulated storage?",
      "range": {
        "startLine": 12,
        "startChar": 2,
        "endLine": 12,
        "endChar": 15
      },
      "revId": "844519b76ec910b124cd1b0fb11887fc25f7740e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc95e6fb_8cc78f40",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1042203
      },
      "writtenOn": "2016-10-14T00:02:53Z",
      "side": 1,
      "message": "I\u0027m granting this so that this call in ForkAndSpecializeCommon() can succeed: https://android.googlesource.com/platform/frameworks/base/+/e4f8d69c58e3/core/jni/com_android_internal_os_Zygote.cpp#483. But we don\u0027t ever call https://android.googlesource.com/platform/frameworks/base/+/e4f8d69c58e3/core/jni/com_android_internal_os_Zygote.cpp#668 in the webview_zygote, so we may be able to skip this. The issue is that currently the framework tries to unshare/remount unconditionally, so this fails without the cap.\n\nMaybe there\u0027s a better alternative (check for emulated storage, and if it\u0027s not currently mounted, don\u0027t proceed?)? I wanted your thoughts on that.",
      "parentUuid": "dcbf42c0_1d1457b2",
      "revId": "844519b76ec910b124cd1b0fb11887fc25f7740e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bc244e48_c7b2ce50",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2016-10-14T03:44:25Z",
      "side": 1,
      "message": "can we skip checking for webview_zygote?",
      "parentUuid": "fc95e6fb_8cc78f40",
      "revId": "844519b76ec910b124cd1b0fb11887fc25f7740e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bc528ec4_c928958e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1042203
      },
      "writtenOn": "2016-10-14T20:40:49Z",
      "side": 1,
      "message": "We can definitely skip the attempts to mount(). The app zygote currently sets up a new mount namespace when it starts (though we could have init do this for webview_zygote if necessary). And each time the zygote forks, it also creates a new mount namespace in the child. Can we skip that since we\u0027re not mounting in the storage?",
      "parentUuid": "bc244e48_c7b2ce50",
      "revId": "844519b76ec910b124cd1b0fb11887fc25f7740e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcbf42c0_fdd5dbd8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2016-10-13T04:39:22Z",
      "side": 1,
      "message": "bounding",
      "range": {
        "startLine": 13,
        "startChar": 38,
        "endLine": 13,
        "endChar": 46
      },
      "revId": "844519b76ec910b124cd1b0fb11887fc25f7740e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc95e6fb_aca60baa",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1042203
      },
      "writtenOn": "2016-10-14T00:02:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dcbf42c0_fdd5dbd8",
      "revId": "844519b76ec910b124cd1b0fb11887fc25f7740e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcbf42c0_5df7af71",
        "filename": "libcutils/fs_config.c",
        "patchSetId": 3
      },
      "lineNbr": 153,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2016-10-13T04:39:22Z",
      "side": 1,
      "message": "AID_ROOT",
      "range": {
        "startLine": 153,
        "startChar": 28,
        "endLine": 153,
        "endChar": 37
      },
      "revId": "844519b76ec910b124cd1b0fb11887fc25f7740e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dcbf42c0_3d02f370",
        "filename": "libcutils/fs_config.c",
        "patchSetId": 3
      },
      "lineNbr": 153,
      "author": {
        "id": 1054468
      },
      "writtenOn": "2016-10-13T04:39:22Z",
      "side": 1,
      "message": "750 or 754",
      "range": {
        "startLine": 153,
        "startChar": 6,
        "endLine": 153,
        "endChar": 10
      },
      "revId": "844519b76ec910b124cd1b0fb11887fc25f7740e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc95e6fb_ecde53fe",
        "filename": "libcutils/fs_config.c",
        "patchSetId": 3
      },
      "lineNbr": 153,
      "author": {
        "id": 1042203
      },
      "writtenOn": "2016-10-14T00:02:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dcbf42c0_3d02f370",
      "revId": "844519b76ec910b124cd1b0fb11887fc25f7740e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc95e6fb_4ceae79a",
        "filename": "libcutils/fs_config.c",
        "patchSetId": 3
      },
      "lineNbr": 153,
      "author": {
        "id": 1042203
      },
      "writtenOn": "2016-10-14T00:02:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dcbf42c0_5df7af71",
      "revId": "844519b76ec910b124cd1b0fb11887fc25f7740e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}