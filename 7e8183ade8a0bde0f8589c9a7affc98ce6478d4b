{
  "comments": [
    {
      "key": {
        "uuid": "a9ad3138_583f699a",
        "filename": "libmeminfo/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-10-24T02:43:12Z",
      "side": 1,
      "message": "Why?",
      "revId": "7e8183ade8a0bde0f8589c9a7affc98ce6478d4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9a5ef07_5bb7f05c",
        "filename": "libmeminfo/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2018-10-24T18:34:09Z",
      "side": 1,
      "message": "I think this is for unique_fd in meminfo.h. I will double check though.",
      "parentUuid": "a9ad3138_583f699a",
      "revId": "7e8183ade8a0bde0f8589c9a7affc98ce6478d4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f92c60ad_e5cc02e6",
        "filename": "libmeminfo/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-10-24T19:49:39Z",
      "side": 1,
      "message": "Shouldn\u0027t need to be export_shared_lib_headers though.  Just having libbase in shared_libs should pull in the headers.",
      "parentUuid": "d9a5ef07_5bb7f05c",
      "revId": "7e8183ade8a0bde0f8589c9a7affc98ce6478d4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecb52fd7_a415400e",
        "filename": "libmeminfo/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-10-24T19:56:20Z",
      "side": 1,
      "message": "is that true? (he\u0027s exporting `meminfo.h`...)",
      "parentUuid": "f92c60ad_e5cc02e6",
      "revId": "7e8183ade8a0bde0f8589c9a7affc98ce6478d4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5aff440_346ef203",
        "filename": "libmeminfo/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-10-24T20:03:13Z",
      "side": 1,
      "message": "export_include_dirs: [\"include\"], is needed for exporting meminfo.h\n\nexport_shared_lib_headers: [\"libbase\"], is what I\u0027m questioning and I\u0027m pretty sure is unneeded.",
      "parentUuid": "ecb52fd7_a415400e",
      "revId": "7e8183ade8a0bde0f8589c9a7affc98ce6478d4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a9c2bcc_085729b2",
        "filename": "libmeminfo/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2018-10-24T20:13:17Z",
      "side": 1,
      "message": "It is in fact needed, I ran into following for example and that\u0027s why it was added - \n\n-----\nIn file included from system/core/libmeminfo/tools/procmem.cpp:27:\nsystem/core/libmeminfo/include/meminfo/meminfo.h:27:10: fatal error: \u0027android-base/unique_fd.h\u0027 file not found\n#include \u003candroid-base/unique_fd.h\u003e\n         ^~~~~~~~~~~~~~~~~~~~~~~~~~\n1 error generated.\n11:44:23 ninja failed with: exit status 1\n-----\n\nI followed some other example to solve this problem though and it made sense to me. Is there any other way to work around this?",
      "parentUuid": "a5aff440_346ef203",
      "revId": "7e8183ade8a0bde0f8589c9a7affc98ce6478d4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f257f850_fdaf1db8",
        "filename": "libmeminfo/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-10-24T20:14:36Z",
      "side": 1,
      "message": "no, i think you\u0027re doing the right thing, and that tomcherry just missed that the header you export itself #includes a libbase header.",
      "parentUuid": "0a9c2bcc_085729b2",
      "revId": "7e8183ade8a0bde0f8589c9a7affc98ce6478d4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "619cb971_4e4d51fa",
        "filename": "libmeminfo/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-10-24T20:15:25Z",
      "side": 1,
      "message": "Okay, makes sense.  I guess I\u0027ve never done something like that before.  Didn\u0027t know there was a flag required for it.",
      "parentUuid": "f257f850_fdaf1db8",
      "revId": "7e8183ade8a0bde0f8589c9a7affc98ce6478d4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0cad0359_6b0dd561",
        "filename": "libmeminfo/include/meminfo/meminfo.h",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-10-24T19:29:45Z",
      "side": 1,
      "message": "do these have to be in the public header? probably best to avoid #defines there.",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 36,
        "endChar": 0
      },
      "revId": "7e8183ade8a0bde0f8589c9a7affc98ce6478d4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90949969_5b6999af",
        "filename": "libmeminfo/include/meminfo/meminfo.h",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-10-24T19:29:45Z",
      "side": 1,
      "message": "i\u0027d avoid operator overloading unless your type is \"int-like\".\n\n(do you even need this in more than one place?)",
      "revId": "7e8183ade8a0bde0f8589c9a7affc98ce6478d4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24118876_ae2f5b5e",
        "filename": "libmeminfo/include/meminfo/meminfo.h",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-10-24T19:29:45Z",
      "side": 1,
      "message": "no need for `struct` in C++.",
      "range": {
        "startLine": 95,
        "startChar": 4,
        "endLine": 95,
        "endChar": 10
      },
      "revId": "7e8183ade8a0bde0f8589c9a7affc98ce6478d4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23a5d572_1818cca5",
        "filename": "libmeminfo/include/meminfo/meminfo.h",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-10-24T19:29:45Z",
      "side": 1,
      "message": "i\u0027m not quite clear on why `Vma` has either of these, let alone both...",
      "revId": "7e8183ade8a0bde0f8589c9a7affc98ce6478d4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "699b05b5_b15d052d",
        "filename": "libmeminfo/include/meminfo/meminfo.h",
        "patchSetId": 2
      },
      "lineNbr": 99,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-10-24T19:29:45Z",
      "side": 1,
      "message": "add class-level documentation?\n\n(this isn\u0027t information about a page, this is information about all the pages?)",
      "revId": "7e8183ade8a0bde0f8589c9a7affc98ce6478d4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3da1db1a_f46cd0e8",
        "filename": "libmeminfo/include/meminfo/meminfo.h",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-10-24T19:29:45Z",
      "side": 1,
      "message": "free function instead? (this doesn\u0027t really have anything to do with PageInfo.)",
      "revId": "7e8183ade8a0bde0f8589c9a7affc98ce6478d4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1adba9f_bea0807f",
        "filename": "libmeminfo/include/meminfo/meminfo.h",
        "patchSetId": 2
      },
      "lineNbr": 164,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-10-24T19:29:45Z",
      "side": 1,
      "message": "could just move the Global/Process distinction into the names rather than have one-line comments.",
      "revId": "7e8183ade8a0bde0f8589c9a7affc98ce6478d4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8fdff51_24516d3c",
        "filename": "libmeminfo/include/meminfo/meminfo.h",
        "patchSetId": 2
      },
      "lineNbr": 176,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-10-24T19:29:45Z",
      "side": 1,
      "message": "add `_kb` to all of these for unambiguous units? (i\u0027m always surprised when the unit of size isn\u0027t just bytes.)",
      "revId": "7e8183ade8a0bde0f8589c9a7affc98ce6478d4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d9ab146_67c0a68a",
        "filename": "libmeminfo/libmeminfo_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-10-24T19:29:45Z",
      "side": 1,
      "message": "not used.",
      "revId": "7e8183ade8a0bde0f8589c9a7affc98ce6478d4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "014c8987_46a3bba4",
        "filename": "libmeminfo/process.cpp",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-10-24T19:29:45Z",
      "side": 1,
      "message": "not used.",
      "revId": "7e8183ade8a0bde0f8589c9a7affc98ce6478d4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed5268ad_acf7333f",
        "filename": "libmeminfo/process.cpp",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-10-24T19:29:45Z",
      "side": 1,
      "message": "StringPrintf here but std::to_string on L88? choose one over the other?\n\n(i tend to use StringPrintf just because it\u0027s more general so i can use it no matter what i\u0027m doing, but i am curious how much is saved by using std::to_string instead. not curious enough to have ever written the benchmark myself though :-) )",
      "revId": "7e8183ade8a0bde0f8589c9a7affc98ce6478d4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3aa24d13_c1ca2db1",
        "filename": "libmeminfo/process.cpp",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-10-24T19:29:45Z",
      "side": 1,
      "message": "...which makes sense, given the class\u0027 other members... except that this makes WssReset a bit odd. should that be a free function instead?\n\n(is it weird that the snapshot is taken when you call the first accessor? would the constructor be more obvious?)",
      "revId": "7e8183ade8a0bde0f8589c9a7affc98ce6478d4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a212283d_5e590bf5",
        "filename": "libmeminfo/process.cpp",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-10-24T19:29:45Z",
      "side": 1,
      "message": "is there a reason why you have a collection of pointers?",
      "range": {
        "startLine": 92,
        "startChar": 39,
        "endLine": 92,
        "endChar": 55
      },
      "revId": "7e8183ade8a0bde0f8589c9a7affc98ce6478d4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "befbca71_ce30d35e",
        "filename": "libmeminfo/tools/procmem.cpp",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-10-24T19:29:45Z",
      "side": 1,
      "message": "const\u0026?",
      "range": {
        "startLine": 68,
        "startChar": 69,
        "endLine": 68,
        "endChar": 80
      },
      "revId": "7e8183ade8a0bde0f8589c9a7affc98ce6478d4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "006be1b3_e44acc77",
        "filename": "libmeminfo/tools/procmem.cpp",
        "patchSetId": 2
      },
      "lineNbr": 157,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-10-24T19:29:45Z",
      "side": 1,
      "message": "`if (pid \u003d\u003d 0) error`?",
      "revId": "7e8183ade8a0bde0f8589c9a7affc98ce6478d4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}