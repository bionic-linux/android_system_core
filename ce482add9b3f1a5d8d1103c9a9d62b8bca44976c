{
  "comments": [
    {
      "key": {
        "uuid": "b91fb853_d5d77cb6",
        "filename": "logcat/logcat.cpp",
        "patchSetId": 2
      },
      "lineNbr": 552,
      "author": {
        "id": 1069543
      },
      "writtenOn": "2015-05-29T17:52:03Z",
      "side": 1,
      "message": "Should the case logic be moved to a separate function so this function is more readable?",
      "revId": "ce482add9b3f1a5d8d1103c9a9d62b8bca44976c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b91fb853_f5d03871",
        "filename": "logcat/logcat.cpp",
        "patchSetId": 2
      },
      "lineNbr": 552,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2015-05-29T18:07:29Z",
      "side": 1,
      "message": "This is on-par with the other selections, but agreed.",
      "parentUuid": "b91fb853_d5d77cb6",
      "revId": "ce482add9b3f1a5d8d1103c9a9d62b8bca44976c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b91fb853_f895cd10",
        "filename": "logcat/logcat.cpp",
        "patchSetId": 2
      },
      "lineNbr": 566,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-05-29T18:20:13Z",
      "side": 1,
      "message": "these .data() should really be .c_str() (though, yes, you\u0027ll get away with it on our current implementation).",
      "revId": "ce482add9b3f1a5d8d1103c9a9d62b8bca44976c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed56c9ec_5f6b979f",
        "filename": "logcat/logcat.cpp",
        "patchSetId": 2
      },
      "lineNbr": 580,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-05-29T18:20:13Z",
      "side": 1,
      "message": "\"re\"",
      "revId": "ce482add9b3f1a5d8d1103c9a9d62b8bca44976c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d54fde2_0919ec79",
        "filename": "logcat/logcat.cpp",
        "patchSetId": 2
      },
      "lineNbr": 581,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-05-29T18:20:13Z",
      "side": 1,
      "message": "this is unsafe. fclose(NULL) will segfault. you either have do the fopen into a raw pointer and only define your unique_ptr when you can initialize it with a known non-null FILE*, or you could replace this with something like this instead:\n\n  std::string file;\n  if (android::base::ReadFileToString(file_name, \u0026file)) {\n    for (const auto\u0026 line : android::base::Split(file, \"\\n\")) {\n      ...\n    }\n  }\n\n(which would also let you go backwards as easily as forwards...)",
      "revId": "ce482add9b3f1a5d8d1103c9a9d62b8bca44976c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d54fde2_b7cd98e2",
        "filename": "logcat/logcat.cpp",
        "patchSetId": 2
      },
      "lineNbr": 586,
      "author": {
        "id": 1069543
      },
      "writtenOn": "2015-05-29T17:52:03Z",
      "side": 1,
      "message": "Optimization oppty: Have you tried this with a set of large log files? We know we want the last entry, so it would save some time to work backwards from the end instead of going through the whole file...",
      "revId": "ce482add9b3f1a5d8d1103c9a9d62b8bca44976c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed56c9ec_1faaef7d",
        "filename": "logcat/logcat.cpp",
        "patchSetId": 2
      },
      "lineNbr": 586,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2015-05-29T18:07:29Z",
      "side": 1,
      "message": "We would have to use mmap interface to work backwards with any efficiency. mmap has its readability/maintenance options.\n\nWe are not assuming the log entries are in time order (!) although 99.99% of the time they are.\n\nlogcat is a user program with no need for tons of optimizations; I have found this rips through 16MB of data (as configured for logcatd) in less than 200ms. The optimization does not appear to be required on the scale we use in Android.\n\nIn all common cases we hit the basename file _first_ (because of how the rotate algorithm works) and break out below very quickly; so we are not pouring through all the files in any case. We only do so if there are no timestamps found in the basename file which can only happen if logcatd dies or the system reboots.",
      "parentUuid": "0d54fde2_b7cd98e2",
      "revId": "ce482add9b3f1a5d8d1103c9a9d62b8bca44976c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d54fde2_0cc81a27",
        "filename": "logcat/logcat.cpp",
        "patchSetId": 2
      },
      "lineNbr": 591,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2015-05-29T20:07:02Z",
      "side": 1,
      "message": "This algorithm has to handle the fact we do NOT have the year placed into the timestamp data and log_time::strptime fills in the current year sans one parsed, and a wrap around to January will result in the current time being lower than the maximum discovered in the file(s).\n\nmitigation: (plan A)\n- filter out all timestamps higher than the current time\n\nmitigation: (plan B)\n- collect all the matching filenames first\n- reverse sort the filenames before going through them (NB: the ext4 filesystem and the dynamics for normal operation of logcat -f will readdir in this order anyways, but not worth counting on)\n- reverse scan the files in turn looking for a valid timestamp\n- call it a day once a timestamp is found\n- too complex for ease of maintenance",
      "range": {
        "startLine": 589,
        "startChar": 0,
        "endLine": 591,
        "endChar": 29
      },
      "revId": "ce482add9b3f1a5d8d1103c9a9d62b8bca44976c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}