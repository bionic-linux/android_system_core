{
  "comments": [
    {
      "key": {
        "uuid": "b36e2808_e4b1ad79",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 28
      },
      "lineNbr": 713,
      "author": {
        "id": 1124848
      },
      "writtenOn": "2019-10-08T18:33:48Z",
      "side": 1,
      "message": "lose the braces. And fd can never be 0. So \u003e 0 ?",
      "revId": "a834abb461db9718a15d01f98d0d102c296e4c8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f83de9a_782e310f",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 28
      },
      "lineNbr": 713,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2019-10-08T19:37:41Z",
      "side": 1,
      "message": "Why can it never be 0 (Android requires us never to make assumption stdin is open).",
      "parentUuid": "b36e2808_e4b1ad79",
      "revId": "a834abb461db9718a15d01f98d0d102c296e4c8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d90936f3_4f70dc7a",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 28
      },
      "lineNbr": 713,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-10-08T19:52:45Z",
      "side": 1,
      "message": "This file uses braces for all ifs including one-liners, so I prefer to keep it consistent. Out standard allows for both styles.\nFor 0 I agree with Mark.",
      "parentUuid": "4f83de9a_782e310f",
      "revId": "a834abb461db9718a15d01f98d0d102c296e4c8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24db848a_4e037759",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 28
      },
      "lineNbr": 713,
      "author": {
        "id": 1124848
      },
      "writtenOn": "2019-10-08T20:04:08Z",
      "side": 1,
      "message": "Then put braces on the above statements as well? There are several if blocks preceding this one where there are no braces. I don\u0027t mind which ever style you want, just keep it consistent.\n\nAbout the 0, that\u0027s fine with me.",
      "parentUuid": "d90936f3_4f70dc7a",
      "revId": "a834abb461db9718a15d01f98d0d102c296e4c8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa035b29_dd2a6437",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 28
      },
      "lineNbr": 713,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-10-08T20:26:08Z",
      "side": 1,
      "message": "Agrh. lmkd was written by multiple people and looks like a ransom note now. I\u0027ll have to clean it up quite soon. Will do that in a separate patch to keep the noise levels low.",
      "parentUuid": "24db848a_4e037759",
      "revId": "a834abb461db9718a15d01f98d0d102c296e4c8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f45cbc7c_bdd36b8c",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 28
      },
      "lineNbr": 931,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2019-10-07T21:39:23Z",
      "side": 1,
      "message": "NB: bionic getpwnam is thread safe, but POSIX is not. No problem, jsut in case you envision this going elsewhere that the Android ecosystem.",
      "range": {
        "startLine": 931,
        "startChar": 38,
        "endLine": 931,
        "endChar": 46
      },
      "revId": "a834abb461db9718a15d01f98d0d102c296e4c8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "605fb078_7df25a76",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 28
      },
      "lineNbr": 941,
      "author": {
        "id": 1124848
      },
      "writtenOn": "2019-10-08T18:33:48Z",
      "side": 1,
      "message": "So there\u0027s still a race I think.\n\nWhat if pid crashes before registration and now we are pidfd_open\u0027ing a different PID than what was intended to be registered?\n\nIf some more metadata is passed during the registration, then that can be checked in /proc fs *after* doing the pidfd_open(2). This is to make sure the metadata has not changed before pidfd_open(2) could be called.",
      "revId": "a834abb461db9718a15d01f98d0d102c296e4c8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "662df11c_fd8ee1d7",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 28
      },
      "lineNbr": 941,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-10-08T19:52:45Z",
      "side": 1,
      "message": "PIDs don\u0027t get reused that quickly (they have to wrap-around for that). In practice the few instances I\u0027ve seen of PID reuse were on systems that ran for days. If the process crashes after AMS sends registration request and before LMKD calls sys_pidfd_open() (which is a pretty short time window) its PID has really minuscule chance to be reused. I think passing more metadata would be an overkill for a theoretical problem.",
      "parentUuid": "605fb078_7df25a76",
      "revId": "a834abb461db9718a15d01f98d0d102c296e4c8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db795cb0_ef0e0d84",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 28
      },
      "lineNbr": 941,
      "author": {
        "id": 1124848
      },
      "writtenOn": "2019-10-08T20:04:08Z",
      "side": 1,
      "message": "But in your commit description, you are talking about fixing the PID reuse problem. But here you are saying it is a theoretical problem. IMO it should be fixed completely and properly if we are really talking about fixing it.\n\nAlso, the fact that the PID has to wrap around has nothing to do with the size of the race window. Jann Horn had provided me an example sometime back about that. Quoting him:\n\n - process A starts with PID 1000\n - some time passes in which some process repeatedly forks, with PIDs wrapping around to 999\n - process B starts an attempt to access process A (using PID 1000)\n - process A dies\n - process C spawns with PID 1000\n - process B accidentally accesses process C\n\nThe last 4 steps can happen pretty quickly.",
      "parentUuid": "662df11c_fd8ee1d7",
      "revId": "a834abb461db9718a15d01f98d0d102c296e4c8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eba1e803_36aebae2",
        "filename": "lmkd/lmkd.c",
        "patchSetId": 28
      },
      "lineNbr": 941,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2019-10-08T20:26:08Z",
      "side": 1,
      "message": "Ok, I\u0027ll think about what kind of metadata we can use for additional checks. However I still think that it\u0027s a theoretical problem and here is why:\n\nAMS registers a new process with LMKD immediately after it is spawned (in your scenario right after step #1). So between steps #1 and the last step #6 we have milliseconds to a second time window. The steps #2-#5 which include repeated forking should all happen withing that time window. That is theoretically possible but in practice is so unlikely that IMO is not worth additional complexity.",
      "parentUuid": "db795cb0_ef0e0d84",
      "revId": "a834abb461db9718a15d01f98d0d102c296e4c8c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}