{
  "comments": [
    {
      "key": {
        "uuid": "e4842e5f_91a2bc9b",
        "filename": "crash_reporter/crash_sender",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1040868
      },
      "writtenOn": "2015-09-09T16:38:45Z",
      "side": 1,
      "message": "seems like we should create a variable to hold the base dir like CRASH_STATE_DIR ?",
      "range": {
        "startLine": 24,
        "startChar": 12,
        "endLine": 24,
        "endChar": 31
      },
      "revId": "dedd12d217821724a2f7d68166618392b38fa62b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4c34e74_a889c3ad",
        "filename": "crash_reporter/crash_sender",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1076778
      },
      "writtenOn": "2015-09-09T23:27:33Z",
      "side": 1,
      "message": "Done.  Although I didn\u0027t replace this specific line, as it\u0027s the only one using metrics\u0027 state files.",
      "parentUuid": "e4842e5f_91a2bc9b",
      "range": {
        "startLine": 24,
        "startChar": 12,
        "endLine": 24,
        "endChar": 31
      },
      "revId": "dedd12d217821724a2f7d68166618392b38fa62b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "447fba21_ec4faba8",
        "filename": "crash_reporter/crash_sender",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1040868
      },
      "writtenOn": "2015-09-09T16:38:45Z",
      "side": 1,
      "message": "i\u0027ve never really liked the hardcoding of paths, and i can\u0027t think of a reason why it\u0027s necessary.  if you just change this to \"find\", does it work ?  same for the other programs.",
      "revId": "dedd12d217821724a2f7d68166618392b38fa62b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4bdd6e7_5199b4f9",
        "filename": "crash_reporter/crash_sender",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1076778
      },
      "writtenOn": "2015-09-09T23:27:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "447fba21_ec4faba8",
      "revId": "dedd12d217821724a2f7d68166618392b38fa62b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84753240_eeeb1fb1",
        "filename": "crash_reporter/crash_sender",
        "patchSetId": 2
      },
      "lineNbr": 174,
      "author": {
        "id": 1040868
      },
      "writtenOn": "2015-09-09T16:38:45Z",
      "side": 1,
      "message": "LHS needs quoting",
      "revId": "dedd12d217821724a2f7d68166618392b38fa62b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "04c1426c_e9e9012b",
        "filename": "crash_reporter/crash_sender",
        "patchSetId": 2
      },
      "lineNbr": 174,
      "author": {
        "id": 1076778
      },
      "writtenOn": "2015-09-09T23:27:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "84753240_eeeb1fb1",
      "revId": "dedd12d217821724a2f7d68166618392b38fa62b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a48eb67e_4f8d8d25",
        "filename": "crash_reporter/crash_sender",
        "patchSetId": 2
      },
      "lineNbr": 200,
      "author": {
        "id": 1040868
      },
      "writtenOn": "2015-09-09T16:38:45Z",
      "side": 1,
      "message": "ideally we\u0027d change the exec/rm to -delete.  does the android find support that ?\n\nif not, would be good to use:\n\n -exec rm -- {} +",
      "revId": "dedd12d217821724a2f7d68166618392b38fa62b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4c34e74_f35570eb",
        "filename": "crash_reporter/crash_sender",
        "patchSetId": 2
      },
      "lineNbr": 200,
      "author": {
        "id": 1076778
      },
      "writtenOn": "2015-09-09T23:27:33Z",
      "side": 1,
      "message": "Android/toybox\u0027s find does not support the -delete action.\n\nUsing commands with + seems to be broken.  To test:\n\n# touch file1\n# touch file2\n# touch file3\n# find . -newer file1 -mindepth 1 -exec ls \u0027{}\u0027 \u0027;\u0027\n./file2\n./file3\n# find . -newer file1 -mindepth 1 -exec ls \u0027{}\u0027 \u0027+\u0027                            \n# \n\nQuoting of arguments doesn\u0027t make a difference.  Playing around with it, toybox\u0027s find implementation seems to have a lot of bugs... changing the order of options seems to cause different behaviors, including sometimes causing segfaults :(  The original command action here (\" -exec rm -- \u0027{}\u0027 \u0027;\u0027\") does seem to work as intended however.",
      "parentUuid": "a48eb67e_4f8d8d25",
      "revId": "dedd12d217821724a2f7d68166618392b38fa62b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4e9ea2c_80fb36af",
        "filename": "crash_reporter/crash_sender",
        "patchSetId": 2
      },
      "lineNbr": 263,
      "author": {
        "id": 1040868
      },
      "writtenOn": "2015-09-09T16:38:45Z",
      "side": 1,
      "message": "\"${file}\" needs quoting",
      "revId": "dedd12d217821724a2f7d68166618392b38fa62b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44cedaa4_dd427fd9",
        "filename": "crash_reporter/crash_sender",
        "patchSetId": 2
      },
      "lineNbr": 263,
      "author": {
        "id": 1076778
      },
      "writtenOn": "2015-09-09T23:27:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c4e9ea2c_80fb36af",
      "revId": "dedd12d217821724a2f7d68166618392b38fa62b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "442a5a15_b43b409a",
        "filename": "crash_reporter/crash_sender",
        "patchSetId": 2
      },
      "lineNbr": 699,
      "author": {
        "id": 1040868
      },
      "writtenOn": "2015-09-09T16:38:45Z",
      "side": 1,
      "message": "this new locking logic doesn\u0027t protect against stale locks -- if the system reboots/whatever and doesn\u0027t clean the lock, then it never gets unlocked.\n\ni think we should implement flock inside of toybox.  it\u0027s not that hard actually ... it\u0027s just a thin wrapper around flock().  the util-linux flock is BSD-1 too, so should be OK to lift code from that.",
      "revId": "dedd12d217821724a2f7d68166618392b38fa62b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64cf5e9f_cfb88101",
        "filename": "crash_reporter/crash_sender",
        "patchSetId": 2
      },
      "lineNbr": 699,
      "author": {
        "id": 1076778
      },
      "writtenOn": "2015-09-09T18:48:10Z",
      "side": 1,
      "message": "I\u0027d like to get this CL in sooner than later, so that the devrel team can start testing end-to-end with their crash server.  Would it be acceptable for now to just remove the lock in the init\u0027s onboot setup, and file a bug for adding flock that I can get to next week?",
      "parentUuid": "442a5a15_b43b409a",
      "revId": "dedd12d217821724a2f7d68166618392b38fa62b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4842e5f_512214b4",
        "filename": "crash_reporter/crash_sender",
        "patchSetId": 2
      },
      "lineNbr": 699,
      "author": {
        "id": 1040868
      },
      "writtenOn": "2015-09-09T18:58:27Z",
      "side": 1,
      "message": "OK.  drop a comment in here pointing to that, and make sure you quote the path too.",
      "parentUuid": "64cf5e9f_cfb88101",
      "revId": "dedd12d217821724a2f7d68166618392b38fa62b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "04c1426c_099af5ad",
        "filename": "crash_reporter/crash_sender",
        "patchSetId": 2
      },
      "lineNbr": 699,
      "author": {
        "id": 1076778
      },
      "writtenOn": "2015-09-09T23:27:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e4842e5f_512214b4",
      "revId": "dedd12d217821724a2f7d68166618392b38fa62b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "447fba21_4c5fdf59",
        "filename": "crash_reporter/periodic_scheduler",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1040868
      },
      "writtenOn": "2015-09-09T16:38:45Z",
      "side": 1,
      "message": "is there a way to run periodic events using android\u0027s init ?  that would be ideal ...",
      "revId": "dedd12d217821724a2f7d68166618392b38fa62b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4ef2afe_fc1bee06",
        "filename": "crash_reporter/periodic_scheduler",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1076778
      },
      "writtenOn": "2015-09-09T18:48:10Z",
      "side": 1,
      "message": "According to the readme and what I know of the init code, there is not a straightforward way similar to using periodic_scheduler or cron to run periodic events.  The only workaround that might work, is to define the service with an \u0027onrestart\u0027 option that calls \u0027wait\u0027 on a file that we gaurantee won\u0027t exist so that it forces it to wait for the timeout.  Its a dirty hack that might work (I haven\u0027t tested it).",
      "parentUuid": "447fba21_4c5fdf59",
      "revId": "dedd12d217821724a2f7d68166618392b38fa62b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4e9ea2c_00a3a6a1",
        "filename": "crash_reporter/periodic_scheduler",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1040868
      },
      "writtenOn": "2015-09-09T18:58:27Z",
      "side": 1,
      "message": "assuming it doesn\u0027t cause init to busy wait, that actually doesn\u0027t sound terrible to me :)",
      "parentUuid": "c4ef2afe_fc1bee06",
      "revId": "dedd12d217821724a2f7d68166618392b38fa62b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4ef2afe_d214800b",
        "filename": "crash_reporter/periodic_scheduler",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1076778
      },
      "writtenOn": "2015-09-09T23:27:33Z",
      "side": 1,
      "message": "I tested with setting up a service that just calls log, and has a `onrestart wait /data/misc/crash_reporter/file_does_not_exist 10` option set:\n\nservice scheduler_test /system/bin/log -p i -t \"scheduler_test\" \"Test message\"\n    class late_start\n    onrestart wait /data/misc/crash_reporter/file_does_not_exist 10\n\nUnfortunately, when I then try to start a service and watch logcat, I don\u0027t see the new service started immediately, instead it waits until the next time the test service log statement appears, then runs immediately afterwards.  So it appears that it does cause all of init to busy wait :(",
      "parentUuid": "c4e9ea2c_00a3a6a1",
      "revId": "dedd12d217821724a2f7d68166618392b38fa62b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}