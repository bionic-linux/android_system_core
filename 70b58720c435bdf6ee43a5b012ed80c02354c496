{
  "comments": [
    {
      "key": {
        "uuid": "4a6260ef_753e7379",
        "filename": "init/Android.mk",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-07-31T21:35:41Z",
      "side": 1,
      "message": "whitespace",
      "revId": "70b58720c435bdf6ee43a5b012ed80c02354c496",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a5f2428_7ef1b98f",
        "filename": "init/Android.mk",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1052976
      },
      "writtenOn": "2015-08-01T01:27:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4a6260ef_753e7379",
      "revId": "70b58720c435bdf6ee43a5b012ed80c02354c496",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a5ce834_163e22e6",
        "filename": "init/log.h",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-07-31T21:35:41Z",
      "side": 1,
      "message": "libbase has google3-style LOG(whatever) with an extension that would let us supply a function that sends stuff to the kernel log. we just need to wire that up and kill all this legacy crap...",
      "revId": "70b58720c435bdf6ee43a5b012ed80c02354c496",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea295486_089b9b49",
        "filename": "init/log.h",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1052976
      },
      "writtenOn": "2015-08-01T01:27:29Z",
      "side": 1,
      "message": "Ok, I\u0027ve done a follow up CL that changes all the logging to use LOG() (it took forever!!).\n\nI\u0027ve got a few more left, so will push it up tomorrow.",
      "parentUuid": "0a5ce834_163e22e6",
      "revId": "70b58720c435bdf6ee43a5b012ed80c02354c496",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a2e188f_faa7f53d",
        "filename": "init/parser/parser.h",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-07-31T21:35:41Z",
      "side": 1,
      "message": "void** priv?",
      "revId": "70b58720c435bdf6ee43a5b012ed80c02354c496",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a5ce834_76231eb0",
        "filename": "init/parser/parser.h",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1052976
      },
      "writtenOn": "2015-08-01T01:27:29Z",
      "side": 1,
      "message": "I\u0027ll add a comment. It allows the handlers to return a pointer, which will be passed back with every HandleSubCommand.\n\ne.g Tom can use it in the ActionManager to remember which Action is being processed.",
      "parentUuid": "8a2e188f_faa7f53d",
      "revId": "70b58720c435bdf6ee43a5b012ed80c02354c496",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea6cf416_9cc20d79",
        "filename": "init/parser/parser.h",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2015-08-03T17:48:45Z",
      "side": 1,
      "message": "I think Elliott is asking why is the const there when we know that HandleSection is going to mutate the variable.  Even though we can write \u0027const\u0027 there, it seems counter intuitive to do so.  I think it\u0027s best to drop the const here, and even the one on priv_ and HandleSubCommand.",
      "parentUuid": "0a5ce834_76231eb0",
      "revId": "70b58720c435bdf6ee43a5b012ed80c02354c496",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca673030_d8ae5117",
        "filename": "init/parser/parser.h",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-08-03T17:59:02Z",
      "side": 1,
      "message": "no, i\u0027m actually saying \"aren\u0027t we trying to move away from the whole 1970s C void* thing?\" :-)\n\nwouldn\u0027t a Parser caller just be passing in a functor, and maintain their own data structures?",
      "parentUuid": "ea6cf416_9cc20d79",
      "revId": "70b58720c435bdf6ee43a5b012ed80c02354c496",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa667c34_fa7341d9",
        "filename": "init/parser/parser.h",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1052976
      },
      "writtenOn": "2015-08-03T18:06:20Z",
      "side": 1,
      "message": "Yeah can do. They get the callbacks and they can do what they like. I dont mind getting rid of \u0027priv\u0027. I put it is so the caller doesn\u0027t have to maintain its state in step with the parser. If we remove \u0027priv\u0027 the caller has to keep state of what section its in, which is state the parser is also maintaining. I think that makes the Handler class simpler. Happy to change though.",
      "parentUuid": "ca673030_d8ae5117",
      "revId": "70b58720c435bdf6ee43a5b012ed80c02354c496",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a61b821_7c0a8d5d",
        "filename": "init/parser/parser.h",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2015-08-03T18:08:02Z",
      "side": 1,
      "message": "Or that.\n\nAt least the way that Action and Service are developing, HandleSection() could be implemented by the (Action/Service)Manager classes and HandleSubCommand() by the Action/Service classes themselves.  We could potentially break this into two interfaces, where HandleSection() returns a ParserSubCommandHandler* interface, which both Action and Service implement.  \n\nOtherwise, how else do you think we could do this?",
      "parentUuid": "ca673030_d8ae5117",
      "revId": "70b58720c435bdf6ee43a5b012ed80c02354c496",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7fb4f32_87566cd9",
        "filename": "init/parser/parser.h",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2015-08-07T17:45:01Z",
      "side": 1,
      "message": "I had a thought about this - we can remove priv entirely if we have a HandleSectionEnd() or similarly named function here.  The interface would be:\n\nHandleSection()\n0-n of HandleSubCommand()\nHandleSectionEnd()\n\nClasses that implement ParserSectionHandler would need to keep their own state and would be limited to parsing each section sequentially, but that seems reasonable.\n\nThis also makes the interface cleaner on the Action/Service side, since there will always be a single owner of the pointer, which isn\u0027t the case right now.",
      "parentUuid": "8a61b821_7c0a8d5d",
      "revId": "70b58720c435bdf6ee43a5b012ed80c02354c496",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7fb4f32_2722f861",
        "filename": "init/parser/parser.h",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-08-07T17:54:58Z",
      "side": 1,
      "message": "sgtm. (and more like typical XML equivalents.)",
      "parentUuid": "e7fb4f32_87566cd9",
      "revId": "70b58720c435bdf6ee43a5b012ed80c02354c496",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca4d7087_fab12dcd",
        "filename": "init/util.cpp",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-07-31T21:35:41Z",
      "side": 1,
      "message": "this seems like a bad idea. can we just #if defined(__ANDROID__) any function that won\u0027t work on the host? or split this file up.",
      "revId": "70b58720c435bdf6ee43a5b012ed80c02354c496",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea523422_db55574d",
        "filename": "init/util.cpp",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1052976
      },
      "writtenOn": "2015-08-01T01:27:29Z",
      "side": 1,
      "message": "Changed to __ANDROID__",
      "parentUuid": "ca4d7087_fab12dcd",
      "revId": "70b58720c435bdf6ee43a5b012ed80c02354c496",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}