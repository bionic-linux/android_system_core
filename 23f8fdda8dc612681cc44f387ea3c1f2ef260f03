{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0dff69fb_550f5cfa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1814885
      },
      "writtenOn": "2022-02-16T05:19:31Z",
      "side": 1,
      "message": "Is there anything I need to do for merging this patch?",
      "revId": "23f8fdda8dc612681cc44f387ea3c1f2ef260f03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "172df4c5_d259f6ae",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2022-02-16T07:51:08Z",
      "side": 1,
      "message": "It failed two tests, but it seems flaky. Let me retry.",
      "parentUuid": "0dff69fb_550f5cfa",
      "revId": "23f8fdda8dc612681cc44f387ea3c1f2ef260f03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f9a033d_7194a9e0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2022-03-03T02:51:11Z",
      "side": 1,
      "message": "It looks like this is causing \"CtsInitTestCases.firmware_handler#HandleChange\" to fail:\n\n    system/core/init/firmware_handler_test.cpp:46: Failure\n    system/core/init/firmware_handler_test.cpp:46: Failure\n    Expected equality of these values:\n        \"other_firmware001.bin\"\n        firmware_handler.GetFirmwarePath(uevent)\n    Which is: \"test_firmware001.bin\"",
      "revId": "23f8fdda8dc612681cc44f387ea3c1f2ef260f03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46ab0d42_597c8e75",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1814885
      },
      "writtenOn": "2022-03-03T04:14:53Z",
      "side": 1,
      "message": "WaitForProperty() doesn\u0027t seem to work on the test environment because the property \u0027apexd.status\u0027 doesn\u0027t exist or is not set to \u0027activated\u0027. On the normal boot, \u0027apexd.status\u0027 should have \u0027activated\u0027. Could you check that \u0027apexd.status\u0027 exists and what does it have on the test environment?",
      "parentUuid": "8f9a033d_7194a9e0",
      "revId": "23f8fdda8dc612681cc44f387ea3c1f2ef260f03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3abe1bc8_deb3e0a9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2022-06-14T13:17:38Z",
      "side": 1,
      "message": "The test ran on Cuttlefish and I can confirm that the apexd.status prop exists there and the value is \u0027activated\u0027. I think the problem is that the test can\u0027t read the sysprop because it\u0027s not allowed in sepolicy.\n\nPossible workarounds:\n\n1. give `domain` read access to this prop\n\n2. wrap the added code with something like #ifndef __TEST__ and build the test with `-D__TEST__`.\n\n3. run the test with sepolicy off",
      "parentUuid": "46ab0d42_597c8e75",
      "revId": "23f8fdda8dc612681cc44f387ea3c1f2ef260f03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5fa6a769_cb8e57a9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1814885
      },
      "writtenOn": "2022-06-14T23:56:25Z",
      "side": 1,
      "message": "So, test will be failed until https://android-review.googlesource.com/c/platform/system/sepolicy/+/1933081 is merged.",
      "parentUuid": "3abe1bc8_deb3e0a9",
      "revId": "23f8fdda8dc612681cc44f387ea3c1f2ef260f03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89269ee6_235d14ee",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2022-06-15T01:29:14Z",
      "side": 1,
      "message": "Even with the change, only ueventd will have the permission. The test wouldn\u0027t have the permission.\n\nNote that this CL and the sepolicy CL are linked together with the topic. When the presubmit tests ran, both were applied.",
      "parentUuid": "5fa6a769_cb8e57a9",
      "revId": "23f8fdda8dc612681cc44f387ea3c1f2ef260f03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a05fed9_12884018",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1814885
      },
      "writtenOn": "2022-06-15T08:16:38Z",
      "side": 1,
      "message": "Apex daemon status check is needed only at the early stage on boot. So, how about checking status when the external handler execution is failed?",
      "parentUuid": "89269ee6_235d14ee",
      "revId": "23f8fdda8dc612681cc44f387ea3c1f2ef260f03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9141b6a_a7a5610b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2022-06-15T09:32:04Z",
      "side": 1,
      "message": "Yeah, but this condition `!result.ok() \u0026\u0026 NeedsRerunExternalHandler()` in this change is already doing that, isn\u0027t it?",
      "parentUuid": "5a05fed9_12884018",
      "revId": "23f8fdda8dc612681cc44f387ea3c1f2ef260f03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d91fab0f_583efc65",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1814885
      },
      "writtenOn": "2022-06-15T10:13:33Z",
      "side": 1,
      "message": "Yes. Patchset 2 includes the following steps:\nIf running the external handler is failed, check whether it is the first time or not. If it is the first time, wait until apex.status is \u0027activated\u0027 or 60 seconds. Then when apex is activated, retry to run the external handler. In other cases, just return an error as usual.\nI think that it doesn\u0027t need to check apex.status whenever running external handlers. And, to pass \"CtsInitTestCases.firmware_handler#HandleChange\" test without modifying any sepolicy, it is not bad to defer to check apex.status.",
      "parentUuid": "b9141b6a_a7a5610b",
      "revId": "23f8fdda8dc612681cc44f387ea3c1f2ef260f03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3257d269_72719461",
        "filename": "init/firmware_handler.cpp",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 1814885
      },
      "writtenOn": "2021-12-24T09:53:02Z",
      "side": 1,
      "message": "To read apexd.status, https://android-review.googlesource.com/c/platform/system/sepolicy/+/1933081 is required.",
      "revId": "23f8fdda8dc612681cc44f387ea3c1f2ef260f03",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}