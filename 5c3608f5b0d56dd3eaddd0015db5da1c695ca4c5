{
  "comments": [
    {
      "key": {
        "uuid": "963029d3_2ce6cf56",
        "filename": "fastboot/fastboot_commands.cpp",
        "patchSetId": 16
      },
      "lineNbr": 11,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-12T17:21:52Z",
      "side": 1,
      "message": "Please use \n\nnamespace fastboot {\nnamespace commands {\n\n...\n\n\nOr something equivalent instead.\n\nhttps://google.github.io/styleguide/cppguide.html#Namespace_Formatting",
      "range": {
        "startLine": 11,
        "startChar": 5,
        "endLine": 11,
        "endChar": 25
      },
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c211760_23e48a9e",
        "filename": "fastboot/fastboot_commands.cpp",
        "patchSetId": 16
      },
      "lineNbr": 11,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-12T19:09:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "963029d3_2ce6cf56",
      "range": {
        "startLine": 11,
        "startChar": 5,
        "endLine": 11,
        "endChar": 25
      },
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8cd94336_2f821a77",
        "filename": "fastboot/fastboot_commands.cpp",
        "patchSetId": 16
      },
      "lineNbr": 13,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-12T17:21:52Z",
      "side": 1,
      "message": "Reference parameters are only for in parameters and must be const.  Out parameters are pointers.\n\nhttps://google.github.io/styleguide/cppguide.html#Reference_Arguments",
      "range": {
        "startLine": 12,
        "startChar": 45,
        "endLine": 13,
        "endChar": 61
      },
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53746e8e_081d6f9a",
        "filename": "fastboot/fastboot_commands.cpp",
        "patchSetId": 16
      },
      "lineNbr": 21,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-12T17:21:52Z",
      "side": 1,
      "message": "No abbreviations; again, it would drastically help readability.  This applies to things like \u0027s\u0027 above too.\n\nhttps://google.github.io/styleguide/cppguide.html#General_Naming_Rules",
      "range": {
        "startLine": 21,
        "startChar": 11,
        "endLine": 21,
        "endChar": 22
      },
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f0dcefb_e619e33c",
        "filename": "fastboot/fastboot_commands.cpp",
        "patchSetId": 16
      },
      "lineNbr": 21,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-12T19:09:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "53746e8e_081d6f9a",
      "range": {
        "startLine": 21,
        "startChar": 11,
        "endLine": 21,
        "endChar": 22
      },
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1b12f66_0b817dd6",
        "filename": "fastboot/fastboot_commands.cpp",
        "patchSetId": 16
      },
      "lineNbr": 156,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-12T17:21:52Z",
      "side": 1,
      "message": "You have unneeded levels of indirection here.  Package everything (this, tpbuf, err, transfer) into a local struct and pass it as priv.  Pass a lambda (without captures) as write that unpackages the struct from priv and calls SparseWriteCallback() with the values contained.",
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05b07681_4688e6f6",
        "filename": "fastboot/fastboot_commands.cpp",
        "patchSetId": 16
      },
      "lineNbr": 156,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-12T18:17:44Z",
      "side": 1,
      "message": "If I understand you correctly, this is not possible, as the signature for sparse_file_callback is:\nint sparse_file_callback(struct sparse_file *s, bool sparse, bool crc,\n\t\tint (*write)(void *priv, const void *data, size_t len), void *priv);\n\n\nThis write argument must be a C function pointer, any C++ std::function or similar will not typecheck. Additionally, since this is a C function pointer, only static methods can be used, since the \"this\" context is not captured with a function pointer which would be required for methods to work.\n\nSo only a C function, or a static method with this signature can be used: \"int (*write)(void *priv, const void *data, size_t len)\".",
      "parentUuid": "e1b12f66_0b817dd6",
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "393a2990_99fd38a1",
        "filename": "fastboot/fastboot_commands.cpp",
        "patchSetId": 16
      },
      "lineNbr": 156,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-12T19:11:55Z",
      "side": 1,
      "message": "A lambda with no captures can also be passed.",
      "parentUuid": "05b07681_4688e6f6",
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0fca8d9b_d9925686",
        "filename": "fastboot/fastboot_commands.cpp",
        "patchSetId": 16
      },
      "lineNbr": 156,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-12T20:46:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "393a2990_99fd38a1",
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e502b777_76b40ac9",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 16
      },
      "lineNbr": 94,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-12T17:21:52Z",
      "side": 1,
      "message": "Call this error() and have it in the header.  \n\nhttps://google.github.io/styleguide/cppguide.html#Function_Names",
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e11d010_5944a840",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 16
      },
      "lineNbr": 94,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-12T19:09:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e502b777_76b40ac9",
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "535db964_f8679ee8",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 16
      },
      "lineNbr": 132,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-12T17:21:52Z",
      "side": 1,
      "message": "Feel free to use \u0027auto\u0027 especially when declaring lambdas like these.",
      "range": {
        "startLine": 132,
        "startChar": 4,
        "endLine": 132,
        "endChar": 43
      },
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22e5bbb2_8b3b9a46",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 16
      },
      "lineNbr": 132,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-12T18:17:44Z",
      "side": 1,
      "message": "The reason I didn\u0027t do this, is auto will infer the type to be:\n\n[\u0026](std::vector\u003cchar\u003e\u0026) -\u003e bool which is an internal compiler specific dependent type as mandated by the C++ spec.\n\nHowever, now that I think of it, it should automatically construct a std::function wrapper when it is used on line 148.",
      "parentUuid": "535db964_f8679ee8",
      "range": {
        "startLine": 132,
        "startChar": 4,
        "endLine": 132,
        "endChar": 43
      },
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7198c0d7_ab720144",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 16
      },
      "lineNbr": 132,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-12T18:28:09Z",
      "side": 1,
      "message": "Actually, I tried it and it did not implicitly construct it:\n\nerror: non-const lvalue reference to type \u0027std::function\u003cbool (std::vector\u003cchar\u003e \u0026)\u003e\u0027 cannot bind to a value of unrelated type \u0027(lambda at system/core/fastboot/fastboot_driver.cpp:132:16)\u0027",
      "parentUuid": "22e5bbb2_8b3b9a46",
      "range": {
        "startLine": 132,
        "startChar": 4,
        "endLine": 132,
        "endChar": 43
      },
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2c5a29c_15730ece",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 16
      },
      "lineNbr": 132,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-12T19:11:55Z",
      "side": 1,
      "message": "You need the std::function to be const, which you want it to be anyway as an input parameter.",
      "parentUuid": "7198c0d7_ab720144",
      "range": {
        "startLine": 132,
        "startChar": 4,
        "endLine": 132,
        "endChar": 43
      },
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58bf5037_a85669c6",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 16
      },
      "lineNbr": 132,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-12T20:46:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e2c5a29c_15730ece",
      "range": {
        "startLine": 132,
        "startChar": 4,
        "endLine": 132,
        "endChar": 43
      },
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b73127bc_597d0258",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 16
      },
      "lineNbr": 133,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-12T17:21:52Z",
      "side": 1,
      "message": "I don\u0027t understand this?  Once you fail, you continue to fail?  I get the idea of not continuing to try to do things, but shouldn\u0027t the Commands themselves handle failing once their read/writes fail?",
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ff62a7a_7cf66deb",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 16
      },
      "lineNbr": 133,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-12T18:17:44Z",
      "side": 1,
      "message": "This was done for a couple reasons.\nFirst, to not trust the return code from calling Execute() returning false if a write/read fails.\n\nSecondly, Execute has a boolean return code. I need to figure out the exact reason for failure, since Command() needs to return a RetCode.\n\nSo if a Read or Write fails, I know the exact reason for it\u0027s failure. If only Execute return false, then I know it is an internal error with Execute.",
      "parentUuid": "b73127bc_597d0258",
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "249cfbb8_d847676e",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 16
      },
      "lineNbr": 133,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-12T19:11:55Z",
      "side": 1,
      "message": "\u003e First, to not trust the return code from calling Execute() returning false if a write/read fails.\n\nI\u0027d trust them.\n\n\u003e Execute has a boolean return code.\n\nYou control the API of Execute though, so why not return a return code or rely on the \u0027err\u0027 parameter.",
      "parentUuid": "7ff62a7a_7cf66deb",
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "137221ed_92886370",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 16
      },
      "lineNbr": 150,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-12T17:21:52Z",
      "side": 1,
      "message": "Same, seems like the command should set err appropriately when it has failed.",
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65914e2e_f9a28fd8",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 16
      },
      "lineNbr": 150,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-12T18:17:44Z",
      "side": 1,
      "message": "It will, trans uses Readbuffer or SendBuffer, which both set err appropriately.",
      "parentUuid": "137221ed_92886370",
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f243a52c_e834e41f",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 16
      },
      "lineNbr": 255,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-12T17:21:52Z",
      "side": 1,
      "message": "const auto\u0026",
      "range": {
        "startLine": 255,
        "startChar": 9,
        "endLine": 255,
        "endChar": 13
      },
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c885c1a_c5b4f224",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 16
      },
      "lineNbr": 255,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-12T19:09:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f243a52c_e834e41f",
      "range": {
        "startLine": 255,
        "startChar": 9,
        "endLine": 255,
        "endChar": 13
      },
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fe9240e4_8861ab66",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 16
      },
      "lineNbr": 257,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-12T17:21:52Z",
      "side": 1,
      "message": "resp \u003d\u003d s",
      "range": {
        "startLine": 257,
        "startChar": 12,
        "endLine": 257,
        "endChar": 28
      },
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85d3e930_50c42a1f",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 16
      },
      "lineNbr": 257,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-12T19:09:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fe9240e4_8861ab66",
      "range": {
        "startLine": 257,
        "startChar": 12,
        "endLine": 257,
        "endChar": 28
      },
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b21a082_7147ca43",
        "filename": "fastboot/fastboot_driver.h",
        "patchSetId": 16
      },
      "lineNbr": 50,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-12T17:21:52Z",
      "side": 1,
      "message": "This should be in a separate commands.h header.",
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7232c6e_5a944d2e",
        "filename": "fastboot/fastboot_driver.h",
        "patchSetId": 16
      },
      "lineNbr": 50,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-12T18:17:44Z",
      "side": 1,
      "message": "Good call.",
      "parentUuid": "0b21a082_7147ca43",
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "705c3f24_389cb699",
        "filename": "fastboot/fastboot_driver.h",
        "patchSetId": 16
      },
      "lineNbr": 50,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-12T19:09:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b7232c6e_5a944d2e",
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17e2b9bf_b2f572c6",
        "filename": "fastboot/fastboot_driver.h",
        "patchSetId": 16
      },
      "lineNbr": 172,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-12T17:21:52Z",
      "side": 1,
      "message": "What is Buf() vs Execute()?  From the implementation, Execute() simply calls Buf() with a parameter dropped.  It seems better to just drop this from the class hierarchy and have the transfer commands directly transfer their data during Execute().",
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "799b7a4e_c039128c",
        "filename": "fastboot/fastboot_driver.h",
        "patchSetId": 16
      },
      "lineNbr": 172,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-12T18:17:44Z",
      "side": 1,
      "message": "Ok, I can fix that. I guess part of the reason was to avoid the messy cruft of an argument that in many cases are not even used.\n\nWhat if I do what you said above, and change Execute to accept a struct that contains all these arguments? Then it only needs to use what is required inside the struct. It will also make the Execute\u0027s signature a lot cleaner:\n\nExecute(struct foo \u0026a);",
      "parentUuid": "17e2b9bf_b2f572c6",
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78cad2a8_a069ea0e",
        "filename": "fastboot/fastboot_driver.h",
        "patchSetId": 16
      },
      "lineNbr": 172,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-12T19:11:55Z",
      "side": 1,
      "message": "That\u0027d be fine to me.  The extra parameters don\u0027t seem like a huge hassle to me though either.",
      "parentUuid": "799b7a4e_c039128c",
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aef3e41f_ea0c0868",
        "filename": "fastboot/fastboot_driver.h",
        "patchSetId": 16
      },
      "lineNbr": 172,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-12T20:46:09Z",
      "side": 1,
      "message": "Ok, I just left them for now.",
      "parentUuid": "78cad2a8_a069ea0e",
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20cd6d87_a32285b2",
        "filename": "fastboot/fastboot_driver.h",
        "patchSetId": 16
      },
      "lineNbr": 290,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-12T17:21:52Z",
      "side": 1,
      "message": "Is this ever planned to be subclassed?  There is a general pattern to keep private members private unless explicitly planned to be used by subclasses.\n\nhttps://google.github.io/styleguide/cppguide.html#Inheritance",
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f89443e7_bf3ceedf",
        "filename": "fastboot/fastboot_driver.h",
        "patchSetId": 16
      },
      "lineNbr": 290,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-12T18:17:44Z",
      "side": 1,
      "message": "Ok, will move then all private.",
      "parentUuid": "20cd6d87_a32285b2",
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca706102_030afab4",
        "filename": "fastboot/fastboot_driver.h",
        "patchSetId": 16
      },
      "lineNbr": 290,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-12T19:09:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f89443e7_bf3ceedf",
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8c0a2af1_da43faea",
        "filename": "fastboot/fastboot_driver.h",
        "patchSetId": 16
      },
      "lineNbr": 301,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-12T17:21:52Z",
      "side": 1,
      "message": "Private variables get an _ suffix.  You don\u0027t want to use g_ here either (this isn\u0027t actually a global).\n\nhttps://google.github.io/styleguide/cppguide.html#Variable_Names",
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d977457_91e90222",
        "filename": "fastboot/fastboot_driver.h",
        "patchSetId": 16
      },
      "lineNbr": 305,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-12T17:21:52Z",
      "side": 1,
      "message": "Why should this class store this?  It seems better to simply return it from Command() / RawCommand().",
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9cbeb2f_bfad0e64",
        "filename": "fastboot/fastboot_driver.h",
        "patchSetId": 16
      },
      "lineNbr": 305,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-12T18:17:44Z",
      "side": 1,
      "message": "Ok, I can do that.\n\nI will just make them pointer arguments that will be default to nullptr if you don\u0027t care about them.",
      "parentUuid": "2d977457_91e90222",
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b63d3855_8ef42f77",
        "filename": "fastboot/fastboot_driver.h",
        "patchSetId": 16
      },
      "lineNbr": 306,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-12T17:21:52Z",
      "side": 1,
      "message": "Same question as above.",
      "revId": "5c3608f5b0d56dd3eaddd0015db5da1c695ca4c5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}