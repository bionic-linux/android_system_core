{
  "comments": [
    {
      "key": {
        "uuid": "642e3b86_e307eb18",
        "filename": "init/property_service.cpp",
        "patchSetId": 1
      },
      "lineNbr": 720,
      "author": {
        "id": 1010465
      },
      "writtenOn": "2017-08-10T23:00:00Z",
      "side": 1,
      "message": "if power is gone right before rename is completed, there still will be tmp file with the latest content. Better logic may be to check if tmp file exists and if tmp file exists, try to load tmp file. If tmp file is invalid, try normal file. The assumption is that integrity of file itself can be checked by reading it.",
      "range": {
        "startLine": 720,
        "startChar": 57,
        "endLine": 720,
        "endChar": 85
      },
      "revId": "9a6c5548d0e746c4d0d3e33a79338c3ac24b452b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "53f76cef_e718e8b1",
        "filename": "init/property_service.cpp",
        "patchSetId": 1
      },
      "lineNbr": 720,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2017-08-10T23:32:29Z",
      "side": 1,
      "message": "\u003e The assumption is that integrity of file itself can be checked by reading it.\n\nWe\u0027d need to add a hash to the file header to be able to ensure this, right?  Otherwise if we rebooted in the middle of the fsync() we may get a bad file?\n\nUnless you strongly think we should try to recover in this case, I think it\u0027s better to limit this to guarantee that an abrupt reboot won\u0027t corrupt properties, but not try to handle the case of ensuring property writes get recovered if they happen on the edge of an abrupt reboot (especially since we cannot always guarantee this; such as if the reboot happens during the write or fsync()).",
      "parentUuid": "642e3b86_e307eb18",
      "range": {
        "startLine": 720,
        "startChar": 57,
        "endLine": 720,
        "endChar": 85
      },
      "revId": "9a6c5548d0e746c4d0d3e33a79338c3ac24b452b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f5375ad2_a9acee2b",
        "filename": "init/property_service.cpp",
        "patchSetId": 1
      },
      "lineNbr": 720,
      "author": {
        "id": 1010465
      },
      "writtenOn": "2017-08-11T00:51:59Z",
      "side": 1,
      "message": "It all depends on how much things we assume from file system. For ext4 with journalling, single write will involve journal, so it is not likely that file contents is corrupt by power loss as long as write is done in one write call. Maybe we can start from that assumption. Then your magic check should be enough as tmp file will be either empty file or fully written file. How does it sound?",
      "parentUuid": "53f76cef_e718e8b1",
      "range": {
        "startLine": 720,
        "startChar": 57,
        "endLine": 720,
        "endChar": 85
      },
      "revId": "9a6c5548d0e746c4d0d3e33a79338c3ac24b452b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59ca846c_aa54c72b",
        "filename": "init/property_service.cpp",
        "patchSetId": 1
      },
      "lineNbr": 720,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2017-08-11T16:45:35Z",
      "side": 1,
      "message": "But if the file becomes large enough it will be broken into multiple writes, right?  I guess we\u0027ll still know even without a hash if it\u0027s consistent if we just look at the num_properties.\n\nI\u0027m still not super keen on this.  Unless you\u0027re sure that we\u0027re 100% safe reading from this temporary file, I think the risk of reading corrupted properties is worse than the risk of dropping a property update.  It\u0027s not worse than the current situation either, which also will not recover a property update before its renamed from the temp file to the named property file.",
      "parentUuid": "f5375ad2_a9acee2b",
      "range": {
        "startLine": 720,
        "startChar": 57,
        "endLine": 720,
        "endChar": 85
      },
      "revId": "9a6c5548d0e746c4d0d3e33a79338c3ac24b452b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}