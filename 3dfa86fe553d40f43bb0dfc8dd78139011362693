{
  "comments": [
    {
      "key": {
        "uuid": "5329cf12_c82ad466",
        "filename": "fastboot/fastboot.cpp",
        "patchSetId": 1
      },
      "lineNbr": 549,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-04-26T18:18:39Z",
      "side": 1,
      "message": "I don\u0027t think this is needed any more. The name tmpfile is only used once, and it\u0027s in make_temporary_fd, so it should probably just be used there so it\u0027s obvious what\u0027s going on.\n\nIn fact, it might be better to pull the function from above into make_temporary_fd.",
      "range": {
        "startLine": 549,
        "startChar": 0,
        "endLine": 549,
        "endChar": 29
      },
      "revId": "3dfa86fe553d40f43bb0dfc8dd78139011362693",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2fcf9c1e_5f76c9ab",
        "filename": "fastboot/fastboot.cpp",
        "patchSetId": 1
      },
      "lineNbr": 549,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-04-27T00:20:21Z",
      "side": 1,
      "message": "well, i don\u0027t want any new tmpfile users to get the one that works well enough for most linux users (but not all) and doesn\u0027t work for any windows users.\n\nwhat we really need to do is to add some decent temporary file utilities to libbase and just move everyone over. http://b/37724140.",
      "parentUuid": "5329cf12_c82ad466",
      "range": {
        "startLine": 549,
        "startChar": 0,
        "endLine": 549,
        "endChar": 29
      },
      "revId": "3dfa86fe553d40f43bb0dfc8dd78139011362693",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "571fdd88_b976db1d",
        "filename": "fastboot/fastboot.cpp",
        "patchSetId": 1
      },
      "lineNbr": 557,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-04-26T01:36:38Z",
      "side": 1,
      "message": "(fastboot leaks everything anyway, so this is really a reminder for anyone who tries to move this code to libbase.)",
      "revId": "3dfa86fe553d40f43bb0dfc8dd78139011362693",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0fd99a3c_80b5ee8c",
        "filename": "fastboot/fastboot.cpp",
        "patchSetId": 1
      },
      "lineNbr": 563,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2017-04-26T18:18:39Z",
      "side": 1,
      "message": "As an extremely superficial nit, all of the other functions use the full name temporary instead of tmp.",
      "range": {
        "startLine": 563,
        "startChar": 24,
        "endLine": 563,
        "endChar": 27
      },
      "revId": "3dfa86fe553d40f43bb0dfc8dd78139011362693",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57020ff4_7ed1bde8",
        "filename": "fastboot/fastboot.cpp",
        "patchSetId": 1
      },
      "lineNbr": 563,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-04-27T00:20:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0fd99a3c_80b5ee8c",
      "range": {
        "startLine": 563,
        "startChar": 24,
        "endLine": 563,
        "endChar": 27
      },
      "revId": "3dfa86fe553d40f43bb0dfc8dd78139011362693",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b35bbb9_b8a718b8",
        "filename": "fastboot/fastboot.cpp",
        "patchSetId": 1
      },
      "lineNbr": 565,
      "author": {
        "id": 1079753
      },
      "writtenOn": "2017-04-26T02:06:50Z",
      "side": 1,
      "message": "is empty string a value that should be handled?",
      "range": {
        "startLine": 565,
        "startChar": 8,
        "endLine": 565,
        "endChar": 14
      },
      "revId": "3dfa86fe553d40f43bb0dfc8dd78139011362693",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb36a91e_9943a71f",
        "filename": "fastboot/fastboot.cpp",
        "patchSetId": 1
      },
      "lineNbr": 565,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-04-26T05:59:38Z",
      "side": 1,
      "message": "\"you did that to yourself\" :-)",
      "parentUuid": "2b35bbb9_b8a718b8",
      "range": {
        "startLine": 565,
        "startChar": 8,
        "endLine": 565,
        "endChar": 14
      },
      "revId": "3dfa86fe553d40f43bb0dfc8dd78139011362693",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "374a55a2_43abd3db",
        "filename": "fastboot/fastboot.cpp",
        "patchSetId": 1
      },
      "lineNbr": 571,
      "author": {
        "id": 1079753
      },
      "writtenOn": "2017-04-26T02:06:50Z",
      "side": 1,
      "message": "shouldn\u0027t this be result.c_str()",
      "range": {
        "startLine": 571,
        "startChar": 16,
        "endLine": 571,
        "endChar": 26
      },
      "revId": "3dfa86fe553d40f43bb0dfc8dd78139011362693",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "017f457e_e30ad2e8",
        "filename": "fastboot/fastboot.cpp",
        "patchSetId": 1
      },
      "lineNbr": 571,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-04-26T05:59:38Z",
      "side": 1,
      "message": "no. if you look at http://man7.org/linux/man-pages/man3/mkstemp.3.html you\u0027ll see that these functions actually _modify_ the string you pass in. basically the template looks like /my/tmp/dir/whatever_XXXXXX and the function finds some replacement for \"XXXXXX\" that gives you a unique name.\n\nc_str returns a _const_ pointer, so you use \u0026* instead to get a non-const pointer to the first element.",
      "parentUuid": "374a55a2_43abd3db",
      "range": {
        "startLine": 571,
        "startChar": 16,
        "endLine": 571,
        "endChar": 26
      },
      "revId": "3dfa86fe553d40f43bb0dfc8dd78139011362693",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "078005f1_efb8562a",
        "filename": "fastboot/fastboot.cpp",
        "patchSetId": 1
      },
      "lineNbr": 571,
      "author": {
        "id": 1079753
      },
      "writtenOn": "2017-04-26T06:27:38Z",
      "side": 1,
      "message": "Oh thats not what I was talking about. I didn\u0027t think this was guaranteed to be null terminated. It looks like based on the standard it may be not be, but it practice this shouldn\u0027t be an issue.\nhttp://stackoverflow.com/questions/38874050/will-c11-stdstringoperator-return-null-terminated-buffer",
      "parentUuid": "017f457e_e30ad2e8",
      "range": {
        "startLine": 571,
        "startChar": 16,
        "endLine": 571,
        "endChar": 26
      },
      "revId": "3dfa86fe553d40f43bb0dfc8dd78139011362693",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7f90f76_16820ed3",
        "filename": "fastboot/fastboot.cpp",
        "patchSetId": 1
      },
      "lineNbr": 571,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-04-26T15:36:00Z",
      "side": 1,
      "message": "c++14 guarantees this.",
      "parentUuid": "078005f1_efb8562a",
      "range": {
        "startLine": 571,
        "startChar": 16,
        "endLine": 571,
        "endChar": 26
      },
      "revId": "3dfa86fe553d40f43bb0dfc8dd78139011362693",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f0fcb3b_b134be95",
        "filename": "fastboot/fastboot.cpp",
        "patchSetId": 1
      },
      "lineNbr": 580,
      "author": {
        "id": 1079753
      },
      "writtenOn": "2017-04-26T02:06:50Z",
      "side": 1,
      "message": "same here should use c_str right?",
      "range": {
        "startLine": 580,
        "startChar": 21,
        "endLine": 580,
        "endChar": 38
      },
      "revId": "3dfa86fe553d40f43bb0dfc8dd78139011362693",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}