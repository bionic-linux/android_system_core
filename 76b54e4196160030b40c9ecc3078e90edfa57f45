{
  "comments": [
    {
      "key": {
        "uuid": "383666c8_b2294695",
        "filename": "adb/adb.h",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-07-21T00:28:05Z",
      "side": 1,
      "message": "it might be wise to rename this MAX_PAYLOAD_V2 to prevent the possibility of merge problems silently changing code from 4KiB to 256KiB.\n\ndid you experiment with other sizes? why 256KiB and not, say, 1MiB?",
      "revId": "76b54e4196160030b40c9ecc3078e90edfa57f45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d432251_8ffb15b2",
        "filename": "adb/adb.h",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1059813
      },
      "writtenOn": "2015-07-21T11:36:57Z",
      "side": 1,
      "message": "I created a new MAX_PAYLOAD_V2 macro and defined MAX_PAYLOAD to it. I don\u0027t want to pollute with the code with references to MAX_PAYLOAD_V2 because I think it makes the code less readable, but if you want I can change it.\n\nI experimented with various packet sizes and further increase of the packet size have almost no impact on the push/pull speed on the other hand it increases the latency linearly (because of the USB transfer speed). With 256KiB packets the packet latency is ~8ms what means that any service have at least this latency if a push/pull using the connection with full load. For \"real time services\" (e.g. logcat or shell) I think this latency is acceptable but a further increase will hurt the user experience, because the practical latency is higher then this.",
      "parentUuid": "383666c8_b2294695",
      "revId": "76b54e4196160030b40c9ecc3078e90edfa57f45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad7a16a8_faea81e5",
        "filename": "adb/adb.h",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-07-22T00:35:59Z",
      "side": 1,
      "message": "i don\u0027t understand your point about increasing latency --- this is the max payload size; we\u0027ll only send as many bytes as are actually in the packet.",
      "parentUuid": "0d432251_8ffb15b2",
      "revId": "76b54e4196160030b40c9ecc3078e90edfa57f45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d3aa6f6_e0e44219",
        "filename": "adb/adb.h",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1059813
      },
      "writtenOn": "2015-07-22T17:28:12Z",
      "side": 1,
      "message": "If we have an \"adb pull\" and an \"adb shell\" running at the same time with the same device then the \"adb pull\" will put high load of 256KiB packets onto the connection. If the shell service want to send a message also (e.g. stdout of a shell command) then it will try to use the same stream to write the data to the host because we have only 1 USB write endpoint. It means that when the shell service want to send a packet then it will have to wait until the packet currently transferred is finished what will be most likely a large packet from the file sync service. Because of it the latency of the shell service is affected by the packet size used by the file sync service.\n\nI agree that this isn\u0027t a major issue but it gives us an upper limit for the packet size. Increasing the packet size over 256KiB have almost no effect on the push/pull speed while increasing this effect to a level where it can be user visible.",
      "parentUuid": "ad7a16a8_faea81e5",
      "revId": "76b54e4196160030b40c9ecc3078e90edfa57f45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d143a33_7cd9b5a3",
        "filename": "adb/protocol.txt",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-07-21T00:28:05Z",
      "side": 1,
      "message": "this isn\u0027t really true, though, is it?\n\n\"Currently, version\u003d0x01000000 and maxdata\u003d256*1024. Older versions of adb hard-coded 4096, so CONNECT and AUTH packets sent to a device must not be larger than that because they\u0027re sent before the CONNECT from the device that tells the adb server what the device can support\".",
      "revId": "76b54e4196160030b40c9ecc3078e90edfa57f45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d0b8619_987135d3",
        "filename": "adb/protocol.txt",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1059813
      },
      "writtenOn": "2015-07-21T11:36:57Z",
      "side": 1,
      "message": "Updated the wording based on you suggestion.",
      "parentUuid": "4d143a33_7cd9b5a3",
      "revId": "76b54e4196160030b40c9ecc3078e90edfa57f45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b83896b1_33b9d035",
        "filename": "adb/usb_linux.cpp",
        "patchSetId": 1
      },
      "lineNbr": 455,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-07-21T00:28:05Z",
      "side": 1,
      "message": "not any more; we send a zero-length packet.\n\n(you could combine the two \u0027if\u0027s too.)",
      "revId": "76b54e4196160030b40c9ecc3078e90edfa57f45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d0b8619_d867ad14",
        "filename": "adb/usb_linux.cpp",
        "patchSetId": 1
      },
      "lineNbr": 455,
      "author": {
        "id": 1059813
      },
      "writtenOn": "2015-07-21T11:36:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b83896b1_33b9d035",
      "revId": "76b54e4196160030b40c9ecc3078e90edfa57f45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "185442e3_245d0abe",
        "filename": "adb/usb_linux.cpp",
        "patchSetId": 1
      },
      "lineNbr": 474,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2015-07-21T00:59:34Z",
      "side": 1,
      "message": "Have you considered making this same change to usb_windows.cpp, or is that out-of-scope of your change?",
      "range": {
        "startLine": 474,
        "startChar": 19,
        "endLine": 474,
        "endChar": 22
      },
      "revId": "76b54e4196160030b40c9ecc3078e90edfa57f45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "383666c8_f28f3e7f",
        "filename": "adb/usb_linux.cpp",
        "patchSetId": 1
      },
      "lineNbr": 474,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-07-21T01:08:36Z",
      "side": 1,
      "message": "(i\u0027ve been assuming that their plan is to make sure that the current change doesn\u0027t _break_ Mac or Windows and then worry about improving those platforms in separate changes. but, yes, obviously improving Windows is the most impactful change. actually, the Mac API seems to already just make one call, so there\u0027s nothing for us to do there. just Windows.)",
      "parentUuid": "185442e3_245d0abe",
      "range": {
        "startLine": 474,
        "startChar": 19,
        "endLine": 474,
        "endChar": 22
      },
      "revId": "76b54e4196160030b40c9ecc3078e90edfa57f45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd24aaaf_ad749dc2",
        "filename": "adb/usb_linux.cpp",
        "patchSetId": 1
      },
      "lineNbr": 474,
      "author": {
        "id": 1059813
      },
      "writtenOn": "2015-07-21T11:36:57Z",
      "side": 1,
      "message": "At the moment I don\u0027t have a Windows environment to test it on Windows but I plan to make that change after this CL.\n\nOn Windows currently we do 1 write (with full data) and several reads (with 4096 chunks). Changing it to make only 1 read makes sense (and I plan to do it), but I don\u0027t expect it to have measurable impact on the speed because the communication on the wire done independently of how much we read here.",
      "parentUuid": "383666c8_f28f3e7f",
      "range": {
        "startLine": 474,
        "startChar": 19,
        "endLine": 474,
        "endChar": 22
      },
      "revId": "76b54e4196160030b40c9ecc3078e90edfa57f45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d70bac3_3cc23d7c",
        "filename": "adb/usb_linux.cpp",
        "patchSetId": 1
      },
      "lineNbr": 474,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2015-07-21T21:27:11Z",
      "side": 1,
      "message": "Makes sense, thanks. BTW, I think the hard thing to test on Windows is to find a device that uses the \u0027legacy kernel driver\u0027 (which has been deleted from AOSP, but might be in use by 3rd parties) instead of WinUsb.",
      "parentUuid": "cd24aaaf_ad749dc2",
      "range": {
        "startLine": 474,
        "startChar": 19,
        "endLine": 474,
        "endChar": 22
      },
      "revId": "76b54e4196160030b40c9ecc3078e90edfa57f45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8568eec_15faf4b2",
        "filename": "adb/usb_linux_client.cpp",
        "patchSetId": 1
      },
      "lineNbr": 218,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-07-21T00:28:05Z",
      "side": 1,
      "message": "that\u0027s just read(2). so it seems more likely that this is actually a limitation in the usb device driver. i\u0027m surprised that this would only affect reading and not writing...",
      "revId": "76b54e4196160030b40c9ecc3078e90edfa57f45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd24aaaf_8d71e1d2",
        "filename": "adb/usb_linux_client.cpp",
        "patchSetId": 1
      },
      "lineNbr": 218,
      "author": {
        "id": 1059813
      },
      "writtenOn": "2015-07-21T11:36:57Z",
      "side": 1,
      "message": "I changed the comment to blame the device driver but I don\u0027t know how can I check who exposes this limitation.\n\nI don\u0027t know why it effects only the read and not the write (possibly the driver have a read buffer, but not a write buffer), but if the write works with bigger sizes then we have to use it because doing chunked write slows down the communication because each write will result in a separate, synchronous URB request what have 50-200us latency. If we run into a device where we want to ship the new adbd and it don\u0027t support larger writes then we should implement a fallback (e.g. when we got a EINVAL back) but I expect it to work in all case where we want to deploy it.",
      "parentUuid": "f8568eec_15faf4b2",
      "revId": "76b54e4196160030b40c9ecc3078e90edfa57f45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4dd51ace_e6a984db",
        "filename": "adb/usb_linux_client.cpp",
        "patchSetId": 1
      },
      "lineNbr": 218,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-07-22T00:35:59Z",
      "side": 1,
      "message": "ccross?",
      "parentUuid": "cd24aaaf_8d71e1d2",
      "revId": "76b54e4196160030b40c9ecc3078e90edfa57f45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4dd51ace_bac6303b",
        "filename": "adb/usb_linux_client.cpp",
        "patchSetId": 1
      },
      "lineNbr": 218,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-07-22T01:06:38Z",
      "side": 1,
      "message": "There are two kernel implementations, f_adb.c and f_fs.c.  This code is for the f_adb.c interface.  In f_adb.c, adb_read has:\n\n        #define ADB_BULK_BUFFER_SIZE           4096\n\n        if (count \u003e ADB_BULK_BUFFER_SIZE)\n                return -EINVAL;\n\nI don\u0027t see any equivalent limitation on the newer f_fs.c interface.",
      "parentUuid": "4dd51ace_e6a984db",
      "revId": "76b54e4196160030b40c9ecc3078e90edfa57f45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad7a16a8_9ae02d8d",
        "filename": "adb/usb_linux_client.cpp",
        "patchSetId": 1
      },
      "lineNbr": 218,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-07-22T01:08:42Z",
      "side": 1,
      "message": "ah, now i get the significance of the \"_adb_\" in these names. makes sense. that lets us clarify the comment (and not worry about this too much going forward). thanks!",
      "parentUuid": "4dd51ace_bac6303b",
      "revId": "76b54e4196160030b40c9ecc3078e90edfa57f45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd3e6aec_5dd87b1d",
        "filename": "adb/usb_linux_client.cpp",
        "patchSetId": 1
      },
      "lineNbr": 218,
      "author": {
        "id": 1059813
      },
      "writtenOn": "2015-07-22T17:28:12Z",
      "side": 1,
      "message": "Clarified comment based on suggestions.",
      "parentUuid": "ad7a16a8_9ae02d8d",
      "revId": "76b54e4196160030b40c9ecc3078e90edfa57f45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}