{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d159f542_d3a151e5",
        "filename": "fs_mgr/libsnapshot/libsnapshot_cow/cow_reader.cpp",
        "patchSetId": 7
      },
      "lineNbr": 20,
      "author": {
        "id": 1710792
      },
      "writtenOn": "2023-10-17T17:00:52Z",
      "side": 1,
      "message": "not needed?",
      "revId": "47f72d9f4ab207ec1345fd6f2939d3c46d6fcf85",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ef112ce8_da504b9a",
        "filename": "fs_mgr/libsnapshot/libsnapshot_cow/cow_reader.cpp",
        "patchSetId": 7
      },
      "lineNbr": 20,
      "author": {
        "id": 1964171
      },
      "writtenOn": "2023-10-17T22:05:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d159f542_d3a151e5",
      "revId": "47f72d9f4ab207ec1345fd6f2939d3c46d6fcf85",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ab49062_346faf39",
        "filename": "fs_mgr/libsnapshot/libsnapshot_cow/cow_reader.cpp",
        "patchSetId": 7
      },
      "lineNbr": 185,
      "author": {
        "id": 1710792
      },
      "writtenOn": "2023-10-17T17:00:52Z",
      "side": 1,
      "message": "This whole logic is specific to the v2 parser, should be moved inside the v2 parser instead of hard coding in parser base.",
      "range": {
        "startLine": 150,
        "startChar": 0,
        "endLine": 185,
        "endChar": 9
      },
      "revId": "47f72d9f4ab207ec1345fd6f2939d3c46d6fcf85",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "075fea18_79119ace",
        "filename": "fs_mgr/libsnapshot/libsnapshot_cow/cow_reader.cpp",
        "patchSetId": 7
      },
      "lineNbr": 185,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2023-10-17T19:50:24Z",
      "side": 1,
      "message": "There\u0027s all kinds of v2-specific code that the reader needs to know about. I would argue we should go the opposite direction. CowReader::Parse() should branch out into ParseV2() and ParseV3() based on header version. It\u0027s a small amount of very critical code. This is way easier and means we don\u0027t have to figure out a common ancestor between ParserV2/V3, and we don\u0027t need ParserBase.\n\nThat said, if we do want ParserBase - then ParserV2/V3 would need the same \"output\" struct for CowReader to consume.",
      "parentUuid": "7ab49062_346faf39",
      "range": {
        "startLine": 150,
        "startChar": 0,
        "endLine": 185,
        "endChar": 9
      },
      "revId": "47f72d9f4ab207ec1345fd6f2939d3c46d6fcf85",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c1a9ea3_c00b5c42",
        "filename": "fs_mgr/libsnapshot/libsnapshot_cow/cow_reader.cpp",
        "patchSetId": 7
      },
      "lineNbr": 185,
      "author": {
        "id": 1964171
      },
      "writtenOn": "2023-10-17T22:05:32Z",
      "side": 1,
      "message": "Could we have ParserBase-\u003eops() method be virtual and the parserV2 overrides it to translate it\u0027s v2 ops into v3 ops.",
      "parentUuid": "075fea18_79119ace",
      "range": {
        "startLine": 150,
        "startChar": 0,
        "endLine": 185,
        "endChar": 9
      },
      "revId": "47f72d9f4ab207ec1345fd6f2939d3c46d6fcf85",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a6ec008_1febece3",
        "filename": "fs_mgr/libsnapshot/libsnapshot_cow/cow_reader.cpp",
        "patchSetId": 7
      },
      "lineNbr": 185,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2023-10-17T22:46:59Z",
      "side": 1,
      "message": "That works. It will be more refactoring though.",
      "parentUuid": "6c1a9ea3_c00b5c42",
      "range": {
        "startLine": 150,
        "startChar": 0,
        "endLine": 185,
        "endChar": 9
      },
      "revId": "47f72d9f4ab207ec1345fd6f2939d3c46d6fcf85",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1509a6d_d39d8dbe",
        "filename": "fs_mgr/libsnapshot/libsnapshot_cow/cow_reader.cpp",
        "patchSetId": 7
      },
      "lineNbr": 185,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2023-10-24T04:30:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9a6ec008_1febece3",
      "range": {
        "startLine": 150,
        "startChar": 0,
        "endLine": 185,
        "endChar": 9
      },
      "revId": "47f72d9f4ab207ec1345fd6f2939d3c46d6fcf85",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "badb8758_3c0e79c7",
        "filename": "fs_mgr/libsnapshot/libsnapshot_cow/parser_base.h",
        "patchSetId": 7
      },
      "lineNbr": 33,
      "author": {
        "id": 1710792
      },
      "writtenOn": "2023-10-17T17:00:52Z",
      "side": 1,
      "message": "We should avoid adding methods like this as much as possible, it defeats the purpose of abstractions via inheritance. Consider moving common logic to the base class, or move subclass specific logic into the subclass.",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 57
      },
      "revId": "47f72d9f4ab207ec1345fd6f2939d3c46d6fcf85",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89587589_758d5cc0",
        "filename": "fs_mgr/libsnapshot/libsnapshot_cow/parser_base.h",
        "patchSetId": 7
      },
      "lineNbr": 33,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2023-10-17T19:50:24Z",
      "side": 1,
      "message": "Note this pattern is somewhat common, for codebases that can\u0027t use dynamic_cast. That said, I don\u0027t think we need it here.",
      "parentUuid": "badb8758_3c0e79c7",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 57
      },
      "revId": "47f72d9f4ab207ec1345fd6f2939d3c46d6fcf85",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2c048cd_d203756d",
        "filename": "fs_mgr/libsnapshot/libsnapshot_cow/parser_base.h",
        "patchSetId": 7
      },
      "lineNbr": 33,
      "author": {
        "id": 1964171
      },
      "writtenOn": "2023-10-17T22:05:32Z",
      "side": 1,
      "message": "I\u0027m currently using it to grab the compression_type (GetCompressionType() method in v2 parser). Since compression is stored within v2 operations, only the v2_parser will have that knowledge, (once we move the translation logic to the parser).",
      "parentUuid": "89587589_758d5cc0",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 57
      },
      "revId": "47f72d9f4ab207ec1345fd6f2939d3c46d6fcf85",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c00c2fdc_a7145af0",
        "filename": "fs_mgr/libsnapshot/libsnapshot_cow/parser_base.h",
        "patchSetId": 7
      },
      "lineNbr": 33,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2023-10-24T04:30:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c2c048cd_d203756d",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 57
      },
      "revId": "47f72d9f4ab207ec1345fd6f2939d3c46d6fcf85",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}