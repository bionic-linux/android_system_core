{
  "comments": [
    {
      "key": {
        "uuid": "1abfd865_e16b4978",
        "filename": "libunwindstack/DexFile.cpp",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2018-11-16T14:07:25Z",
      "side": 0,
      "message": "Note that this state isn\u0027t retained in the replacement in aosp/829661. It looks strange to me to never search previously visited classes again - that must assume some invariants on the methods we\u0027re being asked about that I don\u0027t understand.",
      "range": {
        "startLine": 101,
        "startChar": 9,
        "endLine": 101,
        "endChar": 25
      },
      "revId": "a59ecfd9407996033736c3710a6b9463512f8972",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa3f661c_03532a42",
        "filename": "libunwindstack/DexFile.cpp",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-11-16T14:20:21Z",
      "side": 0,
      "message": "The previously visited classes were put into the method_cache_, hence no need to visit them again.\n\nBut it seems you removed that caching in the code move though?  I am not sure I am happy about potentially doing linear search over whole dex file for every method.",
      "parentUuid": "1abfd865_e16b4978",
      "range": {
        "startLine": 101,
        "startChar": 9,
        "endLine": 101,
        "endChar": 25
      },
      "revId": "a59ecfd9407996033736c3710a6b9463512f8972",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "285c90fa_d28876ea",
        "filename": "libunwindstack/DexFile.cpp",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2018-11-16T15:07:09Z",
      "side": 0,
      "message": "Right, I misinterpreted the comment on how method_cache_ works. It still caches the returned method but not the others being passed over. What are the performance sensitive use cases? The comment above suggests few frames are interesting, but multiple unwinds are done. It\u0027s unclear whether the unwinds use the same few frames repeatedly.",
      "parentUuid": "fa3f661c_03532a42",
      "range": {
        "startLine": 101,
        "startChar": 9,
        "endLine": 101,
        "endChar": 25
      },
      "revId": "a59ecfd9407996033736c3710a6b9463512f8972",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dadc7678_5b7606a4",
        "filename": "libunwindstack/DexFile.cpp",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1065473
      },
      "writtenOn": "2018-11-16T15:20:34Z",
      "side": 0,
      "message": "The original code did at most one pass over the dex file.  Your change will make pass over the dex for each new unique method seen in the unwind.  Which for something like a profiler might be many methods.  I don\u0027t have any precise numbers though.\n\nEither way, I don\u0027t think such change belongs in this CL.",
      "parentUuid": "285c90fa_d28876ea",
      "range": {
        "startLine": 101,
        "startChar": 9,
        "endLine": 101,
        "endChar": 25
      },
      "revId": "a59ecfd9407996033736c3710a6b9463512f8972",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d743a32_e4a7ef66",
        "filename": "libunwindstack/DexFile.cpp",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2018-11-16T15:30:43Z",
      "side": 0,
      "message": "It\u0027s related since it either means some extra complexity on the dexfile side of it to re-implement the cache there, or a messier iterator API to keep it here. I\u0027d prefer to avoid the latter.\n\nI\u0027ll wait a bit to hear Christopher\u0027s view on this before I start adding an equivalent cache.",
      "parentUuid": "dadc7678_5b7606a4",
      "range": {
        "startLine": 101,
        "startChar": 9,
        "endLine": 101,
        "endChar": 25
      },
      "revId": "a59ecfd9407996033736c3710a6b9463512f8972",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0391e74c_ca913777",
        "filename": "libunwindstack/DexFile.cpp",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2018-11-20T01:38:07Z",
      "side": 0,
      "message": "Added the cache on the libdexfile side, because string passing would have gotten messy otherwise when changing to C API.",
      "parentUuid": "4d743a32_e4a7ef66",
      "range": {
        "startLine": 101,
        "startChar": 9,
        "endLine": 101,
        "endChar": 25
      },
      "revId": "a59ecfd9407996033736c3710a6b9463512f8972",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "914e9e5f_d94de43a",
        "filename": "libunwindstack/tests/DexFileTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2018-11-16T13:06:01Z",
      "side": 0,
      "message": "Note the cute parenthesis error. The test didn\u0027t really check that the code failed on a truncated header.",
      "range": {
        "startLine": 51,
        "startChar": 86,
        "endLine": 51,
        "endChar": 87
      },
      "revId": "a59ecfd9407996033736c3710a6b9463512f8972",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11592a3c_9d45197f",
        "filename": "libunwindstack/tests/DexFileTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2018-11-16T13:06:01Z",
      "side": 0,
      "message": "I\u0027m deleting this because ArtDexFileLoader loads a truncated file without error, and I reckon that doesn\u0027t hurt.",
      "range": {
        "startLine": 57,
        "startChar": 36,
        "endLine": 57,
        "endChar": 0
      },
      "revId": "a59ecfd9407996033736c3710a6b9463512f8972",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}