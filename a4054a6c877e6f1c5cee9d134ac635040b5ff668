{
  "comments": [
    {
      "key": {
        "uuid": "d132079c_c54e6270",
        "filename": "debuggerd/client/debuggerd_client.cpp",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2019-07-16T00:15:14Z",
      "side": 1,
      "message": "Prefer time.h for super nitpicky language lawyer reasons (\u003ctime.h\u003e is required to export ::localtime_r, \u003cctime\u003e is required to export ::std::localtime_r, both are allowed to but not required to export the other)",
      "range": {
        "startLine": 27,
        "startChar": 17,
        "endLine": 28,
        "endChar": 16
      },
      "revId": "a4054a6c877e6f1c5cee9d134ac635040b5ff668",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6ff4005_490ea8d1",
        "filename": "debuggerd/client/debuggerd_client.cpp",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2019-07-16T00:15:14Z",
      "side": 1,
      "message": "Please fully qualify std names.",
      "range": {
        "startLine": 49,
        "startChar": 37,
        "endLine": 52,
        "endChar": 24
      },
      "revId": "a4054a6c877e6f1c5cee9d134ac635040b5ff668",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c0a08a4_d7ff8aca",
        "filename": "debuggerd/client/debuggerd_client.cpp",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2019-07-16T00:15:14Z",
      "side": 1,
      "message": "pid_t",
      "range": {
        "startLine": 74,
        "startChar": 29,
        "endLine": 74,
        "endChar": 32
      },
      "revId": "a4054a6c877e6f1c5cee9d134ac635040b5ff668",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa4a56b1_39f26145",
        "filename": "debuggerd/client/debuggerd_client.cpp",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2019-07-16T00:15:14Z",
      "side": 1,
      "message": "This code is linux (and android, for that matter) only, isn\u0027t it?",
      "range": {
        "startLine": 78,
        "startChar": 27,
        "endLine": 81,
        "endChar": 5
      },
      "revId": "a4054a6c877e6f1c5cee9d134ac635040b5ff668",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8c68974_6a980644",
        "filename": "debuggerd/client/debuggerd_client.cpp",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2019-07-16T00:15:14Z",
      "side": 1,
      "message": "style nit: underscored_names for variable names",
      "range": {
        "startLine": 90,
        "startChar": 7,
        "endLine": 90,
        "endChar": 18
      },
      "revId": "a4054a6c877e6f1c5cee9d134ac635040b5ff668",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0c044e4_e05f5df1",
        "filename": "debuggerd/client/debuggerd_client.cpp",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2019-07-16T00:15:14Z",
      "side": 1,
      "message": "Rewrite as `std::unique_ptr\u003cFILE, int(*)(FILE*)\u003e foo(fopen(path.c_str(), \"r\"));`",
      "range": {
        "startLine": 92,
        "startChar": 0,
        "endLine": 92,
        "endChar": 11
      },
      "revId": "a4054a6c877e6f1c5cee9d134ac635040b5ff668",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74baffb4_9577cc5f",
        "filename": "debuggerd/client/debuggerd_client.cpp",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2019-07-16T00:15:14Z",
      "side": 1,
      "message": "You should just be able to make the variable a const char*?",
      "range": {
        "startLine": 99,
        "startChar": 18,
        "endLine": 100,
        "endChar": 46
      },
      "revId": "a4054a6c877e6f1c5cee9d134ac635040b5ff668",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55997b40_a9e268c6",
        "filename": "debuggerd/client/debuggerd_client.cpp",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2019-07-16T00:15:14Z",
      "side": 1,
      "message": "Use libprocinfo\u0027s GetProcessTids instead of reimplementing it?",
      "range": {
        "startLine": 116,
        "startChar": 0,
        "endLine": 133,
        "endChar": 1
      },
      "revId": "a4054a6c877e6f1c5cee9d134ac635040b5ff668",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f79c88d7_fa6d6631",
        "filename": "debuggerd/client/debuggerd_client.cpp",
        "patchSetId": 1
      },
      "lineNbr": 140,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2019-07-16T00:15:14Z",
      "side": 1,
      "message": "tids",
      "range": {
        "startLine": 140,
        "startChar": 45,
        "endLine": 140,
        "endChar": 49
      },
      "revId": "a4054a6c877e6f1c5cee9d134ac635040b5ff668",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08240a6d_83cb9c96",
        "filename": "debuggerd/client/debuggerd_client.cpp",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2019-07-16T00:15:14Z",
      "side": 1,
      "message": "We\u0027re creating a bunch of stringstreams, converting their outputs to strings, and then feeding them back into stringstreams, which is a bit wasteful. Switch the helper functions to accept a std::stringstream\u0026 instead, and write directly into the single buffer?",
      "range": {
        "startLine": 143,
        "startChar": 0,
        "endLine": 145,
        "endChar": 0
      },
      "revId": "a4054a6c877e6f1c5cee9d134ac635040b5ff668",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d41c1e65_4e8c925e",
        "filename": "debuggerd/client/debuggerd_client.cpp",
        "patchSetId": 1
      },
      "lineNbr": 147,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2019-07-16T00:15:14Z",
      "side": 1,
      "message": "It\u0027s a bit better to open a file descriptor to /proc/\u003cpid\u003e, and openat(pid_fd, \"task/\u003ctid\u003e/wchan\"), to avoid a race, but this is probably fine as is, since we\u0027re not doing anything dangerous. (Feel free to go with either route.)",
      "range": {
        "startLine": 146,
        "startChar": 24,
        "endLine": 147,
        "endChar": 93
      },
      "revId": "a4054a6c877e6f1c5cee9d134ac635040b5ff668",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69d303b5_28eaa2b0",
        "filename": "debuggerd/client/debuggerd_client.cpp",
        "patchSetId": 1
      },
      "lineNbr": 152,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2019-07-16T00:15:14Z",
      "side": 1,
      "message": "This probably shouldn\u0027t bail out completely, the thread you\u0027re currently interested in might have exited, but this doesn\u0027t mean all of the threads exited.",
      "range": {
        "startLine": 148,
        "startChar": 20,
        "endLine": 152,
        "endChar": 5
      },
      "revId": "a4054a6c877e6f1c5cee9d134ac635040b5ff668",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "788dac9c_50087ec8",
        "filename": "debuggerd/client/debuggerd_client.cpp",
        "patchSetId": 1
      },
      "lineNbr": 154,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2019-07-16T00:15:14Z",
      "side": 1,
      "message": "IMO: endl is harder to read than \"\\n\" (especially when not prefixed with std::), and you don\u0027t get any benefit from using it (i.e. you don\u0027t have to print \"\\r\\n\" on windows, because this code should never get built or used on windows)",
      "range": {
        "startLine": 154,
        "startChar": 30,
        "endLine": 154,
        "endChar": 34
      },
      "revId": "a4054a6c877e6f1c5cee9d134ac635040b5ff668",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75043c98_33d1972b",
        "filename": "debuggerd/client/debuggerd_client.cpp",
        "patchSetId": 1
      },
      "lineNbr": 367,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2019-07-16T00:15:14Z",
      "side": 1,
      "message": "wchan",
      "range": {
        "startLine": 367,
        "startChar": 10,
        "endLine": 367,
        "endChar": 14
      },
      "revId": "a4054a6c877e6f1c5cee9d134ac635040b5ff668",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e94bd8d_e64b6c74",
        "filename": "debuggerd/client/debuggerd_client.cpp",
        "patchSetId": 1
      },
      "lineNbr": 369,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2019-07-16T00:15:14Z",
      "side": 1,
      "message": "This doesn\u0027t seem important enough to stick at the top of the dump. Fetch it first, and then display it later? Also, I think we\u0027re going to be unable to collect this information in many cases, so only display it if we were able to get anything?",
      "range": {
        "startLine": 369,
        "startChar": 0,
        "endLine": 369,
        "endChar": 33
      },
      "revId": "a4054a6c877e6f1c5cee9d134ac635040b5ff668",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}