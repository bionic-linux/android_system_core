{
  "comments": [
    {
      "key": {
        "uuid": "cdbe1c68_0798121d",
        "filename": "adb/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 154,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-01-23T09:23:31Z",
      "side": 1,
      "message": "There\u0027s something off here - ART shouldn\u0027t include a library from adb.",
      "range": {
        "startLine": 151,
        "startChar": 0,
        "endLine": 154,
        "endChar": 6
      },
      "revId": "76e4e4d83ee128d253c311eb983d0d3fd5dd6666",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "572b86e7_82baaa3b",
        "filename": "adb/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 154,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2020-01-23T10:34:25Z",
      "side": 1,
      "message": "This is the client side stable interface for jdwp socket forwarding. Previously, the server implementation was loaded from the ART apex by adbd, and the client was built directly into ART: this just moves the boundary so that it\u0027s in the adbd apex instead of the ART apex.",
      "parentUuid": "cdbe1c68_0798121d",
      "range": {
        "startLine": 151,
        "startChar": 0,
        "endLine": 154,
        "endChar": 6
      },
      "revId": "76e4e4d83ee128d253c311eb983d0d3fd5dd6666",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6cac94ff_12f6240d",
        "filename": "adb/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 154,
      "author": {
        "id": 1038443
      },
      "writtenOn": "2020-01-23T10:51:52Z",
      "side": 1,
      "message": "But why do you need a stub file for the client, and why does it need to move its code to adbd instead of residing in ART?",
      "parentUuid": "572b86e7_82baaa3b",
      "range": {
        "startLine": 151,
        "startChar": 0,
        "endLine": 154,
        "endChar": 6
      },
      "revId": "76e4e4d83ee128d253c311eb983d0d3fd5dd6666",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "69b393c9_e318cc17",
        "filename": "adb/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 154,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2020-01-23T15:20:47Z",
      "side": 1,
      "message": "The stub file defines the stub interface with ART, doesn\u0027t it? Since it\u0027s on the client side, the lib belongs in adb.\n\nHowever, apex_available looks wrong - it means the ART APEXes can include this library itself, and they shouldn\u0027t. They should only access the stubs, and for that you shouldn\u0027t need apex_available (visibility is enough).",
      "parentUuid": "6cac94ff_12f6240d",
      "range": {
        "startLine": 151,
        "startChar": 0,
        "endLine": 154,
        "endChar": 6
      },
      "revId": "76e4e4d83ee128d253c311eb983d0d3fd5dd6666",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59071316_bef22756",
        "filename": "adb/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 154,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2020-01-23T19:58:52Z",
      "side": 1,
      "message": "Ah, I misunderstood what apex_available did. Removed.",
      "parentUuid": "69b393c9_e318cc17",
      "range": {
        "startLine": 151,
        "startChar": 0,
        "endLine": 154,
        "endChar": 6
      },
      "revId": "76e4e4d83ee128d253c311eb983d0d3fd5dd6666",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "71021ec8_4c8d6767",
        "filename": "adb/adbconnection/adbconnection_client.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-01-23T04:57:48Z",
      "side": 1,
      "message": "copyright header?",
      "revId": "76e4e4d83ee128d253c311eb983d0d3fd5dd6666",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65aabf6e_d97026fc",
        "filename": "adb/adbconnection/include/adbconnection/client.h",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2020-01-23T15:20:47Z",
      "side": 1,
      "message": "This fd means there\u0027s code elsewhere (in ART) that implements the protocol over it, doesn\u0027t it? That means the protocol becomes the ABI, and we need to consider forward and backward compatibility(*). We also need to consider proper Mainline testing of it, including coverage.\n\nIf we can make the whole interface a C ABI, i.e. without \"leaking\" an fd across the border, then those things become more explicit here, and we\u0027ll be able to use regular tooling to test and verify the interface (even though that tooling to a large extent still is to come).\n\nHence I wonder if it\u0027s feasible to move the ABI border to avoid passing fd\u0027s across. I presume it\u0027d imply an interface to add command handlers etc, but maybe that\u0027s mostly a matter of moving more code from ART runtime into the client lib? (I haven\u0027t really dived into the JDWP/DDMS implementation in ART.)\n\nOtherwise we need to better understand how we\u0027ll test a socket protocol boundary. +rpl\n\n*) A point in case is also that the protocol here doesn\u0027t appear to be strict JDWP, considering the profiling extension discussed in http://doc/12tMLgKVYJx0_uZLbxqAUWBBRkar6tmLttFfSd0k0Fik.",
      "range": {
        "startLine": 52,
        "startChar": 13,
        "endLine": 52,
        "endChar": 27
      },
      "revId": "76e4e4d83ee128d253c311eb983d0d3fd5dd6666",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a79f26c_c7addee1",
        "filename": "adb/adbconnection/include/adbconnection/client.h",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-01-23T17:16:56Z",
      "side": 1,
      "message": "\u003e This fd means there\u0027s code elsewhere (in ART) that implements the protocol over it, doesn\u0027t it? That means the protocol becomes the ABI, and we need to consider forward and backward compatibility(*). We also need to consider proper Mainline testing of it, including coverage.\n\u003e \n\u003e If we can make the whole interface a C ABI, i.e. without \"leaking\" an fd across the border, then those things become more explicit here, and we\u0027ll be able to use regular tooling to test and verify the interface (even though that tooling to a large extent still is to come).\n\nThis FD is the open JDWP connection between the runtime and whatever debugger is currently controlling it. The protocol definition can be found at go/jdwp-spec. The entire JDWP spec is built around having a TCP socket connection of some type and passing structs over it. All of the code that actually handles the jdwp commands is no longer part of ART and is instead in external/oj-libjdwp.\n\n\u003e Hence I wonder if it\u0027s feasible to move the ABI border to avoid passing fd\u0027s across. I presume it\u0027d imply an interface to add command handlers etc, but maybe that\u0027s mostly a matter of moving more code from ART runtime into the client lib? (I haven\u0027t really dived into the JDWP/DDMS implementation in ART.)\n\u003e \n\u003e Otherwise we need to better understand how we\u0027ll test a socket protocol boundary. +rpl\n\n\n\u003e *) A point in case is also that the protocol here doesn\u0027t appear to be strict JDWP, considering the profiling extension discussed in http://doc/12tMLgKVYJx0_uZLbxqAUWBBRkar6tmLttFfSd0k0Fik.\n\nThe data being sent over the fd are standard JDWP protocol commands coming from host tools like \u0027jdb\u0027. The extensions discussed in that doc are unrelated to the data being sent over this. That data is sent by the adbconnection_client_new function. This FD is purely a socket for JDWP protocol traffic to come over.",
      "parentUuid": "65aabf6e_d97026fc",
      "range": {
        "startLine": 52,
        "startChar": 13,
        "endLine": 52,
        "endChar": 27
      },
      "revId": "76e4e4d83ee128d253c311eb983d0d3fd5dd6666",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3b2e99b_2f341236",
        "filename": "adb/adbconnection/include/adbconnection/client.h",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2020-01-23T17:43:36Z",
      "side": 1,
      "message": "\u003e All of the code that actually handles the jdwp commands is no longer part of ART\n\nThe stuff in runtime/jdwp is unused?\n\n\u003e and is instead in external/oj-libjdwp.\n\nI gather libjdwp.so is loaded through the agent interface? That\u0027s already an API that we need to support, so then this would be addressed by moving libjdwp.so into the adbd APEX?\n\n\u003e The extensions discussed in that doc are unrelated to the data being sent over this.\n\nOk, thanks for clarifying that.\n\nSpeaking of other sockets, the polling fd above is only used for polling on the ART side, there\u0027s no reading or writing on it there, right?",
      "parentUuid": "1a79f26c_c7addee1",
      "range": {
        "startLine": 52,
        "startChar": 13,
        "endLine": 52,
        "endChar": 27
      },
      "revId": "76e4e4d83ee128d253c311eb983d0d3fd5dd6666",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b9ddfe3_8d9742ac",
        "filename": "adb/adbconnection/include/adbconnection/client.h",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2020-01-23T20:02:55Z",
      "side": 1,
      "message": "\u003e Speaking of other sockets, the polling fd above is only used for polling on the ART side, there\u0027s no reading or writing on it there, right?\n\nCorrect. Right now, it\u0027s the same fd that gets written to/read from by the client library, but some future implementation could switch it to an eventfd if we stop doing this via unix domain socket.",
      "parentUuid": "c3b2e99b_2f341236",
      "range": {
        "startLine": 52,
        "startChar": 13,
        "endLine": 52,
        "endChar": 27
      },
      "revId": "76e4e4d83ee128d253c311eb983d0d3fd5dd6666",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cae4b5df_500575a6",
        "filename": "adb/adbconnection/include/adbconnection/client.h",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1047769
      },
      "writtenOn": "2020-01-23T21:45:34Z",
      "side": 1,
      "message": "\u003e The stuff in runtime/jdwp is unused?\n\nCorrect. I\u0027ve had a bug to fully remove it for a while. The code is rather tangled up with other parts of the system (like parts are in Thread and ThreadList) but all of it is unused in normal cases.\n\n\u003e I gather libjdwp.so is loaded through the agent interface? That\u0027s already an API that we need to support, so then this would be addressed by moving libjdwp.so into the adbd APEX?\n\nI don\u0027t think that\u0027s a good idea. The JDWP protocol is already well defined and we cannot really change it in backwards incompatible ways without breaking developer host tooling. All of the android parts basically treat this as just a pipe to an outside (host-computer) which gives bytes that libjdwp.so has to interpret. I\u0027d be happy to discuss this more in-depth over GVC if you want.",
      "parentUuid": "8b9ddfe3_8d9742ac",
      "range": {
        "startLine": 52,
        "startChar": 13,
        "endLine": 52,
        "endChar": 27
      },
      "revId": "76e4e4d83ee128d253c311eb983d0d3fd5dd6666",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22435d0b_69796d5a",
        "filename": "adb/adbconnection/libadbconnection_client.map.txt",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-01-23T04:57:48Z",
      "side": 1,
      "message": "remove this?",
      "revId": "76e4e4d83ee128d253c311eb983d0d3fd5dd6666",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}