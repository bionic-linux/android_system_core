{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "22075d76_8ef88e22",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1850729
      },
      "writtenOn": "2022-12-03T00:17:29Z",
      "side": 1,
      "message": "Did a slightly aggressive code refactoring by having TestUTF8toUTF16() and TestUTF16toUTF8() to test both length calculation and conversion. Let me know if this works better.",
      "revId": "043087a3fff78d7682a3728835e2b285e3369b56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe2736d1_e586f848",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1850729
      },
      "writtenOn": "2022-12-05T21:53:44Z",
      "side": 1,
      "message": "BTW, @enh@google.com, there are two tests that are failing for pre-submit and is expected, which is actually a signal of 2 issues with current implementation:\n\n1) expect utf16_to_utf8_length() to return 0 if input is zero length string, current implementation returns -1\n\n2) expect utf8_to_utf16_length() to stuff in 0xFFFF (for invalid UTF-8 input, e.g. 0xf8 as a leading byte), this was suggested by @zyy@google.com, which I agreed, the current implementation ignores invalid UTF-8 leading byte\n\nI guess we have two choices:\n\n1. either change the test to align with existing behavior and get this CL merged first, and modify the other CL to keep the existing behavior\n\n2. or merge the performance improvement + fix CL first (https://android-review.git.corp.google.com/c/platform/system/core/+/2322175), and then merge this CL\n\nI\u0027m open to either way but I need some opinions here.",
      "revId": "043087a3fff78d7682a3728835e2b285e3369b56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00a68967_2a34baee",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-12-05T22:28:56Z",
      "side": 1,
      "message": "i\u0027d document the _current_ behavior with tests first (that is: option 1).\n\nnot least because you might find you hit app compat reasons to not be able to fix the behavior, at which point you\u0027ll probably want to document that this is \"working as intended\" [for some values of \"working\" and some values of \"intended\"].\n\nyou can always add `// TODO: ` comments next to the stuff you think is bogus.",
      "parentUuid": "fe2736d1_e586f848",
      "revId": "043087a3fff78d7682a3728835e2b285e3369b56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63fa937c_b2d92dfe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1850729
      },
      "writtenOn": "2022-12-06T01:17:27Z",
      "side": 1,
      "message": "OK, I changed the tests to test the current behavior. But I\u0027m afraid the current behavior is deeply flawed and I\u0027d like to see if we could pass app compat tests to get the fix in, so there are multiple issues with the current behavior:\n\n1. empty input to utf16_to_utf8_length() returns -1 instead of 0, I guess this is fine, it\u0027s just inconsistent with utf8_to_utf16_length(). However, there is a slight chance the length could be passed to utf16_to_utf8() in some subsequent calls without checking by some careless code. Likely not fatal.\n\n2. invalid leading bytes in UTF8 sequence (those with 5 leading 1\u0027s, \u003e\u003d0xf8) are treated as valid for 4-byte UTF8 sequence, which could mess up with the rest conversion, as well as allowing some security manipulation, just saying\n\n3. invalid trailing bytes in UTF8 sequence, these are treated as valid trailing\nbytes and a normal conversion is done, I guess we should report and produce some invalid characters in place instead\n\nThere were some discussions here - https://en.wikipedia.org/wiki/UTF-8#Invalid_sequences_and_error_handling",
      "parentUuid": "00a68967_2a34baee",
      "revId": "043087a3fff78d7682a3728835e2b285e3369b56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c765942f_531d535c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-12-06T17:23:44Z",
      "side": 1,
      "message": "\u003e But I\u0027m afraid the current behavior is deeply flawed and I\u0027d like to see if we could pass app compat tests to get the fix in\n\noh, yeah, i think we\u0027re all in agreement there. hence the suggestion to write the TODO comments (which i see you\u0027ve done) :-)",
      "parentUuid": "63fa937c_b2d92dfe",
      "revId": "043087a3fff78d7682a3728835e2b285e3369b56",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}