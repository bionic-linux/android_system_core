{
  "comments": [
    {
      "key": {
        "uuid": "62deab9c_5a58cef7",
        "filename": "fastboot/engine.cpp",
        "patchSetId": 22
      },
      "lineNbr": 323,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-17T21:31:56Z",
      "side": 1,
      "message": "enh@ mentioned this in a previous patchset, but this copy really should be avoided.  This buffer can be very large so this copy ends up increasing memory usage significantly.  It\u0027d be better if there were a Download() overload that took a pointer and size or if the callers of fb_queue_download() wrote into a std::vector\u003cchar\u003e in the first place.",
      "revId": "f4d16e34d7f13b4db6947fbd16a391916a978ea4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e68fd5b_c9757fb0",
        "filename": "fastboot/engine.cpp",
        "patchSetId": 22
      },
      "lineNbr": 323,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-18T16:23:42Z",
      "side": 1,
      "message": "Ok, I made a temporary Download overload that accepts a C buffer. In a separate patch, I will fix the fastboot tool to pass a vector in the first place, then delete this overload.",
      "parentUuid": "62deab9c_5a58cef7",
      "revId": "f4d16e34d7f13b4db6947fbd16a391916a978ea4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59c611c8_b7c63bcd",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 22
      },
      "lineNbr": 86,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-16T23:35:54Z",
      "side": 1,
      "message": "Do all of these even have callers?  I don\u0027t see a caller for this.",
      "revId": "f4d16e34d7f13b4db6947fbd16a391916a978ea4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03f114b6_62adbc96",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 22
      },
      "lineNbr": 86,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-17T15:20:23Z",
      "side": 1,
      "message": "Many of these will have callers once I submit my updates to engine.cpp. For example, \"fb_queue_erase()\" will queue a call to FastBootDriver::Erase(), \"fb_queue_reboot()\" will queue a FastBootDriver::Reboot() call, etc...\n\nI\u0027m still not sure I understand your comment however. The fastboot protocol (see README.md) defines a way to powerdown the device, so there absolutely should be hooks in libfastboot to do this--regardless of if anyone is currently using this feature. This is the case with all these methods.\n\nIf it was discovered that for some reason in all of Android nobody was using std::vector::pop_back(), would you suggest that std::vector::pop_back() be removed from the std library implementation linked with Android? It seems to me this is effectively what you are suggesting here... I must be misunderstanding you.",
      "parentUuid": "59c611c8_b7c63bcd",
      "revId": "f4d16e34d7f13b4db6947fbd16a391916a978ea4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecd8f14d_521bd896",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 22
      },
      "lineNbr": 86,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-17T20:23:19Z",
      "side": 1,
      "message": "Sorry, that was a bit of an hyper-correction stemming from the engine.cpp classes.  I understand it; you want to define this as an API for everything else to use, so implementing all of these functions is the right way to go.\n\n\u003e If it was discovered that for some reason in all of Android nobody was using std::vector::pop_back(), would you suggest that std::vector::pop_back() be removed from the std library implementation linked with Android? \n\nNot with libc++ since that\u0027s actually a standard, but with the rest of our libraries in system/core, especially the ones that are deprecated but still used, we literally have been doing that.  Unused code bitrots and internal only libraries are easily changed, so it\u0027s best to introduce code only when there\u0027s a clear use case for it / caller of it.",
      "parentUuid": "03f114b6_62adbc96",
      "revId": "f4d16e34d7f13b4db6947fbd16a391916a978ea4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a5c5be0_991031d3",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 22
      },
      "lineNbr": 86,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-18T16:23:42Z",
      "side": 1,
      "message": "No worries. I think there was initially a bit of a misunderstanding of the purpose of this library. As you said, it is intended to be an API for everyone else to use.",
      "parentUuid": "ecd8f14d_521bd896",
      "revId": "f4d16e34d7f13b4db6947fbd16a391916a978ea4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aeeffb0d_0976ce70",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 22
      },
      "lineNbr": 138,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-17T21:31:56Z",
      "side": 1,
      "message": "const auto\u0026 here and in other places.\n\nYou really want the \u0027\u0026\u0027; you get deep copies otherwise.",
      "range": {
        "startLine": 138,
        "startChar": 9,
        "endLine": 138,
        "endChar": 13
      },
      "revId": "f4d16e34d7f13b4db6947fbd16a391916a978ea4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "466db464_843f3522",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 22
      },
      "lineNbr": 138,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-18T16:23:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aeeffb0d_0976ce70",
      "range": {
        "startLine": 138,
        "startChar": 9,
        "endLine": 138,
        "endChar": 13
      },
      "revId": "f4d16e34d7f13b4db6947fbd16a391916a978ea4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7295646_ffa7596d",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 22
      },
      "lineNbr": 274,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-17T21:31:56Z",
      "side": 1,
      "message": "You probably want android::base::WriteFully() here instead to avoid the copy to the std::string as I believe this can be a large buffer too.",
      "revId": "f4d16e34d7f13b4db6947fbd16a391916a978ea4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8be146c7_f0b5eb47",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 22
      },
      "lineNbr": 274,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-18T16:23:42Z",
      "side": 1,
      "message": "Ok, good point. I just switched it to use std::ofstream.",
      "parentUuid": "f7295646_ffa7596d",
      "revId": "f4d16e34d7f13b4db6947fbd16a391916a978ea4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2dae9a4a_121b048a",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 22
      },
      "lineNbr": 352,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-17T21:31:56Z",
      "side": 1,
      "message": "You probably want const std::string\u0026 here otherwise you\u0027ll end up with two copy operations (one since this is by-value and one for the internal copy with operator\u003d); same below.",
      "range": {
        "startLine": 352,
        "startChar": 35,
        "endLine": 352,
        "endChar": 48
      },
      "revId": "f4d16e34d7f13b4db6947fbd16a391916a978ea4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67841e0b_b3ef1f75",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 22
      },
      "lineNbr": 352,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-18T16:23:42Z",
      "side": 1,
      "message": "It refused to compile when I switched it:\n\"candidate function not viable: expects an l-value for 1st argument\"\n\nAlso, I\u0027m pretty sure this way ends up being better. By passing by value, the compiler can use pass by value copy elision, since the argument sub-strings are temporaries that are out of scope after the function call. When the substring are not directly passed as arguments, it should still be able to use move semantics. Then, by passing by value, it now allows the compiler to use move semantics when inserting into the vector or assigning to a string in the lambda. https://engdoc.corp.google.com/eng/doc/devguide/cpp/primer.md#copy-elision",
      "parentUuid": "2dae9a4a_121b048a",
      "range": {
        "startLine": 352,
        "startChar": 35,
        "endLine": 352,
        "endChar": 48
      },
      "revId": "f4d16e34d7f13b4db6947fbd16a391916a978ea4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "563c485f_738e5668",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 22
      },
      "lineNbr": 352,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-18T18:46:04Z",
      "side": 1,
      "message": "\u003e It refused to compile when I switched it:\n\u003e \"candidate function not viable: expects an l-value for 1st argument\"\n\nDid you use `const std::string\u0026` or `std::string\u0026`.  The former shouldn\u0027t have that issue.\n\nThe copy elision sounds good.  I usually explicitly put a std::move() around the parameter since I don\u0027t totally trust the compiler to always elide and \"pass by value then move\" is a bit of an idiom in modern C++.\n\nauto\u0026\u0026 / std::forward is ideal here though it\u0027s a bit overkill and not exactly maintainable syntax since it\u0027s rarely used.",
      "parentUuid": "67841e0b_b3ef1f75",
      "range": {
        "startLine": 352,
        "startChar": 35,
        "endLine": 352,
        "endChar": 48
      },
      "revId": "f4d16e34d7f13b4db6947fbd16a391916a978ea4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52a13b4b_840a5416",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 22
      },
      "lineNbr": 352,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-19T16:02:00Z",
      "side": 1,
      "message": "Ok, I added an explicit std::move.",
      "parentUuid": "563c485f_738e5668",
      "range": {
        "startLine": 352,
        "startChar": 35,
        "endLine": 352,
        "endChar": 48
      },
      "revId": "f4d16e34d7f13b4db6947fbd16a391916a978ea4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2622a670_18e553c1",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 22
      },
      "lineNbr": 366,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-17T21:31:56Z",
      "side": 1,
      "message": "This is unreachable as an else condition, no?  Should be a check that it isn\u0027t \u003e FB_RESPONSE_SZ ?",
      "range": {
        "startLine": 366,
        "startChar": 8,
        "endLine": 366,
        "endChar": 27
      },
      "revId": "f4d16e34d7f13b4db6947fbd16a391916a978ea4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08778ec6_134a6b76",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 22
      },
      "lineNbr": 366,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-18T16:23:42Z",
      "side": 1,
      "message": "This is reachable. The unreachable condition would be the other order: if (r \u003c 4) {} else if (r \u003c 0). Read is guaranteed to never return a block larger then FB_RESPONSE_SZ. \n\nThis code is kinda pointless anyways. This is leftover from protocol.cpp to prevent what used to cause a buffer overrun, since the string compare used to be done on the raw buffer, and would happen if the response was shorter than \"INFO\", \"OKAY\", \"FAIL\", etc... (4 bytes) .",
      "parentUuid": "2622a670_18e553c1",
      "range": {
        "startLine": 366,
        "startChar": 8,
        "endLine": 366,
        "endChar": 27
      },
      "revId": "f4d16e34d7f13b4db6947fbd16a391916a978ea4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "451ed43e_3da0c24e",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 22
      },
      "lineNbr": 366,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-18T18:46:04Z",
      "side": 1,
      "message": "I kept reading that as r \u003c -4 in my mind.  I apparently couldn\u0027t read yesterday.",
      "parentUuid": "08778ec6_134a6b76",
      "range": {
        "startLine": 366,
        "startChar": 8,
        "endLine": 366,
        "endChar": 27
      },
      "revId": "f4d16e34d7f13b4db6947fbd16a391916a978ea4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8480cfa_663fde74",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 22
      },
      "lineNbr": 366,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-19T16:02:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "451ed43e_3da0c24e",
      "range": {
        "startLine": 366,
        "startChar": 8,
        "endLine": 366,
        "endChar": 27
      },
      "revId": "f4d16e34d7f13b4db6947fbd16a391916a978ea4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b392b8d_c8151b60",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 22
      },
      "lineNbr": 372,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-17T21:31:56Z",
      "side": 1,
      "message": "Is rfind what you want?  Your below substr() call isn\u0027t taking the position of where \u0027INFO\u0027 was found, but rather just sets tmp to what follows from INFO.\n\nDo you mean android::base::StartsWith() ?",
      "revId": "f4d16e34d7f13b4db6947fbd16a391916a978ea4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9ae20d4_76c2a895",
        "filename": "fastboot/fastboot_driver.cpp",
        "patchSetId": 22
      },
      "lineNbr": 372,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-18T16:23:42Z",
      "side": 1,
      "message": "Yeah, you are right. I switched it to android::base::StartsWith() .",
      "parentUuid": "0b392b8d_c8151b60",
      "revId": "f4d16e34d7f13b4db6947fbd16a391916a978ea4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a494f8a_5fc2116c",
        "filename": "fastboot/fastboot_driver.h",
        "patchSetId": 22
      },
      "lineNbr": 120,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-16T23:35:54Z",
      "side": 1,
      "message": "I\u0027d just hardcode these into the functions...  There\u0027s no reason to have these as constants.",
      "revId": "f4d16e34d7f13b4db6947fbd16a391916a978ea4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "620620fe_2bc30ecc",
        "filename": "fastboot/fastboot_driver.h",
        "patchSetId": 22
      },
      "lineNbr": 120,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-17T15:20:23Z",
      "side": 1,
      "message": "I actually really disagree with this suggestion. It is bad practice to have a bunch of magic string literals scattered throughout the code and doing it this way makes it far more maintainable... especially if you consider someone could inherit from this class, forcing them to define even more of the same magic string literals.\n\nI am however completely open to suggestions for how to define this constants. Whether that be through macros, a separate header file, static class variables, etc...",
      "parentUuid": "5a494f8a_5fc2116c",
      "revId": "f4d16e34d7f13b4db6947fbd16a391916a978ea4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa6d1472_48591c7b",
        "filename": "fastboot/fastboot_driver.h",
        "patchSetId": 22
      },
      "lineNbr": 120,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-17T20:23:19Z",
      "side": 1,
      "message": "My general rule of thumb is that constants only need broken out into a separate constant if they have more than one user, which except for \u0027FLASH\u0027 these don\u0027t.  Though I guess you want to let subclasses use these which is why you have them as protected.\n\nIn any case this comment is moot now that https://android-review.googlesource.com/c/platform/system/core/+/688447 went in.",
      "parentUuid": "620620fe_2bc30ecc",
      "revId": "f4d16e34d7f13b4db6947fbd16a391916a978ea4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "045be10b_cbe7eb96",
        "filename": "fastboot/fastboot_driver.h",
        "patchSetId": 22
      },
      "lineNbr": 120,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-18T16:23:42Z",
      "side": 1,
      "message": "Yeah, FLASH is used several times, and things could potentially be used more by subclasses.\n\nIt looks like that patch used macros. I think it would be best if macros could be avoided, so that these constants can be put in the fastboot namespace.",
      "parentUuid": "fa6d1472_48591c7b",
      "revId": "f4d16e34d7f13b4db6947fbd16a391916a978ea4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "100aeb8a_61f15c22",
        "filename": "fastboot/fastboot_driver.h",
        "patchSetId": 22
      },
      "lineNbr": 147,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-17T21:31:56Z",
      "side": 1,
      "message": "It\u0027d be better if errors were returned from the commands themselves instead of as a separate callback, especially since I don\u0027t see _error being cleared when a subsequent call succeeds.\n\nThree output parameters may be a bit rough, but you could encompass these all in a struct (either as a return value with Retcode or as an output parameter) if that seemed better.",
      "revId": "f4d16e34d7f13b4db6947fbd16a391916a978ea4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0842ba32_776f3d8b",
        "filename": "fastboot/fastboot_driver.h",
        "patchSetId": 22
      },
      "lineNbr": 147,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-18T16:23:42Z",
      "side": 1,
      "message": "Error is cleared for almost all the methods in RawCommand(). The only missing place where it was not being cleared is at the beginning of the Download() methods, which I just fixed.\n\nYeah, the output parameters are a bit verbose... I\u0027m not sure it is that big of a deal though, because the caller will never have to worry about them due to the default arguments. The only bad thing about this is it makes the header file a bit messy. I think using a struct passed as an argument, to hold only two arguments, will inconvenience the caller too much. I\u0027m not sure though.\n\nDo we want to add another output parameter for error? I think this likely will end up messier, because now there will have to be a ton of nullptr checking on the error output parameter.",
      "parentUuid": "100aeb8a_61f15c22",
      "revId": "f4d16e34d7f13b4db6947fbd16a391916a978ea4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64615b1b_01299632",
        "filename": "fastboot/fastboot_driver.h",
        "patchSetId": 22
      },
      "lineNbr": 147,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-18T18:46:04Z",
      "side": 1,
      "message": "\u003e Error is cleared for almost all the methods in RawCommand(). The only missing place where it was not being cleared is at the beginning of the Download() methods, which I just fixed.\n\nAh, I must have missed that.  Still though, it doesn\u0027t seem good for the driver to maintain this state, since it\u0027s effectively a wrapper around Transport and it would be nice for it to be stateless (excepting Transport itself).  Assuming too that info_cb_ isn\u0027t exactly considered \u0027state\u0027 since it won\u0027t change through the typical commands.\n\nI don\u0027t really have that strong of an opinion here since there are trade-offs with all of the approaches, but I think the struct is the cleanest especially if it is a return value instead of a parameter.\n\nI\u0027m assuming that the struct would contain the output objects themselves and not pointers, so it shouldn\u0027t inconvenience callers.  If anything, callers that care about all of response, info, and error, will only need to declare one thing (the struct).\n\nBut you lose the ability to pass nullptr and skip those writes.  That said, unlike the other writes that I care more about optimizing, it doesn\u0027t seem that the INFO or response strings are particularly large, so copying them unconditionally doesn\u0027t seem to be too bad and the code will be a bit smaller since you\u0027d be able to remove the null checks on them.\n\nIf you return the struct by value, RVO will ensure there\u0027re no copies being made.  But then you couldn\u0027t do things like \n\n  if ((ret \u003d DownloadCommand(size, response, info))) {",
      "parentUuid": "0842ba32_776f3d8b",
      "revId": "f4d16e34d7f13b4db6947fbd16a391916a978ea4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1a889c3_7ff7a71e",
        "filename": "fastboot/fastboot_driver.h",
        "patchSetId": 22
      },
      "lineNbr": 147,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-19T16:02:00Z",
      "side": 1,
      "message": "\u003e Ah, I must have missed that.  Still though, it doesn\u0027t seem good for the driver to maintain this state, since it\u0027s effectively a wrapper around Transport and it would be nice for it to be stateless (excepting Transport itself).  Assuming too that info_cb_ isn\u0027t exactly considered \u0027state\u0027 since it won\u0027t change through the typical commands.\n\nI see your point, but fastboot tool is currently written to use fb_get_error(), which just calls Error(). If we were to change it so error was inside a struct output parameter, then to maintain compatibility with this fb_get_error() function, we would have to store this error string in some global variable in engine.cpp and update it on every fastboot call. But since you don\u0027t want to use a pointer for output params in the struct, this would involve a copy to this global error variable on every fastboot call (or at least a std::move). All this does is move the error state storage to engine.cpp instead of the driver.\n\n\u003e But you lose the ability to pass nullptr and skip those writes.  That said, unlike the other writes that I care more about optimizing, it doesn\u0027t seem that the INFO or response strings are particularly large, so copying them unconditionally doesn\u0027t seem to be too bad and the code will be a bit smaller since you\u0027d be able to remove the null checks on them. If you return the struct by value, RVO will ensure there\u0027re no copies being made.  But then you couldn\u0027t do things like \n\nYeah the response string are pretty small, so the copy would not be a problem. I think loosing easy access to the return code though is not great, especially if you consider the fact that the response and info output parameters are in most cases completely ignored and unused. In fact engine.cpp only uses response for getvar commands. In all the other method calls the default nullptr is passed in. \n\nI think optimizing ease of use for this common case, is more important than making the less common case cleaner.",
      "parentUuid": "64615b1b_01299632",
      "revId": "f4d16e34d7f13b4db6947fbd16a391916a978ea4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "165f57ea_71c33012",
        "filename": "fastboot/fastboot_driver.h",
        "patchSetId": 22
      },
      "lineNbr": 148,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-07-17T21:31:56Z",
      "side": 1,
      "message": "It\u0027s info_cb_ not _info_cb.\n\nhttps://google.github.io/styleguide/cppguide.html#Variable_Names",
      "revId": "f4d16e34d7f13b4db6947fbd16a391916a978ea4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2974352_0e110b26",
        "filename": "fastboot/fastboot_driver.h",
        "patchSetId": 22
      },
      "lineNbr": 148,
      "author": {
        "id": 1336956
      },
      "writtenOn": "2018-07-18T16:23:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "165f57ea_71c33012",
      "revId": "f4d16e34d7f13b4db6947fbd16a391916a978ea4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}