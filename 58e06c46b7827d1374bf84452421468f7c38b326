{
  "comments": [
    {
      "key": {
        "uuid": "c8f0d646_0a0fca41",
        "filename": "fs_mgr/liblp/builder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2020-07-06T22:14:23Z",
      "side": 1,
      "message": "Maybe reuse / deduplicate code in lpdump.cc?",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 47,
        "endChar": 14
      },
      "revId": "58e06c46b7827d1374bf84452421468f7c38b326",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4aabe528_1aa877fe",
        "filename": "fs_mgr/liblp/builder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1088085
      },
      "writtenOn": "2020-07-06T22:20:56Z",
      "side": 1,
      "message": "I thought about that, but may be difficult because that code applies to a different type LpMetadataExtent.",
      "parentUuid": "c8f0d646_0a0fca41",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 47,
        "endChar": 14
      },
      "revId": "58e06c46b7827d1374bf84452421468f7c38b326",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1e08338d_c5c56813",
        "filename": "fs_mgr/liblp/builder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1299,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2020-07-06T22:14:23Z",
      "side": 1,
      "message": "nit: suggest to have a static function instead because this comparison is commutative. e.g.:\n\n  // static\n  bool MetadataBuilder::PartitionExtentsAreEqual(\n    const std::vector\u003cstd::string\u003e\u0026 partitions,\n    const MetadataBuilder\u0026 target_metadata, uint32_t target_slot_number,\n    const MetadataBuilder\u0026 source_metadata, uint32_t source_slot_number) { ... }",
      "range": {
        "startLine": 1296,
        "startChar": 0,
        "endLine": 1299,
        "endChar": 88
      },
      "revId": "58e06c46b7827d1374bf84452421468f7c38b326",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "14da75c4_31bc57d8",
        "filename": "fs_mgr/liblp/builder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1299,
      "author": {
        "id": 1088085
      },
      "writtenOn": "2020-07-06T22:20:56Z",
      "side": 1,
      "message": "ack",
      "parentUuid": "1e08338d_c5c56813",
      "range": {
        "startLine": 1296,
        "startChar": 0,
        "endLine": 1299,
        "endChar": 88
      },
      "revId": "58e06c46b7827d1374bf84452421468f7c38b326",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1fa46b47_388821bb",
        "filename": "fs_mgr/liblp/builder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1333,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2020-07-06T22:14:23Z",
      "side": 1,
      "message": "I think this is fine because MetadataBuilder auto-merges consecutive extents, but technically, [0..1, 1..2, 4..5] is equivalent to [0..2, 4..5], for example.\n\nI\u0027m pretty sure I\u0027ve seen some similar code in payload_generator that handles it properly, but I can\u0027t find it at this moment.",
      "range": {
        "startLine": 1318,
        "startChar": 0,
        "endLine": 1333,
        "endChar": 9
      },
      "revId": "58e06c46b7827d1374bf84452421468f7c38b326",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac3f440c_9d5ca828",
        "filename": "fs_mgr/liblp/builder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1333,
      "author": {
        "id": 1088085
      },
      "writtenOn": "2020-07-06T22:20:56Z",
      "side": 1,
      "message": "I\u0027ll put a TODO. The extent should be identical though as they are copied.",
      "parentUuid": "1fa46b47_388821bb",
      "range": {
        "startLine": 1318,
        "startChar": 0,
        "endLine": 1333,
        "endChar": 9
      },
      "revId": "58e06c46b7827d1374bf84452421468f7c38b326",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c9062a3_4b9f627b",
        "filename": "fs_mgr/liblp/builder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1333,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2020-07-06T22:33:23Z",
      "side": 1,
      "message": "hmm, you are right. In that case maybe just put a comment to say for efficiency, exact equality is checked.",
      "parentUuid": "ac3f440c_9d5ca828",
      "range": {
        "startLine": 1318,
        "startChar": 0,
        "endLine": 1333,
        "endChar": 9
      },
      "revId": "58e06c46b7827d1374bf84452421468f7c38b326",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}