{
  "comments": [
    {
      "key": {
        "uuid": "f148f58f_5aefb70e",
        "filename": "fs_mgr/liblp/images.cpp",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-11-08T16:10:33Z",
      "side": 1,
      "message": "O_CLOEXEC",
      "range": {
        "startLine": 146,
        "startChar": 62,
        "endLine": 146,
        "endChar": 69
      },
      "revId": "643cc87efbc85bc30b4eb1040f3337ad634bef87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83cad7a0_f2923d36",
        "filename": "fs_mgr/liblp/images.cpp",
        "patchSetId": 2
      },
      "lineNbr": 173,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-11-08T16:10:33Z",
      "side": 1,
      "message": "You lack a permission check for writing into the directory, and there is a simpler way to do both (untested):\n\nandroid::base::unique_fd d(open(output_dir.c_str(), O_RDWR | O_CLOEXEC | O_DIRECTORY));\nif (d \u003c 0) {\n    PERROR \u003c\u003c \"Folder required to write split sparse images \" \u003c\u003c output_dir;\n    return false;\n}\nd.reset(-1);",
      "range": {
        "startLine": 165,
        "startChar": 0,
        "endLine": 173,
        "endChar": 5
      },
      "revId": "643cc87efbc85bc30b4eb1040f3337ad634bef87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c090341b_20cfc734",
        "filename": "fs_mgr/liblp/images.cpp",
        "patchSetId": 2
      },
      "lineNbr": 178,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-11-08T16:10:33Z",
      "side": 1,
      "message": "O_CLOEXEC required as per Android security policy, an untimely fork/exec in an application or daemon could leak the file descriptor to an unprivileged process.\n\n(pse audit all usage)",
      "range": {
        "startLine": 178,
        "startChar": 74,
        "endLine": 178,
        "endChar": 81
      },
      "revId": "643cc87efbc85bc30b4eb1040f3337ad634bef87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38e18c6c_88c97250",
        "filename": "fs_mgr/liblp/images.cpp",
        "patchSetId": 2
      },
      "lineNbr": 223,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-11-08T16:10:33Z",
      "side": 1,
      "message": "This math is performed all in uint32_t and can overflow.",
      "range": {
        "startLine": 223,
        "startChar": 12,
        "endLine": 223,
        "endChar": 31
      },
      "revId": "643cc87efbc85bc30b4eb1040f3337ad634bef87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61e747a3_c2a3786b",
        "filename": "fs_mgr/liblp/images.cpp",
        "patchSetId": 2
      },
      "lineNbr": 412,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-11-08T16:10:33Z",
      "side": 1,
      "message": "| O_CLOEXEC",
      "range": {
        "startLine": 412,
        "startChar": 58,
        "endLine": 412,
        "endChar": 66
      },
      "revId": "643cc87efbc85bc30b4eb1040f3337ad634bef87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}