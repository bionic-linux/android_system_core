{
  "comments": [
    {
      "key": {
        "uuid": "f148f58f_5aefb70e",
        "filename": "fs_mgr/liblp/images.cpp",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-11-08T16:10:33Z",
      "side": 1,
      "message": "O_CLOEXEC",
      "range": {
        "startLine": 146,
        "startChar": 62,
        "endLine": 146,
        "endChar": 69
      },
      "revId": "643cc87efbc85bc30b4eb1040f3337ad634bef87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bbadc08c_a233e5ea",
        "filename": "fs_mgr/liblp/images.cpp",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2018-11-08T16:30:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f148f58f_5aefb70e",
      "range": {
        "startLine": 146,
        "startChar": 62,
        "endLine": 146,
        "endChar": 69
      },
      "revId": "643cc87efbc85bc30b4eb1040f3337ad634bef87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "83cad7a0_f2923d36",
        "filename": "fs_mgr/liblp/images.cpp",
        "patchSetId": 2
      },
      "lineNbr": 173,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-11-08T16:10:33Z",
      "side": 1,
      "message": "You lack a permission check for writing into the directory, and there is a simpler way to do both (untested):\n\nandroid::base::unique_fd d(open(output_dir.c_str(), O_RDWR | O_CLOEXEC | O_DIRECTORY));\nif (d \u003c 0) {\n    PERROR \u003c\u003c \"Folder required to write split sparse images \" \u003c\u003c output_dir;\n    return false;\n}\nd.reset(-1);",
      "range": {
        "startLine": 165,
        "startChar": 0,
        "endLine": 173,
        "endChar": 5
      },
      "revId": "643cc87efbc85bc30b4eb1040f3337ad634bef87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8900ca7c_49df6686",
        "filename": "fs_mgr/liblp/images.cpp",
        "patchSetId": 2
      },
      "lineNbr": 173,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2018-11-08T16:24:52Z",
      "side": 1,
      "message": "I think it\u0027s okay to just fail here if the open fails below. This code is only ever run by the build system on the host, so it was more about providing an obvious error message if the build flags are not specified correctly.",
      "parentUuid": "83cad7a0_f2923d36",
      "range": {
        "startLine": 165,
        "startChar": 0,
        "endLine": 173,
        "endChar": 5
      },
      "revId": "643cc87efbc85bc30b4eb1040f3337ad634bef87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a620113_386d6b74",
        "filename": "fs_mgr/liblp/images.cpp",
        "patchSetId": 2
      },
      "lineNbr": 173,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2018-11-08T16:26:55Z",
      "side": 1,
      "message": "\"fail here if the open fails below\" should be: \"fail below when the open for writing fails\"",
      "parentUuid": "8900ca7c_49df6686",
      "range": {
        "startLine": 165,
        "startChar": 0,
        "endLine": 173,
        "endChar": 5
      },
      "revId": "643cc87efbc85bc30b4eb1040f3337ad634bef87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "267f48a4_ff23bafa",
        "filename": "fs_mgr/liblp/images.cpp",
        "patchSetId": 2
      },
      "lineNbr": 173,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-11-08T16:44:42Z",
      "side": 1,
      "message": "It was about KISS and less complicated code, but it can also be about atomicity. I know this is on host were the security concerns might be less, processes tend to be ordered and single threaded, but it this path _ever_ was executed on Android we would be worried about an attack vector.\n\nIn our libraries we tend towards adding O_NOFOLLOW in the open above, and dropping the above d.reset(-1) to utilize the file descriptor below:\n\n    std::string path \u003d \"super_\" + name + \".img\";\n    android::base::unique_fd fd(openat(d, path.c_str(), O_CREATE | O_RDWR | O_TRUNC | O_CLOEXEC, 0644));\n\nWhich will make sure we target the original directory found at the top, not a replacement that happens to show up afterwards (eg: /dev symbolically linked to the above directory). I understand that there is a _lot_ of paranoia in this adjustment, but it is not as if it has become more complicated or harder to maintain in the future. In fact, if someone found an attack vector using this code, I could argue that is harder to maintain ;-\u003e",
      "parentUuid": "4a620113_386d6b74",
      "range": {
        "startLine": 165,
        "startChar": 0,
        "endLine": 173,
        "endChar": 5
      },
      "revId": "643cc87efbc85bc30b4eb1040f3337ad634bef87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c090341b_20cfc734",
        "filename": "fs_mgr/liblp/images.cpp",
        "patchSetId": 2
      },
      "lineNbr": 178,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-11-08T16:10:33Z",
      "side": 1,
      "message": "O_CLOEXEC required as per Android security policy, an untimely fork/exec in an application or daemon could leak the file descriptor to an unprivileged process.\n\n(pse audit all usage)",
      "range": {
        "startLine": 178,
        "startChar": 74,
        "endLine": 178,
        "endChar": 81
      },
      "revId": "643cc87efbc85bc30b4eb1040f3337ad634bef87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9b36678_ee913dda",
        "filename": "fs_mgr/liblp/images.cpp",
        "patchSetId": 2
      },
      "lineNbr": 178,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2018-11-08T16:30:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c090341b_20cfc734",
      "range": {
        "startLine": 178,
        "startChar": 74,
        "endLine": 178,
        "endChar": 81
      },
      "revId": "643cc87efbc85bc30b4eb1040f3337ad634bef87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "38e18c6c_88c97250",
        "filename": "fs_mgr/liblp/images.cpp",
        "patchSetId": 2
      },
      "lineNbr": 223,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-11-08T16:10:33Z",
      "side": 1,
      "message": "This math is performed all in uint32_t and can overflow.",
      "range": {
        "startLine": 223,
        "startChar": 12,
        "endLine": 223,
        "endChar": 31
      },
      "revId": "643cc87efbc85bc30b4eb1040f3337ad634bef87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4133f84_20e5a97e",
        "filename": "fs_mgr/liblp/images.cpp",
        "patchSetId": 2
      },
      "lineNbr": 223,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2018-11-08T16:24:52Z",
      "side": 1,
      "message": "Thanks, good catch - sparse files can\u0027t have more than 2^32 blocks but they can have more than 2^32 bytes.",
      "parentUuid": "38e18c6c_88c97250",
      "range": {
        "startLine": 223,
        "startChar": 12,
        "endLine": 223,
        "endChar": 31
      },
      "revId": "643cc87efbc85bc30b4eb1040f3337ad634bef87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61e747a3_c2a3786b",
        "filename": "fs_mgr/liblp/images.cpp",
        "patchSetId": 2
      },
      "lineNbr": 412,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-11-08T16:10:33Z",
      "side": 1,
      "message": "| O_CLOEXEC",
      "range": {
        "startLine": 412,
        "startChar": 58,
        "endLine": 412,
        "endChar": 66
      },
      "revId": "643cc87efbc85bc30b4eb1040f3337ad634bef87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6feeb47_9ae6815c",
        "filename": "fs_mgr/liblp/images.cpp",
        "patchSetId": 2
      },
      "lineNbr": 412,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2018-11-08T16:30:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "61e747a3_c2a3786b",
      "range": {
        "startLine": 412,
        "startChar": 58,
        "endLine": 412,
        "endChar": 66
      },
      "revId": "643cc87efbc85bc30b4eb1040f3337ad634bef87",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}