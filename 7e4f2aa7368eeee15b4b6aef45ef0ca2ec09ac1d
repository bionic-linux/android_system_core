{
  "comments": [
    {
      "key": {
        "uuid": "b70993f3_e5fa043e",
        "filename": "libmeminfo/libdmabufinfo/tools/dmabuf_dump.cpp",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-06-26T15:16:52Z",
      "side": 1,
      "message": "why not just output it directly?",
      "revId": "7e4f2aa7368eeee15b4b6aef45ef0ca2ec09ac1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8adbf27f_3abe99ad",
        "filename": "libmeminfo/libdmabufinfo/tools/dmabuf_dump.cpp",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-06-26T16:00:21Z",
      "side": 1,
      "message": "It\u0027d make sense to me to build up the string if this function returned the string, so that you can test the formatting.",
      "parentUuid": "b70993f3_e5fa043e",
      "revId": "7e4f2aa7368eeee15b4b6aef45ef0ca2ec09ac1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4718a140_efd255fc",
        "filename": "libmeminfo/libdmabufinfo/tools/dmabuf_dump.cpp",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2019-06-27T01:02:06Z",
      "side": 1,
      "message": "I just don\u0027t like the part where if something goes wrong while doing the rest of the things below, we end up having just a header on the screen.\nTom\u0027s point well taken though, I\u0027ll re-arrange this.",
      "parentUuid": "8adbf27f_3abe99ad",
      "revId": "7e4f2aa7368eeee15b4b6aef45ef0ca2ec09ac1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87a687a3_55f09628",
        "filename": "libmeminfo/libdmabufinfo/tools/dmabuf_dump.cpp",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2019-06-27T01:17:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4718a140_efd255fc",
      "revId": "7e4f2aa7368eeee15b4b6aef45ef0ca2ec09ac1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be875c33_dad2ab30",
        "filename": "libmeminfo/libdmabufinfo/tools/dmabuf_dump.cpp",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-06-26T15:16:52Z",
      "side": 1,
      "message": "same for the other two...",
      "revId": "7e4f2aa7368eeee15b4b6aef45ef0ca2ec09ac1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e93aa62b_47d8f4b0",
        "filename": "libmeminfo/libdmabufinfo/tools/dmabuf_dump.cpp",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2019-06-27T01:17:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "be875c33_dad2ab30",
      "revId": "7e4f2aa7368eeee15b4b6aef45ef0ca2ec09ac1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "437927ad_15d2b038",
        "filename": "libmeminfo/libdmabufinfo/tools/dmabuf_dump.cpp",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-06-26T15:16:52Z",
      "side": 1,
      "message": "one more year until C++20 and we\u0027ll be able to say `buf.fdrefs().contains(pid)`...",
      "revId": "7e4f2aa7368eeee15b4b6aef45ef0ca2ec09ac1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ce7471a_24b2ad10",
        "filename": "libmeminfo/libdmabufinfo/tools/dmabuf_dump.cpp",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-06-26T16:00:21Z",
      "side": 1,
      "message": ".count(pid) \u003d\u003d 1 is possible now too.\n\nThough it looks like you\u0027re actually using this value below with fdrefs().at(pid), so you could keep around the iterator instead of calling .at().  \n\nThough, count() / at() is probably cleaner to read, and I doubt the cost of looking through the list twice matters here.",
      "parentUuid": "437927ad_15d2b038",
      "revId": "7e4f2aa7368eeee15b4b6aef45ef0ca2ec09ac1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c27da5d_d7191327",
        "filename": "libmeminfo/libdmabufinfo/tools/dmabuf_dump.cpp",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2019-06-27T01:02:06Z",
      "side": 1,
      "message": "I actually had .contains() here before and then I found out about c++20 :).\nAck Tom, count() and at() is indeed more readable..",
      "parentUuid": "1ce7471a_24b2ad10",
      "revId": "7e4f2aa7368eeee15b4b6aef45ef0ca2ec09ac1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ccf25959_6225b495",
        "filename": "libmeminfo/libdmabufinfo/tools/dmabuf_dump.cpp",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2019-06-27T01:17:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3c27da5d_d7191327",
      "revId": "7e4f2aa7368eeee15b4b6aef45ef0ca2ec09ac1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a46a2302_caba88a0",
        "filename": "libmeminfo/libdmabufinfo/tools/dmabuf_dump.cpp",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-06-26T15:16:52Z",
      "side": 1,
      "message": "do you need this? shouldn\u0027t value initialization mean that you can always just +\u003d?\n\n+tomcherry",
      "revId": "7e4f2aa7368eeee15b4b6aef45ef0ca2ec09ac1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "085d69a4_913875e2",
        "filename": "libmeminfo/libdmabufinfo/tools/dmabuf_dump.cpp",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-06-26T16:00:21Z",
      "side": 1,
      "message": "+1 you should be fine here with just +\u003d.",
      "parentUuid": "a46a2302_caba88a0",
      "revId": "7e4f2aa7368eeee15b4b6aef45ef0ca2ec09ac1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a57b86d_febc0e8f",
        "filename": "libmeminfo/libdmabufinfo/tools/dmabuf_dump.cpp",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2019-06-27T01:02:06Z",
      "side": 1,
      "message": "this is where my c++ knowledge fails me, \"+\u003d\" to it is. make is much more clean.",
      "parentUuid": "085d69a4_913875e2",
      "revId": "7e4f2aa7368eeee15b4b6aef45ef0ca2ec09ac1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7864878a_949a30e9",
        "filename": "libmeminfo/libdmabufinfo/tools/dmabuf_dump.cpp",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2019-06-27T01:17:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2a57b86d_febc0e8f",
      "revId": "7e4f2aa7368eeee15b4b6aef45ef0ca2ec09ac1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}