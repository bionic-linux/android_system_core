{
  "comments": [
    {
      "key": {
        "uuid": "44141a88_cd104117",
        "filename": "fs_mgr/fs_mgr_slotselect.c",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1045980
      },
      "writtenOn": "2015-09-03T20:46:11Z",
      "side": 1,
      "message": "Is it possible to use get_bootloader_message instead?",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 70,
        "endChar": 1
      },
      "revId": "0e5566d6db1e3946248b3b89e5421a80566184d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6492fe15_3fbf7a99",
        "filename": "fs_mgr/fs_mgr_slotselect.c",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1045980
      },
      "writtenOn": "2015-09-03T20:46:11Z",
      "side": 1,
      "message": "No need to keep these around forever. I\u0027d either pass in a buffer to use, or allocate one here.",
      "range": {
        "startLine": 74,
        "startChar": 4,
        "endLine": 75,
        "endChar": 31
      },
      "revId": "0e5566d6db1e3946248b3b89e5421a80566184d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0484e2ca_d343e8db",
        "filename": "fs_mgr/fs_mgr_slotselect.c",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 1045980
      },
      "writtenOn": "2015-09-03T20:46:11Z",
      "side": 1,
      "message": "I don\u0027t think we actually disallow an empty suffix, so long as it\u0027s different than the other suffix. I\u0027d suggest having NULL as the default, but that doesn\u0027t actually work with the current implementation of property_get. I think __system_property_find will get you that information, but I\u0027ll look into if that\u0027s what we want to do here.",
      "range": {
        "startLine": 84,
        "startChar": 4,
        "endLine": 84,
        "endChar": 29
      },
      "revId": "0e5566d6db1e3946248b3b89e5421a80566184d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0484e2ca_b3e50450",
        "filename": "fs_mgr/fs_mgr_slotselect.c",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1045980
      },
      "writtenOn": "2015-09-03T20:46:11Z",
      "side": 1,
      "message": "This mallocs a string that we never free.",
      "range": {
        "startLine": 109,
        "startChar": 13,
        "endLine": 109,
        "endChar": 26
      },
      "revId": "0e5566d6db1e3946248b3b89e5421a80566184d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "644d9e85_823d2baa",
        "filename": "fs_mgr/fs_mgr_slotselect.c",
        "patchSetId": 1
      },
      "lineNbr": 127,
      "author": {
        "id": 1045980
      },
      "writtenOn": "2015-09-03T20:46:11Z",
      "side": 1,
      "message": "This error should be reported back. This should not be void",
      "range": {
        "startLine": 127,
        "startChar": 20,
        "endLine": 127,
        "endChar": 64
      },
      "revId": "0e5566d6db1e3946248b3b89e5421a80566184d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}