{
  "comments": [
    {
      "key": {
        "uuid": "1b3cdc21_f0a95205",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 1
      },
      "lineNbr": 183,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2019-07-31T21:27:23Z",
      "side": 1,
      "message": "This is getting to be pretty hard to follow. Would it simplify things to factor out a function that first finds the accurate blk_device? This could be done via access() rather than re-testing fs_mgr_has_shared_blocks each time, and then we\u0027d only have to test for shared blocks once.",
      "revId": "e5aa1faebe798850b31ce7a150bcaac038f0f2b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2f03123_5763a51e",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 1
      },
      "lineNbr": 183,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2019-07-31T21:48:35Z",
      "side": 1,
      "message": "statvfs(2) is effectively, and with the same cost, doing the access(2) check at the beginning of fs_mgr_has_shared_blocks, ENOENT returned indicates an access failure. I would not change the code (165-188) one bit (not even an indent saved) if moved to a subroutine.\n\nI am expecting also that we need to deprecate this fragment once O legacy devices system-as-root are no longer supported.",
      "parentUuid": "1b3cdc21_f0a95205",
      "revId": "e5aa1faebe798850b31ce7a150bcaac038f0f2b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b8b0c5f_0dadcff7",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 1
      },
      "lineNbr": 183,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2019-08-08T18:55:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b2f03123_5763a51e",
      "revId": "e5aa1faebe798850b31ce7a150bcaac038f0f2b7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}