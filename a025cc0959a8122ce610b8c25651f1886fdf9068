{
  "comments": [
    {
      "key": {
        "uuid": "8df0b51c_6aa85f23",
        "filename": "init/selinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 606,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-03-23T15:35:55Z",
      "side": 1,
      "message": "One unfortunate fact is that we don\u0027t have access to the fstab in the first stage ramdisk/recovery ramdisk at this point.  We\u0027re relying on vendors to use the same fstab in that partition and their vendor partition, otherwise we may try to mount partitions that have already been taken care of.\n\nI don\u0027t see fs_mgr_do_mount_one() failing gracefully in that case.  Could we try to identify this / protect against it?  Or can we otherwise check that the vendor and ramdisk fstabs are equivalent?  We could check that in first stage init maybe?",
      "revId": "a025cc0959a8122ce610b8c25651f1886fdf9068",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fee96023_36ce6edc",
        "filename": "init/selinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 606,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2020-03-24T01:49:17Z",
      "side": 1,
      "message": "If we do the check in first-stage, what would that error look like? (Would it be fatal?)\n\nAlternately, could we fallback to checking in /proc/mounts?",
      "parentUuid": "8df0b51c_6aa85f23",
      "revId": "a025cc0959a8122ce610b8c25651f1886fdf9068",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9f34801_e1f8f399",
        "filename": "init/selinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 606,
      "author": {
        "id": 1061057
      },
      "writtenOn": "2020-03-24T08:27:19Z",
      "side": 1,
      "message": "Does it make sense to create the fstab entries based on the the partition info in the super image header? This can be done in the first stage, together with the skip_mount logic, I think.",
      "parentUuid": "fee96023_36ce6edc",
      "revId": "a025cc0959a8122ce610b8c25651f1886fdf9068",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a6becfb_8d41a285",
        "filename": "init/selinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 606,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-03-24T15:40:14Z",
      "side": 1,
      "message": "\u003e If we do the check in first-stage, what would that error look like? (Would it be fatal?)\n\nI think it would need to be fatal, so you\u0027re right; this is probably not a good idea.\n\n\u003e Alternately, could we fallback to checking in /proc/mounts?\n\nThat seems sensible to me.  No one should be mounting /system_ext in second stage init, so if we don\u0027t see it in /proc/mounts by this point, then that is a good trigger for us to mount it ourselves.\n\n\u003e This can be done in the first stage...\n\nThe big deal breaker in that approach is that first stage init is vendor owned, whereas we want this logic in a google owned/updated component.",
      "parentUuid": "c9f34801_e1f8f399",
      "revId": "a025cc0959a8122ce610b8c25651f1886fdf9068",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "747e874e_e4e3ae8e",
        "filename": "init/selinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 606,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2020-03-25T05:26:36Z",
      "side": 1,
      "message": "Thanks, I\u0027ve added a check against /proc/mounts.",
      "parentUuid": "0a6becfb_8d41a285",
      "revId": "a025cc0959a8122ce610b8c25651f1886fdf9068",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45139a39_175fe6a7",
        "filename": "init/selinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 612,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-03-23T15:35:55Z",
      "side": 1,
      "message": "I wonder if we could put this list of partitions into a file on /system, similar to skip_mount.cfg.  I could imagine that, similar to the reason behind skip_mount.cfg in the first place, that there\u0027ll be cases where we don\u0027t want to mount this and having to change init for that is not desirable.",
      "revId": "a025cc0959a8122ce610b8c25651f1886fdf9068",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ebbc7e11_280a72ce",
        "filename": "init/selinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 612,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2020-03-24T01:49:17Z",
      "side": 1,
      "message": "Would we want to package this in all cases, or only package it with GSIs like skip_mount.cfg?",
      "parentUuid": "45139a39_175fe6a7",
      "revId": "a025cc0959a8122ce610b8c25651f1886fdf9068",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80035658_2813de2f",
        "filename": "init/selinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 612,
      "author": {
        "id": 1061057
      },
      "writtenOn": "2020-03-24T08:27:19Z",
      "side": 1,
      "message": "GSI doesn\u0027t need this as it already has skip_mount.cfg. This cfg file will be needed by any other target (like CF) that builds multiple system images (namely system, system_ext and product) and needs to run on old vendor implementations.\n\nBTW, we should also include \"product\" for the general problem this CL is trying to solve. Although product is not new, it has not been mandatory.",
      "parentUuid": "ebbc7e11_280a72ce",
      "revId": "a025cc0959a8122ce610b8c25651f1886fdf9068",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b40b0f1f_7c405f3a",
        "filename": "init/selinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 612,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2020-03-24T09:58:54Z",
      "side": 1,
      "message": "For skip_mount.cfg, we added it as a Android.mk module.\n\nhttps://cs.android.com/android/platform/superproject/+/master:build/make/target/product/gsi/Android.mk;l\u003d180\n\nAnd only GSI includes it.\nhttps://cs.android.com/android/platform/superproject/+/master:build/make/target/product/gsi_release.mk;l\u003d48\n\nMaybe we can have \u0027force_mount.cfg\u0027 as well?  And any OEMs who need \u0027system-only\u0027 OTA can include this file in device/\u003ccompany\u003e/device.mk?\n\nhttps://cs.android.com/search?q\u003dPRODUCT_PACKAGES%20f:device%2F*\u0026sq\u003d\n\nJust to be clear, GSI needs skip_mount.cfg but cannot have force_mount.cfg.\n\nps: GSI \u003d CSI + GSI-specific /system_ext, where GSI is used for VTS/CTS-on-GSI compliance.\nOTOH, CSI is common system image and can be used by other devices. e.g., Pixel devices have CSI + Pixel-specific system_ext.img.\n\nhttps://docs.google.com/document/d/1bsuBe3nM1rcWVQXu7qXgYtyeBSOLCq8KfLocyI81b24/edit#heading\u003dh.xhea9g49b8qs",
      "parentUuid": "ebbc7e11_280a72ce",
      "revId": "a025cc0959a8122ce610b8c25651f1886fdf9068",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a740ba17_ce31fbe5",
        "filename": "init/selinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 612,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-03-24T15:40:14Z",
      "side": 1,
      "message": "force_mount.cfg sounds good to me.  I\u0027l defer to you if it\u0027s actually required; it was just a thought on my side.",
      "parentUuid": "b40b0f1f_7c405f3a",
      "revId": "a025cc0959a8122ce610b8c25651f1886fdf9068",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95e022bf_a8ba29c1",
        "filename": "init/selinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 612,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2020-03-25T05:26:36Z",
      "side": 1,
      "message": "Given the comments it sounds like force_mount.cfg won\u0027t work, so I\u0027ll keep the hardcoded list here. (and add product)",
      "parentUuid": "a740ba17_ce31fbe5",
      "revId": "a025cc0959a8122ce610b8c25651f1886fdf9068",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a537ba5_ed5475d6",
        "filename": "init/selinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 627,
      "author": {
        "id": 1061057
      },
      "writtenOn": "2020-03-23T07:16:01Z",
      "side": 1,
      "message": "This doesn\u0027t need to be in the for loop, I think.",
      "range": {
        "startLine": 619,
        "startChar": 8,
        "endLine": 627,
        "endChar": 9
      },
      "revId": "a025cc0959a8122ce610b8c25651f1886fdf9068",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e0e74af_82e3e258",
        "filename": "init/selinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 627,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-03-23T15:35:55Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "7a537ba5_ed5475d6",
      "range": {
        "startLine": 619,
        "startChar": 8,
        "endLine": 627,
        "endChar": 9
      },
      "revId": "a025cc0959a8122ce610b8c25651f1886fdf9068",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37127e9a_cf75522c",
        "filename": "init/selinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 627,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2020-03-24T01:49:17Z",
      "side": 1,
      "message": "I have it in the loop because this code will only hit on mixed-build tests. Having the logging here makes it more accurate and less spammy. However if we move the partition list to a GSI-only .cfg file, moving it out should be fine.",
      "parentUuid": "5e0e74af_82e3e258",
      "range": {
        "startLine": 619,
        "startChar": 8,
        "endLine": 627,
        "endChar": 9
      },
      "revId": "a025cc0959a8122ce610b8c25651f1886fdf9068",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65ab1ebb_38a709f3",
        "filename": "init/selinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 660,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2020-03-23T05:37:17Z",
      "side": 1,
      "message": "How about adding some comments above?\n\ne.g.,\n// This is for R system.img/system_ext.img to work on old vendor.img as system_ext.img\n// is introduced in R. We mount system_ext in second stage init because the first-stage\n// init in boot.img won\u0027t be updated in the system-only OTA scenario. \n\nAlso, can we honor \"/system/system_ext/etc/init/config/skip_mount.cfg\" and skip the force_mount of system_ext if it\u0027s present in that file?  GSI images include a \"skip_mount.cfg\" to tell init skip mounting /product and /system_ext. Otherwise, an OEM device might fail to boot a GSI image because OEM\u0027s /system_ext content is not compatible with GSI\u0027s /system.\n\nhttps://cs.android.com/android/_/android/platform/system/core/+/fffdd1ab1a3248c48ea66bfeed7945c94efd1b87:fs_mgr/fs_mgr_fstab.cpp;l\u003d732;drc\u003d30b0c01dd815255e3f0074df6f7fc783c8c3947c\n\nhttps://cs.android.com/android/platform/superproject/+/master:build/make/target/product/gsi/gsi_skip_mount.cfg?q\u003dskip_mount.cfg",
      "range": {
        "startLine": 660,
        "startChar": 4,
        "endLine": 660,
        "endChar": 35
      },
      "revId": "a025cc0959a8122ce610b8c25651f1886fdf9068",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf4251de_3d1401d8",
        "filename": "init/selinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 660,
      "author": {
        "id": 1061057
      },
      "writtenOn": "2020-03-23T07:16:01Z",
      "side": 1,
      "message": "Can we move this out of selinux.cpp? Maybe before SetupSelinux()?",
      "parentUuid": "65ab1ebb_38a709f3",
      "range": {
        "startLine": 660,
        "startChar": 4,
        "endLine": 660,
        "endChar": 35
      },
      "revId": "a025cc0959a8122ce610b8c25651f1886fdf9068",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e32156b_50750d6b",
        "filename": "init/selinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 660,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-03-23T15:35:55Z",
      "side": 1,
      "message": "+1 to comments and to trying to honor skip_mount.\n\nI\u0027m happy to leave this code in selinux.cpp.  I think maybe we should rename this file to be clearer that it will contain the entirety of the \u0027selinux setup phase\u0027 of init, which is really the 1.5th stage of init.\n\nIt should go later in this file though, after `boot_clock::time_point start_time \u003d boot_clock::now();` so that we both get the protection of the reboot signal handlers and can track the boot time impact of this.",
      "parentUuid": "bf4251de_3d1401d8",
      "range": {
        "startLine": 660,
        "startChar": 4,
        "endLine": 660,
        "endChar": 35
      },
      "revId": "a025cc0959a8122ce610b8c25651f1886fdf9068",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64cf2bde_4c7f2928",
        "filename": "init/selinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 660,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2020-03-24T01:49:17Z",
      "side": 1,
      "message": "Ack, will move the call after boot_clock. FWIW it\u0027s difficult to move out of selinux.cpp without adding another .cpp/.h file to house it. And if it\u0027s before SetupSelinux you lose logging.\n\nBowgo, thanks, I\u0027ll add your suggested comment, as well as a call to SkipMountingPartitions.",
      "parentUuid": "1e32156b_50750d6b",
      "range": {
        "startLine": 660,
        "startChar": 4,
        "endLine": 660,
        "endChar": 35
      },
      "revId": "a025cc0959a8122ce610b8c25651f1886fdf9068",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}