{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fdfbe189_56ccce5a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1041813
      },
      "writtenOn": "2023-04-06T19:53:49Z",
      "side": 1,
      "message": "Hi, Alexander\n\nJust curious what different actions would be taken between the 32bit and 64bit platforms in the future, there is one x15 devboard which is a arm32 bit platform, not sure if that will be affected in the the future.",
      "revId": "7a84c707eb9b27bedba5131075aa79b52b5e2ffc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b1e804d6_e5457c37",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1084624
      },
      "writtenOn": "2023-04-17T12:49:34Z",
      "side": 1,
      "message": "\u003e Hi, Alexander\n\u003e \n\u003e Just curious what different actions would be taken between the 32bit and 64bit platforms in the future, there is one x15 devboard which is a arm32 bit platform, not sure if that will be affected in the the future.\n\nHi Yongqin,\n\nThe use-case for this property is KFENCE, which is only supported by 64-bit kernels. 32-bit platforms do not want to set up the collection of KFENCE error reports in the userspace to save memory, so they can use ro.kernel.bitness to decide.",
      "parentUuid": "fdfbe189_56ccce5a",
      "revId": "7a84c707eb9b27bedba5131075aa79b52b5e2ffc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8dfefc3f_bdbc639b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-04-17T14:14:06Z",
      "side": 1,
      "message": "is this worth doing in init at all? just check if TARGET_ARCH is arm or x86 in the build system instead? (i don\u0027t remember exactly, but there\u0027s a way to add system properties in the build --- we do it for ro.debuggable. yeah, `ADDITIONAL_SYSTEM_PROPERTIES +\u003d ` should do it?)",
      "parentUuid": "b1e804d6_e5457c37",
      "revId": "7a84c707eb9b27bedba5131075aa79b52b5e2ffc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8580a92e_d71a3060",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1084624
      },
      "writtenOn": "2023-04-17T14:23:42Z",
      "side": 1,
      "message": "This might work, but is TARGET_ARCH the one we are looking for?\nIn the case of a 32-bit userspace on top of a 64-bit kernel, what the value of TARGET_ARCH will be?",
      "parentUuid": "8dfefc3f_bdbc639b",
      "revId": "7a84c707eb9b27bedba5131075aa79b52b5e2ffc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51a7751a_f821fffd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-04-17T14:38:15Z",
      "side": 1,
      "message": "ah, +ccross because that might be something the build system doesn\u0027t even know.\n\ndoes the header of the kernel image tell you whether it\u0027s 32- or 64-bit? (in case you end up looking at that at build time.)",
      "parentUuid": "8580a92e_d71a3060",
      "revId": "7a84c707eb9b27bedba5131075aa79b52b5e2ffc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88dec9e6_b4d1977e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2023-04-17T18:37:27Z",
      "side": 1,
      "message": "The build doesn\u0027t know the kernel architecture, it\u0027s just a prebuilt blob to the build system.  I don\u0027t think the build system should be in the business of determining the kernel architecture either, kernels can be packaged and/or compressed in a variety of ways, including as a prebuilt boot image.\n\nRather than making assumptions based on 32-bit vs. 64-bit kernels though would it be better for whatever is setting up kfence reports to probe if kfence is enabled and disable itself if not?",
      "parentUuid": "51a7751a_f821fffd",
      "revId": "7a84c707eb9b27bedba5131075aa79b52b5e2ffc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2e0d63d_b88d140c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1084624
      },
      "writtenOn": "2023-04-18T09:20:02Z",
      "side": 1,
      "message": "\u003e Rather than making assumptions based on 32-bit vs. 64-bit kernels though would it be better for whatever is setting up kfence reports to probe if kfence is enabled and disable itself if not?\n\nWe need to check for both KFENCE and KASAN (because KASAN uses the same reporting logic), and KFENCE is STRONGLY RECOMMENDED for all new 64-bit kernels anyway, so it\u0027s a good heuristic.\nWe could instead introduce ro.kernel.has_kfence (true if CONFIG_KFENCE\u003dy) and ro.kernel.has_kasan (true if CONFIG_KASAN\u003dy), but I thought those are too specific to be supported in the long term.\n\nRight now systems with 32-bit userspace have reporting collection disabled, and those with 64-bit userspace have it enabled (this is based on the `ro.product.cpu.abilist` here: https://cs.android.com/android/platform/superproject/+/master:system/core/rootdir/init.rc;l\u003d648)\nThe problem we are trying to solve is that systems with 64-bit kernels and 32-bit userspace also want the reporting to work, so having it depend on the kernel bitness makes more sense.",
      "parentUuid": "88dec9e6_b4d1977e",
      "revId": "7a84c707eb9b27bedba5131075aa79b52b5e2ffc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f45e449_5cf1e30f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2023-04-18T19:38:52Z",
      "side": 1,
      "message": "I\u0027m not suggesting adding more specific properties, I\u0027m suggesting moving the complicated conditionals out of the init.rc file.  For example, you could have a oneshot service started by init that does the configuration on devices that support it or skips it on devices that don\u0027t support it.  Then you can remove all the complicated init.rc logic for kernel versions, 64-bit, etc.",
      "parentUuid": "d2e0d63d_b88d140c",
      "revId": "7a84c707eb9b27bedba5131075aa79b52b5e2ffc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}