{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7203695b_29e08ebe",
        "filename": "debuggerd/proto/Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-12-02T17:00:04Z",
      "side": 1,
      "message": "is there any precedent for a naming convention here? i\u0027m surprised to not see \"proto\" or \"pb\" or something in the name?",
      "range": {
        "startLine": 2,
        "startChar": 11,
        "endLine": 2,
        "endChar": 23
      },
      "revId": "ea81c85cfbda3ec690559cceb38972cf3593de0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad9f691d_f558c00d",
        "filename": "debuggerd/proto/tombstone.proto",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-12-02T18:12:40Z",
      "side": 1,
      "message": "shouldn\u0027t we be slapping `optional` pretty much everywhere?",
      "revId": "ea81c85cfbda3ec690559cceb38972cf3593de0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cdc6c23a_9dbbad91",
        "filename": "debuggerd/proto/tombstone.proto",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-12-02T18:30:19Z",
      "side": 1,
      "message": "can we add dev notes here? `repeated string developer_notes`",
      "revId": "ea81c85cfbda3ec690559cceb38972cf3593de0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79996659_af6c97c7",
        "filename": "debuggerd/proto/tombstone.proto",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-12-02T18:30:19Z",
      "side": 1,
      "message": "shouldn\u0027t this be `uint64`?\n\n@pcc - would you encode the fault address tag in these bits, or would you provide another field?",
      "revId": "ea81c85cfbda3ec690559cceb38972cf3593de0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1767389b_ed11dce4",
        "filename": "debuggerd/proto/tombstone.proto",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2020-12-03T02:59:58Z",
      "side": 1,
      "message": "It\u0027s fine to provide the tag here. The reason why we considered having it be separate in the kernel was related to backwards compatibility reasons that don\u0027t apply here (i.e. the concern was that old consumers might not understand the tag, but since this proto is new we can just ensure that all consumers understand the tag).",
      "parentUuid": "79996659_af6c97c7",
      "revId": "ea81c85cfbda3ec690559cceb38972cf3593de0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f08c589_976876a4",
        "filename": "debuggerd/proto/tombstone.proto",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-12-02T18:30:19Z",
      "side": 1,
      "message": "we should shove some more info in here.\n\nmessage Thread {\n  repeated Register registers \u003d 1;\n  repeated BacktraceFrame current_backtrace \u003d 2;\n  repeated BacktraceFrame thread_creation_backtrace \u003d 3;\n  optional uint64 tls_start \u003d 4;\n  optional uint64 tls_end \u003d 5;\n  optional uint64 stack_top \u003d 6;\n  optional uint64 stack_bottom \u003d 7;\n  optional uint64 thread_id \u003d 8;\n}",
      "revId": "ea81c85cfbda3ec690559cceb38972cf3593de0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "231be5ff_44b2400b",
        "filename": "debuggerd/proto/tombstone.proto",
        "patchSetId": 2
      },
      "lineNbr": 79,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2020-12-02T20:51:49Z",
      "side": 1,
      "message": "This does not fit the MTE memory dump, see aosp/1367537.\nAlso, this message is unused.\nNot sure what is the best way to represent the tags in MemoryDump, perhaps they can be simply a separate instance of MemoryDump (i.e. Tombstone could include\n  repeated MemoryDump memory_dump;\n  repeated MemoryDump tag_dump;\n)? Or simply add \"bytes tags \u003d 5\".\n\nRegister should be repeated, as it is pretty common to have multiple registers with the same value. Even better, both register and mapping_name can be omitted as this info can be inferred from other tombstone fields. This format would require more processing before presentation though.",
      "revId": "ea81c85cfbda3ec690559cceb38972cf3593de0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f357ce7e_1f3ee420",
        "filename": "debuggerd/proto/tombstone.proto",
        "patchSetId": 2
      },
      "lineNbr": 79,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2020-12-03T02:59:58Z",
      "side": 1,
      "message": "I would prefer to add a \"bytes tags\" field to avoid redundant information in the dump format and needing to match them together.",
      "parentUuid": "231be5ff_44b2400b",
      "revId": "ea81c85cfbda3ec690559cceb38972cf3593de0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad4a0036_3f6a70b0",
        "filename": "debuggerd/proto/tombstone.proto",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2020-12-02T20:51:49Z",
      "side": 1,
      "message": "bool mte // for PROT_MTE",
      "revId": "ea81c85cfbda3ec690559cceb38972cf3593de0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae4b3d8a_c321fe2d",
        "filename": "debuggerd/proto/tombstone.proto",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-12-02T18:30:19Z",
      "side": 1,
      "message": "I\u0027m inclined to say that we shouldn\u0027t have a separate message for each tool (otherwise we also need to add hwasan, malloc_debug, FORTIFY, etc.). Using a common structure should allow us to also extend and create new tools without having to update the proto (and ask everyone else to parse it differently as well).\n\nmaybe:\n\nmessage Cause {\n  optional string human_readable \u003d 1; // \"tag-mismatch\", \"Heap Buffer Overflow\", etc.\n  repeated AddressDetails address_descriptors \u003d 2;\n  optional string tool_name \u003d 3; // \"HWAddressSanitizer\", \"GWP-ASan\", etc.\n}\n\nenum AddressLocation {\n  STACK,\n  HEAP,\n  GLOBAL,\n  TLS\n}\n\nmessage AddressDescriptor {\n  optional uint64 address \u003d 1;\n  optional uint64 size \u003d 2;\n  optional AddressLocation location \u003d 3;\n  optional HeapAddressDescriptor heap_descriptor \u003d 4;\n  optional uint64 tag \u003d 5;\n  repeated string developer_notes \u003d 6;\n}\n\nmessage HeapAddressDescriptor {\n  optional uint64 allocation_addr \u003d 1;\n  repeated BacktraceFrame allocation_backtrace \u003d 2;\n  optional uint64 allocation_tid \u003d 3;\n  repeated BacktraceFrame deallocation_backtrace \u003d 4;\n  optional uint64 deallocation_tid \u003d 5;\n  // Is this allocation currently alive, or has it been deallocated?\n  optional bool allocation_is_live \u003d 6;\n}",
      "revId": "ea81c85cfbda3ec690559cceb38972cf3593de0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28391c7d_de1a14d8",
        "filename": "debuggerd/proto/tombstone.proto",
        "patchSetId": 2
      },
      "lineNbr": 123,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2020-12-02T18:12:40Z",
      "side": 1,
      "message": "@pcc for more thoughts - do we also want a repeated list of {address, tag} pairs, or {start_addr, step, [tag, tag...]} to power the tag dump? It should be synthesizeable using the current descriptors but unsure whether we want more flexibility.\n\n@eugenis - We also need to have stack/global layouts here as well. With globals, we should be able to accomplish everything in the HeapAddressDescriptor (maybe it just needs to be renamed to AddressDescriptor and the fields like `allocation_is_live` don\u0027t mean anything for non-heap allocations). Unsure about whether we need more information to be descriptive about stack frame layout.",
      "revId": "ea81c85cfbda3ec690559cceb38972cf3593de0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f566e839_78a8a63e",
        "filename": "debuggerd/proto/tombstone.proto",
        "patchSetId": 2
      },
      "lineNbr": 123,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2020-12-02T20:51:49Z",
      "side": 1,
      "message": "See my comment under MemoryDump. I think the report should include one of those for the area around the fault address.\n\nI don\u0027t think we can design good format for stack information in the S time frame. We can start by encoding the same thing that HWASan is doing now, with the stack history. I expect MTE in full debug mode to do something similar eventually (but not in S).\n\nWe could add an optional field to BacktraceFrame for the stack pointer value. It would only apply to the fault stack trace, not to alloc/dealloc ones, but it can be pretty useful for human understanding of stack bugs that are not use-after-return (i.e. OOB in a live stack frame and use-after-scope).",
      "parentUuid": "28391c7d_de1a14d8",
      "revId": "ea81c85cfbda3ec690559cceb38972cf3593de0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c72e9e80_cc375626",
        "filename": "debuggerd/proto/tombstone.proto",
        "patchSetId": 2
      },
      "lineNbr": 123,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2020-12-03T02:59:58Z",
      "side": 1,
      "message": "Dump around the fault address sounds good and I suppose it wouldn\u0027t even need to be an MTE-specific thing.",
      "parentUuid": "28391c7d_de1a14d8",
      "revId": "ea81c85cfbda3ec690559cceb38972cf3593de0a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}