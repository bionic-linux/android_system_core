{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "56d565f9_3677efc7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1249117
      },
      "writtenOn": "2021-01-05T17:30:03Z",
      "side": 1,
      "message": "Hi Elliot, could you take a quick a look at this quick ubsan fix? It\u0027s one of the things that keeps cropping up when trying to build Android with Clang 12.\n\nThanks!\nRichard",
      "revId": "aa7f9ec805ac4fd4eb9de7cec5618b871dfc3ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8cad15da_3c4b4225",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1249117
      },
      "writtenOn": "2021-01-06T14:39:23Z",
      "side": 1,
      "message": "(FYI: Yabin Cui - don\u0027t know if you\u0027ve run into this issue yet.)",
      "revId": "aa7f9ec805ac4fd4eb9de7cec5618b871dfc3ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "42bfac52_b797f977",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2021-01-06T18:12:41Z",
      "side": 1,
      "message": "In bug http://b/171275751, I plan to assign the bug to you soon. Currently we disable the sanitizer check in the compiler update, in https://android-review.googlesource.com/c/platform/build/soong/+/1541244/1/cc/sanitize.go. To check the fix, you can use the soong CL and remove changes in sanitize.go.",
      "parentUuid": "8cad15da_3c4b4225",
      "revId": "aa7f9ec805ac4fd4eb9de7cec5618b871dfc3ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cc361a14_44c2d938",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1130573
      },
      "writtenOn": "2021-01-07T00:53:54Z",
      "side": 1,
      "message": "cjdb@ also reported running into this.",
      "revId": "aa7f9ec805ac4fd4eb9de7cec5618b871dfc3ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f99f6002_0fc0cac0",
        "filename": "libutils/Unicode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-01-06T17:16:38Z",
      "side": 1,
      "message": "why 64 rather than 32?",
      "range": {
        "startLine": 144,
        "startChar": 4,
        "endLine": 144,
        "endChar": 12
      },
      "revId": "aa7f9ec805ac4fd4eb9de7cec5618b871dfc3ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "556b5ef8_d4facb03",
        "filename": "libutils/Unicode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1249117
      },
      "writtenOn": "2021-01-07T11:51:45Z",
      "side": 1,
      "message": "So I kind of mis-characterized this in the commit message, there are actually two undefined shifts in this function. The first one is (utf32 \u003c\u003c 6), which can be made defined by explicitly treating it as unsigned and masking the top bits off, and the second one is this line:\n\n   utf32 \u0026\u003d ~(to_ignore_mask \u003c\u003c (6 * (num_to_read - 1)));\n\nThis function (if I understand it right) is trying to extract a UTF32 canonical representation from a UTF8 start character. Every UTF32 code-point can be represented in up to 4 UTF-8 bytes, so to have this defined, to_ignore_mask needs be shift-able by 23 bits. That said, mask does _not_ need to be 64-bit, so I\u0027ll fix that in the next patchset.",
      "parentUuid": "f99f6002_0fc0cac0",
      "range": {
        "startLine": 144,
        "startChar": 4,
        "endLine": 144,
        "endChar": 12
      },
      "revId": "aa7f9ec805ac4fd4eb9de7cec5618b871dfc3ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fdfd2d9c_2eb9766d",
        "filename": "libutils/Unicode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-01-08T16:44:49Z",
      "side": 1,
      "message": "i still don\u0027t understand why to_ignore_mask needs to be 64 bits?",
      "parentUuid": "556b5ef8_d4facb03",
      "range": {
        "startLine": 144,
        "startChar": 4,
        "endLine": 144,
        "endChar": 12
      },
      "revId": "aa7f9ec805ac4fd4eb9de7cec5618b871dfc3ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20020500_3038a01d",
        "filename": "libutils/Unicode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1249117
      },
      "writtenOn": "2021-01-08T17:24:09Z",
      "side": 1,
      "message": "utf8 \u0026\u003d ~((to_ignore_mask \u0026 0x1ff) \u003c\u003c 23) also removes the undefined behaviour and keeps everything as uint32_t, we\u0027ll do that in the next patchset.",
      "parentUuid": "fdfd2d9c_2eb9766d",
      "range": {
        "startLine": 144,
        "startChar": 4,
        "endLine": 144,
        "endChar": 12
      },
      "revId": "aa7f9ec805ac4fd4eb9de7cec5618b871dfc3ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7da0895c_8e69821a",
        "filename": "libutils/Unicode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-01-08T17:50:38Z",
      "side": 1,
      "message": "(oh, now i understand what they\u0027re calling \"undefined\" today. i\u0027m pretty skeptical of this, but if this is the only place in the tree that you\u0027ve hit this then i guess it isn\u0027t as common as i\u0027d have expected, and it\u0027s not worth just disabling \"yet another warning that\u0027s more annoying than it is useful\" globally...)",
      "parentUuid": "20020500_3038a01d",
      "range": {
        "startLine": 144,
        "startChar": 4,
        "endLine": 144,
        "endChar": 12
      },
      "revId": "aa7f9ec805ac4fd4eb9de7cec5618b871dfc3ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5fcc504a_88fe18f6",
        "filename": "libutils/Unicode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1249117
      },
      "writtenOn": "2021-01-08T18:14:06Z",
      "side": 1,
      "message": "I think in general it\u0027s a net benefit: you probably won\u0027t want to accidentally shift off some stuff (e.g. in a security mask that controls something - that would be bad), so worth keeping it on I think.\n\nBut as an additional note, we don\u0027t build the whole tree with every unit test and lunch target internally at Arm, so there could be other cases where this new behaviour comes up that we don\u0027t know about. The most common targets we use (fvp-eng, fvp_mini-eng, aosp_arm64) seem to be OK.",
      "parentUuid": "7da0895c_8e69821a",
      "range": {
        "startLine": 144,
        "startChar": 4,
        "endLine": 144,
        "endChar": 12
      },
      "revId": "aa7f9ec805ac4fd4eb9de7cec5618b871dfc3ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff3efc20_83d69ad7",
        "filename": "libutils/Unicode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-01-08T18:43:02Z",
      "side": 1,
      "message": "yeah, if it\u0027s not as common as i\u0027d expect, having to explicitly say via `\u0026 0x...` \"i\u0027m only expecting this many bits\" seems fine --- i\u0027m just surprised/skeptical that it\u0027s uncommon. but your experiment suggests otherwise, so that\u0027s nice.",
      "parentUuid": "5fcc504a_88fe18f6",
      "range": {
        "startLine": 144,
        "startChar": 4,
        "endLine": 144,
        "endChar": 12
      },
      "revId": "aa7f9ec805ac4fd4eb9de7cec5618b871dfc3ae2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}