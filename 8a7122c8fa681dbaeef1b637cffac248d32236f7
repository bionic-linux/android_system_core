{
  "comments": [
    {
      "key": {
        "uuid": "04aea2f9_550f3e64",
        "filename": "include/backtrace/Backtrace.h",
        "patchSetId": 5
      },
      "lineNbr": 55,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2015-09-11T19:49:50Z",
      "side": 1,
      "message": "Might be better to follow the above naming, and name it something like backtrace_stackinfo_t.",
      "range": {
        "startLine": 55,
        "startChar": 7,
        "endLine": 55,
        "endChar": 16
      },
      "revId": "8a7122c8fa681dbaeef1b637cffac248d32236f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "648afea0_5dfbbbaf",
        "filename": "include/backtrace/Backtrace.h",
        "patchSetId": 5
      },
      "lineNbr": 76,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2015-09-11T19:49:50Z",
      "side": 1,
      "message": "It would be useful to indicate that if cache_file is true, that the cache will continue to grow until the program ends.\n\nI don\u0027t know if we need it now, but a static ClearOfflineCache() might be necessary in the future. It might be nice to have it to indicate to people that the cache is survives across calls.",
      "range": {
        "startLine": 75,
        "startChar": 1,
        "endLine": 76,
        "endChar": 38
      },
      "revId": "8a7122c8fa681dbaeef1b637cffac248d32236f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84a1b20e_b1d5da25",
        "filename": "libbacktrace/BacktraceOffline.cpp",
        "patchSetId": 5
      },
      "lineNbr": 125,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2015-09-11T19:49:50Z",
      "side": 1,
      "message": "I think it\u0027s a bit confusing with this word. I think it flows better without it.",
      "range": {
        "startLine": 125,
        "startChar": 19,
        "endLine": 125,
        "endChar": 26
      },
      "revId": "8a7122c8fa681dbaeef1b637cffac248d32236f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4b72a4b_533f567a",
        "filename": "libbacktrace/BacktraceOffline.cpp",
        "patchSetId": 5
      },
      "lineNbr": 168,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2015-09-11T19:49:50Z",
      "side": 1,
      "message": "Extra line.",
      "range": {
        "startLine": 168,
        "startChar": 0,
        "endLine": 168,
        "endChar": 0
      },
      "revId": "8a7122c8fa681dbaeef1b637cffac248d32236f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4b0ae55_d47e92a9",
        "filename": "libbacktrace/BacktraceOffline.cpp",
        "patchSetId": 5
      },
      "lineNbr": 185,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2015-09-11T19:49:50Z",
      "side": 1,
      "message": "This could use some comments describing why you are making these three calls, and why you are doing them in this order.",
      "range": {
        "startLine": 185,
        "startChar": 0,
        "endLine": 185,
        "endChar": 29
      },
      "revId": "8a7122c8fa681dbaeef1b637cffac248d32236f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "04aea2f9_1545b60c",
        "filename": "libbacktrace/BacktraceOffline.cpp",
        "patchSetId": 5
      },
      "lineNbr": 203,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2015-09-11T19:49:50Z",
      "side": 1,
      "message": "Might want to file a bug for this and it to the todo. If we get the rewritten fast enough, this won\u0027t matter.",
      "range": {
        "startLine": 203,
        "startChar": 6,
        "endLine": 203,
        "endChar": 34
      },
      "revId": "8a7122c8fa681dbaeef1b637cffac248d32236f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "24a64628_11430c7b",
        "filename": "libbacktrace/BacktraceOffline.cpp",
        "patchSetId": 5
      },
      "lineNbr": 262,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2015-09-11T19:49:50Z",
      "side": 1,
      "message": "I\u0027m not sure what this comment means. The first part appears to be a statement but it kind of ends in a question.",
      "range": {
        "startLine": 262,
        "startChar": 7,
        "endLine": 262,
        "endChar": 12
      },
      "revId": "8a7122c8fa681dbaeef1b637cffac248d32236f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44ab3af0_0f72c923",
        "filename": "libbacktrace/backtrace_offline_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 16,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2015-09-11T19:49:50Z",
      "side": 1,
      "message": "static bool",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 16,
        "endChar": 4
      },
      "revId": "8a7122c8fa681dbaeef1b637cffac248d32236f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "04aea2f9_95e36699",
        "filename": "libbacktrace/backtrace_offline_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 16,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2015-09-11T19:49:50Z",
      "side": 1,
      "message": "Better to name it g_exit_flag to make it clear that it\u0027s a global. You probably also need to make this volatile.",
      "range": {
        "startLine": 16,
        "startChar": 5,
        "endLine": 16,
        "endChar": 14
      },
      "revId": "8a7122c8fa681dbaeef1b637cffac248d32236f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "04aea2f9_7526c295",
        "filename": "libbacktrace/backtrace_offline_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 31,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2015-09-11T19:49:50Z",
      "side": 1,
      "message": "This should be defined in unistd.h, I believe. There might be some issue with the host version, but I think that was fixed.",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 31,
        "endChar": 26
      },
      "revId": "8a7122c8fa681dbaeef1b637cffac248d32236f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84a1b20e_31460a8b",
        "filename": "libbacktrace/backtrace_offline_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 96,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2015-09-11T19:49:50Z",
      "side": 1,
      "message": "It would be good to add a test to make sure that if the stack trace exceeds the max, nothing bad happens.",
      "range": {
        "startLine": 96,
        "startChar": 0,
        "endLine": 96,
        "endChar": 0
      },
      "revId": "8a7122c8fa681dbaeef1b637cffac248d32236f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4b0ae55_54662234",
        "filename": "libbacktrace/backtrace_offline_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 115,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2015-09-11T19:49:50Z",
      "side": 1,
      "message": "It might be better to hard-code this data. You would have to generate for each architecture though, so maybe it\u0027s too difficult. If you do hard-code, you should probably write a  program to do the generation.\n\nYou would have to check in the shared libraries too.\n\nThis does seem a bit complicated so maybe this isn\u0027t a good idea, but I\u0027ll leave it up to you what you want to do.",
      "range": {
        "startLine": 106,
        "startChar": 0,
        "endLine": 115,
        "endChar": 30
      },
      "revId": "8a7122c8fa681dbaeef1b637cffac248d32236f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4b72a4b_73fd3a32",
        "filename": "libbacktrace/backtrace_offline_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 146,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2015-09-11T19:49:50Z",
      "side": 1,
      "message": "This doesn\u0027t seem to be testing any of the code. If you hard code this, you could also hardcode the expected pc and avoid the symbol code.\n\nIf you don\u0027t hard code this, I think it would be better to replace this all with asserts about the pc rather than symbol checking. Usually, you don\u0027t want your test code logic to be too complicated if you can avoid it. It can result in a bit more cut-n-paste code so you have to determine which is worse.",
      "range": {
        "startLine": 132,
        "startChar": 1,
        "endLine": 146,
        "endChar": 3
      },
      "revId": "8a7122c8fa681dbaeef1b637cffac248d32236f7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}