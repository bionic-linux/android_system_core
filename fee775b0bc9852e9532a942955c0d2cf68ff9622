{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0a6dc1d3_db8023ac",
        "filename": "trusty/libtrusty/trusty.c",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2022-02-10T21:50:20Z",
      "side": 1,
      "message": "Is there a reason to use APP instead of HAL?",
      "revId": "fee775b0bc9852e9532a942955c0d2cf68ff9622",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fddf46a_a6d48fa7",
        "filename": "trusty/libtrusty/trusty.c",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2022-02-10T23:27:36Z",
      "side": 1,
      "message": "We discussed this offline, and APP seems fine since that still allows us to filter on service path, i.e. `/vendor/bin/some_trusty_service`",
      "parentUuid": "0a6dc1d3_db8023ac",
      "revId": "fee775b0bc9852e9532a942955c0d2cf68ff9622",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d62b652e_a3f9f8e9",
        "filename": "trusty/libtrusty/trusty.c",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1902326
      },
      "writtenOn": "2022-02-11T19:03:27Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7fddf46a_a6d48fa7",
      "revId": "fee775b0bc9852e9532a942955c0d2cf68ff9622",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a750c70e_a4375a62",
        "filename": "trusty/libtrusty/trusty.c",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2022-02-10T21:50:20Z",
      "side": 1,
      "message": "I\u0027m not familiar enough with atrace/perfetto, but is it useful/normal to include more context, e.g. the service name here? Not sure how filtering works or if this is just for a human-readable label.",
      "revId": "fee775b0bc9852e9532a942955c0d2cf68ff9622",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "840cf983_4395f4e0",
        "filename": "trusty/libtrusty/trusty.c",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1856745
      },
      "writtenOn": "2022-02-11T17:42:00Z",
      "side": 1,
      "message": "Definitely, we want to have srv_name, as well as log the fd.\nthe string used in ATRACE_BEGIN needs to be constructed with above information.\n\nHere is what we have discussed in chat:\n\n* for tipc_connect - the name used for the tracepoints would be in the form of tipc_connect_%d_%s, fd, srv_name\n\n* tipc_send - the name used for the tracepoint would be tipc_send_%d_%d_%08x, fd,  cmd) with cmd \u003d (*uint32_t) red.iov[0] - of course checking the iovector length etc...\n\nArve then suggested for tipic_send, something even more complete, with dumping each byte of the iovec. I like this, but would still think that having the first 32bits in 0x08x format is going to be easier to decode as it usually includes the command.",
      "parentUuid": "a750c70e_a4375a62",
      "revId": "fee775b0bc9852e9532a942955c0d2cf68ff9622",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e440c024_c00dfb23",
        "filename": "trusty/libtrusty/trusty.c",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1902326
      },
      "writtenOn": "2022-02-11T19:03:27Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "840cf983_4395f4e0",
      "revId": "fee775b0bc9852e9532a942955c0d2cf68ff9622",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b120c5d7_e624fe93",
        "filename": "trusty/libtrusty/trusty.c",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1902326
      },
      "writtenOn": "2022-02-11T19:05:10Z",
      "side": 1,
      "message": "Oops, didn\u0027t mean to mark resolved.",
      "parentUuid": "e440c024_c00dfb23",
      "revId": "fee775b0bc9852e9532a942955c0d2cf68ff9622",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e46578e_076934a5",
        "filename": "trusty/libtrusty/trusty.c",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1902326
      },
      "writtenOn": "2022-02-15T00:38:20Z",
      "side": 1,
      "message": "I\u0027ve added logic to format additional context into the trace event name. The one thing I wasn\u0027t sure about including is the the file descriptor `fd` in `tipc_connect`. The reason for this is because the final value for `fd` isn\u0027t determined until the end of the function, but we want to call `ATRACE_BEGIN` at the beginning of the function. I think we *could* wait until after `fd` has been given its final value before calling `ATRACE_BEGIN`, but that would mean that we call `ATRACE_END` right after it, resulting in a slice with close to 0 time captured in it.\n\nA maybe more appropriate way of capturing the value of `fd` for debugging might be to log it and then have Perfetto [capture the log](https://perfetto.dev/docs/data-sources/android-log). Perfetto seems to have support for displaying what logs were emitted during a particular slice, so in theory you\u0027d be able to select the `tipc_connect` slice and find the log that includes `fd` pretty easily. I\u0027ll try to create a prototype of this to see how well it shows up in the UI.",
      "parentUuid": "b120c5d7_e624fe93",
      "revId": "fee775b0bc9852e9532a942955c0d2cf68ff9622",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56efcd84_8fdfca1d",
        "filename": "trusty/libtrusty/trusty.c",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1856745
      },
      "writtenOn": "2022-02-15T17:06:35Z",
      "side": 1,
      "message": "I would add a ATRACE_INT(\"tipc_connect\",fd);",
      "parentUuid": "3e46578e_076934a5",
      "revId": "fee775b0bc9852e9532a942955c0d2cf68ff9622",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0285aa9f_7fb4996f",
        "filename": "trusty/libtrusty/trusty.c",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2022-02-15T18:40:30Z",
      "side": 1,
      "message": "Aren\u0027t the INT traces for counters? I.e. from the header:\n\n    * Traces an integer counter value.  name is used to identify the counter.\n    * This can be used to track how a value changes over time.\n    \nWhat exactly are we wanting to keep track of with the fd? Do we expect HALs to open multiple connections to Trusty? If not, do we really need the fd?",
      "parentUuid": "56efcd84_8fdfca1d",
      "revId": "fee775b0bc9852e9532a942955c0d2cf68ff9622",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1feddf32_4e2b6261",
        "filename": "trusty/libtrusty/trusty.c",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1856745
      },
      "writtenOn": "2022-02-15T19:24:26Z",
      "side": 1,
      "message": "I have used ATRACE_INT for any kind on int markers, in systrace that is, does not need to be increments.\nWe meant to log the fd at connection time, in order to have a chance to correlate its value logged at tipc_send with the service name.\ndoes that make sense?",
      "parentUuid": "0285aa9f_7fb4996f",
      "revId": "fee775b0bc9852e9532a942955c0d2cf68ff9622",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "595b132f_c63b041f",
        "filename": "trusty/libtrusty/trusty.c",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1902326
      },
      "writtenOn": "2022-02-15T23:24:55Z",
      "side": 1,
      "message": "Logging the fd at connection time makes sense to me, though `ATRACE_INT` seems like an odd mechanism for doing so. Counters are really meant to track how a value changes over time, rather than logging a single value. I did implement it, though, and [this is how it looks](https://screenshot.googleplex.com/7q9aPHwENFTqtof.png). Note how Perfetto renders this as its own track, and you need to hover your mouse over the line to see the value at any given point in time. This would work fine for now, but is probably not the ideal solution.\n\nAnother potential alternative would be to emit an [instant event](https://cs.android.com/android/platform/superproject/+/master:system/core/libcutils/include/cutils/trace.h;l\u003d210-241;drc\u003d2c2c5d998e4de5f3d51ef91edbd1d95ac982a7b4), which would allow us to capture the value of `fd` but in a way that better indicates that it\u0027s a one-time log (rather than an ongoing counter). However, in testing this approach out it appears that Perfetto does not currently render instant events in the UI. The docs note that they intent to support instant events in the future, though, so it may be something we can help contribute if we find ourselves wanting to use them more.\n\nIn the meantime I\u0027ve updated the CL to use `ATRACE_INT`.",
      "parentUuid": "1feddf32_4e2b6261",
      "revId": "fee775b0bc9852e9532a942955c0d2cf68ff9622",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d7798b90_59262dbf",
        "filename": "trusty/libtrusty/trusty.c",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1902326
      },
      "writtenOn": "2022-02-16T18:10:13Z",
      "side": 1,
      "message": "I\u0027ve tested out using a debug log to capture the value of `fd`, and it seems to work in the Perfetto UI as expected ([example screenshot here](https://screenshot.googleplex.com/3PgfsHec2eaQiT3.png)). I think this is a more appropriate solution than using `ATRACE_INT`, so @armellel if you don\u0027t see any issues with this approach I\u0027d like to go this route instead.\n\nAs such, I\u0027ve updated the CL to remove `ATRACE_INT` and update the existing debug log to use `ALOGD` instead of `ALOGV` because verbose logging is stripped entirely from release builds, and we want this log line to remain in the build for use in tracing.",
      "parentUuid": "595b132f_c63b041f",
      "revId": "fee775b0bc9852e9532a942955c0d2cf68ff9622",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9398e34_ec538b52",
        "filename": "trusty/libtrusty/trusty.c",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1856745
      },
      "writtenOn": "2022-02-11T17:42:00Z",
      "side": 1,
      "message": "Here we also",
      "revId": "fee775b0bc9852e9532a942955c0d2cf68ff9622",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48689b6f_ec9f48c6",
        "filename": "trusty/libtrusty/trusty.c",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1902326
      },
      "writtenOn": "2022-02-11T19:03:27Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e9398e34_ec538b52",
      "revId": "fee775b0bc9852e9532a942955c0d2cf68ff9622",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8af151de_61f8b6ee",
        "filename": "trusty/libtrusty/trusty.c",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1902326
      },
      "writtenOn": "2022-02-11T19:05:10Z",
      "side": 1,
      "message": "Oops didn\u0027t mean to mark resolved.",
      "parentUuid": "48689b6f_ec9f48c6",
      "revId": "fee775b0bc9852e9532a942955c0d2cf68ff9622",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3927e46c_114f2dcb",
        "filename": "trusty/libtrusty/trusty.c",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1902326
      },
      "writtenOn": "2022-02-15T00:38:20Z",
      "side": 1,
      "message": "Resolving now that I\u0027ve actually updated the CL to address the comment.",
      "parentUuid": "8af151de_61f8b6ee",
      "revId": "fee775b0bc9852e9532a942955c0d2cf68ff9622",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}