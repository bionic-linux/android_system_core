{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4d319947_7870ce4d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2024-09-18T19:40:55Z",
      "side": 1,
      "message": "I have another question for you:\n\nI don\u0027t want to make netd \u0027reboot_on_failure\u0027 because as a daemon it could fail and restart during serving, but *certain* types of early init failures should just trigger a reboot (for example bpf or dnsresolver init failures, since that comes from the mainline tethering/dnsresolver apexes).  I\u0027m considering getting netd to do \u0027echo b \u003e /proc/sysrq-trigger\u0027 if the init phase fails - thus triggering a reboot and likely mainline module rollback.  Any better ideas?",
      "revId": "3c50b920abca2d5522d0a7ddcf0c172b474518b2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "654ef4e0_7959ab62",
        "filename": "rootdir/init.rc",
        "patchSetId": 4
      },
      "lineNbr": 563,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2024-09-19T02:24:45Z",
      "side": 1,
      "message": "I think this change is good (are you sure it will work? netd doesn\u0027t rely on anything early? tested enough?)\n\nbut should we add \u0027post-bpf\u0027? so it\u0027s symmetrical?",
      "range": {
        "startLine": 562,
        "startChar": 0,
        "endLine": 563,
        "endChar": 14
      },
      "revId": "3c50b920abca2d5522d0a7ddcf0c172b474518b2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a81cacb9_1e220f23",
        "filename": "rootdir/init.rc",
        "patchSetId": 4
      },
      "lineNbr": 563,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2024-09-19T19:05:00Z",
      "side": 1,
      "message": "well it works in local testing, cuttlefish and TreeHugger, and I can\u0027t think of any reason it wouldn\u0027t work...\n\nMy understanding is once we run \u0027start netd\u0027 once, even if netd crashes (which can happen in response to system server crashes for example) it\u0027ll get restarted by init...\n\nBy \u0027post-bpf\u0027 do you mean to add a trigger?\n\nie.\ntrigger load_bpf_programs\ntrigger bpf-progs-loaded\n\non bpf-progs-loaded\n  start netd",
      "parentUuid": "654ef4e0_7959ab62",
      "range": {
        "startLine": 562,
        "startChar": 0,
        "endLine": 563,
        "endChar": 14
      },
      "revId": "3c50b920abca2d5522d0a7ddcf0c172b474518b2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a69b0b0_1da2edd4",
        "filename": "rootdir/init.rc",
        "patchSetId": 4
      },
      "lineNbr": 563,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2024-09-19T21:11:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a81cacb9_1e220f23",
      "range": {
        "startLine": 562,
        "startChar": 0,
        "endLine": 563,
        "endChar": 14
      },
      "revId": "3c50b920abca2d5522d0a7ddcf0c172b474518b2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6a1720d_0a97456e",
        "filename": "rootdir/init.rc",
        "patchSetId": 4
      },
      "lineNbr": 563,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2024-09-20T03:34:01Z",
      "side": 1,
      "message": "Yeah, though, I\u0027m actually kind of shocked that load_bpf_programs uses exec_start. I thought bpfloader should load programs asynchronously, because other programs use a sysprop to wait for them to be loaded. Do we know why that\u0027s blocking the boot? (maybe move to bug?)\n\nAlso, please add trigger to docs here as well?\nhttps://cs.android.com/android/platform/superproject/main/+/main:system/core/init/README.md;l\u003d502;drc\u003db9f6c12b4de9afc21ea02c1dc4d4aa404542d48d\n\nThis changes LGTM, hoping Neil can ack though.",
      "parentUuid": "3a69b0b0_1da2edd4",
      "range": {
        "startLine": 562,
        "startChar": 0,
        "endLine": 563,
        "endChar": 14
      },
      "revId": "3c50b920abca2d5522d0a7ddcf0c172b474518b2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8a722f37_ba0f8a64",
        "filename": "rootdir/init.rc",
        "patchSetId": 4
      },
      "lineNbr": 563,
      "author": {
        "id": 1003247
      },
      "writtenOn": "2024-09-20T17:18:20Z",
      "side": 1,
      "message": "Doc update done.\n\nBpfloader is synchronous, because we had weird undebuggable failures (like cannot happen failures where \u003c~1% of boots randomly fail) when it was async.  This was especially problematic during OTA updates causing them to (try to) rollback... (sometimes with enough corruption the devices would brick).  These failures appear to have gone away - which seems to correlate with when I made it sync...\n\nI don\u0027t know what the *true* cause was (couldn\u0027t ever replicate it), but I always assumed that at least on some kernels/architectures there was some memory fragmentation/exhaustion issue (likely caused by java/gpu/renderers allocating huge swathes of memory) causing bpf loading to become flaky.\n\nThere definitely *was* a kernel bug - fixed now (though maybe not in all kernels...) - where bpf jit memory allocations on some kernel/arch (for security reasons) had to come from some special (very small) pool of memory (which could also be used for any other purpose... and thus exhausted).\n\nI don\u0027t think it was upstream kernel code, but rather some vendor added security feature.  This would result in even classic bpf (seccomp used by chrome web browser for example) triggering consistent failures once the system was up for long enough.\n\nEven right this moment there\u0027s an active email thread upstream talking about verifying the output of the bpf jit in the arm hypervisor (to prevent write gadgets from scribbling over jit output and loading untrusted code into ring 0)... I think this likely requires all eBPF code to be fully jitted before *any* untrusted code has any chance of running.",
      "parentUuid": "e6a1720d_0a97456e",
      "range": {
        "startLine": 562,
        "startChar": 0,
        "endLine": 563,
        "endChar": 14
      },
      "revId": "3c50b920abca2d5522d0a7ddcf0c172b474518b2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}