{
  "comments": [
    {
      "key": {
        "uuid": "0313a1a6_66c65a0c",
        "filename": "fs_mgr/libfiemap_writer/fiemap_writer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 544,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2019-01-24T23:29:08Z",
      "side": 1,
      "message": "this assumes we will always write first and flush after.\n\nI don\u0027t think we should make that assumption (since its a public API).\n\nMay be move the bdev_fd_.reset() part into a private method and call it from both write() and flush()?",
      "range": {
        "startLine": 544,
        "startChar": 6,
        "endLine": 544,
        "endChar": 40
      },
      "revId": "4af130fef222cb0baebbe69343d5be53a4bacd1e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff02ff69_1ac9caa8",
        "filename": "fs_mgr/libfiemap_writer/fiemap_writer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 544,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2019-01-24T23:42:49Z",
      "side": 1,
      "message": "Yeah, I did - if we extract this to a helper, bdev_fd_ will get opened with RDWR which we don\u0027t want. On the other hand, as is, the Flush() calls in gsi_service.cpp are doing nothing.\n\nIs there a reason to open a read-only fd just to fsync it? Can we do the sync after AllocateFile() and move any additional syncs needed into gsi_service.cpp?",
      "parentUuid": "0313a1a6_66c65a0c",
      "range": {
        "startLine": 544,
        "startChar": 6,
        "endLine": 544,
        "endChar": 40
      },
      "revId": "4af130fef222cb0baebbe69343d5be53a4bacd1e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6af61a5b_93feb2e6",
        "filename": "fs_mgr/libfiemap_writer/fiemap_writer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 544,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2019-01-25T20:54:42Z",
      "side": 1,
      "message": "It only really makes sense to flush if you write in this class. The gsi_service can do its own block device flush on the device mapper block device.\n\nSo the open(O_RDONLY) is ok. The reason why Flush() was a class method was to make FiemapWriter::Write() faster-ish. So, the caller can write everything and take advantage of the caches and then call\nFiemapWriter::Flush() only once. Hence my suggestion to call the helper only in Flush() and Write().\n\n\u003e if we extract this to a helper, bdev_fd_ will get opened with RDWR which we don\u0027t want.\nI didn\u0027t really get this.\n\nWhy can\u0027t we do something like - \n\n// Private\nInitBdevWrite() {\n        bdev_fd_.reset(TEMP_FAILURE_RETRY(open(bdev_path_.c_str(), O_RDWR | O_CLOEXEC)));\n        if (bdev_fd_ \u003c 0) {\n            PLOG(ERROR) \u003c\u003c \"Failed to open block device: \" \u003c\u003c bdev_path_;\n            return false;\n        }\n}\n\n// Public\nOpen() {\n  ...\n  ::android::base::unique_fd bdev_fd(\n            TEMP_FAILURE_RETRY(open(bdev_path.c_str(), O_RDONLY | O_CLOEXEC)));\n    if (bdev_fd \u003c 0) {\n        PLOG(ERROR) \u003c\u003c \"Failed to open block device: \" \u003c\u003c bdev_path;\n        cleanup(file_path, create);\n        return nullptr;\n    }\n  ...\n\n  bdev_fd_ \u003d std::move(bdev_fd);\n}\n\nFlush() {\n   InitBdevWrite();\n}\n\nWrite() {\n InitBdevWrite();\n}\n\n\n{ may be even pick a better name than \"InitBdevWrite\")",
      "parentUuid": "ff02ff69_1ac9caa8",
      "range": {
        "startLine": 544,
        "startChar": 6,
        "endLine": 544,
        "endChar": 40
      },
      "revId": "4af130fef222cb0baebbe69343d5be53a4bacd1e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7cf51d9_a74dfe28",
        "filename": "fs_mgr/libfiemap_writer/fiemap_writer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 544,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2019-01-28T21:44:34Z",
      "side": 1,
      "message": "If it only makes sense to flush if we write, why do we need this change? All we gain is the ability to Flush() before calling Write().",
      "parentUuid": "6af61a5b_93feb2e6",
      "range": {
        "startLine": 544,
        "startChar": 6,
        "endLine": 544,
        "endChar": 40
      },
      "revId": "4af130fef222cb0baebbe69343d5be53a4bacd1e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74139e5c_e23b9188",
        "filename": "fs_mgr/libfiemap_writer/fiemap_writer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 553,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2019-01-25T00:14:31Z",
      "side": 1,
      "message": "What if bdev_fd happens to be opened r/o? Maybe an fcntl is in order?",
      "range": {
        "startLine": 553,
        "startChar": 5,
        "endLine": 553,
        "endChar": 23
      },
      "revId": "4af130fef222cb0baebbe69343d5be53a4bacd1e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf1a2fb6_bbda1a4e",
        "filename": "fs_mgr/libfiemap_writer/fiemap_writer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 553,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2019-01-25T00:18:29Z",
      "side": 1,
      "message": "It\u0027s only ever opened RDWR.",
      "parentUuid": "74139e5c_e23b9188",
      "range": {
        "startLine": 553,
        "startChar": 5,
        "endLine": 553,
        "endChar": 23
      },
      "revId": "4af130fef222cb0baebbe69343d5be53a4bacd1e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}