{
  "comments": [
    {
      "key": {
        "uuid": "4d53cfd8_760e2121",
        "filename": "base/file.cpp",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2017-09-21T18:30:16Z",
      "side": 1,
      "message": "Why cap the max timeout?  For overflow?  That won\u0027t be a concern as long as you\u0027re always subtracting?  \n\nSeems unintuitive to have a cap otherwise.",
      "revId": "5e928cddbbb644553d6d613b338846396f167167",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70f8bd86_5ec81175",
        "filename": "base/file.cpp",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-09-21T18:37:01Z",
      "side": 1,
      "message": "clock granularity, adding comment.",
      "parentUuid": "4d53cfd8_760e2121",
      "revId": "5e928cddbbb644553d6d613b338846396f167167",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d10f612_d1e8bc20",
        "filename": "base/file.cpp",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2017-09-21T19:05:40Z",
      "side": 1,
      "message": "Hm probably worth refactoring the code a bit to move the return false to after the poll and so that poll() will run at least once with timeout \u003d 0 rather than making the timeout arbitrarily 2ms.\n\n(I guess I didn\u0027t care about this case since the timeouts in init_first_stage.cpp are all quite large).\n\nAlso, I\u0027m just remembering that there\u0027s the Timer class in chrono_utils.h too that can be used here instead of doing the elapsed time calculation yourself.",
      "parentUuid": "70f8bd86_5ec81175",
      "revId": "5e928cddbbb644553d6d613b338846396f167167",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0119b652_36d0fd21",
        "filename": "base/file.cpp",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-09-21T19:59:49Z",
      "side": 1,
      "message": "Code gets simpler, if we also accept that continuing flow of data can be allowed to extend beyond the timeout. I can drop line 80 and 87, as long as I make sure for the case time_elapsed \u003e timeout that I still hand 0 to poll.\n\nI do not think anyone can disagree with that fundamentally, except on system critical components where a continuous and fast stream of data on a socket could DOS the memory in the calling process ... a fix for that would be the condition 87 dropped below the read; actually,\n\n    if (!remaining_timeout.count()) return false;\n\nAs for Timer class, not sold, since we are dealing with really _one_ line of calculations (and the rest being expansion due to casting and maintenance considerations). I take hard metal over abstraction any day :-)",
      "parentUuid": "6d10f612_d1e8bc20",
      "revId": "5e928cddbbb644553d6d613b338846396f167167",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}