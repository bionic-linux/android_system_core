{
  "comments": [
    {
      "key": {
        "uuid": "b141d389_17ee2ea7",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 13
      },
      "lineNbr": 97,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-02-01T17:14:30Z",
      "side": 1,
      "message": "(this is still weird to me. i\u0027m not convinced we actually need the atomic and the racy \"multiple threads can try to work out whether we have memfd at the same time\" implementation rather than the idiomatic C++ \"static T t \u003d init_whatever(); return t;\"...)",
      "revId": "7eb1ae2f9358dcfacef6ab7f0ab343c6435952e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8846967_d87bdd00",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 13
      },
      "lineNbr": 97,
      "author": {
        "id": 1124848
      },
      "writtenOn": "2019-02-01T17:26:17Z",
      "side": 1,
      "message": "If the cached state is shared between all threads in the process, then the atomic is needed. Are you proposing to use thread local storage to cache the state?\n\nThe tradeoff is doing more work per process to do detection (for each thread), vs affecting concurrency a bit using atomics.",
      "parentUuid": "b141d389_17ee2ea7",
      "revId": "7eb1ae2f9358dcfacef6ab7f0ab343c6435952e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9501054f_b8a950c7",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 13
      },
      "lineNbr": 97,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-02-01T17:30:23Z",
      "side": 1,
      "message": "no, the usual C++ idiom (in a surprising move to C programmers) adds an invisible lock. the \"stupid\" code is actually correct in C++ (but not in C).",
      "parentUuid": "b8846967_d87bdd00",
      "revId": "7eb1ae2f9358dcfacef6ab7f0ab343c6435952e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd5a71a4_053391a6",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 13
      },
      "lineNbr": 97,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-02-01T17:33:33Z",
      "side": 1,
      "message": "...which is why a C++ programmer looking at this use of an atomic has to scratch their head and wonder why, exactly, it was done this way instead.\n\ni\u0027m assuming that creating a region is relatively rare; this is more like mmap than like malloc. if this is a hot path, then this might make sense (but would warrant a comment, and probably lifting the atomic accesses around L157 so there\u0027s just one on the fast path). but if we can just do the obvious thing instead...",
      "parentUuid": "9501054f_b8a950c7",
      "revId": "7eb1ae2f9358dcfacef6ab7f0ab343c6435952e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5afa30f_ad6072e2",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 13
      },
      "lineNbr": 97,
      "author": {
        "id": 1124848
      },
      "writtenOn": "2019-02-01T20:35:55Z",
      "side": 1,
      "message": "Going back to your idiom:\nstatic T t \u003d init_whatever(); return t;\n\nThe \"whatever\" still has to be init\u0027ed. The \"whatever\" in this case is the knowledge that the device supports memfd. Checking whether the device does support memfd is rather expensive so we\u0027d rather just do this once per process.\n\nInitially I wasn\u0027t using atomics, but the concern came up about store-tearing due to concurrent read/writes.\n\nHow can C++ prevent store-tearing on the static variable in your idiom? static variables are not thread-lock AFAIK so concurrent threads trying to read/write to it should happen safely.\n\nAre you saying C++ protects static variable writes within a function using an implicit lock?\n\nTri - could you share more about the atomic use since this came about after your suggestion?",
      "parentUuid": "bd5a71a4_053391a6",
      "revId": "7eb1ae2f9358dcfacef6ab7f0ab343c6435952e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e8d0afc_4df0bfdf",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 13
      },
      "lineNbr": 397,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-02-01T17:14:30Z",
      "side": 1,
      "message": "inline the fcntl and have explicit returns?",
      "range": {
        "startLine": 397,
        "startChar": 8,
        "endLine": 397,
        "endChar": 11
      },
      "revId": "7eb1ae2f9358dcfacef6ab7f0ab343c6435952e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25b264d8_c920fce7",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 13
      },
      "lineNbr": 397,
      "author": {
        "id": 1124848
      },
      "writtenOn": "2019-02-01T17:26:17Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0e8d0afc_4df0bfdf",
      "range": {
        "startLine": 397,
        "startChar": 8,
        "endLine": 397,
        "endChar": 11
      },
      "revId": "7eb1ae2f9358dcfacef6ab7f0ab343c6435952e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e51ddbbd_7caa08d7",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 13
      },
      "lineNbr": 451,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-02-01T17:14:30Z",
      "side": 1,
      "message": "just inline the fstat?",
      "range": {
        "startLine": 451,
        "startChar": 12,
        "endLine": 451,
        "endChar": 15
      },
      "revId": "7eb1ae2f9358dcfacef6ab7f0ab343c6435952e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0dce843f_577684b3",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 13
      },
      "lineNbr": 451,
      "author": {
        "id": 1124848
      },
      "writtenOn": "2019-02-01T17:26:17Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e51ddbbd_7caa08d7",
      "range": {
        "startLine": 451,
        "startChar": 12,
        "endLine": 451,
        "endChar": 15
      },
      "revId": "7eb1ae2f9358dcfacef6ab7f0ab343c6435952e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "acb1d428_367eadd4",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 13
      },
      "lineNbr": 453,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-02-01T17:14:30Z",
      "side": 1,
      "message": "missing return -1?",
      "revId": "7eb1ae2f9358dcfacef6ab7f0ab343c6435952e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30d3fd09_118789fd",
        "filename": "libcutils/ashmem-dev.cpp",
        "patchSetId": 13
      },
      "lineNbr": 453,
      "author": {
        "id": 1124848
      },
      "writtenOn": "2019-02-01T17:26:17Z",
      "side": 1,
      "message": "Sigh, sorry. I\u0027ll fix.",
      "parentUuid": "acb1d428_367eadd4",
      "revId": "7eb1ae2f9358dcfacef6ab7f0ab343c6435952e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}