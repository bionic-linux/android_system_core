{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7ece3a18_8f36cde1",
        "filename": "fs_mgr/Android.bp",
        "patchSetId": 4
      },
      "lineNbr": 167,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2022-02-11T19:13:45Z",
      "side": 1,
      "message": "need to define this macro for \"target.ramdisk.cflags\" as well",
      "range": {
        "startLine": 167,
        "startChar": 18,
        "endLine": 167,
        "endChar": 33
      },
      "revId": "5bc4b60760bfb3c58ee7c16e7d6ca27651eb8a4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ba49b9a_7bc65b6e",
        "filename": "fs_mgr/Android.bp",
        "patchSetId": 4
      },
      "lineNbr": 167,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2022-02-15T21:09:14Z",
      "side": 1,
      "message": "There\u0027s no cflags for ramdisk targets - it works as-is. Except, oddly, if building a separate recovery image. In this case, *recovery* cflags are not propagated correctly. So I updated the patch to also check for __ANDROID_RECOVERY__.\n\nThis is all pretty gross, but I don\u0027t want to touch the meaning of __ANDROID_RECOVERY__ until T has branched, since I have no idea what could break. If you prefer, I can look into adding a complementary __ANDROID_RAMDISK__ flag to make this a little better.",
      "parentUuid": "7ece3a18_8f36cde1",
      "range": {
        "startLine": 167,
        "startChar": 18,
        "endLine": 167,
        "endChar": 33
      },
      "revId": "5bc4b60760bfb3c58ee7c16e7d6ca27651eb8a4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "398db6ea_d6782c22",
        "filename": "fs_mgr/Android.bp",
        "patchSetId": 4
      },
      "lineNbr": 167,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2022-02-17T04:00:39Z",
      "side": 1,
      "message": "\u003e There\u0027s no cflags for ramdisk targets - it works as-is.\n\nWhy does it work? Like vendor_ramdisk, ramdisk doesn\u0027t have /data mounted during its execution time, so why doesn\u0027t need the same flags as vendor_ramdisk?\n\n\u003e *recovery* cflags are not propagated correctly.\n\nFS_MGR_RAMDISK is not propagated to recovery variant of libfs_mgr? or ramdisk variant of libfs_mgr? Sorry I still don\u0027t grasp what is expected to work but not. what is already working and shouldn\u0027t be changed.",
      "parentUuid": "9ba49b9a_7bc65b6e",
      "range": {
        "startLine": 167,
        "startChar": 18,
        "endLine": 167,
        "endChar": 33
      },
      "revId": "5bc4b60760bfb3c58ee7c16e7d6ca27651eb8a4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c0e6070_9c61e220",
        "filename": "fs_mgr/libfiemap/image_manager.cpp",
        "patchSetId": 4
      },
      "lineNbr": 83,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2022-02-11T09:15:07Z",
      "side": 1,
      "message": "Since what we really want to know is whether userdata is mounted and we can safely delete a backing image, change this to |.is_userdata_mounted| ?",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 83,
        "endChar": 38
      },
      "revId": "5bc4b60760bfb3c58ee7c16e7d6ca27651eb8a4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0032aa09_9a8956e2",
        "filename": "fs_mgr/libfiemap/image_manager.cpp",
        "patchSetId": 4
      },
      "lineNbr": 555,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2022-02-11T09:15:07Z",
      "side": 1,
      "message": "From this text, i believe this is the only difference between the two branches? Then how about we just check this directly? So instead of check isRecovery/isRamdisk, we do...\n\n```\nif (/data is mounted) {\n  // FiemapWriter::GetBlockDeviceForFile...\n  // upper branch\n} else {\n  // We cannot call FiemapWriter::GetBlockDeviceForFile, so we can *only* use device mapper\n  // lower branch\n}\n```",
      "range": {
        "startLine": 554,
        "startChar": 4,
        "endLine": 555,
        "endChar": 15
      },
      "revId": "5bc4b60760bfb3c58ee7c16e7d6ca27651eb8a4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e039abf_a4a70b50",
        "filename": "fs_mgr/libfiemap/image_manager.cpp",
        "patchSetId": 4
      },
      "lineNbr": 555,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2022-02-11T13:32:34Z",
      "side": 1,
      "message": "or just check the |image_header| file exist, because |data_dir_| might be not in /data ?",
      "parentUuid": "0032aa09_9a8956e2",
      "range": {
        "startLine": 554,
        "startChar": 4,
        "endLine": 555,
        "endChar": 15
      },
      "revId": "5bc4b60760bfb3c58ee7c16e7d6ca27651eb8a4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6365c6ae_3d031662",
        "filename": "fs_mgr/libfiemap/image_manager.cpp",
        "patchSetId": 4
      },
      "lineNbr": 555,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2022-02-11T19:04:36Z",
      "side": 1,
      "message": "Since this code affects OTAs, and we\u0027re really far into T, I don\u0027t want to refactor this too much right now. I\u0027m happy to refactor it once T branches though. /data should never be mounted in first-stage init or recovery (eg, the ramdisk cases), and we should never be using gsid in between first-stage init and /data mounting. So the existing checks should be fine, we were just missing the inclusion of vendor_ramdisk here.\n\nJaegeuk and I tentatively have plans to deprecate file pinning this year, which will significantly change libfiemap/gsid. See b/210024407 - there\u0027s still some tough problems to solve though.",
      "parentUuid": "0e039abf_a4a70b50",
      "range": {
        "startLine": 554,
        "startChar": 4,
        "endLine": 555,
        "endChar": 15
      },
      "revId": "5bc4b60760bfb3c58ee7c16e7d6ca27651eb8a4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bbaa0819_8781895c",
        "filename": "fs_mgr/libfiemap/image_manager.cpp",
        "patchSetId": 4
      },
      "lineNbr": 555,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2022-02-11T19:13:45Z",
      "side": 1,
      "message": "I see. The Android.bp still need updating though, see other comment",
      "parentUuid": "6365c6ae_3d031662",
      "range": {
        "startLine": 554,
        "startChar": 4,
        "endLine": 555,
        "endChar": 15
      },
      "revId": "5bc4b60760bfb3c58ee7c16e7d6ca27651eb8a4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ac413e4e_6939c6c1",
        "filename": "fs_mgr/libfiemap/image_manager.cpp",
        "patchSetId": 4
      },
      "lineNbr": 555,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2022-02-15T21:09:14Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "bbaa0819_8781895c",
      "range": {
        "startLine": 554,
        "startChar": 4,
        "endLine": 555,
        "endChar": 15
      },
      "revId": "5bc4b60760bfb3c58ee7c16e7d6ca27651eb8a4f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}