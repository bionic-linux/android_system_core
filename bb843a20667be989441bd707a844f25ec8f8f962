{
  "comments": [
    {
      "key": {
        "uuid": "99dbb3ac_c9c0b1d0",
        "filename": "fs_mgr/fs_mgr_main.c",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 1005480
      },
      "writtenOn": "2014-04-11T19:48:20Z",
      "side": 1,
      "message": "Why this one?",
      "range": {
        "startLine": 85,
        "startChar": 10,
        "endLine": 85,
        "endChar": 20
      },
      "revId": "bb843a20667be989441bd707a844f25ec8f8f962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99e49352_ea3dbbef",
        "filename": "fs_mgr/fs_mgr_main.c",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 1014961
      },
      "writtenOn": "2014-04-11T20:21:46Z",
      "side": 1,
      "message": "On general readability principle - leave no uninitialized var. GCC should optimize out a noop init anyway.",
      "parentUuid": "99dbb3ac_c9c0b1d0",
      "range": {
        "startLine": 85,
        "startChar": 10,
        "endLine": 85,
        "endChar": 20
      },
      "revId": "bb843a20667be989441bd707a844f25ec8f8f962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9a7eb21_ae08d788",
        "filename": "fs_mgr/include/fs_mgr.h",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1005480
      },
      "writtenOn": "2014-04-11T19:48:20Z",
      "side": 1,
      "message": "Indicate in commit message that other project(s) have pending CL for this.\nbootable/recovery is one.",
      "range": {
        "startLine": 58,
        "startChar": 0,
        "endLine": 58,
        "endChar": 41
      },
      "revId": "bb843a20667be989441bd707a844f25ec8f8f962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9df977e_3646f0e0",
        "filename": "fs_mgr/include/fs_mgr.h",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1014961
      },
      "writtenOn": "2014-04-11T20:21:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d9a7eb21_ae08d788",
      "range": {
        "startLine": 58,
        "startChar": 0,
        "endLine": 58,
        "endChar": 41
      },
      "revId": "bb843a20667be989441bd707a844f25ec8f8f962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9a7eb21_4efb3328",
        "filename": "healthd/healthd_board_default.cpp",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1005480
      },
      "writtenOn": "2014-04-11T19:48:20Z",
      "side": 1,
      "message": "C++ ... get rid of parameter",
      "range": {
        "startLine": 19,
        "startChar": 47,
        "endLine": 19,
        "endChar": 53
      },
      "revId": "bb843a20667be989441bd707a844f25ec8f8f962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9544bb3_92b0820a",
        "filename": "healthd/healthd_board_default.cpp",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1014961
      },
      "writtenOn": "2014-04-11T20:21:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d9a7eb21_4efb3328",
      "range": {
        "startLine": 19,
        "startChar": 47,
        "endLine": 19,
        "endChar": 53
      },
      "revId": "bb843a20667be989441bd707a844f25ec8f8f962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99dbb3ac_4999611a",
        "filename": "libpixelflinger/codeflinger/disassem.c",
        "patchSetId": 1
      },
      "lineNbr": 306,
      "author": {
        "id": 1005480
      },
      "writtenOn": "2014-04-11T19:48:20Z",
      "side": 1,
      "message": "I thought we had some magic macros.",
      "range": {
        "startLine": 306,
        "startChar": 7,
        "endLine": 306,
        "endChar": 13
      },
      "revId": "bb843a20667be989441bd707a844f25ec8f8f962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9544bb3_7244e667",
        "filename": "libpixelflinger/codeflinger/disassem.c",
        "patchSetId": 1
      },
      "lineNbr": 306,
      "author": {
        "id": 1014961
      },
      "writtenOn": "2014-04-11T20:21:46Z",
      "side": 1,
      "message": "That unroll into this most of the time:\n#define UNUSED(x) (void)x\nThe odd one is also there:\n#define UNUSED(x) ((x) \u003d (x))",
      "parentUuid": "99dbb3ac_4999611a",
      "range": {
        "startLine": 306,
        "startChar": 7,
        "endLine": 306,
        "endChar": 13
      },
      "revId": "bb843a20667be989441bd707a844f25ec8f8f962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9a7eb21_b1003822",
        "filename": "libutils/tests/BasicHashtable_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 400,
      "author": {
        "id": 1005480
      },
      "writtenOn": "2014-04-11T19:48:20Z",
      "side": 1,
      "message": "ASSERT_EQ() shows expected vs actual.\nWill a QA test result scraper need to know about this?",
      "range": {
        "startLine": 400,
        "startChar": 8,
        "endLine": 400,
        "endChar": 20
      },
      "revId": "bb843a20667be989441bd707a844f25ec8f8f962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9df977e_3678b004",
        "filename": "libutils/tests/BasicHashtable_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 400,
      "author": {
        "id": 1014961
      },
      "writtenOn": "2014-04-11T20:21:46Z",
      "side": 1,
      "message": "ASSERT_EQ is not set up to deal with bools, ASSERT_TRUE|FALSE is specifically made for that. And, besides, guess what bool value was there if it didn\u0027t match (false)?",
      "parentUuid": "d9a7eb21_b1003822",
      "range": {
        "startLine": 400,
        "startChar": 8,
        "endLine": 400,
        "endChar": 20
      },
      "revId": "bb843a20667be989441bd707a844f25ec8f8f962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39a1e70c_a2bbc6ec",
        "filename": "libutils/tests/LruCache_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 187,
      "author": {
        "id": 1005480
      },
      "writtenOn": "2014-04-11T19:48:20Z",
      "side": 1,
      "message": "\"%\"PRIdS ?",
      "range": {
        "startLine": 187,
        "startChar": 30,
        "endLine": 187,
        "endChar": 32
      },
      "revId": "bb843a20667be989441bd707a844f25ec8f8f962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9544bb3_b2633eee",
        "filename": "libutils/tests/LruCache_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 187,
      "author": {
        "id": 1014961
      },
      "writtenOn": "2014-04-11T20:21:46Z",
      "side": 1,
      "message": "Man printf:\nz: A following integer conversion corresponds to a size_t or  ssize_t argument.",
      "parentUuid": "39a1e70c_a2bbc6ec",
      "range": {
        "startLine": 187,
        "startChar": 30,
        "endLine": 187,
        "endChar": 32
      },
      "revId": "bb843a20667be989441bd707a844f25ec8f8f962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9a7eb21_14765aaa",
        "filename": "libutils/tests/LruCache_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 187,
      "author": {
        "id": 1005480
      },
      "writtenOn": "2014-04-11T21:07:52Z",
      "side": 1,
      "message": "It should at least be %zu and not %zd.\n\ngoogle-specific 64bit/32bit consistency: PRIuS.",
      "parentUuid": "d9544bb3_b2633eee",
      "range": {
        "startLine": 187,
        "startChar": 30,
        "endLine": 187,
        "endChar": 32
      },
      "revId": "bb843a20667be989441bd707a844f25ec8f8f962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39a1e70c_7d47c33b",
        "filename": "libutils/tests/LruCache_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 187,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2014-04-11T21:09:20Z",
      "side": 1,
      "message": "%zu is what we use everywhere else for size_t",
      "parentUuid": "d9a7eb21_14765aaa",
      "range": {
        "startLine": 187,
        "startChar": 30,
        "endLine": 187,
        "endChar": 32
      },
      "revId": "bb843a20667be989441bd707a844f25ec8f8f962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9a7eb21_7a47c53b",
        "filename": "libutils/tests/LruCache_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 187,
      "author": {
        "id": 1014961
      },
      "writtenOn": "2014-04-11T23:07:48Z",
      "side": 1,
      "message": "Yes, there is PRIuS, but why not use standard printf format specifier as per C99? I agree that %zu would be more correct for size_t, will change that. However, I really doubt we\u0027ll ever encounter %zu/%zd discrepancy on an Android device.",
      "parentUuid": "39a1e70c_7d47c33b",
      "range": {
        "startLine": 187,
        "startChar": 30,
        "endLine": 187,
        "endChar": 32
      },
      "revId": "bb843a20667be989441bd707a844f25ec8f8f962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59d5bb77_873d06a3",
        "filename": "libutils/tests/LruCache_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 187,
      "author": {
        "id": 1005480
      },
      "writtenOn": "2014-04-11T23:10:11Z",
      "side": 1,
      "message": "... except when compiling with -Werror-if-sign-of-format-flag-does-not-match-sign-of-data-which-might-be-enabled-one-day.",
      "parentUuid": "d9a7eb21_7a47c53b",
      "range": {
        "startLine": 187,
        "startChar": 30,
        "endLine": 187,
        "endChar": 32
      },
      "revId": "bb843a20667be989441bd707a844f25ec8f8f962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}