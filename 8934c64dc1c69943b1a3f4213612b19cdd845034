{
  "comments": [
    {
      "key": {
        "uuid": "1e7c6def_6ed8d2d5",
        "filename": "init/README.md",
        "patchSetId": 1
      },
      "lineNbr": 265,
      "author": {
        "id": 1096713
      },
      "writtenOn": "2017-07-18T18:04:02Z",
      "side": 1,
      "message": "nit: greater",
      "range": {
        "startLine": 265,
        "startChar": 25,
        "endLine": 265,
        "endChar": 33
      },
      "revId": "8934c64dc1c69943b1a3f4213612b19cdd845034",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c2f2d168_fbf0baa9",
        "filename": "init/README.md",
        "patchSetId": 1
      },
      "lineNbr": 265,
      "author": {
        "id": 1175998
      },
      "writtenOn": "2017-07-18T18:59:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1e7c6def_6ed8d2d5",
      "range": {
        "startLine": 265,
        "startChar": 25,
        "endLine": 265,
        "endChar": 33
      },
      "revId": "8934c64dc1c69943b1a3f4213612b19cdd845034",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b05d796_f38ead34",
        "filename": "init/README.md",
        "patchSetId": 1
      },
      "lineNbr": 269,
      "author": {
        "id": 1096713
      },
      "writtenOn": "2017-07-18T18:04:02Z",
      "side": 1,
      "message": "nit: greater",
      "range": {
        "startLine": 269,
        "startChar": 25,
        "endLine": 269,
        "endChar": 33
      },
      "revId": "8934c64dc1c69943b1a3f4213612b19cdd845034",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5e8e9b1_50eeb805",
        "filename": "init/README.md",
        "patchSetId": 1
      },
      "lineNbr": 269,
      "author": {
        "id": 1175998
      },
      "writtenOn": "2017-07-18T18:59:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1b05d796_f38ead34",
      "range": {
        "startLine": 269,
        "startChar": 25,
        "endLine": 269,
        "endChar": 33
      },
      "revId": "8934c64dc1c69943b1a3f4213612b19cdd845034",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d790693_3cafca59",
        "filename": "init/README.md",
        "patchSetId": 1
      },
      "lineNbr": 273,
      "author": {
        "id": 1096713
      },
      "writtenOn": "2017-07-18T18:04:02Z",
      "side": 1,
      "message": "nit: greater",
      "range": {
        "startLine": 273,
        "startChar": 25,
        "endLine": 273,
        "endChar": 33
      },
      "revId": "8934c64dc1c69943b1a3f4213612b19cdd845034",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4a25e65_98698ad7",
        "filename": "init/README.md",
        "patchSetId": 1
      },
      "lineNbr": 273,
      "author": {
        "id": 1175998
      },
      "writtenOn": "2017-07-18T18:59:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8d790693_3cafca59",
      "range": {
        "startLine": 273,
        "startChar": 25,
        "endLine": 273,
        "endChar": 33
      },
      "revId": "8934c64dc1c69943b1a3f4213612b19cdd845034",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "83867ce7_08db27ff",
        "filename": "init/service.cpp",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 1096713
      },
      "writtenOn": "2017-07-18T18:04:02Z",
      "side": 1,
      "message": "Totally outside the scope of this CL: It seems like this constructor should delegate to the other, so we don\u0027t need to repeat initializations like we have to now.",
      "revId": "8934c64dc1c69943b1a3f4213612b19cdd845034",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "89726c1a_29823a71",
        "filename": "init/service.cpp",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 1175998
      },
      "writtenOn": "2017-07-18T18:59:43Z",
      "side": 1,
      "message": "ack",
      "parentUuid": "83867ce7_08db27ff",
      "revId": "8934c64dc1c69943b1a3f4213612b19cdd845034",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75b65442_c8b3f1f2",
        "filename": "init/service.cpp",
        "patchSetId": 1
      },
      "lineNbr": 516,
      "author": {
        "id": 1096713
      },
      "writtenOn": "2017-07-18T18:04:02Z",
      "side": 1,
      "message": "soft_limit_in_bytes",
      "range": {
        "startLine": 516,
        "startChar": 16,
        "endLine": 516,
        "endChar": 32
      },
      "revId": "8934c64dc1c69943b1a3f4213612b19cdd845034",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "854fd2c6_0d2cbac3",
        "filename": "init/service.cpp",
        "patchSetId": 1
      },
      "lineNbr": 516,
      "author": {
        "id": 1175998
      },
      "writtenOn": "2017-07-18T18:59:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "75b65442_c8b3f1f2",
      "range": {
        "startLine": 516,
        "startChar": 16,
        "endLine": 516,
        "endChar": 32
      },
      "revId": "8934c64dc1c69943b1a3f4213612b19cdd845034",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "69412930_d4f75b6c",
        "filename": "libprocessgroup/include/processgroup/processgroup.h",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1096713
      },
      "writtenOn": "2017-07-18T18:04:02Z",
      "side": 1,
      "message": "Do we prefer int64_t or something with a well-defined size?  Presumably there are no 64-bit systems out there where sizeof(long long) is 4, so this is probably mostly an academic question.  But I didn\u0027t know if we\u0027d prefer the explicit sizing, or if \"long long\" is preferred.",
      "range": {
        "startLine": 37,
        "startChar": 56,
        "endLine": 37,
        "endChar": 65
      },
      "revId": "8934c64dc1c69943b1a3f4213612b19cdd845034",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c00d6134_18356817",
        "filename": "libprocessgroup/include/processgroup/processgroup.h",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1175998
      },
      "writtenOn": "2017-07-18T18:59:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "69412930_d4f75b6c",
      "range": {
        "startLine": 37,
        "startChar": 56,
        "endLine": 37,
        "endChar": 65
      },
      "revId": "8934c64dc1c69943b1a3f4213612b19cdd845034",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b6f357e_842a4a0c",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 430,
      "author": {
        "id": 1096713
      },
      "writtenOn": "2017-07-18T18:04:02Z",
      "side": 1,
      "message": "\u0027path\u0027 is the empty string at this point.  Did we intend our convertUidPidToPath() call to come before this?",
      "revId": "8934c64dc1c69943b1a3f4213612b19cdd845034",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44470d9e_9fbfc587",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 430,
      "author": {
        "id": 1175998
      },
      "writtenOn": "2017-07-18T18:59:43Z",
      "side": 1,
      "message": "yes, this detects if we support memcg or not, so is fail fast",
      "parentUuid": "1b6f357e_842a4a0c",
      "revId": "8934c64dc1c69943b1a3f4213612b19cdd845034",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf192b0b_6f71e33c",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 443,
      "author": {
        "id": 1096713
      },
      "writtenOn": "2017-07-18T18:04:02Z",
      "side": 1,
      "message": "I\u0027m probably missing something, but why not:\n\n  if (fprintf(FILE, \"%lld\", value) \u003c 0) {\n    [preexisting error logic]\n  }\n\nThat would get rid of the need for this intermediate buffer.  If we need this intermediate buffer, then see my next comment.",
      "range": {
        "startLine": 442,
        "startChar": 0,
        "endLine": 443,
        "endChar": 58
      },
      "revId": "8934c64dc1c69943b1a3f4213612b19cdd845034",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a1c705e_5fbd4f73",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 443,
      "author": {
        "id": 1175998
      },
      "writtenOn": "2017-07-18T18:59:43Z",
      "side": 1,
      "message": "I kept same logic as original file.",
      "parentUuid": "cf192b0b_6f71e33c",
      "range": {
        "startLine": 442,
        "startChar": 0,
        "endLine": 443,
        "endChar": 58
      },
      "revId": "8934c64dc1c69943b1a3f4213612b19cdd845034",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "988c9d9a_d08c471b",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 445,
      "author": {
        "id": 1096713
      },
      "writtenOn": "2017-07-18T18:04:02Z",
      "side": 1,
      "message": "This is a hypothetical problem (although not something we should encounter with the way the code currently is).\n\nIf snprintf() has to truncate, say because this would have been 50 characters long (51 including the \u0027\\0\u0027 terminator), then \u0027len\u0027 is going to be 50.  But our \u0027data\u0027 buffer will remain 32 characters (with the last character being \u0027\\0\u0027), so this write() call will have us reading \u0027data\u0027 out-of-bound by 18 bytes, and, if not crashing from accessing illegal memory, will have us write other stack data to this file.\n\nAs a practical matter, 2^64 is 20 decimal digits long, so we shouldn\u0027t hit this.  But I\u0027d still prefer to put in a check before this, something like:\n\n  if (len \u003e\u003d sizeof(data)) {\n    // Some sort of truncation error logic.\n  }\n\nboth to defend against future changes to MAX_DATA_LEN and to prevent someone copy/pasting this code somewhere else where they don\u0027t have the buffer margins.",
      "revId": "8934c64dc1c69943b1a3f4213612b19cdd845034",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9e97f476_801c7698",
        "filename": "libprocessgroup/processgroup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 445,
      "author": {
        "id": 1175998
      },
      "writtenOn": "2017-07-18T18:59:43Z",
      "side": 1,
      "message": "true, but we have max 64",
      "parentUuid": "988c9d9a_d08c471b",
      "revId": "8934c64dc1c69943b1a3f4213612b19cdd845034",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}