{
  "comments": [
    {
      "key": {
        "uuid": "0e86abc5_c46c6b8b",
        "filename": "libsparse/tests/Android.bp",
        "patchSetId": 3
      },
      "lineNbr": 16,
      "author": {
        "id": 1156728
      },
      "writtenOn": "2017-04-19T16:31:12Z",
      "side": 1,
      "message": "host doesn\u0027t have a shared libutils.  I think static is OK.",
      "revId": "0c9f8161d95cb3a86cb0c87e2e700d22e0e817b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b7796e5_2ba89136",
        "filename": "libsparse/tests/sparse_format_test.h",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2017-04-19T17:14:40Z",
      "side": 1,
      "message": "Why do you need a copy here?  Maybe move sparse_format.h to include/sparse/private/sparse_format.h, or add a new private/ directory and export headers from there with a cc_library_headers module?",
      "revId": "0c9f8161d95cb3a86cb0c87e2e700d22e0e817b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c0d3c07b_c3b0b9bb",
        "filename": "libsparse/tests/sparse_format_test.h",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1156728
      },
      "writtenOn": "2017-04-20T13:35:16Z",
      "side": 1,
      "message": "What if someone changes the sparse_header or changes the way it\u0027s compiled so that the packing breaks?  In those cases I would want the tests to fail (in the same way that a remote bootloader would fail).\n\nIt seemed more appropriate to duplicate them, but I can undo it if you want?",
      "parentUuid": "2b7796e5_2ba89136",
      "revId": "0c9f8161d95cb3a86cb0c87e2e700d22e0e817b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22c85dae_e44add55",
        "filename": "libsparse/tests/sparse_format_test.h",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-04-20T16:21:51Z",
      "side": 1,
      "message": "you can add a static_assert about the size. that\u0027s a perfectly good test in its own right...",
      "parentUuid": "c0d3c07b_c3b0b9bb",
      "revId": "0c9f8161d95cb3a86cb0c87e2e700d22e0e817b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9b68bc7_620efd66",
        "filename": "libsparse/tests/sparse_format_test.h",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 1156728
      },
      "writtenOn": "2017-04-19T16:31:12Z",
      "side": 1,
      "message": "added packed here.  Original doesn\u0027t have attribute packed, but it had better pack nicely.",
      "revId": "0c9f8161d95cb3a86cb0c87e2e700d22e0e817b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56bbc21f_4615e322",
        "filename": "libsparse/tests/sparse_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2017-04-19T17:14:40Z",
      "side": 1,
      "message": "We try to avoid new dependencies on libutils, libbase + STL is much better",
      "revId": "0c9f8161d95cb3a86cb0c87e2e700d22e0e817b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61d2f083_7351d8bd",
        "filename": "libsparse/tests/sparse_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2017-04-19T17:17:47Z",
      "side": 1,
      "message": "Usually, the only good reason to use utils/FileMap.h is if you want to support Windows (host tools like adb etc.).",
      "parentUuid": "56bbc21f_4615e322",
      "revId": "0c9f8161d95cb3a86cb0c87e2e700d22e0e817b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6dc41b29_ff8bcdc8",
        "filename": "libsparse/tests/sparse_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 1156728
      },
      "writtenOn": "2017-04-20T13:35:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "61d2f083_7351d8bd",
      "revId": "0c9f8161d95cb3a86cb0c87e2e700d22e0e817b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b60a5877_ee897746",
        "filename": "libsparse/tests/sparse_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2017-04-19T17:14:40Z",
      "side": 1,
      "message": "Blank lines after function definitions.",
      "revId": "0c9f8161d95cb3a86cb0c87e2e700d22e0e817b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3b478c8_f2bb70c1",
        "filename": "libsparse/tests/sparse_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 1156728
      },
      "writtenOn": "2017-04-20T13:35:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b60a5877_ee897746",
      "revId": "0c9f8161d95cb3a86cb0c87e2e700d22e0e817b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a05e9d3_0eb3cb16",
        "filename": "libsparse/tests/sparse_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2017-04-19T17:14:40Z",
      "side": 1,
      "message": "const std::string\u0026 everywhere",
      "range": {
        "startLine": 51,
        "startChar": 20,
        "endLine": 51,
        "endChar": 40
      },
      "revId": "0c9f8161d95cb3a86cb0c87e2e700d22e0e817b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d84ec89_d0a39685",
        "filename": "libsparse/tests/sparse_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 1156728
      },
      "writtenOn": "2017-04-20T13:35:16Z",
      "side": 1,
      "message": "Is const char* OK for passing filenames around?",
      "parentUuid": "3a05e9d3_0eb3cb16",
      "range": {
        "startLine": 51,
        "startChar": 20,
        "endLine": 51,
        "endChar": 40
      },
      "revId": "0c9f8161d95cb3a86cb0c87e2e700d22e0e817b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d2a757c_f85541fc",
        "filename": "libsparse/tests/sparse_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2017-04-19T17:14:40Z",
      "side": 1,
      "message": "These files are all small, android::base::ReadFileToString is probably fine.",
      "revId": "0c9f8161d95cb3a86cb0c87e2e700d22e0e817b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f06b763_a194801a",
        "filename": "libsparse/tests/sparse_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1156728
      },
      "writtenOn": "2017-04-20T13:35:16Z",
      "side": 1,
      "message": "I am supposing, someday, that someone will want a test for \u003e INT_MAX sized chunks...  anyway, will use ifstream, since it\u0027s not ascii data, but might need to switch to mmap if this grows.",
      "parentUuid": "0d2a757c_f85541fc",
      "revId": "0c9f8161d95cb3a86cb0c87e2e700d22e0e817b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22a719bc_d3e48330",
        "filename": "libsparse/tests/sparse_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 113,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2017-04-19T17:14:40Z",
      "side": 1,
      "message": "Instead of relying on these to be installed (they often aren\u0027t by default).  Could you link them into the tests, probably by making sure that most of the implementation is in libsparse and calling directly into it?",
      "revId": "0c9f8161d95cb3a86cb0c87e2e700d22e0e817b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27da4177_d008c192",
        "filename": "libsparse/tests/sparse_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 113,
      "author": {
        "id": 1156728
      },
      "writtenOn": "2017-04-20T13:35:16Z",
      "side": 1,
      "message": "see more patches coming.",
      "parentUuid": "22a719bc_d3e48330",
      "revId": "0c9f8161d95cb3a86cb0c87e2e700d22e0e817b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4c9a9602_2be383d3",
        "filename": "libsparse/tests/sparse_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 171,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2017-04-19T17:14:40Z",
      "side": 1,
      "message": "why not std::vector\u003cstd::string\u003e?",
      "revId": "0c9f8161d95cb3a86cb0c87e2e700d22e0e817b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02abfc07_edd371b6",
        "filename": "libsparse/tests/sparse_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 171,
      "author": {
        "id": 1156728
      },
      "writtenOn": "2017-04-20T13:35:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4c9a9602_2be383d3",
      "revId": "0c9f8161d95cb3a86cb0c87e2e700d22e0e817b6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}