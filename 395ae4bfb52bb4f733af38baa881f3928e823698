{
  "comments": [
    {
      "key": {
        "uuid": "a0137352_7c8f1c70",
        "filename": "fs_mgr/fs_mgr_remount.cpp",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2020-06-11T10:29:17Z",
      "side": 1,
      "message": "NB: special log handler",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 94,
        "endChar": 1
      },
      "revId": "395ae4bfb52bb4f733af38baa881f3928e823698",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a99b80d3_91a7aa88",
        "filename": "fs_mgr/fs_mgr_remount.cpp",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2020-06-11T19:50:59Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a0137352_7c8f1c70",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 94,
        "endChar": 1
      },
      "revId": "395ae4bfb52bb4f733af38baa881f3928e823698",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63ad333c_28faa79c",
        "filename": "fs_mgr/fs_mgr_remount.cpp",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2020-06-11T10:29:17Z",
      "side": 1,
      "message": "remount can be operated by adb (scripting) before vold is active, even before /data is remounted.\n\nI expect this will not help, but maybe to educate, I fully expect something like:\n\n    auto bootreason \u003d android::base::GetProperty(\"sys.boot.reason\", \"\");\n    if (bootreason !\u003d \"reboot,ota\") return false;\n\nwould drop the binder overhead, but this property will not be set until after /data mounts which is too late to resolve the race.\n\nOn the other hand, LAST_REBOOT_REASON_FILE (/metadata/bootstat/persist.sys.boot.reason) may offer clues prior to /data mounting if there was a controlled reboot that would lead to checkpointing. I use the word clues because knowing the OTA or other mechanisms will lay out the possible reboot reasons that are implicated with checkpointing and we can get an early clue. Once data mounts, this file is erased as bootstat slurps it up to generate the canonical sys.boot.reason. All we need to do is hold off remount success until we know for sure.",
      "range": {
        "startLine": 109,
        "startChar": 4,
        "endLine": 109,
        "endChar": 80
      },
      "revId": "395ae4bfb52bb4f733af38baa881f3928e823698",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82676e02_48fc3bc8",
        "filename": "fs_mgr/fs_mgr_remount.cpp",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2020-06-11T19:50:59Z",
      "side": 1,
      "message": "It\u0027s possible to enter checkpoints without an OTA, I believe. Definitely just by typing the vdc command, but I thought out-of-band updates that don\u0027t go through update_engine would do it as well.\n\nWhat if I make the check work without binder, by looking for dm-bow or the checkpointing flag on f2fs?\n\nWhat is the scripting case? Would that be like a .rc file that remounts before vold starts?",
      "parentUuid": "63ad333c_28faa79c",
      "range": {
        "startLine": 109,
        "startChar": 4,
        "endLine": 109,
        "endChar": 80
      },
      "revId": "395ae4bfb52bb4f733af38baa881f3928e823698",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a598eef_e9219d85",
        "filename": "fs_mgr/fs_mgr_remount.cpp",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2020-06-11T20:17:47Z",
      "side": 1,
      "message": "vold at least acts like a HAL, which would deal with future changes. dm-bow or checkpointing flag on f2fs also occur later, as in when /data is mounted, so does not solve the race condition where remount can be requested before /data is mounted, or vold is started ... but when we _expect_ vold to manage a checkpoint immediately when it starts up. I think the _only_ case where vold does this immediately is right after an OTA, so that, and whatever can do that, is the only case(s) that is of concern.\n\nAnother way to \u0027solve\u0027 this is to block remount command until vold is present, that will have the pleasant side effect of making sure scripts do not need to retry if vold does not intend to checkpoint. In this case, we have to block until we are sure vold is not going to checkpoint (also an implementation detail I am not sure about)?\n\nTest scripts, KISS:\n\n#! /bin/sh\n. . .\n# something something that causes the device to perform checkpointing upon reboot\n. . .\nadb reboot ota\nadb wait-for-device\nadb shell su root remount    # This occurs ~ten seconds before /data is mounted?\n. . .",
      "parentUuid": "82676e02_48fc3bc8",
      "range": {
        "startLine": 109,
        "startChar": 4,
        "endLine": 109,
        "endChar": 80
      },
      "revId": "395ae4bfb52bb4f733af38baa881f3928e823698",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d0d1f81_2b6f9b1f",
        "filename": "fs_mgr/fs_mgr_remount.cpp",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2020-06-12T23:00:07Z",
      "side": 1,
      "message": "Hrm, I don\u0027t think adbd can start before vold. It looks like vold starts in early-fs which is the first thing triggered by late-init. It\u0027s true that adb can be used if /data is not mounted (since /data can fail to mount), but I don\u0027t think adb can be used before the mount is attempted, or before early-fs is triggered. When I run: \"adb reboot \u0026\u0026 adb wait-for-device \u0026\u0026 adb shell su root ls -l /data\", I always get stuff back.\n\nIf so, the binder check should be fine. Alternately I can do the dm-bow/f2fs flag checks in a static library inside vold, so at least the code is living in the same place.",
      "parentUuid": "4a598eef_e9219d85",
      "range": {
        "startLine": 109,
        "startChar": 4,
        "endLine": 109,
        "endChar": 80
      },
      "revId": "395ae4bfb52bb4f733af38baa881f3928e823698",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0bc2669c_9429ba94",
        "filename": "fs_mgr/fs_mgr_remount.cpp",
        "patchSetId": 1
      },
      "lineNbr": 220,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2020-06-11T10:29:17Z",
      "side": 1,
      "message": "Q: overlayfs is activated at boot with said backing. Checkpointing is triggered by OTA et.al.. Such triggers would in other configurations wipe out /scratch on dynamic partitions to prevent that, but maybe we are not doing so for the fiemap? Maybe we should make sure OTA/flashall wipes out the fiemap to /data too, or is that already happening?\n\nAt least this would prevent re-creating the fiemap.",
      "range": {
        "startLine": 219,
        "startChar": 0,
        "endLine": 220,
        "endChar": 75
      },
      "revId": "395ae4bfb52bb4f733af38baa881f3928e823698",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "159dede8_95478f83",
        "filename": "fs_mgr/fs_mgr_remount.cpp",
        "patchSetId": 1
      },
      "lineNbr": 220,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2020-06-11T19:50:59Z",
      "side": 1,
      "message": "Yeah, flashall already wipes the fiemap (by creating a tombstone on /metadata that causes us to ignore and then delete it when /data is mounted).\n\nI can also have vold refuse to start a checkpoint when adb remount has been activated.",
      "parentUuid": "0bc2669c_9429ba94",
      "range": {
        "startLine": 219,
        "startChar": 0,
        "endLine": 220,
        "endChar": 75
      },
      "revId": "395ae4bfb52bb4f733af38baa881f3928e823698",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43de6de7_19d829bd",
        "filename": "fs_mgr/fs_mgr_remount.cpp",
        "patchSetId": 1
      },
      "lineNbr": 220,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2020-06-11T20:17:47Z",
      "side": 1,
      "message": "sgtm, but there would need to be clear communications back to the caller about why.",
      "parentUuid": "159dede8_95478f83",
      "range": {
        "startLine": 219,
        "startChar": 0,
        "endLine": 220,
        "endChar": 75
      },
      "revId": "395ae4bfb52bb4f733af38baa881f3928e823698",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81f9b6f2_bf5f8465",
        "filename": "fs_mgr/fs_mgr_remount.cpp",
        "patchSetId": 1
      },
      "lineNbr": 220,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2020-06-12T23:00:07Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "43de6de7_19d829bd",
      "range": {
        "startLine": 219,
        "startChar": 0,
        "endLine": 220,
        "endChar": 75
      },
      "revId": "395ae4bfb52bb4f733af38baa881f3928e823698",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70bcab94_fb5209c0",
        "filename": "fs_mgr/fs_mgr_remount.cpp",
        "patchSetId": 1
      },
      "lineNbr": 224,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2020-06-11T10:29:17Z",
      "side": 1,
      "message": "Use LOG(ERROR)\n\nWe have a special LOG handler here that sends the logs to the logger, and the message to stderr at the same time.",
      "range": {
        "startLine": 224,
        "startChar": 12,
        "endLine": 224,
        "endChar": 77
      },
      "revId": "395ae4bfb52bb4f733af38baa881f3928e823698",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9266573c_f5b3b1fa",
        "filename": "fs_mgr/fs_mgr_remount.cpp",
        "patchSetId": 1
      },
      "lineNbr": 224,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2020-06-11T19:50:59Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "70bcab94_fb5209c0",
      "range": {
        "startLine": 224,
        "startChar": 12,
        "endLine": 224,
        "endChar": 77
      },
      "revId": "395ae4bfb52bb4f733af38baa881f3928e823698",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}