{
  "comments": [
    {
      "key": {
        "uuid": "706d52b3_7616cefc",
        "filename": "include/nativebridge/native_bridge.h",
        "patchSetId": 3
      },
      "lineNbr": 163,
      "author": {
        "id": 1051588
      },
      "writtenOn": "2015-05-04T10:15:55Z",
      "side": 1,
      "message": "So, for signals other than SIGSEGV, native bridge can still use sigaction()?",
      "range": {
        "startLine": 151,
        "startChar": 0,
        "endLine": 163,
        "endChar": 52
      },
      "revId": "8e28a079902983c16015a0b1155153c13c2339a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f06142bc_74688120",
        "filename": "include/nativebridge/native_bridge.h",
        "patchSetId": 3
      },
      "lineNbr": 163,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-05-04T15:03:33Z",
      "side": 1,
      "message": "The question is are there other important ones? If so, please describe a range that you think covers acceptable use cases.\n\nI thought only SIGSEGV would be important. Everything else, not so much.",
      "parentUuid": "706d52b3_7616cefc",
      "range": {
        "startLine": 151,
        "startChar": 0,
        "endLine": 163,
        "endChar": 52
      },
      "revId": "8e28a079902983c16015a0b1155153c13c2339a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "706d52b3_b9bdb7fb",
        "filename": "include/nativebridge/native_bridge.h",
        "patchSetId": 3
      },
      "lineNbr": 163,
      "author": {
        "id": 1051588
      },
      "writtenOn": "2015-05-05T02:36:11Z",
      "side": 1,
      "message": "I mean: Native bridge registers signal handler on behalf of apps code  native bridge is OK to use sigaction? \n\nA further discussion, how should native bridge decide which signal to use sigaction, and which one not? Can it assumes ART only call getSignalHandler(SIGSEGV), thus sigaction() all other signal handlers? (to prevent future ART changes from breaking it, native bridge can return NULL on getSignalHandler for signals other then SIGSEGV).",
      "parentUuid": "f06142bc_74688120",
      "range": {
        "startLine": 151,
        "startChar": 0,
        "endLine": 163,
        "endChar": 52
      },
      "revId": "8e28a079902983c16015a0b1155153c13c2339a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0218a87_28396352",
        "filename": "include/nativebridge/native_bridge.h",
        "patchSetId": 3
      },
      "lineNbr": 163,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-05-05T03:30:41Z",
      "side": 1,
      "message": "This is not intended to forbid the use of sigaction.\n\nThis API is for the cases when a native bridge would like the runtime to ensure that its handler is always first (after ART). If you are interested in other signals, and they don\u0027t have an ordering constraint like SIGSEGV, this isn\u0027t gonna force you to do it this way (libsigchain still accepts general sigaction...).\n\nMy original question was whether only SIGSEGV is enough. After talking with bdc, we\u0027ll likely remove the SIGSEGV restriction, and ART will just query the whole range supported by libsigchain (where this prioritization will be implemented). If you don\u0027t want it handled, simply return null for those signals and call sigaction yourself. Same goes for any additional handlers you want installed - just call sigaction normally, and they\u0027ll be in the normal chain.\n\nDoes this sound reasonable to you?",
      "parentUuid": "706d52b3_b9bdb7fb",
      "range": {
        "startLine": 151,
        "startChar": 0,
        "endLine": 163,
        "endChar": 52
      },
      "revId": "8e28a079902983c16015a0b1155153c13c2339a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}