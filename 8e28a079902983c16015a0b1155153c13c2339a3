{
  "comments": [
    {
      "key": {
        "uuid": "4d36f5df_d2654491",
        "filename": "include/nativebridge/native_bridge.h",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1051763
      },
      "writtenOn": "2015-05-06T03:55:56Z",
      "side": 1,
      "message": "Can we merge this new interface at the end of existing NativeBridgeCallbacks? Because we don\u0027t want to keep forward-compatible for native bridge.",
      "range": {
        "startLine": 149,
        "startChar": 39,
        "endLine": 149,
        "endChar": 60
      },
      "revId": "8e28a079902983c16015a0b1155153c13c2339a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d1e2d58_092dd98f",
        "filename": "include/nativebridge/native_bridge.h",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-05-06T04:16:04Z",
      "side": 1,
      "message": "Please explain why. Please also remember that this interface is not meant to be Intel-centric.\n\n1) I much rather prefer it that way. If a vendor chooses, this supports it. Houdini is still free to fail initialization to avoid this.\n\n2) I\u0027m getting mixed signals here, as Eric didn\u0027t complain.\n\n\nThere is an argument to merge this into the primary structure, as L libnativebridge isn\u0027t designed forward-compatible. But that isn\u0027t a particularly good reason IMHO.",
      "parentUuid": "4d36f5df_d2654491",
      "range": {
        "startLine": 149,
        "startChar": 39,
        "endLine": 149,
        "endChar": 60
      },
      "revId": "8e28a079902983c16015a0b1155153c13c2339a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d39c1d0_117bcc3c",
        "filename": "include/nativebridge/native_bridge.h",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1051763
      },
      "writtenOn": "2015-05-06T04:26:58Z",
      "side": 1,
      "message": "Hi Andreas,\nYes. You\u0027re right. The native bridge is a general component.\nBut for every impl of native bridge, the compatibility issue is not only about the interface. For every dev of native bridge, they have to consider the status of more other Android components. So the forward-compatibility becomes useless. Instead, a clear interface should be much helpful.",
      "parentUuid": "8d1e2d58_092dd98f",
      "range": {
        "startLine": 149,
        "startChar": 39,
        "endLine": 149,
        "endChar": 60
      },
      "revId": "8e28a079902983c16015a0b1155153c13c2339a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d1e2d58_e98dfd03",
        "filename": "include/nativebridge/native_bridge.h",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-05-06T05:06:47Z",
      "side": 1,
      "message": "I find that a very Houdini-centric answer. Yes, Houdini provides stubs/trampolines/whatever you call them for many (all) of the libraries in /system. But that is purely a performance-point implementation-detail IMHO. It is perfectly possible to translate *any* call and thus be forward-compatible, as you *can* be agnostic of any library.\n\nAs the initialization failure is a workable solution for a bailout, you still don\u0027t really convince me here why we should not aim for it.",
      "parentUuid": "2d39c1d0_117bcc3c",
      "range": {
        "startLine": 149,
        "startChar": 39,
        "endLine": 149,
        "endChar": 60
      },
      "revId": "8e28a079902983c16015a0b1155153c13c2339a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d39c1d0_11e18c4d",
        "filename": "include/nativebridge/native_bridge.h",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1051763
      },
      "writtenOn": "2015-05-06T07:11:41Z",
      "side": 1,
      "message": "For fail initialization solution, how does houdini check the version of libnativebridge? Do you mean there\u0027s another new interface out there? Or, houdini should provide a new callback?\n\nFor the impl of v2 interface, it\u0027s OK if you think current solution is better than all-in-one. BTW, if the v3 interface is needed in future, will we extend the NativeBridgeCallbacks2, or define a new NatvieBridgeCallback3?",
      "parentUuid": "8d1e2d58_e98dfd03",
      "range": {
        "startLine": 149,
        "startChar": 39,
        "endLine": 149,
        "endChar": 60
      },
      "revId": "8e28a079902983c16015a0b1155153c13c2339a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd290587_5100366f",
        "filename": "include/nativebridge/native_bridge.h",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-05-06T19:16:40Z",
      "side": 1,
      "message": "\u003e\u003e For fail initialization solution, how does houdini check the version of libnativebridge?\n\nWhat exactly do you mean here?\n\n\u003e\u003e For the impl of v2 interface, it\u0027s OK if you think current solution is better than all-in-one. BTW, if the v3 interface is needed in future, will we extend the NativeBridgeCallbacks2, or define a new NatvieBridgeCallback3?\n\nWe will extend to make sure we are backwards compatible.",
      "parentUuid": "2d39c1d0_11e18c4d",
      "range": {
        "startLine": 149,
        "startChar": 39,
        "endLine": 149,
        "endChar": 60
      },
      "revId": "8e28a079902983c16015a0b1155153c13c2339a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d36f5df_18ff6d79",
        "filename": "include/nativebridge/native_bridge.h",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1051763
      },
      "writtenOn": "2015-05-07T02:11:22Z",
      "side": 1,
      "message": "\u003e\u003e\u003e\u003e For fail initialization solution, how does houdini check the version of libnativebridge?\n\u003e\u003e What exactly do you mean here?\nAndreas mentioned \"Houdini is still free to fail initialization to avoid this\" in previous comments. I think it\u0027s good idea to give houdini a chance to determine whether supports current interface version of libnativebridge before initialization. But houdini cannot get the interface version in current code.",
      "parentUuid": "cd290587_5100366f",
      "range": {
        "startLine": 149,
        "startChar": 39,
        "endLine": 149,
        "endChar": 60
      },
      "revId": "8e28a079902983c16015a0b1155153c13c2339a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d8435cc_78b3de4c",
        "filename": "include/nativebridge/native_bridge.h",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-05-07T02:24:57Z",
      "side": 1,
      "message": "See the comments before: A second callback will be added to NativeBridgeCallbacks2.",
      "parentUuid": "4d36f5df_18ff6d79",
      "range": {
        "startLine": 149,
        "startChar": 39,
        "endLine": 149,
        "endChar": 60
      },
      "revId": "8e28a079902983c16015a0b1155153c13c2339a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d36f5df_b8b181c2",
        "filename": "include/nativebridge/native_bridge.h",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1051763
      },
      "writtenOn": "2015-05-07T02:56:10Z",
      "side": 1,
      "message": "Got it. OK to me. Sorry for missing your comments.",
      "parentUuid": "4d8435cc_78b3de4c",
      "range": {
        "startLine": 149,
        "startChar": 39,
        "endLine": 149,
        "endChar": 60
      },
      "revId": "8e28a079902983c16015a0b1155153c13c2339a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "706d52b3_7616cefc",
        "filename": "include/nativebridge/native_bridge.h",
        "patchSetId": 3
      },
      "lineNbr": 163,
      "author": {
        "id": 1051588
      },
      "writtenOn": "2015-05-04T10:15:55Z",
      "side": 1,
      "message": "So, for signals other than SIGSEGV, native bridge can still use sigaction()?",
      "range": {
        "startLine": 151,
        "startChar": 0,
        "endLine": 163,
        "endChar": 52
      },
      "revId": "8e28a079902983c16015a0b1155153c13c2339a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f06142bc_74688120",
        "filename": "include/nativebridge/native_bridge.h",
        "patchSetId": 3
      },
      "lineNbr": 163,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-05-04T15:03:33Z",
      "side": 1,
      "message": "The question is are there other important ones? If so, please describe a range that you think covers acceptable use cases.\n\nI thought only SIGSEGV would be important. Everything else, not so much.",
      "parentUuid": "706d52b3_7616cefc",
      "range": {
        "startLine": 151,
        "startChar": 0,
        "endLine": 163,
        "endChar": 52
      },
      "revId": "8e28a079902983c16015a0b1155153c13c2339a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "706d52b3_b9bdb7fb",
        "filename": "include/nativebridge/native_bridge.h",
        "patchSetId": 3
      },
      "lineNbr": 163,
      "author": {
        "id": 1051588
      },
      "writtenOn": "2015-05-05T02:36:11Z",
      "side": 1,
      "message": "I mean: Native bridge registers signal handler on behalf of apps code  native bridge is OK to use sigaction? \n\nA further discussion, how should native bridge decide which signal to use sigaction, and which one not? Can it assumes ART only call getSignalHandler(SIGSEGV), thus sigaction() all other signal handlers? (to prevent future ART changes from breaking it, native bridge can return NULL on getSignalHandler for signals other then SIGSEGV).",
      "parentUuid": "f06142bc_74688120",
      "range": {
        "startLine": 151,
        "startChar": 0,
        "endLine": 163,
        "endChar": 52
      },
      "revId": "8e28a079902983c16015a0b1155153c13c2339a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0218a87_28396352",
        "filename": "include/nativebridge/native_bridge.h",
        "patchSetId": 3
      },
      "lineNbr": 163,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-05-05T03:30:41Z",
      "side": 1,
      "message": "This is not intended to forbid the use of sigaction.\n\nThis API is for the cases when a native bridge would like the runtime to ensure that its handler is always first (after ART). If you are interested in other signals, and they don\u0027t have an ordering constraint like SIGSEGV, this isn\u0027t gonna force you to do it this way (libsigchain still accepts general sigaction...).\n\nMy original question was whether only SIGSEGV is enough. After talking with bdc, we\u0027ll likely remove the SIGSEGV restriction, and ART will just query the whole range supported by libsigchain (where this prioritization will be implemented). If you don\u0027t want it handled, simply return null for those signals and call sigaction yourself. Same goes for any additional handlers you want installed - just call sigaction normally, and they\u0027ll be in the normal chain.\n\nDoes this sound reasonable to you?",
      "parentUuid": "706d52b3_b9bdb7fb",
      "range": {
        "startLine": 151,
        "startChar": 0,
        "endLine": 163,
        "endChar": 52
      },
      "revId": "8e28a079902983c16015a0b1155153c13c2339a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "504a0e43_f90ac8a6",
        "filename": "include/nativebridge/native_bridge.h",
        "patchSetId": 3
      },
      "lineNbr": 163,
      "author": {
        "id": 1051588
      },
      "writtenOn": "2015-05-05T05:30:24Z",
      "side": 1,
      "message": "Yes, sounds good. thanks.",
      "parentUuid": "b0218a87_28396352",
      "range": {
        "startLine": 151,
        "startChar": 0,
        "endLine": 163,
        "endChar": 52
      },
      "revId": "8e28a079902983c16015a0b1155153c13c2339a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d36f5df_12cd0c05",
        "filename": "libnativebridge/native_bridge.cc",
        "patchSetId": 3
      },
      "lineNbr": 86,
      "author": {
        "id": 1051763
      },
      "writtenOn": "2015-05-06T04:15:31Z",
      "side": 1,
      "message": "BTW, can we make this var as const to avoid modification?\nThanks, Jinghui",
      "range": {
        "startLine": 86,
        "startChar": 30,
        "endLine": 86,
        "endChar": 39
      },
      "revId": "8e28a079902983c16015a0b1155153c13c2339a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d1e2d58_69c7ad49",
        "filename": "libnativebridge/native_bridge.cc",
        "patchSetId": 3
      },
      "lineNbr": 86,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-05-06T04:18:03Z",
      "side": 1,
      "message": "I don\u0027t understand what you\u0027re trying to accomplish.",
      "parentUuid": "4d36f5df_12cd0c05",
      "range": {
        "startLine": 86,
        "startChar": 30,
        "endLine": 86,
        "endChar": 39
      },
      "revId": "8e28a079902983c16015a0b1155153c13c2339a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d39c1d0_716c5888",
        "filename": "libnativebridge/native_bridge.cc",
        "patchSetId": 3
      },
      "lineNbr": 86,
      "author": {
        "id": 1051763
      },
      "writtenOn": "2015-05-06T04:21:55Z",
      "side": 1,
      "message": "I mean we can define it as below.\nstatic const NativeBridgeCallbacks* callbacks \u003d nullptr;",
      "parentUuid": "8d1e2d58_69c7ad49",
      "range": {
        "startLine": 86,
        "startChar": 30,
        "endLine": 86,
        "endChar": 39
      },
      "revId": "8e28a079902983c16015a0b1155153c13c2339a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d19f971_dc0d5c3b",
        "filename": "libnativebridge/native_bridge.cc",
        "patchSetId": 3
      },
      "lineNbr": 86,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-05-06T05:06:47Z",
      "side": 1,
      "message": "Sure. It necessitates a couple of signature changes, but is doable.\n\nObviously it\u0027s only for code cleanliness - anyone being able to look for a private data element and screw with it already has enough knowledge and control over the system. But we had enough discussions about perceived security...",
      "parentUuid": "2d39c1d0_716c5888",
      "range": {
        "startLine": 86,
        "startChar": 30,
        "endLine": 86,
        "endChar": 39
      },
      "revId": "8e28a079902983c16015a0b1155153c13c2339a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "304d9a5a_372380d5",
        "filename": "libnativebridge/native_bridge.cc",
        "patchSetId": 3
      },
      "lineNbr": 141,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-05-05T15:52:11Z",
      "side": 1,
      "message": "This is rather cryptic imo. How about comparing with a kMinSupported and kMaxSupported?",
      "range": {
        "startLine": 141,
        "startChar": 41,
        "endLine": 141,
        "endChar": 42
      },
      "revId": "8e28a079902983c16015a0b1155153c13c2339a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "102df676_a381f1fe",
        "filename": "libnativebridge/native_bridge.cc",
        "patchSetId": 3
      },
      "lineNbr": 141,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-05-05T15:59:27Z",
      "side": 1,
      "message": "My hope was to design something forward-compatible, so that it\u0027s easy to backport a bridge to older Android versions. So I didn\u0027t want kMaxSupported anymore. 1 is cryptic, agreed. It\u0027s just the minimal value (so 0 shows some failure).\n\nAs the bridge is working already, I feel we have all things that are needed for basic operation, so it should be fine. One thing that is probably missing is to report *our* version to the bridge (so that, e.g., a v3 bridge could either fail to initialize or adapt itself to being run as a v2).\n\nEric, could you weigh in here? Would another symbol in v2 bridges to communicate the libnativebridge version be OK?",
      "parentUuid": "304d9a5a_372380d5",
      "range": {
        "startLine": 141,
        "startChar": 41,
        "endLine": 141,
        "endChar": 42
      },
      "revId": "8e28a079902983c16015a0b1155153c13c2339a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "304d9a5a_5752c439",
        "filename": "libnativebridge/native_bridge.cc",
        "patchSetId": 3
      },
      "lineNbr": 141,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-05-05T16:08:53Z",
      "side": 1,
      "message": "I\u0027m good with not having using kMaxSupported but we should document the intention here.",
      "parentUuid": "102df676_a381f1fe",
      "range": {
        "startLine": 141,
        "startChar": 41,
        "endLine": 141,
        "endChar": 42
      },
      "revId": "8e28a079902983c16015a0b1155153c13c2339a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d36f5df_725578a6",
        "filename": "libnativebridge/native_bridge.cc",
        "patchSetId": 3
      },
      "lineNbr": 141,
      "author": {
        "id": 1051763
      },
      "writtenOn": "2015-05-06T03:55:56Z",
      "side": 1,
      "message": "Hi Andreas,\nIt\u0027s not necessary to keep forward-compatible for native bridge.\nWe need a clear interface for different version of native bridge.\nIf the version is not matched, then, libnativebridge should stop loading it.",
      "parentUuid": "102df676_a381f1fe",
      "range": {
        "startLine": 141,
        "startChar": 41,
        "endLine": 141,
        "endChar": 42
      },
      "revId": "8e28a079902983c16015a0b1155153c13c2339a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "105416e3_d6d95472",
        "filename": "libnativebridge/native_bridge.cc",
        "patchSetId": 3
      },
      "lineNbr": 495,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-05-05T15:52:11Z",
      "side": 1,
      "message": "nit: I\u0027d prefer to use symbolic constants here and above even if it might look a bit useless.",
      "range": {
        "startLine": 495,
        "startChar": 30,
        "endLine": 495,
        "endChar": 31
      },
      "revId": "8e28a079902983c16015a0b1155153c13c2339a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0218a87_0b04a1ce",
        "filename": "libnativebridge/native_bridge.cc",
        "patchSetId": 3
      },
      "lineNbr": 495,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2015-05-05T15:59:27Z",
      "side": 1,
      "message": "Agreed.",
      "parentUuid": "105416e3_d6d95472",
      "range": {
        "startLine": 495,
        "startChar": 30,
        "endLine": 495,
        "endChar": 31
      },
      "revId": "8e28a079902983c16015a0b1155153c13c2339a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "105416e3_56ee4404",
        "filename": "libnativebridge/tests/NativeBridgeVersion_test.cpp",
        "patchSetId": 3
      },
      "lineNbr": 2,
      "author": {
        "id": 1022077
      },
      "writtenOn": "2015-05-05T15:52:11Z",
      "side": 1,
      "message": "2015",
      "range": {
        "startLine": 2,
        "startChar": 17,
        "endLine": 2,
        "endChar": 21
      },
      "revId": "8e28a079902983c16015a0b1155153c13c2339a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}