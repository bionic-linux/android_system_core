{
  "comments": [
    {
      "key": {
        "uuid": "fbb14799_288c6149",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 13,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2018-04-03T20:12:44Z",
      "side": 1,
      "message": "required:\n(suggest colon at end, and at line 17)",
      "range": {
        "startLine": 13,
        "startChar": 53,
        "endLine": 13,
        "endChar": 61
      },
      "revId": "8863f2365e249e69108176b62aeef63b7ed1efb2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "af5f0e32_6be01b43",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 24,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2018-04-03T20:12:44Z",
      "side": 1,
      "message": "assignment",
      "range": {
        "startLine": 24,
        "startChar": 44,
        "endLine": 24,
        "endChar": 53
      },
      "revId": "8863f2365e249e69108176b62aeef63b7ed1efb2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2700ae3_95691912",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 24,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2018-04-03T20:12:44Z",
      "side": 1,
      "message": "recycle",
      "range": {
        "startLine": 24,
        "startChar": 55,
        "endLine": 24,
        "endChar": 62
      },
      "revId": "8863f2365e249e69108176b62aeef63b7ed1efb2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "50c1f683_ef53f6a1",
        "filename": "logcat/include/log/logcat.h",
        "patchSetId": 9
      },
      "lineNbr": 130,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-04-03T20:44:54Z",
      "side": 1,
      "message": "If you\u0027re going to suffix command with _, then all should be suffixed.",
      "range": {
        "startLine": 130,
        "startChar": 16,
        "endLine": 130,
        "endChar": 24
      },
      "revId": "8863f2365e249e69108176b62aeef63b7ed1efb2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f3a11b6_a37b5ab2",
        "filename": "logcat/include/log/logcat.h",
        "patchSetId": 9
      },
      "lineNbr": 137,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-04-03T20:44:54Z",
      "side": 1,
      "message": "For constructors and normal functions like below, an empty set of () is preferable to (void) in C++.  They mean the same thing; allowing void is just to maintain backwards compatibility with C.",
      "range": {
        "startLine": 137,
        "startChar": 17,
        "endLine": 137,
        "endChar": 23
      },
      "revId": "8863f2365e249e69108176b62aeef63b7ed1efb2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdd327c7_fd950907",
        "filename": "logcat/include/log/logcat.h",
        "patchSetId": 9
      },
      "lineNbr": 141,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-04-03T20:44:54Z",
      "side": 1,
      "message": "Answering your other question, yes, single argument constructors should be explicit.\n\nThis constructor is unnecessary however.  You can just have the const std::string\u0026 constructor that will do the conversion to std::string for you.  And since you\u0027re storing this as a std::string, there won\u0027t be much penalty.",
      "revId": "8863f2365e249e69108176b62aeef63b7ed1efb2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc64425b_d89b813a",
        "filename": "logcat/include/log/logcat.h",
        "patchSetId": 9
      },
      "lineNbr": 141,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-04-03T20:51:55Z",
      "side": 1,
      "message": "How well does it deal with (const char*)nullptr though?",
      "parentUuid": "bdd327c7_fd950907",
      "revId": "8863f2365e249e69108176b62aeef63b7ed1efb2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ed2888c_5f6943b6",
        "filename": "logcat/include/log/logcat.h",
        "patchSetId": 9
      },
      "lineNbr": 141,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-04-04T15:45:23Z",
      "side": 1,
      "message": "This isn\u0027t a concern for us.  This would be a client bug, not a bug in the interface.  It\u0027s 100% acceptable to have const std::string\u0026 as the interface and if clients blow up since they pass nullptr, then that\u0027s on them.\n\nIt\u0027s unreasonably for any clients to construct dynamic strings using C style strings anyway.",
      "parentUuid": "bc64425b_d89b813a",
      "revId": "8863f2365e249e69108176b62aeef63b7ed1efb2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0a67443_1a661bd0",
        "filename": "logcat/include/log/logcat.h",
        "patchSetId": 9
      },
      "lineNbr": 149,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-04-03T20:44:54Z",
      "side": 1,
      "message": "You probably don\u0027t need to worry about efficiency of this single copy enough to have an rvalue overload.  I\u0027d drop this constructor too, and just have the single const std::string\u0026 one.",
      "revId": "8863f2365e249e69108176b62aeef63b7ed1efb2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "606faf3c_a37aaffb",
        "filename": "logcat/include/log/logcat.h",
        "patchSetId": 9
      },
      "lineNbr": 164,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-04-03T20:44:54Z",
      "side": 1,
      "message": "You don\u0027t need this line, the above one with const is sufficient.\n\nYou do need to delete the copy/move assignment constructors too though,\n\nvoid operator\u003d(const AndroidLogcat\u0026) \u003d delete;\nvoid operator\u003d(AndroidLogcat\u0026\u0026) \u003d delete;",
      "revId": "8863f2365e249e69108176b62aeef63b7ed1efb2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23b725ec_a4e236b8",
        "filename": "logcat/include/log/logcat.h",
        "patchSetId": 9
      },
      "lineNbr": 176,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-04-03T20:44:54Z",
      "side": 1,
      "message": "I\u0027d drop this in favor of the const std::string\u0026 version.  A conversation from const char* to std::string costs almost nothing.\n\nSame with the std::string\u0026\u0026 one.",
      "revId": "8863f2365e249e69108176b62aeef63b7ed1efb2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae8fefd9_1fc974f0",
        "filename": "logcat/include/log/logcat.h",
        "patchSetId": 9
      },
      "lineNbr": 191,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-04-03T20:44:54Z",
      "side": 1,
      "message": "Why?  I\u0027d prefer not giving this overload to people, I don\u0027t think it\u0027s clear what reassigning a string to this type would do.",
      "revId": "8863f2365e249e69108176b62aeef63b7ed1efb2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1aebceb4_655fe9cf",
        "filename": "logcat/include/log/logcat.h",
        "patchSetId": 9
      },
      "lineNbr": 242,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-04-03T20:44:54Z",
      "side": 1,
      "message": "I\u0027m not convinced this or the below overload are needed.  I\u0027d rather KISS and just have the accessor functions.",
      "revId": "8863f2365e249e69108176b62aeef63b7ed1efb2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c3b0b09_f69f1878",
        "filename": "logcat/include/log/logcat.h",
        "patchSetId": 9
      },
      "lineNbr": 242,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-04-03T21:27:39Z",
      "side": 1,
      "message": "Agree wholeheartedly that getFp() and getRet() are _absolutely_ clear with no doubt about actions or side effects.\n\n\nI must admit I like the following shortcuts:\n\n....fileno(AndroidLogcat(\u003ccommand\u003e))...\n\nAndroidLogcat logcat(\u003ccommand\u003e)\nFILE* fp \u003d logcat;\nint ret \u003d logcat;\n\nint ret \u003d AndroidLogcat(\u003ccommand\u003e)\n\neven despite the FUD they may introduce.\n\nWill remove \u0027em.",
      "parentUuid": "1aebceb4_655fe9cf",
      "revId": "8863f2365e249e69108176b62aeef63b7ed1efb2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31a229ef_2451da6c",
        "filename": "logcat/logcat.cpp",
        "patchSetId": 9
      },
      "lineNbr": 119,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2018-04-03T20:12:44Z",
      "side": 1,
      "message": "blank line intended?",
      "revId": "8863f2365e249e69108176b62aeef63b7ed1efb2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1ec2c3e_0434df1c",
        "filename": "logcat/logcat.cpp",
        "patchSetId": 9
      },
      "lineNbr": 119,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-04-03T20:51:55Z",
      "side": 1,
      "message": "outside scope of CL ... but the answer is yes to highlight that bool grouped together in C++ become bit-fields; the blank line just helps visually with making sure future selves remember that without having to get into too many detailed comment-ry.",
      "parentUuid": "31a229ef_2451da6c",
      "revId": "8863f2365e249e69108176b62aeef63b7ed1efb2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8b5a4a2_4ef5bc6f",
        "filename": "logcat/tests/liblogcat_test.cpp",
        "patchSetId": 9
      },
      "lineNbr": 30,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-04-03T20:29:51Z",
      "side": 1,
      "message": "Should be wrapped with an ASSERT_TRUE()",
      "range": {
        "startLine": 29,
        "startChar": 4,
        "endLine": 30,
        "endChar": 43
      },
      "revId": "8863f2365e249e69108176b62aeef63b7ed1efb2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}