{
  "comments": [
    {
      "key": {
        "uuid": "7ab3d58e_b9b8bc7d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1105075
      },
      "writtenOn": "2020-02-06T18:39:05Z",
      "side": 1,
      "message": "remove",
      "range": {
        "startLine": 9,
        "startChar": 40,
        "endLine": 9,
        "endChar": 41
      },
      "revId": "6324b7c62fae98887f5886bc73ecfe46ecd082bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07767c9a_5b2bbbea",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-02-06T20:42:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7ab3d58e_b9b8bc7d",
      "range": {
        "startLine": 9,
        "startChar": 40,
        "endLine": 9,
        "endChar": 41
      },
      "revId": "6324b7c62fae98887f5886bc73ecfe46ecd082bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10f2947e_8ac0342f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-02-06T17:53:27Z",
      "side": 1,
      "message": "I think asan build detect some races? too? right?",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 34,
        "endChar": 4
      },
      "revId": "6324b7c62fae98887f5886bc73ecfe46ecd082bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "355b3909_f1461523",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-02-06T18:00:16Z",
      "side": 1,
      "message": "i don\u0027t think so. are you thinking of tsan? (which is currently broken, but something we want to fix [and add tests to keep from regressing] this year.)",
      "parentUuid": "10f2947e_8ac0342f",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 34,
        "endChar": 4
      },
      "revId": "6324b7c62fae98887f5886bc73ecfe46ecd082bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "528354e2_fba61c41",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-02-06T20:42:26Z",
      "side": 1,
      "message": "+1 that\u0027s tsan which we don\u0027t have yet.",
      "parentUuid": "10f2947e_8ac0342f",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 34,
        "endChar": 4
      },
      "revId": "6324b7c62fae98887f5886bc73ecfe46ecd082bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "981404d1_93d20e3e",
        "filename": "init/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 320,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-02-06T17:53:27Z",
      "side": 1,
      "message": "nit: defaults to de-dupe configuration?",
      "range": {
        "startLine": 309,
        "startChar": 22,
        "endLine": 320,
        "endChar": 21
      },
      "revId": "6324b7c62fae98887f5886bc73ecfe46ecd082bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "965f1114_3adbe2f8",
        "filename": "init/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 320,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-02-06T20:42:26Z",
      "side": 1,
      "message": "Done in parent commit.",
      "parentUuid": "981404d1_93d20e3e",
      "range": {
        "startLine": 309,
        "startChar": 22,
        "endLine": 320,
        "endChar": 21
      },
      "revId": "6324b7c62fae98887f5886bc73ecfe46ecd082bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8be19ff9_ca8cad79",
        "filename": "init/action_manager.cpp",
        "patchSetId": 1
      },
      "lineNbr": 117,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-02-06T17:53:27Z",
      "side": 1,
      "message": "for instance, why not here?",
      "range": {
        "startLine": 117,
        "startChar": 25,
        "endLine": 117,
        "endChar": 33
      },
      "revId": "6324b7c62fae98887f5886bc73ecfe46ecd082bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a0b7054_ccd3302d",
        "filename": "init/action_manager.cpp",
        "patchSetId": 1
      },
      "lineNbr": 117,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-02-06T20:42:26Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "8be19ff9_ca8cad79",
      "range": {
        "startLine": 117,
        "startChar": 25,
        "endLine": 117,
        "endChar": 33
      },
      "revId": "6324b7c62fae98887f5886bc73ecfe46ecd082bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3eeec5ac_84941830",
        "filename": "init/action_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-02-06T17:53:27Z",
      "side": 1,
      "message": "document? (for all memebers?) or\n\nShould you add \"GUARDED_BY\" annotations or similar that feed into the clang sanity/validation/tidy machinations?",
      "range": {
        "startLine": 51,
        "startChar": 23,
        "endLine": 51,
        "endChar": 28
      },
      "revId": "6324b7c62fae98887f5886bc73ecfe46ecd082bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "086721e3_740f5957",
        "filename": "init/action_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-02-06T20:42:26Z",
      "side": 1,
      "message": "Done.  It only needs to protect event_queue_ which I make more clear now.",
      "parentUuid": "3eeec5ac_84941830",
      "range": {
        "startLine": 51,
        "startChar": 23,
        "endLine": 51,
        "endChar": 28
      },
      "revId": "6324b7c62fae98887f5886bc73ecfe46ecd082bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d09a8d1_df042403",
        "filename": "init/init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 99,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-02-06T17:53:27Z",
      "side": 1,
      "message": "one line comment usage?",
      "revId": "6324b7c62fae98887f5886bc73ecfe46ecd082bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e598d26_0c63837b",
        "filename": "init/init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 99,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-02-06T20:42:26Z",
      "side": 1,
      "message": "Done.  I\u0027ll move this down below since the comment around InstallInitNotifier() is the real description.",
      "parentUuid": "2d09a8d1_df042403",
      "revId": "6324b7c62fae98887f5886bc73ecfe46ecd082bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25da1da1_ea519f8c",
        "filename": "init/init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 130,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-02-06T17:53:27Z",
      "side": 1,
      "message": "nit/out of curiosity, why not constexpr?",
      "range": {
        "startLine": 130,
        "startChar": 4,
        "endLine": 130,
        "endChar": 9
      },
      "revId": "6324b7c62fae98887f5886bc73ecfe46ecd082bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0547fc3b_bb64cd40",
        "filename": "init/init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 130,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-02-06T20:42:26Z",
      "side": 1,
      "message": "Done.  I\u0027m just not in the habit yet.",
      "parentUuid": "25da1da1_ea519f8c",
      "range": {
        "startLine": 130,
        "startChar": 4,
        "endLine": 130,
        "endChar": 9
      },
      "revId": "6324b7c62fae98887f5886bc73ecfe46ecd082bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10763d28_b8a7d423",
        "filename": "init/init.h",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-02-06T17:53:27Z",
      "side": 1,
      "message": "why different format?",
      "range": {
        "startLine": 44,
        "startChar": 5,
        "endLine": 44,
        "endChar": 21
      },
      "revId": "6324b7c62fae98887f5886bc73ecfe46ecd082bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2feaff4e_655c1adb",
        "filename": "init/init.h",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-02-06T20:42:26Z",
      "side": 1,
      "message": "Done. No good reason; I\u0027ve been leaving the old functions using their old format, but it\u0027s about time that this one is brought up to date.",
      "parentUuid": "10763d28_b8a7d423",
      "range": {
        "startLine": 44,
        "startChar": 5,
        "endLine": 44,
        "endChar": 21
      },
      "revId": "6324b7c62fae98887f5886bc73ecfe46ecd082bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "505a782f_7866db65",
        "filename": "init/init.h",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-02-06T17:53:27Z",
      "side": 1,
      "message": "nit: fromPid?",
      "range": {
        "startLine": 45,
        "startChar": 81,
        "endLine": 45,
        "endChar": 84
      },
      "revId": "6324b7c62fae98887f5886bc73ecfe46ecd082bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d815b10_8f02a545",
        "filename": "init/init.h",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-02-06T20:42:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "505a782f_7866db65",
      "range": {
        "startLine": 45,
        "startChar": 81,
        "endLine": 45,
        "endChar": 84
      },
      "revId": "6324b7c62fae98887f5886bc73ecfe46ecd082bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "757f8e4e_cd85154d",
        "filename": "init/property_service.cpp",
        "patchSetId": 1
      },
      "lineNbr": 380,
      "author": {
        "id": 1105075
      },
      "writtenOn": "2020-02-06T18:39:05Z",
      "side": 1,
      "message": "what about clients keep set control property like s storm?\nI really hope we can gate that from happening. Can we have use a fixed size thread pool/executor? also can we have a library in libbase?",
      "range": {
        "startLine": 380,
        "startChar": 4,
        "endLine": 380,
        "endChar": 15
      },
      "revId": "6324b7c62fae98887f5886bc73ecfe46ecd082bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "460da226_ba940953",
        "filename": "init/property_service.cpp",
        "patchSetId": 1
      },
      "lineNbr": 380,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-02-06T20:42:26Z",
      "side": 1,
      "message": "Hmm...  I was alternatively thinking of still having a socket to init, which would alleviate this problem as well.  The theory there is that if we do expect that init and property_service are separate processes, they\u0027d need to communicate via such a socket.  The downside, however, is that it still could lead to deadlock...  I don\u0027t think separating these processes is going to happen anytime soon though.\n\nI think better than a thread pool is if we had a single thread that starts to handle these requests and optionally handles subsequent requests.  I\u0027m not sure it\u0027ll be general purpose enough for libbase, but let\u0027s see.",
      "parentUuid": "757f8e4e_cd85154d",
      "range": {
        "startLine": 380,
        "startChar": 4,
        "endLine": 380,
        "endChar": 15
      },
      "revId": "6324b7c62fae98887f5886bc73ecfe46ecd082bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69fcc230_cadc256d",
        "filename": "init/service_lock.h",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-02-06T17:38:27Z",
      "side": 1,
      "message": "std::recursive_mutex isn\u0027t annotated :(",
      "revId": "6324b7c62fae98887f5886bc73ecfe46ecd082bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5287accf_9299e375",
        "filename": "init/service_lock.h",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-02-06T17:53:27Z",
      "side": 1,
      "message": "can you kick of an issue to fix that?\n\nsecondarily, do you *really* need it? :)",
      "parentUuid": "69fcc230_cadc256d",
      "revId": "6324b7c62fae98887f5886bc73ecfe46ecd082bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8fe8b308_b978f0a9",
        "filename": "init/service_lock.h",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-02-06T20:42:26Z",
      "side": 1,
      "message": "There\u0027re at least two places where I need it:\n\nService::Reap() calls onrestart_.ExecuteAllActions() which may call `start`, `restart`, etc.  Service::Reap() requires service_lock and `start`, `restart`, etc acquire it as well.\n\nDuring shutdown, we loop over all of the service with the lock held when we send kills then we call ReapAnyOutstandingServices(), which also acquires the lock.\n\nI could refactor these a bit if we\u0027d rather, but these situations aren\u0027t unsafe.",
      "parentUuid": "5287accf_9299e375",
      "revId": "6324b7c62fae98887f5886bc73ecfe46ecd082bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}