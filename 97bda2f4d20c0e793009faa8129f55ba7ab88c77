{
  "comments": [
    {
      "key": {
        "uuid": "eed0e4c9_7a28b3f3",
        "filename": "fs_mgr/libfiemap_writer/fiemap_writer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-06-20T17:40:22Z",
      "side": 1,
      "message": "\u0027true\u0027 here, not false?",
      "range": {
        "startLine": 96,
        "startChar": 15,
        "endLine": 96,
        "endChar": 19
      },
      "revId": "97bda2f4d20c0e793009faa8129f55ba7ab88c77",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38af47f8_59c4b91d",
        "filename": "fs_mgr/libfiemap_writer/fiemap_writer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2019-06-20T20:19:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eed0e4c9_7a28b3f3",
      "range": {
        "startLine": 96,
        "startChar": 15,
        "endLine": 96,
        "endChar": 19
      },
      "revId": "97bda2f4d20c0e793009faa8129f55ba7ab88c77",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90e3d2b9_6cc775f2",
        "filename": "fs_mgr/libfiemap_writer/fiemap_writer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 99,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-06-20T17:40:22Z",
      "side": 1,
      "message": "std::string target_type(entry.target_type, sizeof(entry.target_type)) works, no?\n\nor since I love putting auto first,\n\nauto target_type \u003d std::string{entry.target_type, sizeof(entry.target_type)};\n\n(I should have commented the first time around too I see)",
      "revId": "97bda2f4d20c0e793009faa8129f55ba7ab88c77",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9c824fc_db38fb98",
        "filename": "fs_mgr/libfiemap_writer/fiemap_writer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 99,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2019-06-20T20:19:49Z",
      "side": 1,
      "message": "This would work for printing, but not for comparison, because we\u0027ll be comparing \"default-key\\0\\0\\0\\0\\0\\0\\0...\" with \"default-key\". The c_str() chops off the extra terminators.",
      "parentUuid": "90e3d2b9_6cc775f2",
      "revId": "97bda2f4d20c0e793009faa8129f55ba7ab88c77",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f2ef17a_8337b449",
        "filename": "fs_mgr/libfiemap_writer/fiemap_writer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 99,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-06-20T20:24:36Z",
      "side": 1,
      "message": "Might be worth a comment (at least so I don\u0027t forget and ask again).  Or maybe doing memchr() first to find the \\0 and actually knowing the size ahead of time?",
      "parentUuid": "b9c824fc_db38fb98",
      "revId": "97bda2f4d20c0e793009faa8129f55ba7ab88c77",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "166608b6_cf5d3a9a",
        "filename": "fs_mgr/libfiemap_writer/fiemap_writer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 99,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2019-06-20T20:40:40Z",
      "side": 1,
      "message": "Okay, I switched to memchr, but hid it behind a new helper in libdm. I think there are other places in fs_mgr that do some kind of ugly strncmp for target_type.",
      "parentUuid": "2f2ef17a_8337b449",
      "revId": "97bda2f4d20c0e793009faa8129f55ba7ab88c77",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "327b8103_028ff7ae",
        "filename": "fs_mgr/libfiemap_writer/fiemap_writer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2019-06-20T19:13:49Z",
      "side": 1,
      "message": "What about linear target with 2 extents and the 1st one starting at sector 0?",
      "range": {
        "startLine": 106,
        "startChar": 0,
        "endLine": 106,
        "endChar": 92
      },
      "revId": "97bda2f4d20c0e793009faa8129f55ba7ab88c77",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "936c726b_12037ba3",
        "filename": "fs_mgr/libfiemap_writer/fiemap_writer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2019-06-20T19:25:32Z",
      "side": 1,
      "message": "That would be okay too, though IMO it\u0027s not worth supporting. This change is just to expedite testing gsid, since we want to test the situation where there\u0027s an intermediate target sitting in between the real device and the mounted filesystem. With this change we don\u0027t have to setup crypt/default-key/bow to get that.",
      "parentUuid": "327b8103_028ff7ae",
      "range": {
        "startLine": 106,
        "startChar": 0,
        "endLine": 106,
        "endChar": 92
      },
      "revId": "97bda2f4d20c0e793009faa8129f55ba7ab88c77",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fb72303c_4de5478d",
        "filename": "fs_mgr/libfiemap_writer/fiemap_writer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2019-06-20T19:13:49Z",
      "side": 1,
      "message": "nit: fwiw, I still find it weird that we return \"success\" but don\u0027t necessarily pop all the way to a real block device (not the device mapper one).\nWhy can\u0027t we change the semantics and NOT leave that decision to the caller (I forgot how this error propagates outside of fiemap_writer). So, if its\nall handled within the library, I guess its still ok.",
      "range": {
        "startLine": 157,
        "startChar": 0,
        "endLine": 157,
        "endChar": 20
      },
      "revId": "97bda2f4d20c0e793009faa8129f55ba7ab88c77",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a9b36516_80a136fd",
        "filename": "fs_mgr/libfiemap_writer/fiemap_writer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2019-06-20T19:25:32Z",
      "side": 1,
      "message": "The reason to leave it to the caller is for testing. Normally having the backing block device be \"dm-6\" would be nonsense, since there\u0027s no way we can persist that to /metadata and have it reliably read back on reboot. But for testing, it\u0027s fine. So gsid wants to make sure the block device is permanent, but testing doesn\u0027t care if it\u0027s virtual.\n\nWe could add a parameter so libfiemap_writer still makes the decision, but it felt like overkill... there\u0027s only two callers, gsid and gsid tests.",
      "parentUuid": "fb72303c_4de5478d",
      "range": {
        "startLine": 157,
        "startChar": 0,
        "endLine": 157,
        "endChar": 20
      },
      "revId": "97bda2f4d20c0e793009faa8129f55ba7ab88c77",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "29073c8f_19ca4093",
        "filename": "fs_mgr/libfiemap_writer/fiemap_writer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2019-06-20T19:53:36Z",
      "side": 1,
      "message": "ack",
      "parentUuid": "a9b36516_80a136fd",
      "range": {
        "startLine": 157,
        "startChar": 0,
        "endLine": 157,
        "endChar": 20
      },
      "revId": "97bda2f4d20c0e793009faa8129f55ba7ab88c77",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}