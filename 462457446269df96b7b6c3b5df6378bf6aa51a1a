{
  "comments": [
    {
      "key": {
        "uuid": "3728c187_63d2e65a",
        "filename": "libnativeloader/native_loader_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-07-12T16:08:28Z",
      "side": 1,
      "message": "Please add a TODO somewhere about testing the anonymous namespace (cf. http://b/130388701#comment22).",
      "revId": "462457446269df96b7b6c3b5df6378bf6aa51a1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f25e1b45_2d6dd7af",
        "filename": "libnativeloader/native_loader_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-07-15T08:06:09Z",
      "side": 1,
      "message": "Done. See at the bottom of this file.",
      "parentUuid": "3728c187_63d2e65a",
      "revId": "462457446269df96b7b6c3b5df6378bf6aa51a1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "162d4bde_36a8bd58",
        "filename": "libnativeloader/native_loader_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-07-12T16:08:28Z",
      "side": 1,
      "message": "Maybe something like JniObject_getParent is more clear and avoids possible confusion with GetParentClassLoader in library_namespaces.cpp.",
      "range": {
        "startLine": 68,
        "startChar": 22,
        "endLine": 68,
        "endChar": 42
      },
      "revId": "462457446269df96b7b6c3b5df6378bf6aa51a1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4a3ea84_bb149120",
        "filename": "libnativeloader/native_loader_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-07-15T08:06:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "162d4bde_36a8bd58",
      "range": {
        "startLine": 68,
        "startChar": 22,
        "endLine": 68,
        "endChar": 42
      },
      "revId": "462457446269df96b7b6c3b5df6378bf6aa51a1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a96a234_2b82607f",
        "filename": "libnativeloader/native_loader_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 219,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-07-12T16:08:28Z",
      "side": 1,
      "message": "Is it possible to preserve constness here and for FindClass, CallObjectMethodV, and GetMethodID?",
      "range": {
        "startLine": 219,
        "startChar": 56,
        "endLine": 219,
        "endChar": 63
      },
      "revId": "462457446269df96b7b6c3b5df6378bf6aa51a1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8817568d_8fa7cbee",
        "filename": "libnativeloader/native_loader_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 219,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-07-15T08:06:09Z",
      "side": 1,
      "message": "I don\u0027t think so. jstring, jclass, and jobject are all pointers to \"non-const\" _jobject object. (see libnativehelper/include_jni/jni.h)\n\nBut I am not sure if preserving the constness is required here. The j* types are used as handles so nobody in libnativeloader (except this simple mock) tries to even look inside the pointer.",
      "parentUuid": "7a96a234_2b82607f",
      "range": {
        "startLine": 219,
        "startChar": 56,
        "endLine": 219,
        "endChar": 63
      },
      "revId": "462457446269df96b7b6c3b5df6378bf6aa51a1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a379a2e_b192c825",
        "filename": "libnativeloader/native_loader_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 265,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-07-12T16:08:28Z",
      "side": 1,
      "message": "nullptr",
      "range": {
        "startLine": 265,
        "startChar": 21,
        "endLine": 265,
        "endChar": 22
      },
      "revId": "462457446269df96b7b6c3b5df6378bf6aa51a1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "346c10eb_2a49b96b",
        "filename": "libnativeloader/native_loader_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 265,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-07-15T08:06:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3a379a2e_b192c825",
      "range": {
        "startLine": 265,
        "startChar": 21,
        "endLine": 265,
        "endChar": 22
      },
      "revId": "462457446269df96b7b6c3b5df6378bf6aa51a1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9d53b19_b6e16546",
        "filename": "libnativeloader/native_loader_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 269,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-07-12T16:08:28Z",
      "side": 1,
      "message": "Nit: SetExpectations",
      "range": {
        "startLine": 269,
        "startChar": 7,
        "endLine": 269,
        "endChar": 21
      },
      "revId": "462457446269df96b7b6c3b5df6378bf6aa51a1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42e95c8f_1b759c15",
        "filename": "libnativeloader/native_loader_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 269,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-07-15T08:06:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b9d53b19_b6e16546",
      "range": {
        "startLine": 269,
        "startChar": 7,
        "endLine": 269,
        "endChar": 21
      },
      "revId": "462457446269df96b7b6c3b5df6378bf6aa51a1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1028c188_78b1bedd",
        "filename": "libnativeloader/native_loader_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 272,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-07-12T16:08:28Z",
      "side": 1,
      "message": "Why?",
      "range": {
        "startLine": 272,
        "startChar": 0,
        "endLine": 272,
        "endChar": 17
      },
      "revId": "462457446269df96b7b6c3b5df6378bf6aa51a1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24f8fb37_57cd1e78",
        "filename": "libnativeloader/native_loader_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 272,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-07-15T08:06:09Z",
      "side": 1,
      "message": "to ensure the order of the dlopen calls below. perhaps this seems to be a too strong assertion. I am removing this.",
      "parentUuid": "1028c188_78b1bedd",
      "range": {
        "startLine": 272,
        "startChar": 0,
        "endLine": 272,
        "endChar": 17
      },
      "revId": "462457446269df96b7b6c3b5df6378bf6aa51a1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f328f2d1_d98e3c66",
        "filename": "libnativeloader/native_loader_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 288,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-07-12T16:08:28Z",
      "side": 1,
      "message": "std::unique_ptr\u003cJNIEnv\u003e",
      "range": {
        "startLine": 288,
        "startChar": 2,
        "endLine": 288,
        "endChar": 9
      },
      "revId": "462457446269df96b7b6c3b5df6378bf6aa51a1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "123af8ec_dda3bbbb",
        "filename": "libnativeloader/native_loader_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 288,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-07-15T08:06:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f328f2d1_d98e3c66",
      "range": {
        "startLine": 288,
        "startChar": 2,
        "endLine": 288,
        "endChar": 9
      },
      "revId": "462457446269df96b7b6c3b5df6378bf6aa51a1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc3461ef_b6f5abf3",
        "filename": "libnativeloader/native_loader_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 319,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-07-12T16:08:28Z",
      "side": 1,
      "message": "We ought not have different expectations due to this in the end, right? What about making the C wrappers call the same methods in the mock, passing the bridged flag as an extra bool that\u0027s matched in the EXPECT_CALLs here?",
      "range": {
        "startLine": 319,
        "startChar": 0,
        "endLine": 319,
        "endChar": 19
      },
      "revId": "462457446269df96b7b6c3b5df6378bf6aa51a1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7669b489_b8328887",
        "filename": "libnativeloader/native_loader_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 319,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-07-15T08:06:09Z",
      "side": 1,
      "message": "Currently, yes, but I am not sure that will hold in the future. I\u0027d rather want to keep them separated although this requires some duplication.",
      "parentUuid": "fc3461ef_b6f5abf3",
      "range": {
        "startLine": 319,
        "startChar": 0,
        "endLine": 319,
        "endChar": 19
      },
      "revId": "462457446269df96b7b6c3b5df6378bf6aa51a1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "60b7347a_c0cf2e28",
        "filename": "libnativeloader/native_loader_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 319,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-07-15T18:02:36Z",
      "side": 1,
      "message": "You added NativeLoaderNamespace just to get a single API for both, right? Why then the opposite approach here? I figured commonality should be the norm and differences the exception, and it\u0027s still possible to do arbitrary if-else logic here if necessary.\n\nMy suggestion would encourage testing both code paths without any extra work, which I think is a good idea to get into the code structure from the start.",
      "parentUuid": "7669b489_b8328887",
      "range": {
        "startLine": 319,
        "startChar": 0,
        "endLine": 319,
        "endChar": 19
      },
      "revId": "462457446269df96b7b6c3b5df6378bf6aa51a1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72fe478e_04a75426",
        "filename": "libnativeloader/native_loader_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 368,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-07-12T16:08:28Z",
      "side": 1,
      "message": "Please swap. http://yaqs/6683916684754944",
      "range": {
        "startLine": 368,
        "startChar": 14,
        "endLine": 368,
        "endChar": 26
      },
      "revId": "462457446269df96b7b6c3b5df6378bf6aa51a1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "654fd107_1aa4a3ef",
        "filename": "libnativeloader/native_loader_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 368,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-07-15T08:06:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "72fe478e_04a75426",
      "range": {
        "startLine": 368,
        "startChar": 14,
        "endLine": 368,
        "endChar": 26
      },
      "revId": "462457446269df96b7b6c3b5df6378bf6aa51a1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd61cd82_bd455f1a",
        "filename": "libnativeloader/native_loader_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 382,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-07-12T16:08:28Z",
      "side": 1,
      "message": "It\u0027s a bit confusing with the object variables below that affect the operation of SetExpectation and RunTest, but I can see why you went for it in the absence of named parameters. Still, it\u0027s worth commenting before which call they must be set, and maybe also consider moving up the variables in front of the respective function.",
      "revId": "462457446269df96b7b6c3b5df6378bf6aa51a1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0378728_615d01e1",
        "filename": "libnativeloader/native_loader_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 382,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-07-15T08:06:09Z",
      "side": 1,
      "message": "Good suggestion. Done.",
      "parentUuid": "dd61cd82_bd455f1a",
      "revId": "462457446269df96b7b6c3b5df6378bf6aa51a1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08907bb7_ba1f091e",
        "filename": "libnativeloader/native_loader_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 504,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-07-12T16:08:28Z",
      "side": 1,
      "message": "Is this the only use case when we\u0027ll get more than one classloader in the same app process? If there are other common/known cases it\u0027d be fantastic to have tests for them too, in particular the case that caused agampe\u0027s cryptic fix in http://r.android.com/952524.",
      "range": {
        "startLine": 502,
        "startChar": 0,
        "endLine": 504,
        "endChar": 23
      },
      "revId": "462457446269df96b7b6c3b5df6378bf6aa51a1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "912019dc_d27f33bc",
        "filename": "libnativeloader/native_loader_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 504,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-07-15T08:06:09Z",
      "side": 1,
      "message": "Such case could be added in a follow-up CLs",
      "parentUuid": "08907bb7_ba1f091e",
      "range": {
        "startLine": 502,
        "startChar": 0,
        "endLine": 504,
        "endChar": 23
      },
      "revId": "462457446269df96b7b6c3b5df6378bf6aa51a1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2c3d54fb_621aefa1",
        "filename": "libnativeloader/native_loader_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 525,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-07-12T16:08:28Z",
      "side": 1,
      "message": "Typo: \"success\" (Or delete the comment altogether as it doesn\u0027t add much.)",
      "range": {
        "startLine": 525,
        "startChar": 5,
        "endLine": 525,
        "endChar": 11
      },
      "revId": "462457446269df96b7b6c3b5df6378bf6aa51a1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "925179f6_6fdcf1d7",
        "filename": "libnativeloader/native_loader_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 525,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-07-15T08:06:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2c3d54fb_621aefa1",
      "range": {
        "startLine": 525,
        "startChar": 5,
        "endLine": 525,
        "endChar": 11
      },
      "revId": "462457446269df96b7b6c3b5df6378bf6aa51a1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "221fcbde_54a388ad",
        "filename": "libnativeloader/native_loader_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 526,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-07-12T16:08:28Z",
      "side": 1,
      "message": "Swap here too.",
      "range": {
        "startLine": 526,
        "startChar": 12,
        "endLine": 526,
        "endChar": 24
      },
      "revId": "462457446269df96b7b6c3b5df6378bf6aa51a1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32eca8b8_80603a62",
        "filename": "libnativeloader/native_loader_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 526,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-07-15T08:06:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "221fcbde_54a388ad",
      "range": {
        "startLine": 526,
        "startChar": 12,
        "endLine": 526,
        "endChar": 24
      },
      "revId": "462457446269df96b7b6c3b5df6378bf6aa51a1a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}