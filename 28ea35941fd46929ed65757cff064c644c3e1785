{
  "comments": [
    {
      "key": {
        "uuid": "56a3cfb2_d3dba624",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 1
      },
      "lineNbr": 918,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2014-08-09T07:11:09Z",
      "side": 1,
      "message": "Is this cast to (void*) needed ?",
      "revId": "28ea35941fd46929ed65757cff064c644c3e1785",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9699c785_954f46a2",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 1
      },
      "lineNbr": 918,
      "author": {
        "id": 1052243
      },
      "writtenOn": "2014-08-09T09:18:08Z",
      "side": 1,
      "message": "It seems unnecessary but I was getting compilation error without it. Maybe it\u0027s just me doing something wrong.",
      "parentUuid": "56a3cfb2_d3dba624",
      "revId": "28ea35941fd46929ed65757cff064c644c3e1785",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "567caff0_cb892915",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 1
      },
      "lineNbr": 918,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-08-09T18:06:17Z",
      "side": 1,
      "message": "this is really a const_cast\u003cchar*\u003e. (one reason we don\u0027t use C-style casts is because the reader doesn\u0027t necessarily immediately see what the writer was doing.) the better fix though isn\u0027t to use a const_cast --- prefix should just have type char* instead of const char*. (or, unless there\u0027s some reason not to, make it a std::string and remove the strdup and free.)",
      "parentUuid": "9699c785_954f46a2",
      "revId": "28ea35941fd46929ed65757cff064c644c3e1785",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56a3cfb2_d69ab491",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 1
      },
      "lineNbr": 918,
      "author": {
        "id": 1052243
      },
      "writtenOn": "2014-08-11T07:16:05Z",
      "side": 1,
      "message": "string might not be suitable here because prefix is a byte buffer which can contain \\0 in the middle. I will change to const_cast.",
      "parentUuid": "567caff0_cb892915",
      "revId": "28ea35941fd46929ed65757cff064c644c3e1785",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56a3cfb2_f64df84f",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 1
      },
      "lineNbr": 918,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2014-08-11T08:40:02Z",
      "side": 1,
      "message": "enh: good point, it didn\u0027t strike me that this was because we were calling free with \"const void *\", I assumed it was something daft like using an integral type.\n\nhaaawk: I don\u0027t think std::string cares about internal \u0027\\0\u0027 unless you use one of its c compatibility APIs (c_str et al.). You could use std::vector\u003cchar\u003e if you prefer, or you could leave it as is. I think using std::string or std::vector might make things slightly more roundabout in this particular case.",
      "parentUuid": "56a3cfb2_d69ab491",
      "revId": "28ea35941fd46929ed65757cff064c644c3e1785",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6e5ebf4_b0e37eaa",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 1
      },
      "lineNbr": 918,
      "author": {
        "id": 1052243
      },
      "writtenOn": "2014-08-11T09:07:53Z",
      "side": 1,
      "message": "I will go for vector\u003cchar\u003e since most string methods does care about \\0 and this can create a confusion.",
      "parentUuid": "56a3cfb2_f64df84f",
      "revId": "28ea35941fd46929ed65757cff064c644c3e1785",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}