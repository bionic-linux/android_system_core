{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "176cb5a0_b3faa54e",
        "filename": "fs_mgr/libsnapshot/device_info.cpp",
        "patchSetId": 8
      },
      "lineNbr": 44,
      "author": {
        "id": 1964171
      },
      "writtenOn": "2024-08-16T23:36:27Z",
      "side": 1,
      "message": "const std::string \u0026value",
      "fixSuggestions": [
        {
          "fixId": "95908abe_47f5f399",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "fs_mgr/libsnapshot/device_info.cpp",
              "range": {
                "startLine": 44,
                "startChar": 0,
                "endLine": 45,
                "endChar": 0
              },
              "replacement": "void DeviceInfo::SetMetadataDir(const std::string\u0026 value) {\n"
            }
          ]
        }
      ],
      "revId": "f4a7c7de79ce8e5934bdc70e2f45647fea4c8f4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ea394aa_e7c05d1a",
        "filename": "fs_mgr/libsnapshot/device_info.cpp",
        "patchSetId": 8
      },
      "lineNbr": 44,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-08-17T07:07:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "176cb5a0_b3faa54e",
      "revId": "f4a7c7de79ce8e5934bdc70e2f45647fea4c8f4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed34f4b1_d0114e83",
        "filename": "fs_mgr/libsnapshot/include/libsnapshot/snapshot.h",
        "patchSetId": 8
      },
      "lineNbr": 410,
      "author": {
        "id": 1964171
      },
      "writtenOn": "2024-08-16T23:36:27Z",
      "side": 1,
      "message": "maybe log if is_scratch_metada_ is already set?",
      "fixSuggestions": [
        {
          "fixId": "ca88aff4_f638b7f9",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "fs_mgr/libsnapshot/include/libsnapshot/snapshot.h",
              "range": {
                "startLine": 410,
                "startChar": 0,
                "endLine": 411,
                "endChar": 0
              },
              "replacement": "    void SetScratchMetadata() {\n        is_scratch_metadata_ \u003d true;\n        LOG(INFO) \u003c\u003c \"Using scratch metadata\";\n    }\n"
            }
          ]
        }
      ],
      "revId": "f4a7c7de79ce8e5934bdc70e2f45647fea4c8f4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72007e5c_cad929ff",
        "filename": "fs_mgr/libsnapshot/include/libsnapshot/snapshot.h",
        "patchSetId": 8
      },
      "lineNbr": 410,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-08-17T07:07:40Z",
      "side": 1,
      "message": "I have added a log at the caller as this is invoked when snapshotManager instance is created.",
      "parentUuid": "ed34f4b1_d0114e83",
      "revId": "f4a7c7de79ce8e5934bdc70e2f45647fea4c8f4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07c8750d_a850d53c",
        "filename": "fs_mgr/libsnapshot/include_test/libsnapshot/test_helpers.h",
        "patchSetId": 8
      },
      "lineNbr": 86,
      "author": {
        "id": 1964171
      },
      "writtenOn": "2024-08-16T23:36:27Z",
      "side": 1,
      "message": "const std::string \u0026value",
      "fixSuggestions": [
        {
          "fixId": "0bee48ca_20459848",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "fs_mgr/libsnapshot/include_test/libsnapshot/test_helpers.h",
              "range": {
                "startLine": 86,
                "startChar": 0,
                "endLine": 87,
                "endChar": 0
              },
              "replacement": "    void SetMetadataDir(const std::string\u0026 value) { metadata_dir_ \u003d value; }\n"
            }
          ]
        }
      ],
      "revId": "f4a7c7de79ce8e5934bdc70e2f45647fea4c8f4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3d0ea829_0f2fdec6",
        "filename": "fs_mgr/libsnapshot/include_test/libsnapshot/test_helpers.h",
        "patchSetId": 8
      },
      "lineNbr": 86,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-08-17T07:07:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "07c8750d_a850d53c",
      "revId": "f4a7c7de79ce8e5934bdc70e2f45647fea4c8f4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16a360bd_90993db1",
        "filename": "fs_mgr/libsnapshot/scratch_super.cpp",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2024-08-17T00:15:11Z",
      "side": 1,
      "message": "Big #ifdefs like this lead to annoying build errors that are either userdebug-only or user-only. If there\u0027s a security concern, let\u0027s make sure it\u0027s covered through sepolicy instead.",
      "revId": "f4a7c7de79ce8e5934bdc70e2f45647fea4c8f4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6df570d_444efd49",
        "filename": "fs_mgr/libsnapshot/scratch_super.cpp",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-08-17T07:07:40Z",
      "side": 1,
      "message": "I removed these ifdefs. It just gets ugly all over the code.\n\nThere is no security concern. Initially, I thought of getting this only on userdebug but it just makes testing complex and un-necessary complicated ifdefs all over. This is already covered by sepolicy rules.",
      "parentUuid": "16a360bd_90993db1",
      "revId": "f4a7c7de79ce8e5934bdc70e2f45647fea4c8f4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7c50af2_d1fec6f8",
        "filename": "fs_mgr/libsnapshot/scratch_super.cpp",
        "patchSetId": 8
      },
      "lineNbr": 68,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2024-08-17T00:15:11Z",
      "side": 1,
      "message": "You need an std::error_code to filesystem calls. Otherwise the error will be an exception, and the PLOG below is unreachable.",
      "revId": "f4a7c7de79ce8e5934bdc70e2f45647fea4c8f4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba7eb68d_4f2dcc66",
        "filename": "fs_mgr/libsnapshot/scratch_super.cpp",
        "patchSetId": 8
      },
      "lineNbr": 68,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-08-17T07:07:40Z",
      "side": 1,
      "message": "Thanks.",
      "parentUuid": "e7c50af2_d1fec6f8",
      "revId": "f4a7c7de79ce8e5934bdc70e2f45647fea4c8f4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89d69dae_4cd25369",
        "filename": "fs_mgr/libsnapshot/scratch_super.cpp",
        "patchSetId": 8
      },
      "lineNbr": 84,
      "author": {
        "id": 1964171
      },
      "writtenOn": "2024-08-16T23:36:27Z",
      "side": 1,
      "message": "const?",
      "fixSuggestions": [
        {
          "fixId": "7d5a037b_3b8bbb50",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "fs_mgr/libsnapshot/scratch_super.cpp",
              "range": {
                "startLine": 84,
                "startChar": 0,
                "endLine": 85,
                "endChar": 0
              },
              "replacement": "bool SnapshotManager::CleanupMetadataScratch(const IDeviceInfo* info) {\n"
            },
            {
              "path": "fs_mgr/libsnapshot/scratch_super.cpp",
              "range": {
                "startLine": 228,
                "startChar": 0,
                "endLine": 229,
                "endChar": 0
              },
              "replacement": "bool SnapshotManager::CreateDynamicScratch(const IDeviceInfo* info, std::string* scratch_device) {\n"
            },
            {
              "path": "fs_mgr/libsnapshot/scratch_super.cpp",
              "range": {
                "startLine": 414,
                "startChar": 0,
                "endLine": 415,
                "endChar": 0
              },
              "replacement": "bool SnapshotManager::CreateOtaMetadataOnSuper(const IDeviceInfo* info) {\n"
            },
            {
              "path": "fs_mgr/libsnapshot/scratch_super.cpp",
              "range": {
                "startLine": 438,
                "startChar": 0,
                "endLine": 439,
                "endChar": 0
              },
              "replacement": "bool SnapshotManager::CleanupMetadataScratch(const IDeviceInfo*) {\n"
            },
            {
              "path": "fs_mgr/libsnapshot/scratch_super.cpp",
              "range": {
                "startLine": 442,
                "startChar": 0,
                "endLine": 443,
                "endChar": 0
              },
              "replacement": "bool SnapshotManager::CreateOtaMetadataOnSuper(const IDeviceInfo*) {\n"
            },
            {
              "path": "fs_mgr/libsnapshot/scratch_super.cpp",
              "range": {
                "startLine": 446,
                "startChar": 0,
                "endLine": 447,
                "endChar": 0
              },
              "replacement": "bool SnapshotManager::CreateDynamicScratch(const IDeviceInfo*, std::string*) {\n"
            }
          ]
        }
      ],
      "revId": "f4a7c7de79ce8e5934bdc70e2f45647fea4c8f4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1b6f8842_7e7c9fb3",
        "filename": "fs_mgr/libsnapshot/scratch_super.cpp",
        "patchSetId": 8
      },
      "lineNbr": 84,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-08-17T07:07:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "89d69dae_4cd25369",
      "revId": "f4a7c7de79ce8e5934bdc70e2f45647fea4c8f4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f46800f_d2ccb354",
        "filename": "fs_mgr/libsnapshot/scratch_super.cpp",
        "patchSetId": 8
      },
      "lineNbr": 228,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2024-08-17T00:15:11Z",
      "side": 1,
      "message": "Does this need to be in SnapshotManager? It doesn\u0027t seem related to snapshots or OTA. Same for the teardown function. At a glance maybe it could even be a separate library (which would make it easier to exclude on user builds).",
      "revId": "f4a7c7de79ce8e5934bdc70e2f45647fea4c8f4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec4b843a_0bd0364b",
        "filename": "fs_mgr/libsnapshot/scratch_super.cpp",
        "patchSetId": 8
      },
      "lineNbr": 228,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-08-17T07:07:40Z",
      "side": 1,
      "message": "This entire flow is specific to creation of metadata directories for OTA snapshots. I did initially think about extracting this to a command library; if you look at this, most of this core logic is also in overlayfs; but at the end it was just two functions which could have been extracted out: \n\n1: MakeScratchFilesystem\n2: MountScratch\n\nThe rest of the functions is primarily related to creation of OTA specific directories, teardown, checking if the device is present during first stage boot. All these are SnapshtoManager specific. Also, IDeviceInfo used for testing is also embedded into SnapshotManager which made it easy to test.",
      "parentUuid": "1f46800f_d2ccb354",
      "revId": "f4a7c7de79ce8e5934bdc70e2f45647fea4c8f4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "981a2ba2_d64b9eb5",
        "filename": "fs_mgr/libsnapshot/scratch_super.cpp",
        "patchSetId": 8
      },
      "lineNbr": 228,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2024-08-19T18:41:07Z",
      "side": 1,
      "message": "Still, I view this as an extension of the snapshot mechanism but not related to OTA. SnapshotManager never needs to mkfs for OTA. It\u0027s fine to use IDeviceInfo outside of SnapshotManager.",
      "parentUuid": "ec4b843a_0bd0364b",
      "revId": "f4a7c7de79ce8e5934bdc70e2f45647fea4c8f4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90aacece_b92ef7d3",
        "filename": "fs_mgr/libsnapshot/scratch_super.cpp",
        "patchSetId": 8
      },
      "lineNbr": 228,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-08-19T20:43:49Z",
      "side": 1,
      "message": "Ok. Moved all of this out of SnapshotManager - This is now just an extension.",
      "parentUuid": "981a2ba2_d64b9eb5",
      "revId": "f4a7c7de79ce8e5934bdc70e2f45647fea4c8f4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d92ca9d1_b0e13c50",
        "filename": "fs_mgr/libsnapshot/scratch_super.cpp",
        "patchSetId": 8
      },
      "lineNbr": 395,
      "author": {
        "id": 1964171
      },
      "writtenOn": "2024-08-16T23:36:27Z",
      "side": 1,
      "message": "const \u0026",
      "fixSuggestions": [
        {
          "fixId": "d58c7713_114cc847",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "fs_mgr/libsnapshot/scratch_super.cpp",
              "range": {
                "startLine": 395,
                "startChar": 0,
                "endLine": 396,
                "endChar": 0
              },
              "replacement": "std::string MapScratchDevice(const std::string\u0026 scratch_device) {\n"
            },
            {
              "path": "fs_mgr/libsnapshot/scratch_super.cpp",
              "range": {
                "startLine": 458,
                "startChar": 0,
                "endLine": 459,
                "endChar": 0
              },
              "replacement": "std::string MapScratchDevice(const std::string\u0026) {\n"
            }
          ]
        }
      ],
      "revId": "f4a7c7de79ce8e5934bdc70e2f45647fea4c8f4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e17dc8e1_93e1d93b",
        "filename": "fs_mgr/libsnapshot/scratch_super.cpp",
        "patchSetId": 8
      },
      "lineNbr": 395,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-08-17T07:07:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d92ca9d1_b0e13c50",
      "revId": "f4a7c7de79ce8e5934bdc70e2f45647fea4c8f4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d0fd098_259da046",
        "filename": "fs_mgr/libsnapshot/scratch_super.h",
        "patchSetId": 8
      },
      "lineNbr": 22,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2024-08-17T00:15:11Z",
      "side": 1,
      "message": "\"scratch\" is confusing since we already have an unrelated scratch partition, and it can *also* be on super. \"temp_snapshots\" or something would be better.",
      "revId": "f4a7c7de79ce8e5934bdc70e2f45647fea4c8f4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a88f7e05_9dace825",
        "filename": "fs_mgr/libsnapshot/scratch_super.h",
        "patchSetId": 8
      },
      "lineNbr": 22,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-08-17T07:07:40Z",
      "side": 1,
      "message": "renamed it to kOtaMetadataMount",
      "parentUuid": "1d0fd098_259da046",
      "revId": "f4a7c7de79ce8e5934bdc70e2f45647fea4c8f4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61e333b2_3d75ad2c",
        "filename": "fs_mgr/libsnapshot/scratch_super.h",
        "patchSetId": 8
      },
      "lineNbr": 24,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2024-08-17T00:15:11Z",
      "side": 1,
      "message": "static std::strings are discouraged, especially in headers where they can lead to ODR violations. Better to use \"constexpr char*\" or constexpr std::string_view literals (sv suffix).",
      "revId": "f4a7c7de79ce8e5934bdc70e2f45647fea4c8f4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "509fb931_2a55233b",
        "filename": "fs_mgr/libsnapshot/scratch_super.h",
        "patchSetId": 8
      },
      "lineNbr": 24,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-08-17T07:07:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "61e333b2_3d75ad2c",
      "revId": "f4a7c7de79ce8e5934bdc70e2f45647fea4c8f4b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}