{
  "comments": [
    {
      "key": {
        "uuid": "7687f329_3dd76762",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 3
      },
      "lineNbr": 904,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-08-11T15:05:42Z",
      "side": 1,
      "message": "if prefix can contain a NUL byte, this code is broken -- because strdup(3) will stop at the first NUL byte -- and you MUST switch to std::string (with a start and end), std::vector\u003cchar\u003e (if you want to ensure that no one calls c_str).",
      "revId": "34e03bdfdf3defc667eab68f126ad3370547159a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6e5ebf4_84c5671f",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 3
      },
      "lineNbr": 904,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2014-08-11T15:09:05Z",
      "side": 1,
      "message": "Prefix can\u0027t contain NUL and is intended to be a C string. The only prefixes we use in our codebase are \"META-INF/\" and \"lib/\". We should probably document that clearly.",
      "parentUuid": "7687f329_3dd76762",
      "revId": "34e03bdfdf3defc667eab68f126ad3370547159a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f672031f_c89a0f92",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 3
      },
      "lineNbr": 904,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-08-11T15:10:46Z",
      "side": 1,
      "message": "what did haaawk mean by \"string might not be suitable here because prefix is a byte buffer which can contain \\0 in the middle. I will change to const_cast.\"?",
      "parentUuid": "b6e5ebf4_84c5671f",
      "revId": "34e03bdfdf3defc667eab68f126ad3370547159a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9699c785_9b4217c2",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 3
      },
      "lineNbr": 904,
      "author": {
        "id": 1052243
      },
      "writtenOn": "2014-08-11T15:13:37Z",
      "side": 1,
      "message": "I\u0027m aware of it Elliott and I\u0027m fixing this in the next cl. As  Narayan said, we never use anything different than C string but I need to fix FindEntry to use ZipEntryName instead of char* so I will change this method too to make them consistent.",
      "parentUuid": "b6e5ebf4_84c5671f",
      "revId": "34e03bdfdf3defc667eab68f126ad3370547159a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56a3cfb2_39d053df",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 3
      },
      "lineNbr": 904,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2014-08-11T15:16:44Z",
      "side": 1,
      "message": "I think I confused that comment with another discussion. Entry names can contain NUL if they\u0027re encoded using UTF-8 but we\u0027re free to impose constraints on |prefix|.\n\nNone of our callers need to match against prefixes that contain NUL so we shouldn\u0027t have to support \u0027em if we don\u0027t want to. \n\nThat said, I think Piotr\u0027s plan is to support them for completeness and because we want to make this API stop assuming null termination or any other encoding related constraints.",
      "parentUuid": "f672031f_c89a0f92",
      "revId": "34e03bdfdf3defc667eab68f126ad3370547159a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6e5ebf4_44199f12",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 3
      },
      "lineNbr": 904,
      "author": {
        "id": 1052243
      },
      "writtenOn": "2014-08-11T15:17:21Z",
      "side": 1,
      "message": "I meant that names in zip archive are really a byte buffers with length. We happen not to call StartIteration with any buffer which contains \u0027\\0\u0027 in the middle but it should be possible since the names in the archives can contain \u0027\\0\u0027 in the middle. In general all str* methods in this file are wrong and I will be fixing it. Here\u0027s the bug with some more context: \nhttps://b.corp.google.com/issue?id\u003d16162465",
      "parentUuid": "f672031f_c89a0f92",
      "revId": "34e03bdfdf3defc667eab68f126ad3370547159a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56a3cfb2_1919cf13",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 3
      },
      "lineNbr": 904,
      "author": {
        "id": 1052243
      },
      "writtenOn": "2014-08-11T15:18:15Z",
      "side": 1,
      "message": "Exactly as Narayan said.",
      "parentUuid": "56a3cfb2_39d053df",
      "revId": "34e03bdfdf3defc667eab68f126ad3370547159a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7687f329_7de1df32",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 3
      },
      "lineNbr": 905,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-08-11T15:05:42Z",
      "side": 1,
      "message": "likewise, this length will be wrong.\n\nare you _sure_ prefix can contain NUL? if so, this API is broken. you need to pass a size_t alongside the const char*. (and you might want to switch to const uint8_t* to make it clearer that this is just a pointer to bytes, not a C string.)",
      "revId": "34e03bdfdf3defc667eab68f126ad3370547159a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6e5ebf4_e4db8bfd",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 3
      },
      "lineNbr": 905,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2014-08-11T15:09:05Z",
      "side": 1,
      "message": "likewise.",
      "parentUuid": "7687f329_7de1df32",
      "revId": "34e03bdfdf3defc667eab68f126ad3370547159a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f672031f_68d3db42",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 3
      },
      "lineNbr": 917,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-08-11T15:05:42Z",
      "side": 1,
      "message": "this is useless. you can always pass NULL to free(3).",
      "revId": "34e03bdfdf3defc667eab68f126ad3370547159a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56a3cfb2_79cadb2c",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 3
      },
      "lineNbr": 917,
      "author": {
        "id": 1052243
      },
      "writtenOn": "2014-08-11T15:13:37Z",
      "side": 1,
      "message": "Thanks will fix in next cl.",
      "parentUuid": "f672031f_68d3db42",
      "revId": "34e03bdfdf3defc667eab68f126ad3370547159a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}