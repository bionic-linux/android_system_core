{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4a8f5395_128820a5",
        "filename": "libutils/Unicode_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 166,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-12-01T18:06:26Z",
      "side": 1,
      "message": "while technically correct, i\u0027d prefer \"byte\"/\"bytes\" in all of these...",
      "range": {
        "startLine": 166,
        "startChar": 57,
        "endLine": 166,
        "endChar": 61
      },
      "revId": "f3455fdfdef33892580c6b2980314e548575fd24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "039f58a7_21639cc6",
        "filename": "libutils/Unicode_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 166,
      "author": {
        "id": 1850729
      },
      "writtenOn": "2022-12-01T20:00:24Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4a8f5395_128820a5",
      "range": {
        "startLine": 166,
        "startChar": 57,
        "endLine": 166,
        "endChar": 61
      },
      "revId": "f3455fdfdef33892580c6b2980314e548575fd24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47545d13_23342a8c",
        "filename": "libutils/Unicode_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 202,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-12-01T18:06:26Z",
      "side": 1,
      "message": "test an invalid second half too?",
      "revId": "f3455fdfdef33892580c6b2980314e548575fd24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12b7eada_6cf9d8d6",
        "filename": "libutils/Unicode_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 202,
      "author": {
        "id": 1850729
      },
      "writtenOn": "2022-12-01T20:00:24Z",
      "side": 1,
      "message": "I\u0027m basically thinking of two cases involving testing an invalid 2nd half, and let me know if you have more:\n\n1) a valid 2nd half of surrogate occurs invalidly without a preceding 1st half --\u003e we should expect this 2nd half being ignored/skipped here\n\n2) a valid 1st half with an invalid 2nd half --\u003e we should ignore the 1st half, and keep converting the rest, this is covered in both UTF16toUTF8UnpairedSurrogateLength() and UTF16toUTF8CorrectInvalidSurrogateLength()\n\nSo it seems the only case that we are missing is a valid 2nd half popped out nowhere, which I think should be tested as part of the \"UnpairedSurrogate\" case.\n\nThe test UTF16toUTF8CorrectInvalidSurrogateLength() is more specific to b/29250543, and is a special case of unpaired surrogate.\n\nWhat do we think?",
      "parentUuid": "47545d13_23342a8c",
      "revId": "f3455fdfdef33892580c6b2980314e548575fd24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70067278_c765be6c",
        "filename": "libutils/Unicode_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 202,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-12-01T20:08:47Z",
      "side": 1,
      "message": "\u003e UnpairedSurrogate\n\ni don\u0027t see that test? if you meant UTF16toUTF8UnpairedSurrogateLength, maybe just clarify the comments about \"half\". but that test only has a lone high surrogate, not a lone low surrogate?",
      "parentUuid": "12b7eada_6cf9d8d6",
      "revId": "f3455fdfdef33892580c6b2980314e548575fd24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "479ee6cc_a3b827f5",
        "filename": "libutils/Unicode_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 202,
      "author": {
        "id": 1850729
      },
      "writtenOn": "2022-12-01T20:10:52Z",
      "side": 1,
      "message": "Right, that\u0027s what I suggested, by having the lone low surrogate test in `UTF16toUTF8UnpairedSurrogateLength`",
      "parentUuid": "70067278_c765be6c",
      "revId": "f3455fdfdef33892580c6b2980314e548575fd24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9171cfb_8fbb9da1",
        "filename": "libutils/Unicode_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 202,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-12-01T20:14:56Z",
      "side": 1,
      "message": "oh, sorry, i thought you were saying it was already there. yeah, that was the case i was thinking of.\n\nin particular, i didn\u0027t spot anything clever in the equivalent bionic tests (https://source.corp.google.com/android/bionic/tests/iconv_test.cpp;l\u003d387?q\u003dfile:bionic%20file:test%20surrogate\u0026sq\u003dpackage:%5Eandroid$%20-file:prebuilts%2Fvndk%2F%20-file:prebuilts%2Fruntime%2F).",
      "parentUuid": "479ee6cc_a3b827f5",
      "revId": "f3455fdfdef33892580c6b2980314e548575fd24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "abc71b3f_d0766cbd",
        "filename": "libutils/Unicode_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 202,
      "author": {
        "id": 1850729
      },
      "writtenOn": "2022-12-03T00:17:29Z",
      "side": 1,
      "message": "Ack. Added the lone low surrogate in UTF16toUTF8UnpairedSurrogate()",
      "parentUuid": "b9171cfb_8fbb9da1",
      "revId": "f3455fdfdef33892580c6b2980314e548575fd24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b499dce_1566547e",
        "filename": "libutils/Unicode_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 211,
      "author": {
        "id": 1080076
      },
      "writtenOn": "2022-12-01T00:15:47Z",
      "side": 1,
      "message": "same thing about 16to8invalid? or can add an extra check for the real conversion in every invalid length test",
      "range": {
        "startLine": 211,
        "startChar": 20,
        "endLine": 211,
        "endChar": 37
      },
      "revId": "f3455fdfdef33892580c6b2980314e548575fd24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7dfe5a91_0fc9a14d",
        "filename": "libutils/Unicode_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 211,
      "author": {
        "id": 1850729
      },
      "writtenOn": "2022-12-01T20:00:24Z",
      "side": 1,
      "message": "Agree, and I am struggling here is really to find any real invalid UTF-16 characters that cannot be encoded by UTF8 in the context of conversion. So basically if we look at UTF-16 as a 1:1 mapping encoding for 16-bit characters in the BMP, with surrogate pairs for characters beyond, there are a few cases worth mentioning here:\n\n1. Unallocated UTF-16 characters --\u003e maybe we could whine about this but they should be encoded in UTF-8 anyway normally\n\n2. Private-use characters --\u003e should be encoded in normal UTF-8\n\n3. Non-characters in BMP such as 0xFFF0-0xFFFF --\u003e again, these should still be encoded in normal UTF-8, and the check for if they are valid characters should be up to the user of that UTF-8 string\n\n4. Surrogate pairs - these have dedicated tests.\n\nAnd for the real conversion, I actually agree we should not only check for length, we should do the conversion in every length test. Let me come up with another version.",
      "parentUuid": "6b499dce_1566547e",
      "range": {
        "startLine": 211,
        "startChar": 20,
        "endLine": 211,
        "endChar": 37
      },
      "revId": "f3455fdfdef33892580c6b2980314e548575fd24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2554b4eb_d80e5568",
        "filename": "libutils/Unicode_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 211,
      "author": {
        "id": 1850729
      },
      "writtenOn": "2022-12-03T00:17:29Z",
      "side": 1,
      "message": "Let me know what you think @zyy@google.com",
      "parentUuid": "7dfe5a91_0fc9a14d",
      "range": {
        "startLine": 211,
        "startChar": 20,
        "endLine": 211,
        "endChar": 37
      },
      "revId": "f3455fdfdef33892580c6b2980314e548575fd24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba6c7d7a_d753706e",
        "filename": "libutils/Unicode_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 213,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-12-01T18:06:26Z",
      "side": 1,
      "message": "especially when you say \"characters\" rather than \"char\" :-)",
      "range": {
        "startLine": 213,
        "startChar": 58,
        "endLine": 213,
        "endChar": 67
      },
      "revId": "f3455fdfdef33892580c6b2980314e548575fd24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7e40fa2c_dd26ec6b",
        "filename": "libutils/Unicode_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 213,
      "author": {
        "id": 1850729
      },
      "writtenOn": "2022-12-01T20:00:24Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ba6c7d7a_d753706e",
      "range": {
        "startLine": 213,
        "startChar": 58,
        "endLine": 213,
        "endChar": 67
      },
      "revId": "f3455fdfdef33892580c6b2980314e548575fd24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7379d6c1_eb48e3dc",
        "filename": "libutils/Unicode_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 217,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-12-01T18:06:26Z",
      "side": 1,
      "message": "explain why you want three different codepoints that are all 3-byte sequences?",
      "range": {
        "startLine": 215,
        "startChar": 8,
        "endLine": 217,
        "endChar": 67
      },
      "revId": "f3455fdfdef33892580c6b2980314e548575fd24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b5390d7_20c9b721",
        "filename": "libutils/Unicode_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 217,
      "author": {
        "id": 1850729
      },
      "writtenOn": "2022-12-01T20:00:24Z",
      "side": 1,
      "message": "Basically I was thinking of slightly better coverage between U+0800 to U+FFFF by picking more than 1 code point. I\u0027ll try to revise my comment a bit.",
      "parentUuid": "7379d6c1_eb48e3dc",
      "range": {
        "startLine": 215,
        "startChar": 8,
        "endLine": 217,
        "endChar": 67
      },
      "revId": "f3455fdfdef33892580c6b2980314e548575fd24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f12c92f_39a5f788",
        "filename": "libutils/Unicode_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 217,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-12-01T20:08:47Z",
      "side": 1,
      "message": "meh, we don\u0027t usually bother with that until/unless we have a specific regression, at which point we have a clear motivation for the added test :-)",
      "parentUuid": "1b5390d7_20c9b721",
      "range": {
        "startLine": 215,
        "startChar": 8,
        "endLine": 217,
        "endChar": 67
      },
      "revId": "f3455fdfdef33892580c6b2980314e548575fd24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe754dc3_0aaa478b",
        "filename": "libutils/Unicode_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 217,
      "author": {
        "id": 1850729
      },
      "writtenOn": "2022-12-01T20:10:52Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4f12c92f_39a5f788",
      "range": {
        "startLine": 215,
        "startChar": 8,
        "endLine": 217,
        "endChar": 67
      },
      "revId": "f3455fdfdef33892580c6b2980314e548575fd24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63835c82_5771d3c0",
        "filename": "libutils/Unicode_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 221,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-12-01T18:06:26Z",
      "side": 1,
      "message": "(rather than be clever [and error prone in face of future changes], just use BUFSIZ or something?)",
      "revId": "f3455fdfdef33892580c6b2980314e548575fd24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05b694ee_22b9e2db",
        "filename": "libutils/Unicode_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 221,
      "author": {
        "id": 1850729
      },
      "writtenOn": "2022-12-01T20:00:24Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "63835c82_5771d3c0",
      "revId": "f3455fdfdef33892580c6b2980314e548575fd24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4640346d_78a77326",
        "filename": "libutils/Unicode_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 225,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-12-01T18:06:26Z",
      "side": 1,
      "message": "(do you actually need the \u003c\u003c here? won\u0027t the default gtest output include exactly that anyway?)",
      "revId": "f3455fdfdef33892580c6b2980314e548575fd24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7aa93e58_9c96d4b0",
        "filename": "libutils/Unicode_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 225,
      "author": {
        "id": 1850729
      },
      "writtenOn": "2022-12-01T20:00:24Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4640346d_78a77326",
      "revId": "f3455fdfdef33892580c6b2980314e548575fd24",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}