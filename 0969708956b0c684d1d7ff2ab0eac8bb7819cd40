{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3c842677_830694ce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1981075
      },
      "writtenOn": "2024-11-08T08:52:29Z",
      "side": 1,
      "message": "Thanks so much for moving this forward! I couldn\u0027t review the all code yet, but here\u0027s my first comments.",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ddb2e68f_33542b1e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-11-08T13:51:46Z",
      "side": 1,
      "message": "there\u0027s a blanket \"no\" to dumping new projects in system/core/ --- either put this next to existing code it belongs with, or request the creation of a new system/libprefetch/ git project.",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3c38785_e8c53da5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-11-11T23:36:31Z",
      "side": 1,
      "message": "I have moved this library to system/extras - https://r.android.com/3344265\n\nUnfortunately, these two are different git repo and hence gerrit create a new review even though Change-Id: is the same..",
      "parentUuid": "ddb2e68f_33542b1e",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fdffd464_bb588c6b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-11-11T23:36:31Z",
      "side": 1,
      "message": "Thanks all for the review.\n\nBased on enh@ review, I have moved this library to system/extras.\n\nUnfortunately, system/extras and system/core are two different git repo. Hence, all the addressed review comments in this CL are uploaded as a fresh review by gerrit even though Change-Id is the same. The new CL addressing all the review comments is here: https://r.android.com/3344265.",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dbea3f53_76f753c9",
        "filename": "libprefetch/prefetch/Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 115,
      "author": {
        "id": 1981075
      },
      "writtenOn": "2024-11-08T08:52:29Z",
      "side": 1,
      "message": "How about commenting on a TODO that we wanted to turn the unit tests into `rust_test` but couldn\u0027t now with a buganizer link?",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a1c739d_e3f79fa6",
        "filename": "libprefetch/prefetch/Android.bp",
        "patchSetId": 5
      },
      "lineNbr": 115,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-11-11T23:36:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dbea3f53_76f753c9",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d7f83c4_0d1ef06e",
        "filename": "libprefetch/prefetch/src/args.rs",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 1981075
      },
      "writtenOn": "2024-11-08T08:52:29Z",
      "side": 1,
      "message": "What would be the background of maintaining both clap and argh?",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6795e344_1036a7d9",
        "filename": "libprefetch/prefetch/src/args.rs",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-11-11T23:36:31Z",
      "side": 1,
      "message": "I removed all the clap variant and retained argh.",
      "parentUuid": "4d7f83c4_0d1ef06e",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3056877d_796bc2de",
        "filename": "libprefetch/prefetch/src/args.rs",
        "patchSetId": 5
      },
      "lineNbr": 119,
      "author": {
        "id": 1981075
      },
      "writtenOn": "2024-11-08T08:52:29Z",
      "side": 1,
      "message": "typo: \n```suggestion\n/// Returns `PathBuf` if the given path at `value` exists.\n```",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d86a41f5_88136870",
        "filename": "libprefetch/prefetch/src/args.rs",
        "patchSetId": 5
      },
      "lineNbr": 119,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-11-11T23:36:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3056877d_796bc2de",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d67ea36_88e180c5",
        "filename": "libprefetch/prefetch/src/args/args_argh.rs",
        "patchSetId": 5
      },
      "lineNbr": 57,
      "author": {
        "id": 1981075
      },
      "writtenOn": "2024-11-08T08:52:29Z",
      "side": 1,
      "message": "discussion: do we want an option to run a record until we kill it via a signal as `ureadaehad` does? I think we want to run the record exactly until boot_completed ideally. Or maybe we can just add such an option later.",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f3065ab_926ec66e",
        "filename": "libprefetch/prefetch/src/args/args_argh.rs",
        "patchSetId": 5
      },
      "lineNbr": 57,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-11-11T23:36:31Z",
      "side": 1,
      "message": "I have added option to run the record until sys.boot_complete\u003d1. The duration could would still be checked and passed as a ro property. If the value isn\u0027t set then it will fallback and wait until sys.boot_complete.\n\n\u003e do we want an option to run a record until we kill it via a signal\n\nYes - This would be good to have when running tests locally. I would defer it for further improvements.",
      "parentUuid": "2d67ea36_88e180c5",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "edca6066_a617b3ee",
        "filename": "libprefetch/prefetch/src/args/args_argh.rs",
        "patchSetId": 5
      },
      "lineNbr": 85,
      "author": {
        "id": 1981075
      },
      "writtenOn": "2024-11-08T08:52:29Z",
      "side": 1,
      "message": "I think we dropped \"fs\" from the prefetch\u0027s implementation unlike ureadahead",
      "range": {
        "startLine": 85,
        "startChar": 16,
        "endLine": 85,
        "endChar": 30
      },
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55a515d7_4722d0b2",
        "filename": "libprefetch/prefetch/src/args/args_argh.rs",
        "patchSetId": 5
      },
      "lineNbr": 85,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-11-11T23:36:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "edca6066_a617b3ee",
      "range": {
        "startLine": 85,
        "startChar": 16,
        "endLine": 85,
        "endChar": 30
      },
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8ab4598_8186081c",
        "filename": "libprefetch/prefetch/src/c_exports.rs",
        "patchSetId": 5
      },
      "lineNbr": 54,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2024-11-11T11:05:47Z",
      "side": 1,
      "message": "This functions has safety requirements on `arg_value`, so needs to either be unsafe (and document its requirements) or be made safe by taking a safe wrapper type instead.",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7fa48d7e_cb524bcd",
        "filename": "libprefetch/prefetch/src/c_exports.rs",
        "patchSetId": 5
      },
      "lineNbr": 54,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-11-11T23:36:31Z",
      "side": 1,
      "message": "thanks. I have added safety comments for both the places.",
      "parentUuid": "b8ab4598_8186081c",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f9cf84c_182e08ed",
        "filename": "libprefetch/prefetch/src/c_exports.rs",
        "patchSetId": 5
      },
      "lineNbr": 59,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2024-11-11T11:05:47Z",
      "side": 1,
      "message": "No it\u0027s not. `arg_value` could be an invalid pointer. And if it were safe, the safety comment needs to explain why.",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17a2022a_525e85ad",
        "filename": "libprefetch/prefetch/src/c_exports.rs",
        "patchSetId": 5
      },
      "lineNbr": 59,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-11-11T23:36:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8f9cf84c_182e08ed",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11611d1c_79633173",
        "filename": "libprefetch/prefetch/src/c_exports.rs",
        "patchSetId": 5
      },
      "lineNbr": 102,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2024-11-11T11:05:47Z",
      "side": 1,
      "message": "Again, no it\u0027s not.",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4bd86dc9_7f97546a",
        "filename": "libprefetch/prefetch/src/c_exports.rs",
        "patchSetId": 5
      },
      "lineNbr": 102,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-11-11T23:36:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "11611d1c_79633173",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d0e5f12_ccd95415",
        "filename": "libprefetch/prefetch/src/error.rs",
        "patchSetId": 5
      },
      "lineNbr": 161,
      "author": {
        "id": 1981075
      },
      "writtenOn": "2024-11-08T08:52:29Z",
      "side": 1,
      "message": "Perhaps, is `Setup` the intended name? Or if the intention is hide irrelevant errors from the caller, we can update the comment or return `anyhow::Error` instead.",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "92506141_0d870117",
        "filename": "libprefetch/prefetch/src/error.rs",
        "patchSetId": 5
      },
      "lineNbr": 161,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-11-11T23:36:31Z",
      "side": 1,
      "message": "This is to support \"custom\" error message. \n\nFailed to setup prefetch: \u003ccustom message\u003e\n\nIts a simple wrapper around error! - I will retain this as-is for now.",
      "parentUuid": "8d0e5f12_ccd95415",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "618674b8_881a82e9",
        "filename": "libprefetch/prefetch/src/format.rs",
        "patchSetId": 5
      },
      "lineNbr": 230,
      "author": {
        "id": 1981075
      },
      "writtenOn": "2024-11-08T08:52:29Z",
      "side": 1,
      "message": "It seems we coalesce records only when adjacent records can be merged instead of merging all adjacent offsets in the same file. Is it intended?",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f2348fdd_d1db1bb9",
        "filename": "libprefetch/prefetch/src/format.rs",
        "patchSetId": 5
      },
      "lineNbr": 230,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-11-11T23:36:31Z",
      "side": 1,
      "message": "Yes. I think this was intentional. I recall having this discussion a while back with Vikram about coalescing.\n\nAlso, we may probably don\u0027t want to merge all offsets from the same file as well if we want to split up the replay into multiple phases which I think is important when boot is significantly large. coalescing everything in one shot and reading may actually hurt memory. It\u0027s worth revisiting this later for optimization.",
      "parentUuid": "618674b8_881a82e9",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ccb47a7c_7364fc14",
        "filename": "libprefetch/prefetch/src/lib.rs",
        "patchSetId": 5
      },
      "lineNbr": 60,
      "author": {
        "id": 1981075
      },
      "writtenOn": "2024-11-08T08:52:29Z",
      "side": 1,
      "message": "Could this change slow down boot time when recording? Would it be better to increase the CPU buffer size instead?",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "04213fac_20eee11c",
        "filename": "libprefetch/prefetch/src/lib.rs",
        "patchSetId": 5
      },
      "lineNbr": 60,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-11-11T23:36:31Z",
      "side": 1,
      "message": "We don\u0027t set this by default. So, this is ok. Also, it cannot be set without relevant sepolicy as well.\n\nAlso, we don\u0027t need to set it here - given we have a .rc script, we could set a task profile as required for this process. I will defer that once we have enough performance data.",
      "parentUuid": "ccb47a7c_7364fc14",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3fed72d0_308077bd",
        "filename": "libprefetch/prefetch/src/replay.rs",
        "patchSetId": 5
      },
      "lineNbr": 65,
      "author": {
        "id": 1981075
      },
      "writtenOn": "2024-11-08T08:52:29Z",
      "side": 1,
      "message": "It doesn\u0027t seem we need the returned `Dbg` anywhere. Can we simplify it by making `replay_log` use the format of `\"{thd_id} {msg} end\"` and calling `replay_log` directly?.",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "57ad3a0b_93d6e130",
        "filename": "libprefetch/prefetch/src/replay.rs",
        "patchSetId": 5
      },
      "lineNbr": 65,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-11-11T23:36:31Z",
      "side": 1,
      "message": "No. I think this was intentional but wherein when it goes out of scope, the \"end\" marker from \"Drop\" function gets invoked automatically. However, I think it should be with a variable else I believe the scope would go out immediately after this line which isn\u0027t what we want.. I have just added a variable to make sure its scope is throughout the function to make it more clearer.",
      "parentUuid": "3fed72d0_308077bd",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f97740a3_32c5a802",
        "filename": "libprefetch/prefetch/src/replay.rs",
        "patchSetId": 5
      },
      "lineNbr": 72,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2024-11-11T11:05:47Z",
      "side": 1,
      "message": "These two variables are never used.",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "909e24d1_0f481862",
        "filename": "libprefetch/prefetch/src/replay.rs",
        "patchSetId": 5
      },
      "lineNbr": 72,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-11-11T23:36:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f97740a3_32c5a802",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b12f6c8_0e77d92c",
        "filename": "libprefetch/prefetch/src/replay.rs",
        "patchSetId": 5
      },
      "lineNbr": 77,
      "author": {
        "id": 1981075
      },
      "writtenOn": "2024-11-08T08:52:29Z",
      "side": 1,
      "message": "I think safety should be about the validity of the given buffer.",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecf28dca_b7740154",
        "filename": "libprefetch/prefetch/src/replay.rs",
        "patchSetId": 5
      },
      "lineNbr": 77,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2024-11-11T11:05:47Z",
      "side": 1,
      "message": "From what I can see there are three safety requirements you need to guarantee for `pread`:\n\n1. The file descriptor must be valid and remain so for the duration of the call. This is guaranteed because it comes from an owned `File`. Because the `File` is wrapped in an `Arc` it is possible that some other thread is accessing it at the same time, but I don\u0027t think this is an issue for safety.\n2. The buffer pointer must be to a valid allocation with exclusive access for the duration of the call. This is guaranteed by the fact it comes from a mutable slice reference.\n3. The count (i.e. `read_size`) must not exceed the length of the buffer. You are not currently checking this, please do or there could be a buffer overflow.\n\nThis unsafe block is also unnecessarily large, please make it as small as possible.",
      "parentUuid": "1b12f6c8_0e77d92c",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ecdbefbd_485e4181",
        "filename": "libprefetch/prefetch/src/replay.rs",
        "patchSetId": 5
      },
      "lineNbr": 77,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-11-11T23:36:31Z",
      "side": 1,
      "message": "Addressed safety comments. Checked read_size validation.",
      "parentUuid": "1b12f6c8_0e77d92c",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad251598_a003f81b",
        "filename": "libprefetch/prefetch/src/replay.rs",
        "patchSetId": 5
      },
      "lineNbr": 79,
      "author": {
        "id": 1981075
      },
      "writtenOn": "2024-11-08T08:52:29Z",
      "side": 1,
      "message": "question: `pread` will read the recorded range + kernel\u0027s read_ahead range (up to 128kb by default). So, it consumes more memory. Are we aware of that? Anyway this is a good start, though.",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c90dec2d_4493e8e1",
        "filename": "libprefetch/prefetch/src/replay.rs",
        "patchSetId": 5
      },
      "lineNbr": 79,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-11-11T23:36:31Z",
      "side": 1,
      "message": "No. It shouldn\u0027t. The file fadvise has been set to POSIX_FADV_RANDOM which should prevent kernel readahead.",
      "parentUuid": "ad251598_a003f81b",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99604a53_1dae954d",
        "filename": "libprefetch/prefetch/src/replay.rs",
        "patchSetId": 5
      },
      "lineNbr": 81,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2024-11-11T11:05:47Z",
      "side": 1,
      "message": "Each time through the loop this reads into the same buffer, so the caller will only see the last part that was read. Is that intentional?",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e320cfbc_e9e0480b",
        "filename": "libprefetch/prefetch/src/replay.rs",
        "patchSetId": 5
      },
      "lineNbr": 81,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-11-11T23:36:31Z",
      "side": 1,
      "message": "This is ok and intentional. The point here is to get the data to page-cache. The buffer isn\u0027t used by the caller.\n\nreadahead() syscall does that without buffer but we didn\u0027t see perf benefits. We will revisit to incorporate readahead() syscall as well as optimization.",
      "parentUuid": "99604a53_1dae954d",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "072ba6a0_3a1770b0",
        "filename": "libprefetch/prefetch/src/replay.rs",
        "patchSetId": 5
      },
      "lineNbr": 98,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2024-11-11T11:05:47Z",
      "side": 1,
      "message": "Could this be a while loop condition?",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "76c5908d_ef5e5a4f",
        "filename": "libprefetch/prefetch/src/replay.rs",
        "patchSetId": 5
      },
      "lineNbr": 98,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-11-11T23:36:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "072ba6a0_3a1770b0",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "597f04e6_c4511d5a",
        "filename": "libprefetch/prefetch/src/replay.rs",
        "patchSetId": 5
      },
      "lineNbr": 533,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2024-11-11T11:05:47Z",
      "side": 1,
      "message": "And `buf` is long enough.",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7cb3f601_99f6430c",
        "filename": "libprefetch/prefetch/src/replay.rs",
        "patchSetId": 5
      },
      "lineNbr": 533,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-11-11T23:36:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "597f04e6_c4511d5a",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f2179b1_93079f10",
        "filename": "libprefetch/prefetch/src/tracer/mem.rs",
        "patchSetId": 5
      },
      "lineNbr": 67,
      "author": {
        "id": 1981075
      },
      "writtenOn": "2024-11-08T08:52:29Z",
      "side": 1,
      "message": "`/data` also can be ext4. Or, should we exclude based on paths instead?",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e891629e_1cefaaa9",
        "filename": "libprefetch/prefetch/src/tracer/mem.rs",
        "patchSetId": 5
      },
      "lineNbr": 67,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-11-11T23:36:31Z",
      "side": 1,
      "message": "There  is path based as well - check for `is_highly_privileged_path` which checks for \"/data/\"; \n\nAlso, I think it would be clear to grep filesystem info from `/proc/self/mountinfo` instead of hardcode. For now, `is_highly_privileged_path` works. We can revise this later.",
      "parentUuid": "2f2179b1_93079f10",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "878975aa_d704d9a3",
        "filename": "libprefetch/prefetch/src/tracer/mod.rs",
        "patchSetId": 5
      },
      "lineNbr": 637,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2024-11-11T11:05:47Z",
      "side": 1,
      "message": "This unsafe block has nothing to do with files, it is just allocating memory. Check the documented safety requirements for `Layout::from_size_align` and `slice::from_raw_parts_mut` and explain how you are fulfilling them. Also consider moving this to a separate helper function.",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa19866d_95062c33",
        "filename": "libprefetch/prefetch/src/tracer/mod.rs",
        "patchSetId": 5
      },
      "lineNbr": 637,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-11-11T23:36:31Z",
      "side": 1,
      "message": "Moved to a dedicated function with added safety commments.",
      "parentUuid": "878975aa_d704d9a3",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a134e037_a180f4a8",
        "filename": "libprefetch/prefetch/src/tracer/mod.rs",
        "patchSetId": 5
      },
      "lineNbr": 640,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2024-11-11T11:05:47Z",
      "side": 1,
      "message": "You never deallocate this buffer, so it is leaked. Is that intentional?",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7512c8bb_2107b72b",
        "filename": "libprefetch/prefetch/src/tracer/mod.rs",
        "patchSetId": 5
      },
      "lineNbr": 640,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-11-11T23:36:31Z",
      "side": 1,
      "message": "buf is now of type Box\u003c[u8]\u003e which should get deallocated when it goes out of scope after this function returns.",
      "parentUuid": "a134e037_a180f4a8",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c78d4494_b3bdafb9",
        "filename": "libprefetch/prefetch/src/tracer/mod.rs",
        "patchSetId": 5
      },
      "lineNbr": 861,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2024-11-11T11:05:47Z",
      "side": 1,
      "message": "You shouldn\u0027t need unsafe code here, doesn\u0027t `pipe()` return a pair of `OwnedFd`s? They can be converted safely to `File`s with `File::from`.",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "22aa98de_0803f0a1",
        "filename": "libprefetch/prefetch/src/tracer/mod.rs",
        "patchSetId": 5
      },
      "lineNbr": 861,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2024-11-11T23:36:31Z",
      "side": 1,
      "message": "You are right - pipe() returns OwnedFds; but when we use it for File:from is not the correct method to use with raw file descriptors (integers). We end up getting error:\n\"the trait bound std::fs::File: From\u003ci32\u003e is not satisfied\"\n\nThe unsafe here is because of using the raw file descriptor.",
      "parentUuid": "c78d4494_b3bdafb9",
      "revId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "AIDL-API-Review",
        "description": {
          "value": "Submit requirement for the AIDL-API-Review"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "file:\"^(.*/)?aidl_api/.*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:AIDL-API-Review AND -label:AIDL-API-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"file:\"^(.*/)?aidl_api/.*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["file:\"^(.*/)?aidl_api/.*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:AIDL-API-Review AND -label:AIDL-API-Review=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "API-Review",
        "description": {
          "value": "Submit requirement for the API-Review"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "file:\"^(((~(xsd|xml)).*/)?)api/((~(xsd|xml)).*?)\\\\.txt$\" AND -project:device/generic/vulkan-cereal AND -project:platform/external/qemu AND -project:platform/hardware/interfaces AND -project:toolchain/go AND -project:platform/prebuilts/go/darwin-x86 AND -project:platform/prebuilts/go/linux-x86 AND -project:platform/system/tools/xsdc AND -project:platform/external/gfxstream-protocols -(project:platform/frameworks/av AND file:\".*/xmlparser/.*\") AND -(project:platform/external/icu AND file:\".*android_icu4j/api/legacy_platform/.*\") AND -(project:platform/tools/base AND file:\".*build-system/.*\") AND -(project:platform/system/libvintf AND file:\"^xsd/\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:API-Review\u003dMAX AND -label:API-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"file:\"^(((~(xsd|xml)).*/)?)api/((~(xsd|xml)).*?)\\\\.txt$\" AND -project:device/generic/vulkan-cereal AND -project:platform/external/qemu AND -project:platform/hardware/interfaces AND -project:toolchain/go AND -project:platform/prebuilts/go/darwin-x86 AND -project:platform/prebuilts/go/linux-x86 AND -project:platform/system/tools/xsdc AND -project:platform/external/gfxstream-protocols -(project:platform/frameworks/av AND file:\".*/xmlparser/.*\") AND -(project:platform/external/icu AND file:\".*android_icu4j/api/legacy_platform/.*\") AND -(project:platform/tools/base AND file:\".*build-system/.*\") AND -(project:platform/system/libvintf AND file:\"^xsd/\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["file:\"^(((~(xsd|xml)).*/)?)api/((~(xsd|xml)).*?)\\\\.txt$\"","project:device/generic/vulkan-cereal","project:platform/external/qemu","project:platform/hardware/interfaces","project:toolchain/go","project:platform/prebuilts/go/darwin-x86","project:platform/prebuilts/go/linux-x86","project:platform/system/tools/xsdc","project:platform/external/gfxstream-protocols","project:platform/system/libvintf","file:\"^xsd/\"","project:platform/frameworks/av","file:\".*/xmlparser/.*\"","project:platform/external/icu","file:\".*android_icu4j/api/legacy_platform/.*\"","project:platform/tools/base","file:\".*build-system/.*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:API-Review=MAX AND -label:API-Review=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Build-Team-Review",
        "description": {
          "value": "Build team review is required"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-message:\"Import translations.\" AND message:\"DO NOT MERGE ANYWHERE\" AND -branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Build-Team-Review\u003dMAX AND -label:Build-Team-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-message:\"Import translations.\" AND message:\"DO NOT MERGE ANYWHERE\" AND -branch:refs/meta/config"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"Import translations.\"","message:\"DO NOT MERGE ANYWHERE\"","branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Build-Team-Review=MAX AND -label:Build-Team-Review=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the Code-Review requirement"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "-label:Code-Review\u003dMIN AND (-is:android-cherry-pick_exemptedusers AND label:Code-Review\u003dMAX,user\u003dnon_uploader OR (is:android-cherry-pick_exemptedusers AND label:Code-Review\u003dMAX,count\u003e\u003d2) OR (label:Code-Review\u003dMAX AND (label:Exempt\u003d+1 OR (uploader:1474732 AND (project:platform/developers/docs OR project:platform/frameworks/support)))))"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-label:Code-Review=MIN AND (-is:android-cherry-pick_exemptedusers AND label:Code-Review=MAX,user=non_uploader OR (is:android-cherry-pick_exemptedusers AND label:Code-Review=MAX,count>=2) OR (label:Code-Review=MAX AND (label:Exempt=+1 OR (uploader:1474732 AND (project:platform/developers/docs OR project:platform/frameworks/support)))))"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MIN"],"failingAtoms":["is:android-cherry-pick_exemptedusers","label:Code-Review=MAX,user=non_uploader","is:android-cherry-pick_exemptedusers","label:Code-Review=MAX,count>=2","label:Code-Review=MAX","label:Exempt=+1","uploader:1474732","project:platform/developers/docs","project:platform/frameworks/support"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:android_exemptedusers","is:android-but-lint_exemptedusers","branch:\"^refs/heads/cherrypick-temp-.*\"","is:android-cherry-pick_exemptedusers","is:pure-revert","ownerin:mdb/android-triage-xwf-extended-access-team-policy"]}
      },
      "patchSetCommitId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "DrNo-Review",
        "description": {
          "value": "Submit requirement for the DrNo-Review"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "branch:refs/heads/oreo-cts-dev OR branch:refs/heads/oreo-mr1-cts-dev OR branch:refs/heads/oreo-vts-dev OR branch:refs/heads/oreo-mr1-vts-dev OR branch:refs/heads/nougat-cts-dev OR branch:refs/heads/nougat-mr1-cts-dev OR branch:refs/heads/pie-cts-dev OR branch:refs/heads/pie-vts-dev OR branch:refs/heads/android10-tests-dev OR branch:refs/heads/android11-tests-dev OR branch:refs/heads/android12-tests-dev OR branch:refs/heads/android12L-tests-dev OR branch:refs/heads/android13-tests-dev OR branch:refs/heads/android14-tests-dev OR branch:refs/heads/android15-tests-dev OR branch:^refs/heads/.*-gsi OR branch:refs/heads/emu-32-dev OR branch:refs/heads/emu-33-dev OR branch:refs/heads/emu-34-2-dev OR branch:refs/heads/emu-35-1-dev OR branch:refs/heads/emu-35-2-dev OR branch:refs/heads/emu-35-3-dev OR (branch:refs/heads/main AND (project:device/google/redbull OR project:platform/packages/modules/Bluetooth))"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:DrNo-Review\u003dMAX AND -label:DrNo-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"branch:refs/heads/oreo-cts-dev OR branch:refs/heads/oreo-mr1-cts-dev OR branch:refs/heads/oreo-vts-dev OR branch:refs/heads/oreo-mr1-vts-dev OR branch:refs/heads/nougat-cts-dev OR branch:refs/heads/nougat-mr1-cts-dev OR branch:refs/heads/pie-cts-dev OR branch:refs/heads/pie-vts-dev OR branch:refs/heads/android10-tests-dev OR branch:refs/heads/android11-tests-dev OR branch:refs/heads/android12-tests-dev OR branch:refs/heads/android12L-tests-dev OR branch:refs/heads/android13-tests-dev OR branch:refs/heads/android14-tests-dev OR branch:refs/heads/android15-tests-dev OR branch:^refs/heads/.*-gsi OR branch:refs/heads/emu-32-dev OR branch:refs/heads/emu-33-dev OR branch:refs/heads/emu-34-2-dev OR branch:refs/heads/emu-35-1-dev OR branch:refs/heads/emu-35-2-dev OR branch:refs/heads/emu-35-3-dev OR (branch:refs/heads/main AND (project:device/google/redbull OR project:platform/packages/modules/Bluetooth))"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["branch:refs/heads/main"],"failingAtoms":["branch:refs/heads/oreo-cts-dev","branch:refs/heads/oreo-mr1-cts-dev","branch:refs/heads/oreo-vts-dev","branch:refs/heads/oreo-mr1-vts-dev","branch:refs/heads/nougat-cts-dev","branch:refs/heads/nougat-mr1-cts-dev","branch:refs/heads/pie-cts-dev","branch:refs/heads/pie-vts-dev","branch:refs/heads/android10-tests-dev","branch:refs/heads/android11-tests-dev","branch:refs/heads/android12-tests-dev","branch:refs/heads/android12L-tests-dev","branch:refs/heads/android13-tests-dev","branch:refs/heads/android14-tests-dev","branch:refs/heads/android15-tests-dev","branch:^refs/heads/.*-gsi","branch:refs/heads/emu-32-dev","branch:refs/heads/emu-33-dev","branch:refs/heads/emu-34-2-dev","branch:refs/heads/emu-35-1-dev","branch:refs/heads/emu-35-2-dev","branch:refs/heads/emu-35-3-dev","project:device/google/redbull","project:platform/packages/modules/Bluetooth"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:DrNo-Review=MAX AND -label:DrNo-Review=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Lint",
        "description": {
          "value": "Submit requirement for the Lint requirement"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-label:Lint\u003dMIN AND (label:Lint\u003d+2 OR -label:Lint\u003d-1)"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-label:Lint=MIN AND (label:Lint=+2 OR -label:Lint=-1)"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Lint=MIN","label:Lint=+2","label:Lint=-1"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:android_exemptedusers","branch:\"^refs/heads/cherrypick-temp-.*\"","is:android-cherry-pick_exemptedusers","label:Build-Cop-Override=+1","is:pure-revert","ownerin:mdb/android-triage-xwf-extended-access-team-policy"]}
      },
      "patchSetCommitId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "NDK-API-Review",
        "description": {
          "value": "Submit requirement for the NDK-API-Review"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "file:\"^.*\\\\.map\\\\.txt$\" AND -project:platform/prebuilts/clang/host/linux-x86"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:NDK-API-Review\u003dMAX AND -label:NDK-API-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"file:\"^.*\\\\.map\\\\.txt$\" AND -project:platform/prebuilts/clang/host/linux-x86"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["file:\"^.*\\\\.map\\\\.txt$\"","project:platform/prebuilts/clang/host/linux-x86"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:NDK-API-Review=MAX AND -label:NDK-API-Review=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overridden with Unresolved-Comment-Reason: \u003creason\u003e line in change message."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "message:\"^.*Unresolved-Comment-Reason:.*\""
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*Unresolved-Comment-Reason:.*\""},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Open-Source-Licensing",
        "description": {
          "value": "Submit requirement for the Open-Source-Licensing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Open-Source-Licensing\u003d0 OR (-label:Open-Source-Licensing\u003dMIN AND ((label:Open-Source-Licensing\u003dMAX AND label:Open-Source-Licensing\u003d-1) OR -label:Open-Source-Licensing\u003d-1))"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Open-Source-Licensing=0 OR (-label:Open-Source-Licensing=MIN AND ((label:Open-Source-Licensing=MAX AND label:Open-Source-Licensing=-1) OR -label:Open-Source-Licensing=-1))"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Open-Source-Licensing=0","label:Open-Source-Licensing=MIN","label:Open-Source-Licensing=MAX","label:Open-Source-Licensing=-1","label:Open-Source-Licensing=-1"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:android_exemptedusers","is:android-but-lint_exemptedusers","branch:\"^refs/heads/cherrypick-temp-.*\"","is:android-cherry-pick_exemptedusers","label:Build-Cop-Override=+1","is:pure-revert","ownerin:mdb/android-triage-xwf-extended-access-team-policy"]}
      },
      "patchSetCommitId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Performance",
        "description": {
          "value": "Submit requirement for Android Performance Presubmit"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-(branch:refs/meta/config OR branch:refs/heads/androidx-main)"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-label:Performance\u003dMIN,android-crystalball-crystalball-presubmit AND -label:Performance\u003d0"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "(-label:Performance\u003e0,android-crystalball-crystalball-presubmit AND label:Performance\u003e0) OR is:android-but-lint_exemptedusers OR is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR (label:Build-Cop-Override\u003d+1 AND is:pure-revert) OR label:Bypass-Presubmit\u003e0 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-(branch:refs/meta/config OR branch:refs/heads/androidx-main)"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","branch:refs/heads/androidx-main"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-label:Performance=MIN,android-crystalball-crystalball-presubmit AND -label:Performance=0"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Performance=MIN,android-crystalball-crystalball-presubmit","label:Performance=0"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"(-label:Performance>0,android-crystalball-crystalball-presubmit AND label:Performance>0) OR is:android-but-lint_exemptedusers OR is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR (label:Build-Cop-Override=+1 AND is:pure-revert) OR label:Bypass-Presubmit>0 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["label:Performance>0,android-crystalball-crystalball-presubmit","label:Performance>0"],"failingAtoms":["is:android-but-lint_exemptedusers","is:android_exemptedusers","is:android-but-lint_exemptedusers","branch:\"^refs/heads/cherrypick-temp-.*\"","is:android-cherry-pick_exemptedusers","label:Build-Cop-Override=+1","is:pure-revert","label:Bypass-Presubmit>0","is:pure-revert","ownerin:mdb/android-triage-xwf-extended-access-team-policy"]}
      },
      "patchSetCommitId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Presubmit-Verified",
        "description": {
          "value": "Submit requirement for the Presubmit-Verified requirement"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "-label:Presubmit-Verified\u003d-2 AND (label:Bypass-Presubmit\u003d+1 OR label:Presubmit-Verified-Together\u003d+1 OR (-label:Presubmit-Verified\u003d-1 AND (label:Presubmit-Verified\u003d+2 OR label:Presubmit-Verified\u003d+1)))"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bypass-Presubmit\u003d+2 OR is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR (label:Build-Cop-Override\u003d+1 AND is:pure-revert AND -label:Presubmit-Verified\u003d-2) OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-label:Presubmit-Verified=-2 AND (label:Bypass-Presubmit=+1 OR label:Presubmit-Verified-Together=+1 OR (-label:Presubmit-Verified=-1 AND (label:Presubmit-Verified=+2 OR label:Presubmit-Verified=+1)))"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Presubmit-Verified=+2"],"failingAtoms":["label:Presubmit-Verified=-2","label:Bypass-Presubmit=+1","label:Presubmit-Verified-Together=+1","label:Presubmit-Verified=-1","label:Presubmit-Verified=+1"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bypass-Presubmit=+2 OR is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR (label:Build-Cop-Override=+1 AND is:pure-revert AND -label:Presubmit-Verified=-2) OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bypass-Presubmit=+2","is:android_exemptedusers","is:android-but-lint_exemptedusers","branch:\"^refs/heads/cherrypick-temp-.*\"","is:android-cherry-pick_exemptedusers","label:Build-Cop-Override=+1","is:pure-revert","label:Presubmit-Verified=-2","is:pure-revert","ownerin:mdb/android-triage-xwf-extended-access-team-policy"]}
      },
      "patchSetCommitId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Qualcomm-Review",
        "description": {
          "value": "Submit requirement for the Qualcomm-Review"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "authoremail:\"^.*@(qti\\\\.qualcomm\\\\.com|qca\\\\.qualcomm\\\\.com|quicinc\\\\.com|qualcomm\\\\.com)\" AND -project:\"^.*/vendor/(qcom|bsp).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Qualcomm-Review\u003dMAX AND -label:Qualcomm-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"authoremail:\"^.*@(qti\\\\.qualcomm\\\\.com|qca\\\\.qualcomm\\\\.com|quicinc\\\\.com|qualcomm\\\\.com)\" AND -project:\"^.*/vendor/(qcom|bsp).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["authoremail:\"^.*@(qti\\\\.qualcomm\\\\.com|qca\\\\.qualcomm\\\\.com|quicinc\\\\.com|qualcomm\\\\.com)\"","project:\"^.*/vendor/(qcom|bsp).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Qualcomm-Review=MAX AND -label:Qualcomm-Review=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval. Using a trusted device is required, see go/gerrit-onboarding#review-enforcement."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "0969708956b0c684d1d7ff2ab0eac8bb7819cd40",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}