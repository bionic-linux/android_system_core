{
  "comments": [
    {
      "key": {
        "uuid": "77b2fac6_0b683acc",
        "filename": "init/init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 521,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-12-27T23:38:44Z",
      "side": 1,
      "message": "This is only used in selinux_compile_policy() why not define it static there so it\u0027s scoped to usage.",
      "revId": "ad00caf05c812b807e906181adecea34efa4b3e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77b2fac6_e45073d7",
        "filename": "init/init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 521,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2016-12-28T23:06:46Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "77b2fac6_0b683acc",
      "revId": "ad00caf05c812b807e906181adecea34efa4b3e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77b2fac6_6113151f",
        "filename": "init/init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 521,
      "author": {
        "id": 1026058
      },
      "writtenOn": "2016-12-29T21:59:51Z",
      "side": 1,
      "message": "Could do. Will leave up to enh@ exactly where he wants this (if he wants this version of the change).",
      "parentUuid": "77b2fac6_0b683acc",
      "revId": "ad00caf05c812b807e906181adecea34efa4b3e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77b2fac6_44f13fb1",
        "filename": "init/init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 528,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2016-12-28T23:06:46Z",
      "side": 1,
      "message": "I may be wrong, but I think you can\u0027t assume you can write (create file) in rootfs, it may even be ro from kernel. On a quick glance, I didn\u0027t see anything in main() writing to rootfs",
      "revId": "ad00caf05c812b807e906181adecea34efa4b3e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77b2fac6_303801fa",
        "filename": "init/init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 528,
      "author": {
        "id": 1026058
      },
      "writtenOn": "2016-12-29T21:59:51Z",
      "side": 1,
      "message": "this needs to be removed (s/sepolicy2/sepolicy/)",
      "range": {
        "startLine": 528,
        "startChar": 20,
        "endLine": 528,
        "endChar": 21
      },
      "revId": "ad00caf05c812b807e906181adecea34efa4b3e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77b2fac6_f01b4997",
        "filename": "init/init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 528,
      "author": {
        "id": 1026058
      },
      "writtenOn": "2016-12-29T21:59:51Z",
      "side": 1,
      "message": "I\u0027m not sure what the rootfs contract is.  I can say that this works now (rootfs hasn\u0027t been marked read-only by init yet), but that we likely should do a different approach with my previous CL that outputs directly to shared memory rather than relying on writing and reading a file (for boot-time efficiency)",
      "parentUuid": "77b2fac6_44f13fb1",
      "revId": "ad00caf05c812b807e906181adecea34efa4b3e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77b2fac6_50b9f50f",
        "filename": "init/init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 528,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-12-29T22:47:03Z",
      "side": 1,
      "message": "If it doesn\u0027t output to a file does it pick stdout? You could read it out of stdout if you want to keep it in a separate binary. This way the compiler/libsepol nightmare isn\u0027t in the address space of init.",
      "parentUuid": "77b2fac6_f01b4997",
      "revId": "ad00caf05c812b807e906181adecea34efa4b3e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77b2fac6_8445f718",
        "filename": "init/init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 534,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2016-12-28T23:06:46Z",
      "side": 1,
      "message": "s/stat/access?",
      "revId": "ad00caf05c812b807e906181adecea34efa4b3e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77b2fac6_9020cdc3",
        "filename": "init/init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 534,
      "author": {
        "id": 1026058
      },
      "writtenOn": "2016-12-29T21:59:51Z",
      "side": 1,
      "message": "sgtm",
      "parentUuid": "77b2fac6_8445f718",
      "revId": "ad00caf05c812b807e906181adecea34efa4b3e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77b2fac6_a44a7b23",
        "filename": "init/init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 538,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2016-12-28T23:06:46Z",
      "side": 1,
      "message": "initialization not needed",
      "revId": "ad00caf05c812b807e906181adecea34efa4b3e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77b2fac6_6bb776d7",
        "filename": "init/init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 542,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2016-12-28T23:06:46Z",
      "side": 1,
      "message": "why is this a security_failure?",
      "revId": "ad00caf05c812b807e906181adecea34efa4b3e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77b2fac6_b025d1d3",
        "filename": "init/init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 542,
      "author": {
        "id": 1026058
      },
      "writtenOn": "2016-12-29T21:59:51Z",
      "side": 1,
      "message": "if we fail to fork a process, then we can\u0027t compile policy and shouldn\u0027t boot.",
      "parentUuid": "77b2fac6_6bb776d7",
      "revId": "ad00caf05c812b807e906181adecea34efa4b3e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77b2fac6_f0aa69ba",
        "filename": "init/init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 542,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-12-29T22:47:03Z",
      "side": 1,
      "message": "PLOG(FATAL) \u003c\u003c \"ksjkjdjskdj\";\n\nNo need to keep using the security_failure(). At some point in the future we can kill off this security_failure() thing, unless I am missing some point for it.",
      "parentUuid": "77b2fac6_b025d1d3",
      "revId": "ad00caf05c812b807e906181adecea34efa4b3e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77b2fac6_eb9846c6",
        "filename": "init/init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 548,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-12-27T23:38:44Z",
      "side": 1,
      "message": "Curiosity, why 127?",
      "revId": "ad00caf05c812b807e906181adecea34efa4b3e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77b2fac6_500a5545",
        "filename": "init/init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 548,
      "author": {
        "id": 1026058
      },
      "writtenOn": "2016-12-29T21:59:51Z",
      "side": 1,
      "message": "taken from service.cpp",
      "parentUuid": "77b2fac6_eb9846c6",
      "revId": "ad00caf05c812b807e906181adecea34efa4b3e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77b2fac6_2b365ea1",
        "filename": "init/init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 553,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-12-28T00:56:26Z",
      "side": 1,
      "message": "I took a look at this, im confused why we need this security_failure() call and were not just logging at FATAL.\n\nPLOG(FATAL) \u003c\u003c \"xxx\";\n\nAFICT, the security_exception() just adds a \"security failure...\" message and calls abort(). The logging facilities will pass the message through the DefaultAborter() too android_set_abort_message() followed by abort().",
      "revId": "ad00caf05c812b807e906181adecea34efa4b3e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77b2fac6_7007593d",
        "filename": "init/init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 553,
      "author": {
        "id": 1026058
      },
      "writtenOn": "2016-12-29T21:59:51Z",
      "side": 1,
      "message": "Would like to keep this consistent with existing code, but could be removed everywhere.",
      "parentUuid": "77b2fac6_2b365ea1",
      "revId": "ad00caf05c812b807e906181adecea34efa4b3e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77b2fac6_10da9d78",
        "filename": "init/init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 553,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-12-29T22:47:03Z",
      "side": 1,
      "message": "Yeah I would imagine a separate change for this, I just wanted to point this out as security_failure() really has no point in existing AFAICT.",
      "parentUuid": "77b2fac6_7007593d",
      "revId": "ad00caf05c812b807e906181adecea34efa4b3e4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}