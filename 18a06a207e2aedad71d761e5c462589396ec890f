{
  "comments": [
    {
      "key": {
        "uuid": "5c769c13_ac7247ca",
        "filename": "libsparse/include/sparse/sparse.h",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1005480
      },
      "writtenOn": "2015-02-06T01:43:29Z",
      "side": 1,
      "message": "After looking at some of the other changes needed in other projects ... \nA size_t seems more appropriate, or an off_t.",
      "revId": "18a06a207e2aedad71d761e5c462589396ec890f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bc879828_6c3693e4",
        "filename": "libsparse/include/sparse/sparse.h",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-02-06T05:47:51Z",
      "side": 1,
      "message": "the problem is our LP32 libc is fucked. both size_t and off_t (and time_t) are just 32 bits. if you need to handle \u003e 2GiB on LP32, you\u0027ll need to use off64_t.",
      "parentUuid": "5c769c13_ac7247ca",
      "revId": "18a06a207e2aedad71d761e5c462589396ec890f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fcc030c1_6380c225",
        "filename": "libsparse/include/sparse/sparse.h",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1005480
      },
      "writtenOn": "2015-02-06T21:37:30Z",
      "side": 1,
      "message": "argh. So the \n   #define _LARGEFILE64_SOURCE\ndoesn\u0027t work as expected for off_t?\nWe use it in some places.",
      "parentUuid": "bc879828_6c3693e4",
      "revId": "18a06a207e2aedad71d761e5c462589396ec890f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "71f62b4b_c2e90488",
        "filename": "libsparse/include/sparse/sparse.h",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-02-07T03:45:28Z",
      "side": 1,
      "message": "_LARGEFILE64_SOURCE is a no-op with bionic --- all it does is make the types and functions with 64 in their name (off64_t, lseek64, et cetera) available, and they\u0027re always available with bionic.\n\n_FILE_OFFSET_BITS\u003d64 is the one that should make off_t actually be off64_t and lseek be lseek64, but bionic doesn\u0027t have that. my concern is stdio, because that then effectively gives us two incompatible LP32 stdio ABIs (LP32 struct FILE contains 32-bit offsets), but i\u0027ll knock up a quick experiment that (a) makes _FILE_OFFSET_BITS\u003d64 work for all the functions it can work for and (b) makes the troublesome functions fail to compile.",
      "parentUuid": "fcc030c1_6380c225",
      "revId": "18a06a207e2aedad71d761e5c462589396ec890f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "910abf12_385b49c7",
        "filename": "libsparse/include/sparse/sparse.h",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-02-07T07:12:13Z",
      "side": 1,
      "message": "https://android-review.googlesource.com/#/c/129970/ implements (most of) _FILE_OFFSET_BITS.",
      "parentUuid": "71f62b4b_c2e90488",
      "revId": "18a06a207e2aedad71d761e5c462589396ec890f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10dc16fc_f0ddb50b",
        "filename": "libsparse/include/sparse/sparse.h",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1006064
      },
      "writtenOn": "2015-04-16T23:48:33Z",
      "side": 1,
      "message": "So the final change is to update all int64_t to size_t and off_t in this library, right?",
      "parentUuid": "910abf12_385b49c7",
      "revId": "18a06a207e2aedad71d761e5c462589396ec890f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}