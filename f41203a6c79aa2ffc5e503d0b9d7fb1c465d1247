{
  "comments": [
    {
      "key": {
        "uuid": "c9ae6393_3e3e71a4",
        "filename": "base/include/base/logging.h",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2015-09-18T02:54:50Z",
      "side": 1,
      "message": "If this macro was just if (!(expr)) ...stream(), then \"if (something) LOG(INFO) \u003c\u003c \"hello\"; else ...\" would cause the else to bind to the if in the macro, which is not intended.",
      "range": {
        "startLine": 121,
        "startChar": 2,
        "endLine": 123,
        "endChar": 6
      },
      "revId": "f41203a6c79aa2ffc5e503d0b9d7fb1c465d1247",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c9ae6393_82be3b99",
        "filename": "base/include/base/logging.h",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-09-21T18:05:41Z",
      "side": 1,
      "message": "seems worth a comment in the code.",
      "parentUuid": "c9ae6393_3e3e71a4",
      "range": {
        "startLine": 121,
        "startChar": 2,
        "endLine": 123,
        "endChar": 6
      },
      "revId": "f41203a6c79aa2ffc5e503d0b9d7fb1c465d1247",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c9ae6393_621be707",
        "filename": "base/include/base/logging.h",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2015-09-21T19:06:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c9ae6393_82be3b99",
      "range": {
        "startLine": 121,
        "startChar": 2,
        "endLine": 123,
        "endChar": 6
      },
      "revId": "f41203a6c79aa2ffc5e503d0b9d7fb1c465d1247",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "69c3b75a_9ed78161",
        "filename": "base/include/base/logging.h",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2015-09-18T02:54:50Z",
      "side": 1,
      "message": "Use the ternary operator to make a sequence point between ErrnoRestorer and the rest of the logging code to guarantee it happens before. I originally tried using the comma operator, but that conflicted with a gtest macro which assumed no commas. Now that I made other changes to logging_test.cpp, it might be possible to change this back to the comma operator.",
      "range": {
        "startLine": 124,
        "startChar": 4,
        "endLine": 124,
        "endChar": 38
      },
      "revId": "f41203a6c79aa2ffc5e503d0b9d7fb1c465d1247",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e99c0776_fa923d45",
        "filename": "base/include/base/logging.h",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2015-09-18T02:54:50Z",
      "side": 1,
      "message": "This looks gross, but when I checked the gcc win32 assembly, it generated no code. The ? operator doesn\u0027t even generate any code since everything is known staticly.",
      "range": {
        "startLine": 124,
        "startChar": 39,
        "endLine": 124,
        "endChar": 62
      },
      "revId": "f41203a6c79aa2ffc5e503d0b9d7fb1c465d1247",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e9b7a7e1_7f5467c6",
        "filename": "base/include/base/logging.h",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2015-09-18T04:11:29Z",
      "side": 1,
      "message": "I think it is a wonderful solution. ternary operator guarantees that the side effects should happen before following expressions. and in c++11, the destructor of temporary objects happen at the end of full expression in reverse order. So the constructor of ErrnoRestorer() happens first, the the destructor of ErrnoRestorer() happens last. It makes me think that \u0026\u0026 and || operators can be used as alternatives to ternary operator here, right?\n\nNow I want to know whether it supports\n((xxx) ? LOG(DEBUG) : LOG(ERROR)) \u003c\u003c yyy;\nBut I think it doesn\u0027t matter too much.\n\nI will take care of testing on other platforms other than windows.",
      "parentUuid": "e99c0776_fa923d45",
      "range": {
        "startLine": 124,
        "startChar": 39,
        "endLine": 124,
        "endChar": 62
      },
      "revId": "f41203a6c79aa2ffc5e503d0b9d7fb1c465d1247",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "89df0b23_e4038e17",
        "filename": "base/include/base/logging.h",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2015-09-18T04:20:33Z",
      "side": 1,
      "message": "Yes, I prototyped \"ErrnoRestorer() || LogMessage().stream()\" and it worked. I didn\u0027t prefer that because it called std::ostream::operator bool() (I think) and the type of the expression was bool instead of std::ostream (not that it really matters). I\u0027ll leave it to you to choose which is better.\n\nBTW, the public Google Glog code uses a trick with \"void operator\u0026()\" to cause the expression to be void instead of bool or ostream. That is interesting and probably generates the same code, but it seemed messier.\n\nI don\u0027t think the ((xxx) ? LOG...) works because of the if that I used By Design. The reason I used if was to prevent the macro from evaluating to a type (like bool or ostream). But if you really want it to evaluate to a type maybe ternary operator could be used instead of the if.\n\nThanks for your help.",
      "parentUuid": "e9b7a7e1_7f5467c6",
      "range": {
        "startLine": 124,
        "startChar": 39,
        "endLine": 124,
        "endChar": 62
      },
      "revId": "f41203a6c79aa2ffc5e503d0b9d7fb1c465d1247",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e9b7a7e1_df29f34c",
        "filename": "base/logging_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2015-09-18T02:54:50Z",
      "side": 1,
      "message": "This {} looks weird, but the gtest docs suggested this to pass multiple statements to ASSERT_DEATH().",
      "range": {
        "startLine": 97,
        "startChar": 15,
        "endLine": 97,
        "endChar": 16
      },
      "revId": "f41203a6c79aa2ffc5e503d0b9d7fb1c465d1247",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}