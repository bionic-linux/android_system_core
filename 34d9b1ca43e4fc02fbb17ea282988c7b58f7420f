{
  "comments": [
    {
      "key": {
        "uuid": "06a98af7_7606bdfa",
        "filename": "logd/LogStatistics.h",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 1121354
      },
      "writtenOn": "2016-11-04T00:40:42Z",
      "side": 1,
      "message": "why do we need a size of void* here? can we use a constant to replace it?",
      "range": {
        "startLine": 61,
        "startChar": 47,
        "endLine": 61,
        "endChar": 60
      },
      "revId": "34d9b1ca43e4fc02fbb17ea282988c7b58f7420f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab04074e_71801893",
        "filename": "logd/LogStatistics.h",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2016-11-04T14:33:56Z",
      "side": 1,
      "message": "Remember, this is an estimate of unordered_map memory usage. map wastes a void* internally to hold on to details per entry, this concept is taken from several resources. I can add a comment here to make it clearer, or static const size_t unordered_map_overhead \u003d sizeof(void*).",
      "parentUuid": "06a98af7_7606bdfa",
      "range": {
        "startLine": 61,
        "startChar": 47,
        "endLine": 61,
        "endChar": 60
      },
      "revId": "34d9b1ca43e4fc02fbb17ea282988c7b58f7420f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab04074e_518514a1",
        "filename": "logd/LogStatistics.h",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2016-11-04T14:33:56Z",
      "side": 1,
      "message": "There is a separate overhead void* pointer here to internally manage the buckets as well.",
      "range": {
        "startLine": 62,
        "startChar": 49,
        "endLine": 62,
        "endChar": 62
      },
      "revId": "34d9b1ca43e4fc02fbb17ea282988c7b58f7420f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}