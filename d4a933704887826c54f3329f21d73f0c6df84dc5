{
  "comments": [
    {
      "key": {
        "uuid": "65007474_b009a9ec",
        "filename": "init/property_service.cpp",
        "patchSetId": 1
      },
      "lineNbr": 226,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2019-08-16T15:11:38Z",
      "side": 1,
      "message": "Can they be queued?",
      "range": {
        "startLine": 225,
        "startChar": 0,
        "endLine": 226,
        "endChar": 54
      },
      "revId": "d4a933704887826c54f3329f21d73f0c6df84dc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d297cf5_4eef40b8",
        "filename": "init/property_service.cpp",
        "patchSetId": 1
      },
      "lineNbr": 226,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-08-19T16:12:35Z",
      "side": 1,
      "message": "Init was designed to ignore changed properties before we get to the \u0027queue_property_triggers\u0027 action, which queues an action for every currently set property anyway.  I haven\u0027t found any reason to change that behavior, so this just keeps things simple.",
      "parentUuid": "65007474_b009a9ec",
      "range": {
        "startLine": 225,
        "startChar": 0,
        "endLine": 226,
        "endChar": 54
      },
      "revId": "d4a933704887826c54f3329f21d73f0c6df84dc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de2afc26_79099633",
        "filename": "init/property_service.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1133,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2019-08-16T15:11:38Z",
      "side": 1,
      "message": "What can be done if property service dies?\n\nBefore it killed init and we rebooted. Now it silently disappears! I know that if it was separately managed, this problem goes away (init would restart the property service).\n\nChoice: fix this with throw away code, or take the leap to a separate property service (like ueventd, can share in the init executable?)",
      "range": {
        "startLine": 1133,
        "startChar": 0,
        "endLine": 1133,
        "endChar": 48
      },
      "revId": "d4a933704887826c54f3329f21d73f0c6df84dc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad614f51_b9595061",
        "filename": "init/property_service.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1133,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2019-08-16T16:37:14Z",
      "side": 1,
      "message": "How do you imagine the property service dying without taking down the init process?",
      "parentUuid": "de2afc26_79099633",
      "range": {
        "startLine": 1133,
        "startChar": 0,
        "endLine": 1133,
        "endChar": 48
      },
      "revId": "d4a933704887826c54f3329f21d73f0c6df84dc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f79eb3ed_267d11a6",
        "filename": "init/property_service.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1133,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2019-08-16T17:49:05Z",
      "side": 1,
      "message": "It is about attack surface.\n\nI only need to imagine a bug, any bug. Before it was integral, so it would _always_ result in a kernel panic (init process exit) and the phone reboots back to functional. As a detached thread it has its own (unmonitored) lifecycle.\n\nA detached thread can exit from a direct tid kill from a process privileged just enough to take it down and not init. This includes the well known problem of many vendor services and executables _still_ running as root when they have no right to. This turns into a deadlock DOS state where all processes eventually stall/break and the H/W watchdog never triggers; the phone just sits there doing nothing or in a boot loop burning the battery. The hackers win.",
      "parentUuid": "ad614f51_b9595061",
      "range": {
        "startLine": 1133,
        "startChar": 0,
        "endLine": 1133,
        "endChar": 48
      },
      "revId": "d4a933704887826c54f3329f21d73f0c6df84dc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41aa6ec6_4c286382",
        "filename": "init/property_service.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1133,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2019-08-16T19:05:32Z",
      "side": 1,
      "message": "I don\u0027t think there are security implications here. In general, adding a thread to a process should not change the threat model. The process, not the thread, is the security boundary. The signal behavior you mention should not be relied upon as a security mechanism.\n\nProcesses have overhead (e.g., page tables, inflated switching costs, duplicate DSO loads, various kernel data structures like struct signal), and I don\u0027t want to pay this overhead without necessity, especially in Go devices. Besides, init creates non-main threads already. An attacker who can snipe random threads can already cause havoc by killing these threads while they hold various locks. What about the AsyncRestorecon thread, which we already detach?",
      "parentUuid": "f79eb3ed_267d11a6",
      "range": {
        "startLine": 1133,
        "startChar": 0,
        "endLine": 1133,
        "endChar": 48
      },
      "revId": "d4a933704887826c54f3329f21d73f0c6df84dc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4ced783_677ad242",
        "filename": "init/property_service.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1133,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-08-19T16:12:35Z",
      "side": 1,
      "message": "Pretty much +1 to what dancol@ said.  There shouldn\u0027t be any security impact of just this change.\n\nThat said, long term, I actually do foresee moving property service into its own process for the security benefits there.  If we do that, then unprivileged processes don\u0027t be able to connect and send data to init.",
      "parentUuid": "41aa6ec6_4c286382",
      "range": {
        "startLine": 1133,
        "startChar": 0,
        "endLine": 1133,
        "endChar": 48
      },
      "revId": "d4a933704887826c54f3329f21d73f0c6df84dc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d46ed55_2d8835a7",
        "filename": "init/property_service.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1133,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2019-08-19T16:24:27Z",
      "side": 1,
      "message": "Ideally, we\u0027d move the property service and a bunch of other things into separate processes, but I think we need to make processes lighter before we do that. I think through a combination of native zygote, dsolinkd, and copy-on-write page tables, we can make processes _very_ lightweight.",
      "parentUuid": "f4ced783_677ad242",
      "range": {
        "startLine": 1133,
        "startChar": 0,
        "endLine": 1133,
        "endChar": 48
      },
      "revId": "d4a933704887826c54f3329f21d73f0c6df84dc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e472f56_c1e0a79c",
        "filename": "init/property_service.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1139,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2019-08-16T15:11:38Z",
      "side": 1,
      "message": "This drops the InitPropertySet checks (eg: init can not send ctl.* and selinux.restorecon_recursive properties). IDK, are there any selinux rules for these?",
      "range": {
        "startLine": 1135,
        "startChar": 0,
        "endLine": 1139,
        "endChar": 0
      },
      "revId": "d4a933704887826c54f3329f21d73f0c6df84dc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "09180a92_cdd5298f",
        "filename": "init/property_service.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1139,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-08-19T16:12:35Z",
      "side": 1,
      "message": "No selinux rules yet, but you\u0027re right that this would drop that check.  I\u0027ll add it back.",
      "parentUuid": "9e472f56_c1e0a79c",
      "range": {
        "startLine": 1135,
        "startChar": 0,
        "endLine": 1139,
        "endChar": 0
      },
      "revId": "d4a933704887826c54f3329f21d73f0c6df84dc5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}