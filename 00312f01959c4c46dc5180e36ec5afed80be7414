{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "af88554e_d05613da",
        "filename": "libutils/Looper.cpp",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1149384
      },
      "writtenOn": "2021-08-17T19:43:50Z",
      "side": 1,
      "message": "nit: not needed?",
      "range": {
        "startLine": 25,
        "startChar": 10,
        "endLine": 25,
        "endChar": 15
      },
      "revId": "00312f01959c4c46dc5180e36ec5afed80be7414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cde243a_2e601194",
        "filename": "libutils/Looper_test.cpp",
        "patchSetId": 4
      },
      "lineNbr": 808,
      "author": {
        "id": 1149384
      },
      "writtenOn": "2021-08-17T19:43:50Z",
      "side": 1,
      "message": "I wonder if it\u0027s possible to make this test deterministic.\n\nFor example:\n\n1. Create first pipe\n2. Call close (fd hangup)\n3. In the fd hangup handler (\"removeCallback\"), you block \"indefinitely\" (wait on a condition variable)\n4. Call mLooper-\u003eremoveFd\n5. Create second pipe\n6. Unblock the \"removeCallback\" by signaling the condition variable\n7. Check whether second pipe was removed\n\nWould that work?",
      "range": {
        "startLine": 808,
        "startChar": 24,
        "endLine": 808,
        "endChar": 28
      },
      "revId": "00312f01959c4c46dc5180e36ec5afed80be7414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "400393c4_25c75f52",
        "filename": "libutils/Looper_test.cpp",
        "patchSetId": 4
      },
      "lineNbr": 808,
      "author": {
        "id": 1407716
      },
      "writtenOn": "2021-08-18T15:27:10Z",
      "side": 1,
      "message": "This was the exact case the existing sequence numbers (prior to this change) were designed for. The test case you mentioned would pass before as well.\n\nThis is because by the time the fd hangup handler is called, Looper has already acquired the lock to obtain the callback from the epoll event.\n\nTo make the test case deterministic, we would have to separate the Looper impl from the header and add protected methods to peer into or change the state of the impl from the test.",
      "parentUuid": "7cde243a_2e601194",
      "range": {
        "startLine": 808,
        "startChar": 24,
        "endLine": 808,
        "endChar": 28
      },
      "revId": "00312f01959c4c46dc5180e36ec5afed80be7414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0766417_0c6ceeb0",
        "filename": "libutils/Looper_test.cpp",
        "patchSetId": 4
      },
      "lineNbr": 808,
      "author": {
        "id": 1149384
      },
      "writtenOn": "2021-08-18T19:16:03Z",
      "side": 1,
      "message": "That makes sense, thanks Prabir. I agree that we don\u0027t need to modify looper just for this test, especially since we have non-deterministic test that works well enough.",
      "parentUuid": "400393c4_25c75f52",
      "range": {
        "startLine": 808,
        "startChar": 24,
        "endLine": 808,
        "endChar": 28
      },
      "revId": "00312f01959c4c46dc5180e36ec5afed80be7414",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}