{
  "comments": [
    {
      "key": {
        "uuid": "72e5c70e_8a4eb7ac",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 1
      },
      "lineNbr": 702,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2019-05-09T20:52:20Z",
      "side": 1,
      "message": "I\u0027m wondering if we should omit this const qualifier for consistency with most parameter types that aren\u0027t marked const. Even a non-const string_view only points at const bytes.",
      "range": {
        "startLine": 702,
        "startChar": 39,
        "endLine": 702,
        "endChar": 44
      },
      "revId": "a22ac0f07ed9640dcd3a17b94076b01fd1cf48df",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b71ffd2f_48b99c2c",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 1
      },
      "lineNbr": 702,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-05-09T21:33:12Z",
      "side": 1,
      "message": "that question came up on the StartIteration API too. it seems we have a mix of const/non-const already. not saying const still seems weird to me. are there any standard functions that take const/non-const std::string_view?\n\n(i\u0027ll submit this as-is because it\u0027s taken me days to get through treehugger and i have to come back for more cleanup anyway.)",
      "parentUuid": "72e5c70e_8a4eb7ac",
      "range": {
        "startLine": 702,
        "startChar": 39,
        "endLine": 702,
        "endChar": 44
      },
      "revId": "a22ac0f07ed9640dcd3a17b94076b01fd1cf48df",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}