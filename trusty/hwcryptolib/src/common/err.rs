/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//! HwCrypto error handling code and related structures

/// Macro used to create a `HwCryptoError::HalError` by providing the AIDL `HalErrorCode` and a
/// message: `hwcrypto_err!(UNSUPPORTED, "unsupported operation")`
#[macro_export]
macro_rules! hwcrypto_err {
    { $error_code:ident, $($arg:tt)+ } => {
        $crate::err::HwCryptoError::HalError($crate::err::HalErrorCode::$error_code,
            $crate::err::alloc::format!("{}:{}: {}", file!(), line!(), format_args!($($arg)+))) };
}

pub extern crate alloc;

pub use android_hardware_security_see::aidl::android::hardware::security::see::hwcrypto::{
    types::HalErrorCode::HalErrorCode
};
use alloc::collections::TryReserveError;
use core::array::TryFromSliceError;
use coset::CoseError;

/// Base Error type for HwCrypto library.
#[derive(Debug)]
pub enum HwCryptoError {
    /// HwCrypto library native error
    HalError(HalErrorCode, String),
    /// Error generated by a keymint library
    KmError(kmr_common::Error),
}

impl From<kmr_wire::CborError> for HwCryptoError {
    fn from(e: kmr_wire::CborError) -> Self {
        HwCryptoError::HalError(
            HalErrorCode::SERIALIZATION_ERROR,
            alloc::format!("CBOR Deserialization error: {:?}", e),
        )
    }
}

impl From<kmr_common::Error> for HwCryptoError {
    fn from(e: kmr_common::Error) -> Self {
        HwCryptoError::KmError(e)
    }
}

impl From<CoseError> for HwCryptoError {
    fn from(e: CoseError) -> Self {
        HwCryptoError::HalError(
            HalErrorCode::SERIALIZATION_ERROR,
            alloc::format!("Deserialization error: {}", e),
        )
    }
}

impl From<TryReserveError> for HwCryptoError {
    fn from(e: TryReserveError) -> Self {
        hwcrypto_err!(ALLOCATION_ERROR, "error allocating: {}", e)
    }
}

impl From<TryFromSliceError> for HwCryptoError {
    fn from(e: TryFromSliceError) -> Self {
        hwcrypto_err!(ALLOCATION_ERROR, "error allocating from slice: {}", e)
    }
}
