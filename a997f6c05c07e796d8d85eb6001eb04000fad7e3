{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8fe9d0dc_2073693d",
        "filename": "trusty/coverage/coverage.cpp",
        "patchSetId": 4
      },
      "lineNbr": 152,
      "author": {
        "id": 1124693
      },
      "writtenOn": "2020-12-11T23:05:49Z",
      "side": 1,
      "message": "I think we also need separate reset function for counters and pcs. For fuzzing, I was thinking we reset counters on every input, but accumulate pcs for visualization.",
      "range": {
        "startLine": 147,
        "startChar": 0,
        "endLine": 152,
        "endChar": 1
      },
      "revId": "a997f6c05c07e796d8d85eb6001eb04000fad7e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0317d4c8_03fdd746",
        "filename": "trusty/coverage/coverage.cpp",
        "patchSetId": 4
      },
      "lineNbr": 152,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-12-14T22:58:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8fe9d0dc_2073693d",
      "range": {
        "startLine": 147,
        "startChar": 0,
        "endLine": 152,
        "endChar": 1
      },
      "revId": "a997f6c05c07e796d8d85eb6001eb04000fad7e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94561453_315757a8",
        "filename": "trusty/coverage/coverage.cpp",
        "patchSetId": 4
      },
      "lineNbr": 170,
      "author": {
        "id": 1124693
      },
      "writtenOn": "2020-12-11T23:05:49Z",
      "side": 1,
      "message": "I think it\u0027s simpler to just assume a format of the header. Then you can remove the loop + switch and just check/get values from the header.",
      "range": {
        "startLine": 170,
        "startChar": 0,
        "endLine": 170,
        "endChar": 64
      },
      "revId": "a997f6c05c07e796d8d85eb6001eb04000fad7e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49552566_b11569c3",
        "filename": "trusty/coverage/coverage.cpp",
        "patchSetId": 4
      },
      "lineNbr": 170,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-12-14T22:58:16Z",
      "side": 1,
      "message": "We can do that, but it will tie us to a particular set of features and won\u0027t let us arbitrarily add or remove features to the record in the future. Considering we\u0027ve already added a data set, I wouldn\u0027t be surprised if we want to change the types of data in the record in the future.",
      "parentUuid": "94561453_315757a8",
      "range": {
        "startLine": 170,
        "startChar": 0,
        "endLine": 170,
        "endChar": 64
      },
      "revId": "a997f6c05c07e796d8d85eb6001eb04000fad7e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a41328e0_8731e14c",
        "filename": "trusty/coverage/coverage.cpp",
        "patchSetId": 4
      },
      "lineNbr": 174,
      "author": {
        "id": 1124693
      },
      "writtenOn": "2020-12-11T23:05:49Z",
      "side": 1,
      "message": "Set this at the end since you rely on to tell if header has been parsed successfully already.",
      "range": {
        "startLine": 174,
        "startChar": 16,
        "endLine": 174,
        "endChar": 29
      },
      "revId": "a997f6c05c07e796d8d85eb6001eb04000fad7e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83758d79_1ff62291",
        "filename": "trusty/coverage/coverage.cpp",
        "patchSetId": 4
      },
      "lineNbr": 174,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-12-14T22:58:16Z",
      "side": 1,
      "message": "I can\u0027t set this at the end without iterating again. I could set it in each case, but that seemed like overkill.",
      "parentUuid": "a41328e0_8731e14c",
      "range": {
        "startLine": 174,
        "startChar": 16,
        "endLine": 174,
        "endChar": 29
      },
      "revId": "a997f6c05c07e796d8d85eb6001eb04000fad7e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc4b98d2_a380fbc3",
        "filename": "trusty/coverage/coverage.cpp",
        "patchSetId": 4
      },
      "lineNbr": 198,
      "author": {
        "id": 1124693
      },
      "writtenOn": "2020-12-11T23:05:49Z",
      "side": 1,
      "message": "It bothers me that ParseHeader() needs to be called to update the *offset_ member variables. From the caller\u0027s perspective it can be unclear how that works. \n\nWhat do you think about adding a GetByteCounerOffset() that reads the value from the header (and maybe checks the corresponding header-\u003etype) instead of caching it in a member variable?",
      "revId": "a997f6c05c07e796d8d85eb6001eb04000fad7e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d562bf37_9510722b",
        "filename": "trusty/coverage/coverage.cpp",
        "patchSetId": 4
      },
      "lineNbr": 198,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-12-14T22:58:16Z",
      "side": 1,
      "message": "Sure, I\u0027ve made the region lookups dynamic now.",
      "parentUuid": "fc4b98d2_a380fbc3",
      "revId": "a997f6c05c07e796d8d85eb6001eb04000fad7e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35b897ac_05bc3d6b",
        "filename": "trusty/coverage/coverage.cpp",
        "patchSetId": 4
      },
      "lineNbr": 232,
      "author": {
        "id": 1124693
      },
      "writtenOn": "2020-12-11T23:05:49Z",
      "side": 1,
      "message": "Name it SavePCsToFile or SaveSancovFile or something that identifies what\u0027s being saved.",
      "range": {
        "startLine": 232,
        "startChar": 29,
        "endLine": 232,
        "endChar": 39
      },
      "revId": "a997f6c05c07e796d8d85eb6001eb04000fad7e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f4344142_82f865d8",
        "filename": "trusty/coverage/coverage.cpp",
        "patchSetId": 4
      },
      "lineNbr": 232,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-12-14T22:58:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "35b897ac_05bc3d6b",
      "range": {
        "startLine": 232,
        "startChar": 29,
        "endLine": 232,
        "endChar": 39
      },
      "revId": "a997f6c05c07e796d8d85eb6001eb04000fad7e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e53fbd4_6007dff0",
        "filename": "trusty/coverage/coverage_test.cpp",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 1124693
      },
      "writtenOn": "2020-12-11T23:05:49Z",
      "side": 1,
      "message": "remove",
      "revId": "a997f6c05c07e796d8d85eb6001eb04000fad7e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7277cb8e_85551528",
        "filename": "trusty/coverage/coverage_test.cpp",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-12-14T22:58:16Z",
      "side": 1,
      "message": "This is used for the filename to write to. sancov is super picky about its input filenames, which have to exactly match the format of `\u003cbinary_name\u003e.\u003cpid\u003e.sancov`. We can write to a generic filename, but it won\u0027t work without renaming it.",
      "parentUuid": "8e53fbd4_6007dff0",
      "revId": "a997f6c05c07e796d8d85eb6001eb04000fad7e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eae4ee07_ff54b469",
        "filename": "trusty/coverage/include/trusty/coverage/coverage.h",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 1124693
      },
      "writtenOn": "2020-12-11T23:05:49Z",
      "side": 1,
      "message": "These two are redundant.",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 60,
        "endChar": 32
      },
      "revId": "a997f6c05c07e796d8d85eb6001eb04000fad7e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6d8bb467_0fecbf07",
        "filename": "trusty/coverage/include/trusty/coverage/coverage.h",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 1093255
      },
      "writtenOn": "2020-12-14T22:58:16Z",
      "side": 1,
      "message": "They aren\u0027t exactly, because the order of regions is not specified. PCs might come first, then byte counters. This is a moot point if we parse header fields dynamically.",
      "parentUuid": "eae4ee07_ff54b469",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 60,
        "endChar": 32
      },
      "revId": "a997f6c05c07e796d8d85eb6001eb04000fad7e3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}