{
  "comments": [
    {
      "key": {
        "uuid": "b99e41b3_8112eb15",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2019-05-18T19:57:07Z",
      "side": 1,
      "message": "I hope this isn\u0027t the only test you ran. See b/130623656. I am not convinced this code is correct.",
      "range": {
        "startLine": 13,
        "startChar": 6,
        "endLine": 13,
        "endChar": 24
      },
      "revId": "e3f0079593e2aac368102e7619c1d0fe9bbc8c47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6312bbd8_7ff7dff2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-05-19T22:37:05Z",
      "side": 1,
      "message": "sure, I will run the game as well.",
      "parentUuid": "b99e41b3_8112eb15",
      "range": {
        "startLine": 13,
        "startChar": 6,
        "endLine": 13,
        "endChar": 24
      },
      "revId": "e3f0079593e2aac368102e7619c1d0fe9bbc8c47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8273b128_ab495cc9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-05-20T14:22:46Z",
      "side": 1,
      "message": "Imo it\u0027s worth some effort to have a reproducible test case that exercises that code path first. If it\u0027s hard to trick FindParentNamespaceByClassloader I suggest making it mockable for testing.\n\nI propose to first create a test case, check that it tests the existing anonymous namespace properly by confirming failure when agampe\u0027s http://r.android.com/952524 is reverted and success otherwise. Then do this.",
      "parentUuid": "6312bbd8_7ff7dff2",
      "range": {
        "startLine": 13,
        "startChar": 6,
        "endLine": 13,
        "endChar": 24
      },
      "revId": "e3f0079593e2aac368102e7619c1d0fe9bbc8c47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df93fbdb_c410e6d9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-05-21T11:58:38Z",
      "side": 1,
      "message": "Although I agree it is the right approach, I don\u0027t have time and I even don\u0027t know how we can pool the linker so that caller address isn\u0027t identifiable. We could use some hacky assembler magic (I don\u0027t have a concrete idea though), but that seems to be too far away.\n\nMocking in libnativeloader.so doesn\u0027t make sense since we no longer create the anonymous namespace directly here. It\u0027s done inside the linker.\n\nI have no idea why you mentioned FindParentNamespaceByClassloader. Anonymous namespace is used when the return address of dlopen() can\u0027t be identified. This isn\u0027t related to FindParentNamespaceByClassloader, IMO.",
      "parentUuid": "8273b128_ab495cc9",
      "range": {
        "startLine": 13,
        "startChar": 6,
        "endLine": 13,
        "endChar": 24
      },
      "revId": "e3f0079593e2aac368102e7619c1d0fe9bbc8c47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f80a243_ae0f3a48",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 1373864
      },
      "writtenOn": "2019-05-21T16:02:47Z",
      "side": 1,
      "message": "I mentioned FindParentNamespaceByClassloader because I figured it needs to return nullptr for the anonymous namespace to come into use in the call to android_create_namespace. But I realised now that\u0027s not where the problem lies, it\u0027s in do_dlopen[1].\n\nSo yes, we\u0027d either need to generate a machine code call on the heap to thwart the caller address check in the linker[2][3], or introduce a restricted test-only API that lets us override it. The generated call is probably overall easier.\n\nI\u0027m aware it\u0027s work, but doing this kind of surgery without decent tests is risky, and I think barring that we better avoid changing it too much. Is this blocking other work for you?\n\n[1] http://cs/aosp-master/bionic/linker/linker.cpp?l\u003d2192\u0026rcl\u003df8813d14aa5eb70fa0cf95b36b5f68a4f631c123\n[2] http://cs/aosp-master/bionic/libdl/libdl.cpp?l\u003d83\u0026rcl\u003df8813d14aa5eb70fa0cf95b36b5f68a4f631c123\n[3] http://cs/aosp-master/bionic/linker/linker.cpp?l\u003d936\u0026rcl\u003df8813d14aa5eb70fa0cf95b36b5f68a4f631c123",
      "parentUuid": "df93fbdb_c410e6d9",
      "range": {
        "startLine": 13,
        "startChar": 6,
        "endLine": 13,
        "endChar": 24
      },
      "revId": "e3f0079593e2aac368102e7619c1d0fe9bbc8c47",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}