{
  "comments": [
    {
      "key": {
        "uuid": "c86b828c_62924dff",
        "filename": "debuggerd/libdebuggerd/tombstone.cpp",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-07-16T15:56:56Z",
      "side": 1,
      "message": "is this possible unless you\u0027ve manually removed the guard page?",
      "revId": "aa5be111ad31e19eb6377f54325d91ce9aaa07ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fea25be7_3f451549",
        "filename": "debuggerd/libdebuggerd/tombstone.cpp",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2019-07-16T22:33:37Z",
      "side": 1,
      "message": "Maybe a large-enough stack frame could jump over the guard page? If we had -fstack-check (b/13662332, https://godbolt.org/z/-mtDt7), then a function prologue could probe pages to prevent this jumping.",
      "parentUuid": "c86b828c_62924dff",
      "revId": "aa5be111ad31e19eb6377f54325d91ce9aaa07ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d90f9db8_a4a4b0c3",
        "filename": "debuggerd/libdebuggerd/tombstone.cpp",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2019-07-17T20:36:02Z",
      "side": 1,
      "message": "This happens every time when running crasher64 stack-overflow. It looks like the main thread doesn\u0027t have a guard page. Is that expected?\n\nHere are the last two maps:\n\n    0000007c\u0027a615c000-0000007c\u0027a615dfff rw-         0      2000\n    0000007f\u0027ed1c7000-0000007f\u0027ed9c6fff rw-         0    800000  [stack]",
      "parentUuid": "fea25be7_3f451549",
      "revId": "aa5be111ad31e19eb6377f54325d91ce9aaa07ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5377fa5_324afa92",
        "filename": "debuggerd/libdebuggerd/tombstone.cpp",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-07-17T20:59:42Z",
      "side": 1,
      "message": "ah, yes, that is expected. (there\u0027s magic in the kernel to extend the main thread stack if you touch the next page.)",
      "parentUuid": "d90f9db8_a4a4b0c3",
      "revId": "aa5be111ad31e19eb6377f54325d91ce9aaa07ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1789eb6b_e886c3cd",
        "filename": "debuggerd/libdebuggerd/tombstone.cpp",
        "patchSetId": 3
      },
      "lineNbr": 105,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-07-16T01:40:21Z",
      "side": 1,
      "message": "does this happen? wouldn\u0027t that be si_code SEGV_ACCERR?",
      "revId": "aa5be111ad31e19eb6377f54325d91ce9aaa07ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93023a6a_e28e79ee",
        "filename": "debuggerd/libdebuggerd/tombstone.cpp",
        "patchSetId": 3
      },
      "lineNbr": 105,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2019-07-16T01:45:23Z",
      "side": 1,
      "message": "I added the check for this in both the SEGV_MAPERR and SEGV_ACCERR code paths. I could have had two slightly different checks, but decided to combine them into one since it didn\u0027t seem worth making the distinction.",
      "parentUuid": "1789eb6b_e886c3cd",
      "revId": "aa5be111ad31e19eb6377f54325d91ce9aaa07ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ac04e90_4ad30a0a",
        "filename": "debuggerd/libdebuggerd/tombstone.cpp",
        "patchSetId": 3
      },
      "lineNbr": 105,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-07-16T15:56:56Z",
      "side": 1,
      "message": "ah, i see.",
      "parentUuid": "93023a6a_e28e79ee",
      "revId": "aa5be111ad31e19eb6377f54325d91ce9aaa07ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "224d25e0_291a8489",
        "filename": "debuggerd/libdebuggerd/tombstone.cpp",
        "patchSetId": 3
      },
      "lineNbr": 105,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2019-07-17T20:36:02Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3ac04e90_4ad30a0a",
      "revId": "aa5be111ad31e19eb6377f54325d91ce9aaa07ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3173268b_3fcad92f",
        "filename": "debuggerd/libdebuggerd/tombstone.cpp",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-07-16T15:56:56Z",
      "side": 1,
      "message": "not sure i understand this one. did you mean _underflow_? does this put you in the pthread_internal_t or TLS space?",
      "revId": "aa5be111ad31e19eb6377f54325d91ce9aaa07ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "258c1eca_411ec6ab",
        "filename": "debuggerd/libdebuggerd/tombstone.cpp",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2019-07-16T22:33:37Z",
      "side": 1,
      "message": "I\u0027d guess \"top of stack\" here refers to the most recent thing placed on the stack, i.e. the lowest address. TLS memory uses the highest addresses. Bionic uses \"stack_top\" in a few places to refer to the highest address instead.",
      "parentUuid": "3173268b_3fcad92f",
      "revId": "aa5be111ad31e19eb6377f54325d91ce9aaa07ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3895d0ed_2d458eb8",
        "filename": "debuggerd/libdebuggerd/tombstone.cpp",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2019-07-17T20:36:02Z",
      "side": 1,
      "message": "On arm32 (on taimen at least), the sp doesn\u0027t appear to be updated until after the instruction completes. So you get a fault address in a different map, while the current sp will be at the top of the current stack.\n\nOn aarch64 the sp is updated before the instruction completes (on taimen at least), so you see different behavior (and why I do an absolute value check for difference between fault address and sp).\n\nThe crasher stack-overflow hits this case every time.",
      "parentUuid": "258c1eca_411ec6ab",
      "revId": "aa5be111ad31e19eb6377f54325d91ce9aaa07ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb4436e2_c01024d1",
        "filename": "debuggerd/libdebuggerd/tombstone.cpp",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-07-17T20:59:42Z",
      "side": 1,
      "message": "worth a code comment? and maybe for the main stack one too, since these were all non-obvious?",
      "parentUuid": "3895d0ed_2d458eb8",
      "revId": "aa5be111ad31e19eb6377f54325d91ce9aaa07ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}