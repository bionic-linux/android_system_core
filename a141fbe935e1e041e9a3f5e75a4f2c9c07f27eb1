{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "cffec528_5978431f",
        "filename": "libutils/Unicode.cpp",
        "patchSetId": 2
      },
      "lineNbr": 295,
      "author": {
        "id": 1080076
      },
      "writtenOn": "2022-12-01T02:41:57Z",
      "side": 1,
      "message": "nit: having any capture in a lambda turns it into a struct with a constructor, some runtime initialization etc. if you have no capture the lambda is pretty much a free function, with zero overhead. So if you want the most efficient code it\u0027s better to move the used variables from a capture into the call arguments",
      "range": {
        "startLine": 295,
        "startChar": 20,
        "endLine": 295,
        "endChar": 22
      },
      "revId": "a141fbe935e1e041e9a3f5e75a4f2c9c07f27eb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41ef8c37_a0d9a069",
        "filename": "libutils/Unicode.cpp",
        "patchSetId": 2
      },
      "lineNbr": 295,
      "author": {
        "id": 1850729
      },
      "writtenOn": "2022-12-03T00:50:54Z",
      "side": 1,
      "message": "Hmm... by using \"\u0026\" I guess we are suggesting to the compiler it\u0027s by reference, and can I assume the compiler is likely to optimize this structure away? Does it help if we list the variables to be used by reference? There are 3 variables here, out, out_end, and dst_len, it\u0027s a bit mouthful though.\n\nBTW - I did some experiment on godbolt.org, and I don\u0027t find an implicit structure construction and passing with -O1, but maybe I did the experiment wrong.",
      "parentUuid": "cffec528_5978431f",
      "range": {
        "startLine": 295,
        "startChar": 20,
        "endLine": 295,
        "endChar": 22
      },
      "revId": "a141fbe935e1e041e9a3f5e75a4f2c9c07f27eb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62203f68_6eee5baf",
        "filename": "libutils/Unicode.cpp",
        "patchSetId": 2
      },
      "lineNbr": 295,
      "author": {
        "id": 1080076
      },
      "writtenOn": "2022-12-13T21:23:22Z",
      "side": 1,
      "message": "it\u0027s a pretty general comment, and the compiler is often able to get rid of the structure. If you don\u0027t see any overhead with the current code then I\u0027m ok with leaving it this way\n\nbut it still could apply to a different case, and passing anything as function arguments vs a capture has a better optimization potential. Not necessarily it will get optimized better, but it can.",
      "parentUuid": "41ef8c37_a0d9a069",
      "range": {
        "startLine": 295,
        "startChar": 20,
        "endLine": 295,
        "endChar": 22
      },
      "revId": "a141fbe935e1e041e9a3f5e75a4f2c9c07f27eb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "909c8cdf_63cb6c48",
        "filename": "libutils/Unicode.cpp",
        "patchSetId": 2
      },
      "lineNbr": 440,
      "author": {
        "id": 1080076
      },
      "writtenOn": "2022-12-01T02:41:57Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 440,
        "startChar": 19,
        "endLine": 440,
        "endChar": 20
      },
      "revId": "a141fbe935e1e041e9a3f5e75a4f2c9c07f27eb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "911830b1_d9d29b46",
        "filename": "libutils/Unicode.cpp",
        "patchSetId": 2
      },
      "lineNbr": 440,
      "author": {
        "id": 1080076
      },
      "writtenOn": "2022-12-13T21:23:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "909c8cdf_63cb6c48",
      "range": {
        "startLine": 440,
        "startChar": 19,
        "endLine": 440,
        "endChar": 20
      },
      "revId": "a141fbe935e1e041e9a3f5e75a4f2c9c07f27eb1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}