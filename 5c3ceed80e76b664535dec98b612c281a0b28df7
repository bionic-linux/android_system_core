{
  "comments": [
    {
      "key": {
        "uuid": "a19cdad8_cdfd69ec",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 1
      },
      "lineNbr": 988,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-03-12T17:10:55Z",
      "side": 1,
      "message": "aka std::vector?",
      "revId": "5c3ceed80e76b664535dec98b612c281a0b28df7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "01d1268c_a840db65",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 1
      },
      "lineNbr": 988,
      "author": {
        "id": 1041673
      },
      "writtenOn": "2015-03-12T17:12:48Z",
      "side": 1,
      "message": "I do not know... they are fixed size buffers we pass to zlib... vector does not seem appropriate here.",
      "parentUuid": "a19cdad8_cdfd69ec",
      "revId": "5c3ceed80e76b664535dec98b612c281a0b28df7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e18892a6_5fb80b58",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 1
      },
      "lineNbr": 988,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-03-12T18:42:46Z",
      "side": 1,
      "message": "i think you\u0027re thinking about vector wrong. a vector is a dynamically-allocated contiguous sequence. that\u0027s exactly what you have here. that it has additional functionality you don\u0027t need... well, so does unique_ptr. that\u0027s not a problem.\n\nthe way i see it, preferring vector in cases like this is just part of \"avoid new/delete\". (plus there\u0027s the added bonus -- see below -- that vector is more container-like than unique_ptr.)",
      "parentUuid": "01d1268c_a840db65",
      "revId": "5c3ceed80e76b664535dec98b612c281a0b28df7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "81c436d3_279d34ae",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 1
      },
      "lineNbr": 988,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-03-12T18:44:30Z",
      "side": 1,
      "message": "(actually, the \"added bonus\" isn\u0027t true. the unique_ptr for T[] has an operator[], so you can still use the container syntax even with unique_ptr.)",
      "parentUuid": "e18892a6_5fb80b58",
      "revId": "5c3ceed80e76b664535dec98b612c281a0b28df7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1ec123e_4212d408",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 1
      },
      "lineNbr": 988,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2015-03-12T20:10:04Z",
      "side": 1,
      "message": "oh... i didn\u0027t know that. that might even tip the scales towards std::unique_ptr for me, personally. i don\u0027t think std::vector is as intention revealing since we\u0027ll need to inspect code to see if it\u0027s being resized etc. i\u0027ll continue to use std::vector\u003c\u003e however, since that\u0027s consistent with the rest of our usages.",
      "parentUuid": "81c436d3_279d34ae",
      "revId": "5c3ceed80e76b664535dec98b612c281a0b28df7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "414a3e43_b255c0a3",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 1
      },
      "lineNbr": 988,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-03-12T20:23:21Z",
      "side": 1,
      "message": "i\u0027d argue that you shouldn\u0027t care whether it\u0027s being resized. hiding the consequences of that is vector\u0027s job. vector is the default contiguous container. unique_ptr is for when someone else you don\u0027t control has allocated something and you need to keep track of it. it adds RAII to raw pointers. but you have no reason to be dealing in raw pointers here.",
      "parentUuid": "e1ec123e_4212d408",
      "revId": "5c3ceed80e76b664535dec98b612c281a0b28df7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1ec123e_e245e802",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 1
      },
      "lineNbr": 988,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2015-03-12T20:26:35Z",
      "side": 1,
      "message": "in some cases, you would care if you\u0027re passing it to a C api (where you usually pass a raw pointer and a length). for example in this function i\u0027d have to update avail_out \u003d write_buf.size(); initially and inside the loop unless i can prove it isn\u0027t being resized.",
      "parentUuid": "414a3e43_b255c0a3",
      "revId": "5c3ceed80e76b664535dec98b612c281a0b28df7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1d33294_e7de8253",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 1
      },
      "lineNbr": 1001,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-03-12T17:10:55Z",
      "side": 1,
      "message": "\u0026x[0]?",
      "revId": "5c3ceed80e76b664535dec98b612c281a0b28df7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "01d1268c_e83ad3eb",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 1
      },
      "lineNbr": 1001,
      "author": {
        "id": 1041673
      },
      "writtenOn": "2015-03-12T17:12:48Z",
      "side": 1,
      "message": "see above..",
      "parentUuid": "e1d33294_e7de8253",
      "revId": "5c3ceed80e76b664535dec98b612c281a0b28df7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}