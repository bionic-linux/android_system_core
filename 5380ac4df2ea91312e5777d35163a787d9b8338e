{
  "comments": [
    {
      "key": {
        "uuid": "91fc0f64_30e12377",
        "filename": "init/init.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1022,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2017-05-03T17:07:06Z",
      "side": 1,
      "message": "Why ignore the result here?  It seems that this should be reasonably fatal if it failed.",
      "range": {
        "startLine": 1022,
        "startChar": 4,
        "endLine": 1022,
        "endChar": 10
      },
      "revId": "5380ac4df2ea91312e5777d35163a787d9b8338e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3076c96d_90550781",
        "filename": "init/init.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1022,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-05-03T17:32:39Z",
      "side": 1,
      "message": "Are we enforcing encryption on all devices? Partner and otherwise?\n\nIf this fails on a device that enforces encryption, for whatever reason, and we let it go, I believe we will boot up far enough to trip up the mount or decryption operations. The device will be in \u0027emergency call mode\u0027 and will not access encrypted data.\n\nThe rationalization is roughly the same for why we do not check error conditions on most paths in this secondary initialization phase, for instance the failure in the fragment on 1025 will mean no firmware loaders will be freed to go on to do their stuff. Because we know that a failure is not fatal here until the feature it is activating is necessary and used later.\n\nFatal here will burn out the battery in a tight reboot loop, or go back to A if this is B (and vice versa). A failure of e4crypt_install_keyring later will probably be more graceful though ...",
      "parentUuid": "91fc0f64_30e12377",
      "range": {
        "startLine": 1022,
        "startChar": 4,
        "endLine": 1022,
        "endChar": 10
      },
      "revId": "5380ac4df2ea91312e5777d35163a787d9b8338e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1e2c74df_a8f50bf0",
        "filename": "init/init.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1022,
      "author": {
        "id": 1060907
      },
      "writtenOn": "2017-05-03T17:36:58Z",
      "side": 1,
      "message": "SGTM. If this fails, log the failure and carry on; then code that tries to use the keyring will fail in a way that causes a reboot, and if no-one tries to use it, then all is good.",
      "parentUuid": "3076c96d_90550781",
      "range": {
        "startLine": 1022,
        "startChar": 4,
        "endLine": 1022,
        "endChar": 10
      },
      "revId": "5380ac4df2ea91312e5777d35163a787d9b8338e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74a7eb54_84cdd6ca",
        "filename": "init/init.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1022,
      "author": {
        "id": 1137063
      },
      "writtenOn": "2017-05-03T18:15:15Z",
      "side": 1,
      "message": "This will work, but IMO the init process doesn\u0027t really have any business setting up the \"e4crypt\" keyring specifically.  Not all devices use ext4 encryption, and I wouldn\u0027t be too surprised if some devices even use kernels built with CONFIG_KEYS\u003dn, which would make the \"Failed to create keyring\" from e4crypt_install_keyring() always show up in the log.\n\nEven more subtle is the fact that calling e4crypt_install_keyring() a second time will actually cause the \"e4crypt\" keyring to be unlinked and replaced with a fresh one.  It\u0027s not an issue if it\u0027s empty anyway, but it\u0027s still weird.\n\nSo I think it would be more logical to just have init create the session keyring by calling \u0027keyctl(KEYCTL_GET_KEYRING_ID, KEY_SPEC_SESSION_KEYRING, 1)\u0027, and then leave creating the e4crypt keyring inside the session keyring for later.\n\nAlso: \"No process should override its session keyrings.\" \u003d\u003e \"No process should override its session keyring.\".",
      "parentUuid": "1e2c74df_a8f50bf0",
      "range": {
        "startLine": 1022,
        "startChar": 4,
        "endLine": 1022,
        "endChar": 10
      },
      "revId": "5380ac4df2ea91312e5777d35163a787d9b8338e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}