{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "cb55171a_5da4c6ef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2020-11-23T17:09:36Z",
      "side": 1,
      "message": "Forgot to add NNApiHALPerformance",
      "revId": "857bc3e811152ce4765b3a1348a1617d7a057f79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c86d61db_545419aa",
        "filename": "libprocessgroup/setup/cgroup_map_write.cpp",
        "patchSetId": 3
      },
      "lineNbr": 224,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-11-23T19:23:01Z",
      "side": 1,
      "message": "should we only do this on errno \u003d\u003d ENOENT and return a failure from ReadDescriptors otherwise? if there is a permission issue preventing the right task profiles file from being read, we should know, right?",
      "range": {
        "startLine": 224,
        "startChar": 0,
        "endLine": 224,
        "endChar": 49
      },
      "revId": "857bc3e811152ce4765b3a1348a1617d7a057f79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ed54582_e0d93d48",
        "filename": "libprocessgroup/setup/cgroup_map_write.cpp",
        "patchSetId": 3
      },
      "lineNbr": 224,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2020-11-23T19:29:35Z",
      "side": 1,
      "message": "No, we don\u0027t want to fallback to default task_profiles.json if API-specific file exists. That should be reported as error, which is what we do now:\n\naccess(sys_cgroups_path.c_str(), F_OK) will return 0 and ReadDescriptorsFromFile() will use API-specific file path built using TEMPLATE_CGROUPS_DESC_API_FILE. If ReadDescriptorsFromFile() fails to read this file then ReadDescriptors() will return false, we will log an error at https://android-review.googlesource.com/c/platform/system/core/+/1507918/3/libprocessgroup/setup/cgroup_map_write.cpp#395 and will not load task profiles.",
      "parentUuid": "c86d61db_545419aa",
      "range": {
        "startLine": 224,
        "startChar": 0,
        "endLine": 224,
        "endChar": 49
      },
      "revId": "857bc3e811152ce4765b3a1348a1617d7a057f79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "618fd91d_9dddd198",
        "filename": "libprocessgroup/setup/cgroup_map_write.cpp",
        "patchSetId": 3
      },
      "lineNbr": 224,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-11-23T19:44:19Z",
      "side": 1,
      "message": "I mean, if \u0027access\u0027 here returns -1 (failure), then L224 gets hit and we use the default file. However, access may be failing because of ENAMETOOLONG (which would indicate a bug in our format string?) or EIO (other serious failure)/etc.. EACCESS (if linux/selinux permissions are messed up). In these cases, the current code will fall back to CGROUPS_DESC_FILE and they should be able to read it successfully, but we\u0027d be using the wrong task profile. Right?",
      "parentUuid": "0ed54582_e0d93d48",
      "range": {
        "startLine": 224,
        "startChar": 0,
        "endLine": 224,
        "endChar": 49
      },
      "revId": "857bc3e811152ce4765b3a1348a1617d7a057f79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a94dc709_cfe685a7",
        "filename": "libprocessgroup/setup/cgroup_map_write.cpp",
        "patchSetId": 3
      },
      "lineNbr": 224,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2020-11-23T19:59:49Z",
      "side": 1,
      "message": "Ah, I see what you mean. You want an additional check that access() failed due to ENOENT and not for some other reason, correct?\nIf so then agree, that would be more error-proof. Will change.",
      "parentUuid": "618fd91d_9dddd198",
      "range": {
        "startLine": 224,
        "startChar": 0,
        "endLine": 224,
        "endChar": 49
      },
      "revId": "857bc3e811152ce4765b3a1348a1617d7a057f79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e96344f8_bce557ab",
        "filename": "libprocessgroup/setup/cgroup_map_write.cpp",
        "patchSetId": 3
      },
      "lineNbr": 224,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-11-23T23:25:26Z",
      "side": 1,
      "message": "yeah, that\u0027s what I mean.",
      "parentUuid": "a94dc709_cfe685a7",
      "range": {
        "startLine": 224,
        "startChar": 0,
        "endLine": 224,
        "endChar": 49
      },
      "revId": "857bc3e811152ce4765b3a1348a1617d7a057f79",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}