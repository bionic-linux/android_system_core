{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fb457af7_43f472a1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2022-06-08T07:36:34Z",
      "side": 1,
      "message": "d",
      "range": {
        "startLine": 7,
        "startChar": 42,
        "endLine": 7,
        "endChar": 45
      },
      "revId": "84bfb02d029d551c011478abbf1dc090d6cfcdbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2b104c1c_eef97d6d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2022-06-09T00:07:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fb457af7_43f472a1",
      "range": {
        "startLine": 7,
        "startChar": 42,
        "endLine": 7,
        "endChar": 45
      },
      "revId": "84bfb02d029d551c011478abbf1dc090d6cfcdbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfeb3aef_6e5e0a46",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2022-06-10T12:52:29Z",
      "side": 1,
      "message": "sorry I didn\u0027t meant you to add a literal \u0027d\u0027 here.\n\nI just wanted to highlight the \u0027GRF\u0027 text for discussion, and since I cannot highlight a word without any comment, I left a meaningless \u0027d\u0027 as placeholder. Sorry for the confusion üôè",
      "parentUuid": "2b104c1c_eef97d6d",
      "range": {
        "startLine": 7,
        "startChar": 42,
        "endLine": 7,
        "endChar": 45
      },
      "revId": "84bfb02d029d551c011478abbf1dc090d6cfcdbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ed2de2f_5390b86e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2022-06-15T20:57:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bfeb3aef_6e5e0a46",
      "range": {
        "startLine": 7,
        "startChar": 42,
        "endLine": 7,
        "endChar": 45
      },
      "revId": "84bfb02d029d551c011478abbf1dc090d6cfcdbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82e79013_58f2563f",
        "filename": "fs_mgr/libsnapshot/snapshot.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3279,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2022-06-08T07:36:34Z",
      "side": 1,
      "message": "Given that we\u0027re talking about GRF devices, we should instead look at the \"ro.vndk.version\" property as the \"vendor version\".\n\nIn aosp/2052147, I said both \"ro.vendor.build.version.release_or_codename\" and \"ro.vndk.version\" are fine, because the background is about *system only OTA*.\n\nOTOH, if device is GRF-ed, then it\u0027s possible that the vendor is built in a T platform tree with S VSDK (see https://docs.google.com/document/d/1BbMlwuMsKAFUZiDrNKBcpEcDKRuIN13lObEmGsGjgPQ/edit#heading\u003dh.huy79574x9gh), which leads to a *technically S vendor*, but built in the T platform tree, thus \"ro.vendor.build.version.release_or_codename\u003d13\" (T) \u0026\u0026 \"ro.vndk.version\u003d31\" (S).",
      "revId": "84bfb02d029d551c011478abbf1dc090d6cfcdbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d10319a_1f3a1557",
        "filename": "fs_mgr/libsnapshot/snapshot.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3279,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2022-06-08T07:58:51Z",
      "side": 1,
      "message": "Thanks for the review.\n\naosp/2052147 is also about GRF related change and not just *system only OTA*; which means aosp/2052147 is also in-correct.\n\nI will go through the link again but the underlying issue here is that the \"snapuserd\" binary resides in vendor_boot ramdisk. \n\nSo, in that case if the vendor is built in a T platform tree, do the binary in vendor boot ramdisk is from T build or S build as \"ro.vendor.build.version.release_or_codename\u003d13\".\n\n\nIIUC, checking \"ro.vndk.version\u003d\u003d31\"seems to be the right way irrespective of whether vendor is build on T or S platform ? Whenever \"ro.vndk.version\u003d\u003d31\", \"snapuserd\" binary will always be from Android S from vendor_boot ramdisk. Is this the right claim ?",
      "parentUuid": "82e79013_58f2563f",
      "revId": "84bfb02d029d551c011478abbf1dc090d6cfcdbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "065ac71e_dd5685c7",
        "filename": "fs_mgr/libsnapshot/snapshot.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3279,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2022-06-08T13:14:34Z",
      "side": 1,
      "message": "To be frank, I\u0027m don\u0027t have a lot of experience with VSDK \u0026 *same* repo configuration. So +justinyun to confirm what i said...\n\n\u003e So, in that case if the vendor is built in a T platform tree, do the binary in vendor boot ramdisk is from T build ...\n\nAssuming VSDK is installed properly, and the vendor boot ramdisk snapuserd binary is built with VSDK, then yes.\n\n\u003e checking \"ro.vndk.version\u003d\u003d31\"seems to be the right way irrespective of whether vendor is build on T or S platform\n\nYes. \"ro.vndk.version\" \u003d\u003d VSDK version \u003d\u003d \"vendor binary\" version. snapuserd (vendor_ramdisk variant) being a vender-ish binary should be build using VSDK, so looking at \u0027ro.vndk.version\u0027 should be right.\n\n\u003e Whenever \"ro.vndk.version\u003d\u003d31\", \"snapuserd\" binary will always be from Android S from vendor_boot ramdisk. Is this the right claim ?\n\nJustin, Can we expect this for all \"ramdisk/vendor_ramdisk\" binaries built with VSDK? {VSDK + same repo} , {VSDK + split repo}",
      "parentUuid": "7d10319a_1f3a1557",
      "revId": "84bfb02d029d551c011478abbf1dc090d6cfcdbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1581e912_5f347ee3",
        "filename": "fs_mgr/libsnapshot/snapshot.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3279,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2022-06-09T00:07:12Z",
      "side": 1,
      "message": "Please see latest fix. Based on my reading of the above document, we now check both\n\n1: ro.vndk.version\n2: ro.vendor.build.version.release_or_codename\n\nI have put some comments on why we do this - Please correct me if something is missing.\n\nQcom recently tested this setup and it looks like just having \"ro.vendor.build.version.release_or_codename\" was sufficient as it was still on 12 and userspace snapshots was disabled on their testing. However, after reading the above document it all boils down to how the VSDK is installed by other SoCs. So, having both the check makes sense.",
      "parentUuid": "065ac71e_dd5685c7",
      "revId": "84bfb02d029d551c011478abbf1dc090d6cfcdbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84c8f531_262d807c",
        "filename": "fs_mgr/libsnapshot/snapshot.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3279,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2022-06-10T12:52:29Z",
      "side": 1,
      "message": "Yeah I agree this is the best we can do.\n\nTechnically both properties only gives an indication of the *vendor partition version*. We are assuming (hoping) \u0027vendor\u0027 and \u0027vendor_boot\u0027 is built and updated together, so have the same version. And like you said it all boils down to how SoC vendors set up their tree.\n\n---\n\nIs there really no other way to check \"version of snapuserd\"? because that\u0027s what you actually want to know right? You\u0027re checking the \"version of vendor\", in order to check the \"version of vendor_boot\", in order to check the \"version of snapuserd\".\n\nI\u0027m not familiar with snapuserd, but it\u0027s a daemon talking with the kernel right? So is it possible to check some /proc/... /sys/... nodes, or send an IPC to magically check the version of snapuserd (think something similar to dumpstate)? If there really isn\u0027t any way, then maybe consider add one?",
      "parentUuid": "1581e912_5f347ee3",
      "revId": "84bfb02d029d551c011478abbf1dc090d6cfcdbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96ceb67d_4acc0067",
        "filename": "fs_mgr/libsnapshot/snapshot.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3279,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2022-06-10T16:06:36Z",
      "side": 1,
      "message": "Thanks for the review. Let me think through this as we are working with keystone team to test on one of the GRF configurations.\n\nI want to keep the changes as minimal as possible without impacting other non-GRF devices. Since this has to go to T branch, any subtle code change should be carefully tested.",
      "parentUuid": "84c8f531_262d807c",
      "revId": "84bfb02d029d551c011478abbf1dc090d6cfcdbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f74fb4d4_23defde3",
        "filename": "fs_mgr/libsnapshot/snapshot.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3279,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2022-06-10T16:33:45Z",
      "side": 1,
      "message": "\u003e T branch\n\nOh I see. In that case we want minimal code logic change, so it\u0027s important to write simple to review code, even if it means duplicating code here and there. I\u0027m talking about the code dup between snapshot.cpp \u0026 snapuserd_daemon.cpp.\n\nThe suggestions I was asking doesn\u0027t need to be in this change, it can be in a future refactor that doesn\u0027t need to be backport to T.\n\n\u003e without impacting other non-GRF devices.\n\nall the more reason to have a means to precisely pinpoint the exact version of the running snapuserd binary? I suggest starting from U we define a formal channel to query this information. Mechanism as simple as \"snapuserd shall publish it\u0027s version and feature capabilities to some sysprops once it boots up\" could be useful, right?",
      "parentUuid": "96ceb67d_4acc0067",
      "revId": "84bfb02d029d551c011478abbf1dc090d6cfcdbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec7367d1_ed44467f",
        "filename": "fs_mgr/libsnapshot/snapshot.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3279,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2022-06-15T20:57:59Z",
      "side": 1,
      "message": "Both qualcomm and mediatek have verified the GRF setup and in both cases, ro.vendor.build.version.release_or_codename is set to 12. OTA is working fine with S vendor and T branch.\n\nSince this is a VTS test specific change and this has to go to T branch, I will prefer to keep the change as minimal as possible for this CL. Since this is a blocker, I would like to get this in.\n\nAs a follow up, I want to remove this entire version check; I am working on the change wherein we can retrieve the version from snapuserd daemon itself. However, that will require some testing both on pixel and GRF branches. I will do this as a follow up CL.",
      "parentUuid": "f74fb4d4_23defde3",
      "revId": "84bfb02d029d551c011478abbf1dc090d6cfcdbd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}