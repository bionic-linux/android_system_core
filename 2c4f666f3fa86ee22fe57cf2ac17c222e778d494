{
  "comments": [
    {
      "key": {
        "uuid": "208e5183_4739d56f",
        "filename": "init/keychords.cpp",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-05-03T15:15:53Z",
      "side": 1,
      "message": "not needed",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 28,
        "endChar": 17
      },
      "revId": "2c4f666f3fa86ee22fe57cf2ac17c222e778d494",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b15f8992_cbe7c8f6",
        "filename": "init/keychords.cpp",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-05-03T15:15:53Z",
      "side": 1,
      "message": "not needed",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 32,
        "endChar": 17
      },
      "revId": "2c4f666f3fa86ee22fe57cf2ac17c222e778d494",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0778be3_73dd4f34",
        "filename": "init/keychords.cpp",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-05-03T15:15:53Z",
      "side": 1,
      "message": "corner case: if two identical keychords are registered, they are unified into a single id. Pedantically we would need to search for _all_ matches. This is a corner case _because_ in all usage examples only _one_ keychord is ever registered.\n\nBetter to drop the \"unused\" code in the \u0027library\u0027 below that unifies them.",
      "range": {
        "startLine": 69,
        "startChar": 50,
        "endLine": 69,
        "endChar": 89
      },
      "revId": "2c4f666f3fa86ee22fe57cf2ac17c222e778d494",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef669009_c91c7191",
        "filename": "init/keychords.cpp",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-05-03T15:15:53Z",
      "side": 1,
      "message": "anonymous namespace",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 90,
        "endChar": 29
      },
      "revId": "2c4f666f3fa86ee22fe57cf2ac17c222e778d494",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "045f93fa_504c3d2b",
        "filename": "init/keychords.cpp",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-05-03T23:19:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ef669009_c91c7191",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 90,
        "endChar": 29
      },
      "revId": "2c4f666f3fa86ee22fe57cf2ac17c222e778d494",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "92b8014d_ceb1dc9a",
        "filename": "init/keychords.cpp",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-05-03T22:38:47Z",
      "side": 1,
      "message": "Maybe more clear if this were called something like \u0027notified\u0027 to make it clear that this indicates that this KeychordEntry has already been notified.  That is what this is used for, right?",
      "revId": "2c4f666f3fa86ee22fe57cf2ac17c222e778d494",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5276673_f3601a63",
        "filename": "init/keychords.cpp",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-05-03T22:38:47Z",
      "side": 1,
      "message": "Move constructors are auto generated, so this does nothing.",
      "revId": "2c4f666f3fa86ee22fe57cf2ac17c222e778d494",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "285072f6_4f46465c",
        "filename": "init/keychords.cpp",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-05-03T23:19:42Z",
      "side": 1,
      "message": "And yet the compiler complained that it did not know what to do. The problem is that a reference (a pointer) has to be evaluated by the developer to decide if an allocation needs to be performed.",
      "parentUuid": "a5276673_f3601a63",
      "revId": "2c4f666f3fa86ee22fe57cf2ac17c222e778d494",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29f4362a_e8dcba3f",
        "filename": "init/keychords.cpp",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-05-03T23:33:37Z",
      "side": 1,
      "message": "Hm.  Probably better to just make a deep copy anyway.  It\u0027s going to cost trivial memory for the copy and it\u0027s better than taking a reference to a different class anyway.",
      "parentUuid": "285072f6_4f46465c",
      "revId": "2c4f666f3fa86ee22fe57cf2ac17c222e778d494",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a50d79aa_2e345606",
        "filename": "init/keychords.cpp",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-05-03T22:38:47Z",
      "side": 1,
      "message": "This shouldn\u0027t be a member function.  This should be put in add_service_keycodes() and only checked once there.",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 105,
        "endChar": 5
      },
      "revId": "2c4f666f3fa86ee22fe57cf2ac17c222e778d494",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8458b303_54dd96a5",
        "filename": "init/keychords.cpp",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-05-03T15:15:53Z",
      "side": 1,
      "message": "Easy to drop this to solve the corner case ...",
      "range": {
        "startLine": 107,
        "startChar": 1,
        "endLine": 131,
        "endChar": 5
      },
      "revId": "2c4f666f3fa86ee22fe57cf2ac17c222e778d494",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2687d83f_a20f9e3c",
        "filename": "init/keychords.cpp",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-05-03T22:38:47Z",
      "side": 1,
      "message": "I\u0027m okay dropping the corner case.  We didn\u0027t support multiple services with the same keychord before, and I don\u0027t see anyone asking for it.",
      "parentUuid": "8458b303_54dd96a5",
      "range": {
        "startLine": 107,
        "startChar": 1,
        "endLine": 131,
        "endChar": 5
      },
      "revId": "2c4f666f3fa86ee22fe57cf2ac17c222e778d494",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c686c28a_40895b97",
        "filename": "init/keychords.cpp",
        "patchSetId": 1
      },
      "lineNbr": 134,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-05-03T22:38:47Z",
      "side": 1,
      "message": "In the new event code, this is only ever iterated over, so this would be better as a simple vector with the id as a member of KeychordEntry.",
      "revId": "2c4f666f3fa86ee22fe57cf2ac17c222e778d494",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c918753_dc337db5",
        "filename": "init/keychords.cpp",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-05-03T22:38:47Z",
      "side": 1,
      "message": "Why not just have a static that counts up from 1?  We never remove keychord entries, so the returned IDs will only ever monotonically increase.",
      "revId": "2c4f666f3fa86ee22fe57cf2ac17c222e778d494",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d48eb31d_9df9ea8a",
        "filename": "init/keychords.cpp",
        "patchSetId": 1
      },
      "lineNbr": 252,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-05-03T15:15:53Z",
      "side": 1,
      "message": "init is compiled with C++17 so we can use auto [ emplaced, it ] here instead\n\n(audit other occurrences)",
      "range": {
        "startLine": 252,
        "startChar": 5,
        "endLine": 252,
        "endChar": 15
      },
      "revId": "2c4f666f3fa86ee22fe57cf2ac17c222e778d494",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1845918_204d3927",
        "filename": "init/keychords.cpp",
        "patchSetId": 1
      },
      "lineNbr": 252,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-05-03T22:38:47Z",
      "side": 1,
      "message": "You don\u0027t need the make_pair.  emplace() forwards its args to the actual pair constructor within the map.",
      "parentUuid": "d48eb31d_9df9ea8a",
      "range": {
        "startLine": 252,
        "startChar": 5,
        "endLine": 252,
        "endChar": 15
      },
      "revId": "2c4f666f3fa86ee22fe57cf2ac17c222e778d494",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dabf42b1_248d137b",
        "filename": "init/keychords.cpp",
        "patchSetId": 1
      },
      "lineNbr": 263,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-05-03T15:15:53Z",
      "side": 1,
      "message": "std::vector\u003cbool\u003e used here because space is about 8 bytes instead of 100.\n\ntomcherry@ indicated privately that switching to std::vector\u003cmask_t\u003e would be easier to maintain.",
      "range": {
        "startLine": 263,
        "startChar": 0,
        "endLine": 263,
        "endChar": 41
      },
      "revId": "2c4f666f3fa86ee22fe57cf2ac17c222e778d494",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ca0f150_ade0729a",
        "filename": "init/keychords.cpp",
        "patchSetId": 1
      },
      "lineNbr": 263,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-05-03T22:38:47Z",
      "side": 1,
      "message": "The costs are identical as long as you\u0027re packing the bits in mask_t, which you are.  You have the benefit that the latter is directly usable by the ioctls and that the former takes care of the bit manipulation to get/set a specific bit for you.\n\nI am okay with this being std::vector\u003cbool\u003e to have the simple IsBitSet().  Separately, I have a comment that shows that _IsBitSet() is unneeded anyway.",
      "parentUuid": "dabf42b1_248d137b",
      "range": {
        "startLine": 263,
        "startChar": 0,
        "endLine": 263,
        "endChar": 41
      },
      "revId": "2c4f666f3fa86ee22fe57cf2ac17c222e778d494",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be9e3fc9_6956a33d",
        "filename": "init/keychords.cpp",
        "patchSetId": 1
      },
      "lineNbr": 263,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-05-03T23:19:42Z",
      "side": 1,
      "message": "vector\u003cbool\u003e is not 1:1 to bool bits. It is documented that the implementation detail is able to encode itself as spans of 1s and spans of 0s rather than actually landing 1s or 0s in a bitmask.",
      "parentUuid": "2ca0f150_ade0729a",
      "range": {
        "startLine": 263,
        "startChar": 0,
        "endLine": 263,
        "endChar": 41
      },
      "revId": "2c4f666f3fa86ee22fe57cf2ac17c222e778d494",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4468fa7_6049b759",
        "filename": "init/keychords.cpp",
        "patchSetId": 1
      },
      "lineNbr": 263,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-05-03T23:33:37Z",
      "side": 1,
      "message": "Hm, where did you read that?  It\u0027s \u0027implementation defined\u0027 but cppreference says it\u0027s a bitmask, http://en.cppreference.com/w/cpp/container/vector_bool.\n\nThis is what libcxx does too.  See https://cs.corp.google.com/android/external/libcxx/include/vector?q\u003dfile:libcxx+vector%3Cbool%3E\u0026sq\u003dpackage:%5Eandroid$\u0026dr\u003dC\u0026l\u003d3240; that\u0027s implemented as if it were a bitmask.",
      "parentUuid": "be9e3fc9_6956a33d",
      "range": {
        "startLine": 263,
        "startChar": 0,
        "endLine": 263,
        "endChar": 41
      },
      "revId": "2c4f666f3fa86ee22fe57cf2ac17c222e778d494",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6fdf2d69_7b831299",
        "filename": "init/keychords.cpp",
        "patchSetId": 1
      },
      "lineNbr": 282,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-05-03T22:38:47Z",
      "side": 1,
      "message": "state.first \u003d\u003d fd. right?  No need to do any find above, this handler already knows what its is handling.  In which case, KeychordState also doesn\u0027t really make sense to be a map, since no one else calls find() on it.",
      "range": {
        "startLine": 282,
        "startChar": 41,
        "endLine": 282,
        "endChar": 52
      },
      "revId": "2c4f666f3fa86ee22fe57cf2ac17c222e778d494",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd420a12_4aa10678",
        "filename": "init/keychords.cpp",
        "patchSetId": 1
      },
      "lineNbr": 289,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-05-03T22:38:47Z",
      "side": 1,
      "message": "No need to increase the size of KeychordCurrent here.  It can be sized to the max size of whatever keychords that we care about and everything above that can be ignored.",
      "range": {
        "startLine": 284,
        "startChar": 8,
        "endLine": 289,
        "endChar": 9
      },
      "revId": "2c4f666f3fa86ee22fe57cf2ac17c222e778d494",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d67ba35b_00bd0206",
        "filename": "init/keychords.cpp",
        "patchSetId": 1
      },
      "lineNbr": 333,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-05-03T22:38:47Z",
      "side": 1,
      "message": "The kernel driver only supports EV_KEY, we shouldn\u0027t support anything else.\n\nhttps://android.googlesource.com/kernel/common/+/android-4.4/drivers/input/misc/keychord.c#94 for reference.\n\nYou can probably even have a EVIOCGBIT check in GeteventOpenDevice() that ignores anything except devices with non-zero keys for EV_KEY.",
      "revId": "2c4f666f3fa86ee22fe57cf2ac17c222e778d494",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9017fb42_0166ee48",
        "filename": "init/keychords.cpp",
        "patchSetId": 1
      },
      "lineNbr": 333,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-05-03T23:19:42Z",
      "side": 1,
      "message": "That is not true about the event driver, it does support EV_SW for example. However, the point is taken that if we tell it to filter out EV_SW (which we do when we issue the EV_SYN bitmask, which limits the event types) there should be no need to also send zero bits off to the EV_SW filter table as I have done here. I should send EV_KEY to the EV_SYN mask table, and send the keycode masks to the EV_KEY mask table and be done with it.\n\nIn likbeychord I wanted to support EV_KEY and EV_SW entries in the chords (eg, one could imagine doing volume up, volume down and Lid Switch to trigger a bugreport).\n\nI understand that is not necessary this go around.",
      "parentUuid": "d67ba35b_00bd0206",
      "revId": "2c4f666f3fa86ee22fe57cf2ac17c222e778d494",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b25c3d76_3a3db6d2",
        "filename": "init/keychords.cpp",
        "patchSetId": 1
      },
      "lineNbr": 333,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-05-03T23:33:37Z",
      "side": 1,
      "message": "I meant the kernel keychord driver.  We don\u0027t need to support anything more than it does.\n\nIf you\u0027re able to route SW key events as EV_KEY, then that\u0027s perfect.",
      "parentUuid": "9017fb42_0166ee48",
      "revId": "2c4f666f3fa86ee22fe57cf2ac17c222e778d494",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da280a6c_f37a668c",
        "filename": "init/keychords.cpp",
        "patchSetId": 1
      },
      "lineNbr": 357,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-05-03T22:38:47Z",
      "side": 1,
      "message": "You can just and the bits returned and the bits in the mask.  You don\u0027t even need to worry about the length, since you know you have the same size in both defaulted to 0.\n\nfor (size_t i \u003d 0; i \u003c bits.size(); ++i) {\n  if (bits[i] \u0026 mask[i] !\u003d 0) {\n    // at least one bit is set\n  }\n}",
      "range": {
        "startLine": 351,
        "startChar": 0,
        "endLine": 357,
        "endChar": 17
      },
      "revId": "2c4f666f3fa86ee22fe57cf2ac17c222e778d494",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d8dab9a_397c716a",
        "filename": "init/keychords.cpp",
        "patchSetId": 1
      },
      "lineNbr": 357,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-05-03T23:19:42Z",
      "side": 1,
      "message": "Thought about doing that, speed is not of the essence here, maintainability doing one bit at a time seemed cleaner; especially since (at least before) when each source was a different bitmask type.",
      "parentUuid": "da280a6c_f37a668c",
      "range": {
        "startLine": 351,
        "startChar": 0,
        "endLine": 357,
        "endChar": 17
      },
      "revId": "2c4f666f3fa86ee22fe57cf2ac17c222e778d494",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00167ffd_7a16a59a",
        "filename": "init/keychords.cpp",
        "patchSetId": 1
      },
      "lineNbr": 357,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-05-03T23:33:37Z",
      "side": 1,
      "message": "I\u0027m not worried about speed either; I think it\u0027s more maintainable to just and the two values.  It\u0027ll allow you to not implement _IsBitSet() too, which is a big bonus.",
      "parentUuid": "0d8dab9a_397c716a",
      "range": {
        "startLine": 351,
        "startChar": 0,
        "endLine": 357,
        "endChar": 17
      },
      "revId": "2c4f666f3fa86ee22fe57cf2ac17c222e778d494",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}