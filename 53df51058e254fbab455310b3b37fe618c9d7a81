{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0919b6e0_c3bba209",
        "filename": "init/init.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1113,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2023-02-28T01:01:29Z",
      "side": 1,
      "message": "Since this is only used for a comparison at the end, would it be clearer if it were a boolean, e.g. has_more_commands?",
      "revId": "53df51058e254fbab455310b3b37fe618c9d7a81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9635fb91_9d2bcf96",
        "filename": "init/init.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1113,
      "author": {
        "id": 1869780
      },
      "writtenOn": "2023-02-28T01:33:38Z",
      "side": 1,
      "message": "I think it is more elegant to initialize `next_action_time` to a time far in the future such that std::min() can be used without having to test first whether or not a time point has already been stored in `next_action_time`.",
      "parentUuid": "0919b6e0_c3bba209",
      "revId": "53df51058e254fbab455310b3b37fe618c9d7a81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "943d6e50_33155c12",
        "filename": "init/init.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1113,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2023-02-28T02:14:41Z",
      "side": 1,
      "message": "I\u0027m fine with std::min(). I\u0027m concerned about the comparison to far_future at the end of the function. In my experience, std::chrono is tricky, since there are implicit conversions that can cause integer overflow, e.g. from seconds -\u003e milliseconds. See [1] as one of many examples.\n\nnanoseconds::max(), which boot_clock uses, may not equal milliseconds::max(), which epoll uses. This code is safe as is, but risky if someone doesn\u0027t understand that and refactors it in the future.\n\nBeyond that, epoll_wait takes an optional\u003cmilliseconds\u003e as its parameter and the existing uses an optional\u003cmilliseconds\u003e for its logic to determine the parameter value. Why diverge from that?\n\n1: https://www.reddit.com/r/cpp/comments/l755me/stdchrono_question_of_the_day_whats_the_result_of/",
      "parentUuid": "9635fb91_9d2bcf96",
      "revId": "53df51058e254fbab455310b3b37fe618c9d7a81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7cbd853b_4f0eef88",
        "filename": "init/init.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1113,
      "author": {
        "id": 1869780
      },
      "writtenOn": "2023-03-01T20:36:35Z",
      "side": 1,
      "message": "The comparison with far_future does not involve a conversion from one std::chrono precision to another and hence should not trigger an overflow.\n\nThe std::max() argument has been changed into 0ns. The following error is reported if that argument is changed into 0ms:\n\nsystem/core/init/init.cpp:1148:21: error: no matching function for call to \u0027max\u0027\n                    std::max(next_action_time - boot_clock::now(), 0ms));\n                    ^~~~~~~~\nexternal/libcxx/include/algorithm:2529:1: note: candidate template ignored: deduced conflicting types for parameter \u0027_Tp\u0027 (\u0027duration\u003c[...], ratio\u003c[...], __static_lcm\u003cratio\u003c1, 1000000000\u003e::den, ratio\u003c1, 1000000000\u003e::den\u003e::value aka 1000000000\u003e\u003e\u0027 vs. \u0027duration\u003c[...], ratio\u003c[...], 1000\u003e\u003e\u0027)\nmax(const _Tp\u0026 __a, const _Tp\u0026 __b)\n\nA comment about the risk for overflow when converting far_future into another unit has been added.\n\nI think the new code is much easier to follow than code that uses std::optional\u003c\u003e for calculating the next wake-up time.",
      "parentUuid": "943d6e50_33155c12",
      "revId": "53df51058e254fbab455310b3b37fe618c9d7a81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28576a99_2ae69fbd",
        "filename": "init/init.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1131,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2023-02-28T01:01:29Z",
      "side": 1,
      "message": "may",
      "range": {
        "startLine": 1131,
        "startChar": 73,
        "endLine": 1131,
        "endChar": 78
      },
      "revId": "53df51058e254fbab455310b3b37fe618c9d7a81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b74caa0f_7b976748",
        "filename": "init/init.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1131,
      "author": {
        "id": 1869780
      },
      "writtenOn": "2023-02-28T01:33:38Z",
      "side": 1,
      "message": "I found another text in which \"no new actions must\" occurs with the similar meaning as here (forbidden): https://apps.legislature.ky.gov/law/kar/titles/502/045/015/10493/.",
      "parentUuid": "28576a99_2ae69fbd",
      "range": {
        "startLine": 1131,
        "startChar": 73,
        "endLine": 1131,
        "endChar": 78
      },
      "revId": "53df51058e254fbab455310b3b37fe618c9d7a81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dca24639_cf0f3525",
        "filename": "init/init.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1139,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2023-02-28T01:01:29Z",
      "side": 1,
      "message": "This line is now problematic. It can override next_action_time with a later time than boot_clock::now() which was set on line 1128. If you want the code to be formatted like this, you\u0027d need a separate variable here that is used in the final code. You could take next_process_action_time and move it out 1 scope. The final code would look something like\n\n```\nstd::optional\u003cstd::chrono::milliseconds\u003e epoll_timeout;\nif (has_more_commands) {\n  epoll_timeout \u003d 0ms;\n} else if (next_process_action_time) {\n  epoll_timeout \u003d ceil\u003cms\u003e(std::max(*next_process_action_time - boot_clock::now(), 0ms);\n}\nepoll_result \u003d epoll.Wait(epoll_timeout);\n```",
      "revId": "53df51058e254fbab455310b3b37fe618c9d7a81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6edde012_f83be190",
        "filename": "init/init.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1139,
      "author": {
        "id": 1869780
      },
      "writtenOn": "2023-02-28T01:33:38Z",
      "side": 1,
      "message": "Another solution has been implemented, namely using std::min().",
      "parentUuid": "dca24639_cf0f3525",
      "revId": "53df51058e254fbab455310b3b37fe618c9d7a81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50cf877b_2a21c37c",
        "filename": "init/init.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1146,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2023-02-28T01:01:29Z",
      "side": 1,
      "message": "Why not `0ms` ?",
      "range": {
        "startLine": 1146,
        "startChar": 67,
        "endLine": 1146,
        "endChar": 91
      },
      "revId": "53df51058e254fbab455310b3b37fe618c9d7a81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db0eabbc_c682dda5",
        "filename": "init/init.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1146,
      "author": {
        "id": 1869780
      },
      "writtenOn": "2023-02-28T01:33:38Z",
      "side": 1,
      "message": "`0s` is one letter less than `0ms` :-)\n\nI\u0027m open to suggestions for alternatives for `boot_clock::duration{0s}`. One possible alternative is `{}` but I\u0027m not sure any reviewer likes that alternative?",
      "parentUuid": "50cf877b_2a21c37c",
      "range": {
        "startLine": 1146,
        "startChar": 67,
        "endLine": 1146,
        "endChar": 91
      },
      "revId": "53df51058e254fbab455310b3b37fe618c9d7a81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59e4e39d_411badf4",
        "filename": "init/init.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1146,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2023-02-28T02:14:41Z",
      "side": 1,
      "message": "I meant replacing all of `boot_clock::duration{0s}` with `0s` or `0ms`. Or does that not compile? \n\nIt looks like boot_clock::duration is an alias for chrono::nanoseconds [1], so maybe `0ns` is the right option here?\n\n1: https://cs.android.com/android/platform/superproject/+/master:system/libbase/include/android-base/chrono_utils.h;drc\u003d1a3e91e4c0895750dc060a47c41263f87ba5f228;l\u003d32",
      "parentUuid": "db0eabbc_c682dda5",
      "range": {
        "startLine": 1146,
        "startChar": 67,
        "endLine": 1146,
        "endChar": 91
      },
      "revId": "53df51058e254fbab455310b3b37fe618c9d7a81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fc035d0d_267331aa",
        "filename": "init/init.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1146,
      "author": {
        "id": 1869780
      },
      "writtenOn": "2023-03-01T20:36:35Z",
      "side": 1,
      "message": "`boot_clock::duration{0s}` has been changed into `0ns`.",
      "parentUuid": "59e4e39d_411badf4",
      "range": {
        "startLine": 1146,
        "startChar": 67,
        "endLine": 1146,
        "endChar": 91
      },
      "revId": "53df51058e254fbab455310b3b37fe618c9d7a81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}