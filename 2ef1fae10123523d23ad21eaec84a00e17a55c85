{
  "comments": [
    {
      "key": {
        "uuid": "d98a3464_9cd005ba",
        "filename": "init/keychords_test.cpp",
        "patchSetId": 8
      },
      "lineNbr": 47,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-05-24T19:42:35Z",
      "side": 1,
      "message": "fd_;",
      "range": {
        "startLine": 47,
        "startChar": 8,
        "endLine": 47,
        "endChar": 11
      },
      "revId": "2ef1fae10123523d23ad21eaec84a00e17a55c85",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55a2d1d9_772134af",
        "filename": "init/keychords_test.cpp",
        "patchSetId": 8
      },
      "lineNbr": 57,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-05-24T19:42:35Z",
      "side": 1,
      "message": "Init()\n\netc below.",
      "range": {
        "startLine": 57,
        "startChar": 9,
        "endLine": 57,
        "endChar": 13
      },
      "revId": "2ef1fae10123523d23ad21eaec84a00e17a55c85",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8097ea2a_be45dfc6",
        "filename": "init/keychords_test.cpp",
        "patchSetId": 8
      },
      "lineNbr": 153,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-05-24T19:42:35Z",
      "side": 1,
      "message": "ASSERT_TRUE() ?  Not likely to fail, but might as well.",
      "revId": "2ef1fae10123523d23ad21eaec84a00e17a55c85",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4eb35794_346a1f14",
        "filename": "init/keychords_test.cpp",
        "patchSetId": 8
      },
      "lineNbr": 163,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-05-24T19:42:35Z",
      "side": 1,
      "message": "Maybe drop this check or turn it into an ASSERT?  No one should call these functions unless they\u0027ve passed an EventHandler, so instead of silently returning, might as well make it explicit that they\u0027ve messed up somewhere.",
      "revId": "2ef1fae10123523d23ad21eaec84a00e17a55c85",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98cd6d3f_c8886db2",
        "filename": "init/keychords_test.cpp",
        "patchSetId": 8
      },
      "lineNbr": 211,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-05-24T19:42:35Z",
      "side": 1,
      "message": "What is this testing exactly?  It looks like it\u0027s checking proc fd to ensure that the tester has created an inotify FD?  This seems a bit overkill to me.  If we successfully complete initialization and inotify_init1() succeeds, then that should be sufficient.",
      "revId": "2ef1fae10123523d23ad21eaec84a00e17a55c85",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38d95181_94c1c906",
        "filename": "init/keychords_test.cpp",
        "patchSetId": 8
      },
      "lineNbr": 211,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-05-25T20:20:55Z",
      "side": 1,
      "message": "Always test assumptions. Failure here invalidates all following tests. (Test used to check the running init, and if no chords were configured for the platform, then we would bail clearly; I reserve the right to add tests that also check the running init)\n\nThere will be no inotify fd if the chords are not accepted/registered, and no error was propagated. This is an end-to-end check to ensure that the basic class assumptions work, because all test that follow depend on this. if we hand chords, that we expect to see inotify.\n\nRemember, we added inotify support in a followup CL, so if someone cherry-picked keychord CL w/o inotify CL followup, we want to fail.\n\nI wanted to also check that _no_ inotify exists if no chords are supplied, but _forgot_ about that test and will add it.",
      "parentUuid": "98cd6d3f_c8886db2",
      "revId": "2ef1fae10123523d23ad21eaec84a00e17a55c85",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a161c909_94a31ed3",
        "filename": "init/keychords_test.cpp",
        "patchSetId": 8
      },
      "lineNbr": 213,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-05-25T20:20:55Z",
      "side": 1,
      "message": "probably misnamed given we are testing our _own_ fds, not inits ...",
      "range": {
        "startLine": 213,
        "startChar": 16,
        "endLine": 213,
        "endChar": 30
      },
      "revId": "2ef1fae10123523d23ad21eaec84a00e17a55c85",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27e73695_ae1e0253",
        "filename": "init/keychords_test.cpp",
        "patchSetId": 8
      },
      "lineNbr": 237,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-05-24T19:42:35Z",
      "side": 1,
      "message": "Should add all of the negative tests here too.\n\nEXPECT_FALSE(test_frame.IsChord(triple1_chord));\nEXPECT_FALSE(test_frame.IsChord(tripe2_chord));\n\netc for the other tests.",
      "revId": "2ef1fae10123523d23ad21eaec84a00e17a55c85",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}