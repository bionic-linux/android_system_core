{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0063f684_6a804af0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1863406
      },
      "writtenOn": "2023-04-17T06:40:42Z",
      "side": 1,
      "message": "Hello, Maintainers\n\nCould you please review this patch?\n\nI suggested it to `libavb` with a different patch.\nBut it looks better to use `dup2`\n\nIf you want to see the history, please refer this link [aosp/2493379](https://android-review.googlesource.com/c/platform/external/avb/+/2493379)",
      "revId": "7ea39fc118f457fa0fb78c07005e832ffc42de05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f803ed7b_2b31c764",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2023-04-17T08:41:11Z",
      "side": 1,
      "message": "Thanks for the context. \n\nBy the way, I think there\u0027s a reason for redirecting stdio/stdout/stderr to /dev/null for most of the time while the first stage init is running. See https://cs.android.com/android/platform/superproject/+/master:system/core/init/util.cpp;drc\u003dec18f508f9934fc9548fff6b0532452200defdbe;l\u003d700\n\nSo I believe that init (and its dependencies like libavb as well) should distinguish logging and sending something to stdout.\n\nI wish libavb provides a mechanism to configure (either statically as a build-time flag or dynamically by calling an api, which I personally prefer) to select the log target. It could default to stderr, but could be set to /dev/kmsg, or something else.",
      "parentUuid": "0063f684_6a804af0",
      "revId": "7ea39fc118f457fa0fb78c07005e832ffc42de05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7d86118_8ca98d57",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1863406
      },
      "writtenOn": "2023-04-17T09:44:40Z",
      "side": 1,
      "message": "Thanks for review about it.\n\nI understand that you think it\u0027s good to handle it in libavb. (use build-time flag or something else)\n\nWhen i read a link you send, I\u0027m not sure exactly which part you\u0027re considering. I\u0027d appreciate it if you could explain a little more.",
      "parentUuid": "f803ed7b_2b31c764",
      "revId": "7ea39fc118f457fa0fb78c07005e832ffc42de05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c910f9e0_6ae0e99e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2023-04-17T12:41:57Z",
      "side": 1,
      "message": "Sorry. Nevermind. I thought this change may break the first stage console, but it\u0027s not. \n\nBy the way, my argument remains the same. I feel uncomfortable with init being dependent on the implementation detail of libavb where logs are always sent to stderr.",
      "parentUuid": "b7d86118_8ca98d57",
      "revId": "7ea39fc118f457fa0fb78c07005e832ffc42de05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78af3297_26f4c36d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1882526
      },
      "writtenOn": "2023-04-17T14:13:38Z",
      "side": 1,
      "message": "\u003e I wish libavb provides a mechanism to configure (either statically as a build-time flag or dynamically by calling an api, which I personally prefer) to select the log target.\n\n+1, defaulting to `stderr` and introducing `avb_set_log_file()` behind a build flag for the POSIX reference implementation would be cleaner. IMO, the static option would be less invasive (no API change) but also less robust as, unlike `stderr`, the file might need to be `open`-ed first.\n\nAlternatively, `init_first_stage` could implement this through its own `avb_sysdeps.h` (including `avb_print{,f,v}()`) when statically linking against `libavb`.",
      "parentUuid": "c910f9e0_6ae0e99e",
      "revId": "7ea39fc118f457fa0fb78c07005e832ffc42de05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e973658_20b27348",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1863406
      },
      "writtenOn": "2023-04-18T00:32:49Z",
      "side": 1,
      "message": "@jiyong@google.com\nThank you for more explain. I agreed with your opinion that looks better without dependence `libavb` and `init`\n\n\n@ptosi@google.com\n\u003e defaulting to stderr and introducing avb_set_log_file() behind a build flag for the POSIX reference implementation would be cleaner.\n\nYes, I think so. I thought build-time flag and make it a function in the first patch I made. [patch link](https://android-review.googlesource.com/c/platform/external/avb/+/2493379/1/libavb/avb_sysdeps_posix.c)\n\nCurrently, there is lots of patch you submitted, so need a patch that fits it.\nHow about this? or Do you have a good idea?",
      "parentUuid": "78af3297_26f4c36d",
      "revId": "7ea39fc118f457fa0fb78c07005e832ffc42de05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d26900e7_98788398",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2023-04-18T01:31:13Z",
      "side": 1,
      "message": "The patch you shared doesn\u0027t seem to be using any conditions. Below is what I expected.\n\nOption 1 (static config):\n```\nFILE* get_log_file() {\n#ifdef USE_KMSG_AS_LOG_TARGET\n    static FILE* fp \u003d NULL;\n    if (fp \u003d\u003d NULL) {\n        fp \u003d fopen(\"/dev/kmsg\", \"a\");\n        if (fp \u003d\u003d NULL) {\n           // do some error reporting\n           fp \u003d stderr; //fall back to stderr\n        }        \n    }\n    return fp;\n#else\n    return stderr; // the default\n#endif\n}\n\nvoid avb_printv(const char* message, ...) {\n    ...\n    fprintf(get_log_file(), \"%s\", ...);\n    ...\n}\n```\n\nOption 2 (dynamic config)\n```\nstatic FILE* log_file \u003d stderr; // the default\n\nvoid avb_set_log_file(FILE* log_file) {\n    log_file \u003d log_file; // do we need to be thread-safe??\n}\n\nvoid avb_printv(const char* message, ...) {\n    ...\n    fprintf(log_file, \"%s\", ...);\n    ...\n}\n```",
      "parentUuid": "3e973658_20b27348",
      "revId": "7ea39fc118f457fa0fb78c07005e832ffc42de05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5b511a0_9cc0c939",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1863406
      },
      "writtenOn": "2023-04-18T02:50:48Z",
      "side": 1,
      "message": "Oh, I will plan to add it in the patch I created before(I sent).\nIt\u0027s correct that there are no conditions in what I sent.\n\nThank you for suggest about patch. I was thinking like Option #1.\nI\u0027ll try to change it at the libavb\u0027s latest version.",
      "parentUuid": "d26900e7_98788398",
      "revId": "7ea39fc118f457fa0fb78c07005e832ffc42de05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72f70a20_8c2604d1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1863406
      },
      "writtenOn": "2023-05-02T08:28:35Z",
      "side": 1,
      "message": "I tried to have a File Pointer as a static variable.\nAs a result, the log is not output, and the PANIC occurs around 60 seconds of Booting.\n\nIf want to do that, need to call `close` function every time.\nDo you have a any good ideas or something else?",
      "parentUuid": "a5b511a0_9cc0c939",
      "revId": "7ea39fc118f457fa0fb78c07005e832ffc42de05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f58d536_ec0d072e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2023-05-02T08:45:26Z",
      "side": 1,
      "message": "Could you explain why the panic occurred, and why you had to call the close function every time?",
      "parentUuid": "72f70a20_8c2604d1",
      "revId": "7ea39fc118f457fa0fb78c07005e832ffc42de05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ed75aa1_166e5af5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1863406
      },
      "writtenOn": "2023-05-02T09:10:05Z",
      "side": 1,
      "message": "I think system_server native crash occurred.\nI can\u0027t find the root cause.\nBecause I can\u0027t get a log at the time of the problem.\n```\n[   11.783032] [3:   crash_dump64: 2849] !@*** system_server native crash occurred\n[   15.416927] [7:   crash_dump64: 3340] !@*** system_server native crash occurred\n[   20.658100] [5:   crash_dump64: 3942] !@*** system_server native crash occurred\n// -- snip -- \n[   40.582343] [3:   crash_dump64: 5028] !@*** system_server native crash occurred\n[   45.542648] [7:   crash_dump64: 5291] !@*** system_server native crash occurred\n[   50.383627] [7:   crash_dump64: 5553] !@*** system_server native crash occurred\n[   55.381665] [7:   crash_dump64: 5833] !@*** system_server native crash occurred\n\n```\n\nI know that `fprintf` function write message to buffer not directly file. \nThen when meet a `fclose` function, write a message in buffer to file at this time. If it\u0027s wrong, please never mind.\n\nSo I called `fcloes`, the log was printed normally, and the Panic did not occur.\n\nThis code is work well. I just wrote it for testing.\n```c\nstatic FILE* get_log_file() {\n#ifdef USE_KMSG_AS_LOG_TARGET\n  static FILE* fp \u003d NULL;\n  if (fp \u003d\u003d NULL) {\n    fp \u003d fopen(\"/dev/kmsg\", \"a\");\n\n    // fall back to stderr\n    if (fp \u003d\u003d NULL) {\n      fp \u003d stderr;\n    }\n  }\n  return fp;\n#else\n  return stderr; // the default\n#endif\n}\n\nvoid avb_printv(const char* message, ...) {\n  va_list ap;\n  const char* m;\n  FILE* test \u003d get_log_file();\n \n  va_start(ap, message);\n  for (m \u003d message; m !\u003d NULL; m \u003d va_arg(ap, const char*)) {\n    fprintf(test, \"%s\", m);\n  }\n  va_end(ap);\n  \n  if (test !\u003d stderr \u0026\u0026 test !\u003d NULL) {\n    fclose(test);\n  }\n}\n\n```",
      "parentUuid": "8f58d536_ec0d072e",
      "revId": "7ea39fc118f457fa0fb78c07005e832ffc42de05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "947b8dc8_7d711799",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2023-05-02T09:32:40Z",
      "side": 1,
      "message": "I missed that stderr is unbuffered. You can do the same for `fp`, by calling `setvbuf(fp, NULL, _IONBF, 0);`",
      "parentUuid": "9ed75aa1_166e5af5",
      "revId": "7ea39fc118f457fa0fb78c07005e832ffc42de05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81fab1dd_85c303f6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1863406
      },
      "writtenOn": "2023-05-02T11:17:09Z",
      "side": 1,
      "message": "Oh, That\u0027s sound great!\nI will try this one 👍",
      "parentUuid": "947b8dc8_7d711799",
      "revId": "7ea39fc118f457fa0fb78c07005e832ffc42de05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b036062f_35349160",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1863406
      },
      "writtenOn": "2023-05-04T05:43:32Z",
      "side": 1,
      "message": "Log print out well. But system_server\u0027s crash still occur.\n\nI think that problem appears to be occurring in that call stack while zygote fork.\n\n```\nDumping all threads without mutator lock held\nAll threads:\nDALVIK THREADS (1):\n\"main\" prio\u003d10 tid\u003d1 Runnable\n  | group\u003d\"\" sCount\u003d0 ucsCount\u003d0 flags\u003d0 obj\u003d0x72a22a38 self\u003d0xb400007a1c4b0800\n  | sysTid\u003d5946 nice\u003d-16 cgrp\u003dtop-app sched\u003d0/0 handle\u003d0x7a1db65500\n  | state\u003dR schedstat\u003d( 516270104 13878281 695 ) utm\u003d43 stm\u003d8 core\u003d3 HZ\u003d100\n  | stack\u003d0x7fe8fe6000-0x7fe8fe8000 stackSize\u003d8188KB\n  | held mutexes\u003d \"abort lock\" \"mutator lock\"(shared held)\n  native: #00 pc 00000000006b1320  /apex/com.android.art/lib64/libart.so (art::DumpNativeStack(std::__1::basic_ostream\u003cchar, std::__1::char_traits\u003cchar\u003e \u003e\u0026, int, BacktraceMap*, char const*, art::ArtMethod*, void*, bool)+128) (BuildId: 289d75599f6112d5757113220599e90b)\n  native: #01 pc 0000000000719c70  /apex/com.android.art/lib64/libart.so (art::Thread::DumpStack(std::__1::basic_ostream\u003cchar, std::__1::char_traits\u003cchar\u003e \u003e\u0026, bool, BacktraceMap*, bool) const+236) (BuildId: 289d75599f6112d5757113220599e90b)\n  native: #02 pc 00000000007291c8  /apex/com.android.art/lib64/libart.so (art::DumpCheckpoint::Run(art::Thread*)+216) (BuildId: 289d75599f6112d5757113220599e90b)\n  native: #03 pc 0000000000374e0c  /apex/com.android.art/lib64/libart.so (art::ThreadList::RunCheckpoint(art::Closure*, art::Closure*)+448) (BuildId: 289d75599f6112d5757113220599e90b)\n  native: #04 pc 00000000007276a8  /apex/com.android.art/lib64/libart.so (art::ThreadList::Dump(std::__1::basic_ostream\u003cchar, std::__1::char_traits\u003cchar\u003e \u003e\u0026, bool)+292) (BuildId: 289d75599f6112d5757113220599e90b)\n  native: #05 pc 00000000006ff9a8  /apex/com.android.art/lib64/libart.so (art::AbortState::Dump(std::__1::basic_ostream\u003cchar, std::__1::char_traits\u003cchar\u003e \u003e\u0026) const+212) (BuildId: 289d75599f6112d5757113220599e90b)\n  native: #06 pc 00000000006fa114  /apex/com.android.art/lib64/libart.so (art::Runtime::Abort(char const*)+964) (BuildId: 289d75599f6112d5757113220599e90b)\n  native: #07 pc 0000000000016ea8  /apex/com.android.art/lib64/libbase.so (android::base::SetAborter(std::__1::function\u003cvoid (char const*)\u003e\u0026\u0026)::$_3::__invoke(char const*)+80) (BuildId: 420d56eac27a210c92900f3ddb760c86)\n  native: #08 pc 0000000000016450  /apex/com.android.art/lib64/libbase.so (android::base::LogMessage::~LogMessage()+352) (BuildId: 420d56eac27a210c92900f3ddb760c86)\n  native: #09 pc 0000000000664a94  /apex/com.android.art/lib64/libart.so (art::JNI\u003ctrue\u003e::FatalError(_JNIEnv*, char const*)+196) (BuildId: 289d75599f6112d5757113220599e90b)\n  native: #10 pc 00000000001dc024  /system/lib64/libandroid_runtime.so (android::zygote::ZygoteFailure(_JNIEnv*, char const*, _jstring*, std::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e const\u0026)+176) (BuildId: da5f8bb648d2916caab74e286ae3ad78)\n  native: #11 pc 00000000001ecbb8  /system/lib64/libandroid_runtime.so (FileDescriptorInfo::CreateFromFd(int, std::__1::function\u003cvoid (std::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e)\u003e const\u0026)+984) (BuildId: da5f8bb648d2916caab74e286ae3ad78)\n  native: #12 pc 00000000001ed884  /system/lib64/libandroid_runtime.so (FileDescriptorTable::Create(std::__1::vector\u003cint, std::__1::allocator\u003cint\u003e \u003e const\u0026, std::__1::function\u003cvoid (std::__1::basic_string\u003cchar, std::__1::char_traits\u003cchar\u003e, std::__1::allocator\u003cchar\u003e \u003e)\u003e const\u0026)+140) (BuildId: da5f8bb648d2916caab74e286ae3ad78)\n  native: #13 pc 00000000001dc210  /system/lib64/libandroid_runtime.so (android::zygote::ForkCommon(_JNIEnv*, bool, std::__1::vector\u003cint, std::__1::allocator\u003cint\u003e \u003e const\u0026, std::__1::vector\u003cint, std::__1::allocator\u003cint\u003e \u003e const\u0026, bool, bool)+488) (BuildId: da5f8bb648d2916caab74e286ae3ad78) \n  native: #14 pc 00000000001de274  /system/lib64/libandroid_runtime.so (android::com_android_internal_os_Zygote_nativeForkSystemServer(_JNIEnv*, _jclass*, unsigned int, unsigned int, _jintArray*, int, _jobjectArray*, long, long)+684) (BuildId: da5f8bb648d2916caab74e286ae3ad78)\n  at com.android.internal.os.Zygote.nativeForkSystemServer(Native method)\n  at com.android.internal.os.Zygote.forkSystemServer(Zygote.java:479)\n  at com.android.internal.os.ZygoteInit.forkSystemServer(ZygoteInit.java:895)\n  at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1040)\n  ```",
      "parentUuid": "81fab1dd_85c303f6",
      "revId": "7ea39fc118f457fa0fb78c07005e832ffc42de05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "711a3ef7_3ad4c0e8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2023-05-04T06:54:50Z",
      "side": 1,
      "message": "I think this is happening because zygote can\u0027t stat /dev/kmsg (due to sepolicy). It must have inherited the FD for /dev/kmsg when it was forked from init. I think you need to open /dev/kmsg with O_CLOEXEC so that it is closed in the children of init.",
      "parentUuid": "b036062f_35349160",
      "revId": "7ea39fc118f457fa0fb78c07005e832ffc42de05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c46a3b3_ee710629",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1863406
      },
      "writtenOn": "2023-05-15T06:50:18Z",
      "side": 1,
      "message": "I\u0027m sorry for the late reply. \nBecuase I\u0027m looking for a better way, but it\u0027s not easy to solve.\n\nThe current situation is as follows.\nWhen \u0027e\u0027, which is the option of fopen, is used, an error occurs.\nErrno is 22(EINVAL 22 /* Invalid argument */ )\nI think that android system is not support this option.",
      "parentUuid": "711a3ef7_3ad4c0e8",
      "revId": "7ea39fc118f457fa0fb78c07005e832ffc42de05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c47fdfd_5210b258",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2023-05-15T11:09:07Z",
      "side": 1,
      "message": "I believe it\u0027s a glibc extension which bionic doesn\u0027t support. See [1]. You may use open and then use fdopen to convert the file descriptor to a file stream.\n\n[1] https://source.corp.google.com/android/bionic/tests/stdio_test.cpp;rcl\u003d2fe5e06f818e92f0bf2504f89262a36cebe63fb2;l\u003d2868",
      "parentUuid": "5c46a3b3_ee710629",
      "revId": "7ea39fc118f457fa0fb78c07005e832ffc42de05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e63d819e_a36d4099",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-05-15T14:53:54Z",
      "side": 1,
      "message": "\u003e I believe it\u0027s a glibc extension which bionic doesn\u0027t support.\n\nno, \u0027e\u0027 is supported by glibc, macos/ios, and bionic.\n\n\u003e See [1].\n\nyou\u0027re misreading the test --- the part with \"re\" proves that you _can_ use multiple letters like \"re\". the next part of the test proves you can\u0027t use _arbitrary_ letters like \"nonsense\".",
      "parentUuid": "2c47fdfd_5210b258",
      "revId": "7ea39fc118f457fa0fb78c07005e832ffc42de05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05f865a5_be7dcc18",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2023-05-16T05:27:36Z",
      "side": 1,
      "message": "Oops. You are right. I read it wrong. Thanks for correcting me.\n\nJeongHyeon, I am not sure why you are experiencing EINVAL.",
      "parentUuid": "e63d819e_a36d4099",
      "revId": "7ea39fc118f457fa0fb78c07005e832ffc42de05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03d58167_5e62c085",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1863406
      },
      "writtenOn": "2023-05-16T05:56:35Z",
      "side": 1,
      "message": "Me too.\nMaybe I make a mistake. I will let you know after checking more.",
      "parentUuid": "05f865a5_be7dcc18",
      "revId": "7ea39fc118f457fa0fb78c07005e832ffc42de05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ebeec49e_abe5751d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1863406
      },
      "writtenOn": "2023-05-17T06:11:40Z",
      "side": 1,
      "message": "I check one more time, I mistake `fopen` option.\nI\u0027ll upload new patch to libavb module and then abandon this patch.\n\nJiyoung, Thank you for your help.",
      "parentUuid": "03d58167_5e62c085",
      "revId": "7ea39fc118f457fa0fb78c07005e832ffc42de05",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}