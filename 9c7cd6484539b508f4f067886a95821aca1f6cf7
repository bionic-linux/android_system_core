{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d14fcd8b_61ebeb50",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2022-08-31T13:28:21Z",
      "side": 1,
      "message": "unrelated, but looking at 1600+ lines of test written in shell script doesn\u0027t feel like I am living in 21st century. ðŸ˜ž\n\nI wish we had written this in a modern language and using a test framework. ",
      "revId": "9c7cd6484539b508f4f067886a95821aca1f6cf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7e5ca49c_e5fec31c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2022-09-01T08:48:59Z",
      "side": 1,
      "message": "yeah writing this in python might be a tad more simple (friendlier string, int, list type) I was thinking about rewriting this all from scratch previously, but this test is basically a bunch of adb commands glued together, rewriting in python would pretty much end up with similar code.",
      "parentUuid": "d14fcd8b_61ebeb50",
      "revId": "9c7cd6484539b508f4f067886a95821aca1f6cf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "edf8c1b0_4d0dab11",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2022-09-01T09:10:23Z",
      "side": 1,
      "message": "\u003e end up with similar code\n\nWith python, perhaps yes, but I was expecting a Junit test that uses tradefed where access to adb, etc are well abstracted.\n\nAnyway, I think this is P3 or even P4.",
      "parentUuid": "7e5ca49c_e5fec31c",
      "revId": "9c7cd6484539b508f4f067886a95821aca1f6cf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "db0dc520_653eb37e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2022-09-01T13:48:31Z",
      "side": 1,
      "message": "My experience with writing Java hostside tests are pretty bad TBH... the abstraction is weird and inconsistent, sometimes errors are thrown, sometimes errors are returned as exit code. IO related try-catch blocks are a nightmare to write, and adb-related abstractions are almost always related to IO.\n\nI\u0027m also traumatized by the constant 30s~2min *warm up* cost of `atest`. That\u0027s why I prefer python/bash/gtest. I\u0027d rather just do `subprocess.run([\u0027adb\u0027, ...])` than deal with Java *host* side test ðŸ˜‚",
      "parentUuid": "edf8c1b0_4d0dab11",
      "revId": "9c7cd6484539b508f4f067886a95821aca1f6cf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "51368613_ba92568d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-09-01T16:45:40Z",
      "side": 1,
      "message": "(yeah, much as i hate shell scripts, this is exactly why i own a handful of scripts like this [albeit none nearly as large as this] --- junit buys me nothing and slows me down. the ndk folks prefer python for this kind of thing, but they have more python experts -- and have invested in things like custom parallel python runner infrastructure -- which tips the scales in favor of python there.)",
      "parentUuid": "db0dc520_653eb37e",
      "revId": "9c7cd6484539b508f4f067886a95821aca1f6cf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8973687a_0e1690d2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2022-09-01T23:48:08Z",
      "side": 1,
      "message": "Poor Java, you are not welcomed anywhere...",
      "parentUuid": "51368613_ba92568d",
      "revId": "9c7cd6484539b508f4f067886a95821aca1f6cf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fd7c232f_c2277fbf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-09-02T00:01:12Z",
      "side": 1,
      "message": "heh, don\u0027t get me wrong ... i love the java language. but i hate the startup time, and i hate the build time, and i hate our build system\u0027s overhead, and i hate junit\u0027s overhead (one of the first things i did when i was on the libcore team was write a replacement test runner so i did have to sit and wait for junit to serially enumerate all the tests before it started running any!). whereas i loathe python the language, and don\u0027t usually have anything nice to say about shell scripts more than a few lines long, but i really can\u0027t argue with their startup time :-(\n\nwhat i really want is something that\u0027s roughly java, but with python-like startup. sadly, i fear i\u0027ll have to write that myself after i retire. until then, i\u0027ll grudgingly admit that sometimes even sh isn\u0027t always the worst tool for the job!",
      "parentUuid": "8973687a_0e1690d2",
      "revId": "9c7cd6484539b508f4f067886a95821aca1f6cf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "94ce9ea5_f98afffc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-09-02T00:04:20Z",
      "side": 1,
      "message": "(of course, thanks to our .par file stuff, we\u0027ve managed to bring all the pain of java builds to python! another reason to prefer sh for tools in our tree... /facepalm)",
      "parentUuid": "fd7c232f_c2277fbf",
      "revId": "9c7cd6484539b508f4f067886a95821aca1f6cf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e999b87_e1f08610",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2022-09-02T00:46:23Z",
      "side": 1,
      "message": "hehe, that was a joke, and I didn\u0027t mean to be serious ðŸ˜Š\n\nYeah, I understand that it\u0027s atest and android build system that contribute the most to the delay (but I didn\u0027t know that junit has such an overhead!).\n\nThere are some tricks to eliminate or significantly reduce the delay (e.g. executing the test from where it is built under the out directory, etc.), but it would be nice if we don\u0027t need to invent such a workaround.\n\nsh the language is not bad, tbh. it sometimes is fun writing a sh script. but what I don\u0027t like with this very test is that (1) it\u0027s a mixture of tests and test framework.",
      "parentUuid": "94ce9ea5_f98afffc",
      "revId": "9c7cd6484539b508f4f067886a95821aca1f6cf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0105c37d_89616985",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2022-09-02T00:46:23Z",
      "side": 1,
      "message": "Yi-yo, feel free to submit this. The thread shouldn\u0027t block the submission.",
      "revId": "9c7cd6484539b508f4f067886a95821aca1f6cf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68509e16_cf7474fe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2022-09-02T01:30:39Z",
      "side": 1,
      "message": "(2) it\u0027s impossible to run a specific test, and (3) there are too many assertions in a test (count the number of the die calls ...)",
      "parentUuid": "2e999b87_e1f08610",
      "revId": "9c7cd6484539b508f4f067886a95821aca1f6cf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8bbafd87_af4a6a46",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2022-09-02T10:50:38Z",
      "side": 1,
      "message": "yeah for (2) I used to edit the test script locally if I need to test some specific scenario, but the situation has improved quite a lot recently.\nThis test used to run for \u003e20m on physical device (\u003e5m on virtual). I\u0027ve optimized it to the point that physical device now takes 5~10m and virtual device \u003c2m to run end-to-end, so I\u0027m pretty comfortable to just run the full test each time.\n\n(3) Not having non-fatal error used to bother me, but not as much anymore, because I\u0027ve optimized this _integration_ test to the point that, for better or worse, each stage of the test relies on side effects from previous stage. so if any test error happened, then it\u0027s probably a better idea to just bail out (hence the first change in this chain is to refactor the cleanup hook) than continue testing other aspects of the system, because each test assumes previous test completed successfully. This makes the test highly dependent on each other, but saves quite a lot of test runtime...",
      "parentUuid": "68509e16_cf7474fe",
      "revId": "9c7cd6484539b508f4f067886a95821aca1f6cf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72b3d518_f0bdf3c7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2022-09-02T10:50:38Z",
      "side": 1,
      "message": "no worries I\u0027m not blocked by this thread. The reason i haven\u0027t submit this yet is because I\u0027m slowly submitting this huge stack in multiple stages, and flaky presubmit tests are making this harder.",
      "parentUuid": "0105c37d_89616985",
      "revId": "9c7cd6484539b508f4f067886a95821aca1f6cf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b44b5458_425d8190",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2022-09-02T11:05:15Z",
      "side": 1,
      "message": "\u003e .par ... pain ...\n\nI actually liked the .par file format. It doesn\u0027t force me to do crazy stuff like compiling the entire tradefed just to execute a tiny script. For local dev I can still execute the .py file directly for fast turn around time. For CI test/build, I can just assume python3 is always supported. yeah I think the real value of distributing programs with .par file is to stop people from asking me to write py2 compatible code",
      "parentUuid": "8bbafd87_af4a6a46",
      "revId": "9c7cd6484539b508f4f067886a95821aca1f6cf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "42a1478a_dfac025f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-09-02T15:31:10Z",
      "side": 1,
      "message": "\u003e but I didn\u0027t know that junit has such an overhead!\n\ni don\u0027t know whether they\u0027ve fixed it since, but 10+ years ago when i worked on libcore, it would serially load every class you mentioned, running all the static initializers, and using reflection to find the individual tests. i don\u0027t think most people noticed, but because libcore had *thousands* of test classes (suites), it took a minute or two before it was doing any useful work. (and, as you\u0027ll remember, devices were single core and much slower back then!)\n\n\u003e sh the language is not bad, tbh. it sometimes is fun writing a sh script. but what I don\u0027t like with this very test is that (1) it\u0027s a mixture of tests and test framework.\n\nwell, the obvious answer to that is to write more sh tests and factor out the framework :-)\n\nbtw, if you want an easy way to write tests for command-line tools, see https://android.googlesource.com/platform/system/libziparchive/+/refs/heads/master/cli-tests/unzip.test based on https://android.googlesource.com/platform/system/core/+/refs/heads/master/cli-test/. it\u0027s inspired by the way mksh and toybox tests work but (i hope) a lot more readable. but since almost all our command-line tools end up in toybox anyway, i haven\u0027t had many opportunities to use it.\n\n\u003e This test used to run for \u003e20m on physical device (\u003e5m on virtual). I\u0027ve optimized it to the point that physical device now takes 5~10m and virtual device \u003c2m to run end-to-end, so I\u0027m pretty comfortable to just run the full test each time.\n\nnice! (that makes me wish we could say \"virtual devices only\" in TEST_MAPPING and add this to TEST_MAPPING!)\n\n\u003e I actually liked the .par file format\n\noh, yeah, the _idea_ is useful. but the cost of our build system makes it unpleasant. i\u0027m grumpy every time i run external_updater, for example.\n\n\u003e For local dev I can still execute the .py file directly for fast turn around time\n\nyeah, similar to how i have an `sh_test` in my .bp file for some of my shell scripts, but i run them directly myself. what i don\u0027t like about that is that it means we expert test owners get a significantly better experience by deliberately avoiding the infrastructure... that seems like a perverse incentive to me, and i\u0027d like to see us improve the infrastructure to the point where even those of us who value our time and know enough to come up with our own tricks use it anyway...",
      "parentUuid": "b44b5458_425d8190",
      "revId": "9c7cd6484539b508f4f067886a95821aca1f6cf7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}