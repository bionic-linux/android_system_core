{
  "comments": [
    {
      "key": {
        "uuid": "d5a4eb30_7a9577d0",
        "filename": "fs_mgr/libdm/.clang-format",
        "patchSetId": 3
      },
      "lineNbr": 1,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-06-12T14:31:32Z",
      "side": 1,
      "message": "nit: since fs_mgr is primarily a part of init, perhaps this should be ../../../init/.clang-format ?",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 21
      },
      "revId": "da9bf6d4680ee8452eeb67347a8e99aa095e75bb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13d67429_f53e773a",
        "filename": "fs_mgr/libdm/.clang-format",
        "patchSetId": 3
      },
      "lineNbr": 1,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-06-12T15:57:46Z",
      "side": 1,
      "message": "Init uses clang-format-4.",
      "parentUuid": "d5a4eb30_7a9577d0",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 21
      },
      "revId": "da9bf6d4680ee8452eeb67347a8e99aa095e75bb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53ed25d5_24425df9",
        "filename": "fs_mgr/libdm/.clang-format",
        "patchSetId": 3
      },
      "lineNbr": 1,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-06-12T17:11:12Z",
      "side": 1,
      "message": "I know, but fs_mgr/.clang-format links to the init version, not to clang-format-4.",
      "parentUuid": "13d67429_f53e773a",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 21
      },
      "revId": "da9bf6d4680ee8452eeb67347a8e99aa095e75bb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4426d55_058f0527",
        "filename": "fs_mgr/libdm/.clang-format",
        "patchSetId": 3
      },
      "lineNbr": 1,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-06-12T17:17:13Z",
      "side": 1,
      "message": "Oh hm, that\u0027s probably strange itself.  The init version just symlinks to system/core/.clang-format-4 though.",
      "parentUuid": "53ed25d5_24425df9",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 21
      },
      "revId": "da9bf6d4680ee8452eeb67347a8e99aa095e75bb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4eb28f6a_32de9674",
        "filename": "fs_mgr/libdm/.clang-format",
        "patchSetId": 3
      },
      "lineNbr": 1,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-06-12T17:42:29Z",
      "side": 1,
      "message": "I viewed it as documentation and intent (match init formatting).\n\nBesides, this specific file is not required, it will inherit up the tree to the one at system/core/fs_mgr/.clang-format anyways. I\u0027d actually recommend removing it from the CL.\n\nNow, do we view the (now ... odd? ...) link from fs_mgr/.clang-format to ../init/.clang-format as acceptable?",
      "parentUuid": "e4426d55_058f0527",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 21
      },
      "revId": "da9bf6d4680ee8452eeb67347a8e99aa095e75bb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eeeb2b40_1fbf8e06",
        "filename": "fs_mgr/libdm/.clang-format",
        "patchSetId": 3
      },
      "lineNbr": 1,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-06-12T17:46:12Z",
      "side": 1,
      "message": "I\u0027m okay dropping these.  I\u0027m okay dropping the fs_mgr/.clang-format too.",
      "parentUuid": "4eb28f6a_32de9674",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 21
      },
      "revId": "da9bf6d4680ee8452eeb67347a8e99aa095e75bb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa62487d_b6d0ca32",
        "filename": "fs_mgr/libdm/.clang-format",
        "patchSetId": 3
      },
      "lineNbr": 1,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2018-06-12T19:44:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eeeb2b40_1fbf8e06",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 21
      },
      "revId": "da9bf6d4680ee8452eeb67347a8e99aa095e75bb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b41d1cc7_b7e017c5",
        "filename": "fs_mgr/libdm/dm_table.cpp",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-06-12T14:31:32Z",
      "side": 1,
      "message": "const DmTarger\u0026 /* target */ for unused\n\n(audit others)",
      "range": {
        "startLine": 32,
        "startChar": 24,
        "endLine": 32,
        "endChar": 46
      },
      "revId": "da9bf6d4680ee8452eeb67347a8e99aa095e75bb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec8bea2c_89bd3056",
        "filename": "fs_mgr/libdm/dm_table.cpp",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2018-06-12T19:44:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b41d1cc7_b7e017c5",
      "range": {
        "startLine": 32,
        "startChar": 24,
        "endLine": 32,
        "endChar": 46
      },
      "revId": "da9bf6d4680ee8452eeb67347a8e99aa095e75bb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e9b3aa7_80f0f19c",
        "filename": "fs_mgr/libdm/include/dm_table.h",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2018-06-12T15:28:07Z",
      "side": 1,
      "message": "This (and below) will probably have to change to |std::unique_ptr\u003cDmTarget\u003e\u0026\u0026 target| or something similar. It looks tricky to implement otherwise.",
      "range": {
        "startLine": 39,
        "startChar": 9,
        "endLine": 39,
        "endChar": 18
      },
      "revId": "da9bf6d4680ee8452eeb67347a8e99aa095e75bb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "972bbeb2_23971ca8",
        "filename": "fs_mgr/libdm/include/dm_table.h",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2018-06-12T19:44:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6e9b3aa7_80f0f19c",
      "range": {
        "startLine": 39,
        "startChar": 9,
        "endLine": 39,
        "endChar": 18
      },
      "revId": "da9bf6d4680ee8452eeb67347a8e99aa095e75bb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "32fc8eec_98f591b5",
        "filename": "fs_mgr/libdm/include/dm_table.h",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2018-06-12T15:28:07Z",
      "side": 1,
      "message": "Is the idea here that you could query an existing table from a device, then remove individual targets?",
      "revId": "da9bf6d4680ee8452eeb67347a8e99aa095e75bb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dcb93cea_5b817ad3",
        "filename": "fs_mgr/libdm/include/dm_table.h",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2018-06-12T19:44:18Z",
      "side": 1,
      "message": "The idea here is you read the table from kernel and create DmTable. Then you add + remove basically allows you to shrink the range for a target and add a different target for it. This table can then be loaded back into kernel and activated.",
      "parentUuid": "32fc8eec_98f591b5",
      "revId": "da9bf6d4680ee8452eeb67347a8e99aa095e75bb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9051b8af_49027450",
        "filename": "fs_mgr/libdm/include/dm_table.h",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-06-12T14:31:32Z",
      "side": 1,
      "message": "size_t instead?\n\nnit: if you are using uint64_t you must include \u003cstdint.h\u003e above.",
      "range": {
        "startLine": 53,
        "startChar": 4,
        "endLine": 53,
        "endChar": 12
      },
      "revId": "da9bf6d4680ee8452eeb67347a8e99aa095e75bb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4db42380_9ca09559",
        "filename": "fs_mgr/libdm/include/dm_table.h",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2018-06-12T15:28:07Z",
      "side": 1,
      "message": "uint64_t seems better, since the maximum size is bounded by the disk size, not address space. (And it\u0027s u64 in dm_target_spec).",
      "parentUuid": "9051b8af_49027450",
      "range": {
        "startLine": 53,
        "startChar": 4,
        "endLine": 53,
        "endChar": 12
      },
      "revId": "da9bf6d4680ee8452eeb67347a8e99aa095e75bb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "202a0017_11a0938e",
        "filename": "fs_mgr/libdm/include/dm_table.h",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2018-06-12T18:56:34Z",
      "side": 1,
      "message": "yes, uint64_t because its also in number of sectors and not size-in-bytes. I\u0027ll include the stdint above though.",
      "parentUuid": "4db42380_9ca09559",
      "range": {
        "startLine": 53,
        "startChar": 4,
        "endLine": 53,
        "endChar": 12
      },
      "revId": "da9bf6d4680ee8452eeb67347a8e99aa095e75bb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed5cd0fe_f5b1aa13",
        "filename": "fs_mgr/libdm/include/dm_target.h",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2018-06-12T15:28:07Z",
      "side": 1,
      "message": "nit: dm_target_spec asks for \"length\" (in 512-byte sectors) instead of \"end\".\n\nv0, v1 etc are uninitialized in this constructor, so version() can have undefined results",
      "revId": "da9bf6d4680ee8452eeb67347a8e99aa095e75bb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9832a84_c8517a30",
        "filename": "fs_mgr/libdm/include/dm_target.h",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2018-06-12T19:44:18Z",
      "side": 1,
      "message": "length seems right, I\u0027ll add that.",
      "parentUuid": "ed5cd0fe_f5b1aa13",
      "revId": "da9bf6d4680ee8452eeb67347a8e99aa095e75bb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26d05d72_7f9d53fc",
        "filename": "fs_mgr/libdm/include/dm_target.h",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-06-12T14:31:32Z",
      "side": 1,
      "message": "explicit (for all single argument constructors)",
      "range": {
        "startLine": 37,
        "startChar": 4,
        "endLine": 37,
        "endChar": 12
      },
      "revId": "da9bf6d4680ee8452eeb67347a8e99aa095e75bb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3bfbd168_ee1fb0f4",
        "filename": "fs_mgr/libdm/include/dm_target.h",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-06-12T14:31:32Z",
      "side": 1,
      "message": "these two can be part of the initializer list.",
      "range": {
        "startLine": 43,
        "startChar": 8,
        "endLine": 43,
        "endChar": 26
      },
      "revId": "da9bf6d4680ee8452eeb67347a8e99aa095e75bb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6dcd22af_397bc0d0",
        "filename": "fs_mgr/libdm/include/dm_target.h",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2018-06-12T19:44:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3bfbd168_ee1fb0f4",
      "range": {
        "startLine": 43,
        "startChar": 8,
        "endLine": 43,
        "endChar": 26
      },
      "revId": "da9bf6d4680ee8452eeb67347a8e99aa095e75bb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5311f62_cc0000c2",
        "filename": "fs_mgr/libdm/include/dm_target.h",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2018-06-12T15:28:07Z",
      "side": 1,
      "message": "It might be easier to have a non-virtual Serialize that handles the base dm_target_spec stuff and then add a protected pure virtual method that returns the target-specific payload.",
      "revId": "da9bf6d4680ee8452eeb67347a8e99aa095e75bb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "729cfc50_cc0c9be0",
        "filename": "fs_mgr/libdm/include/dm_target.h",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2018-06-12T18:56:34Z",
      "side": 1,
      "message": "I haven\u0027t really finalized this yet. I am yet to expand this to a target_spec string. If the sector boundaries are common in how they are specified in the target_spec for *all* targets, I\u0027ll certainly do what you said. For now though, this is unimplemented and we can change it that way for when we start adding implementation around targets.",
      "parentUuid": "a5311f62_cc0000c2",
      "revId": "da9bf6d4680ee8452eeb67347a8e99aa095e75bb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7258191_62cbd71f",
        "filename": "fs_mgr/libdm/include/dm_target.h",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2018-06-12T19:44:18Z",
      "side": 1,
      "message": "the target_spec thing will also probably come with its own constructor since we will also have read it from the kernel and it will carry all the information about an *active* target. Oh, and wouldn\u0027t the pure virtual function render this class abstract and unusable. We still do want to be able to use the class as-is for simply reading the kernel-supported targets for example.",
      "parentUuid": "729cfc50_cc0c9be0",
      "revId": "da9bf6d4680ee8452eeb67347a8e99aa095e75bb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}