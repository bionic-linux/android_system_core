{
  "comments": [
    {
      "key": {
        "uuid": "6394aac1_c1e7e628",
        "filename": "include/utils/Unicode.h",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1002951
      },
      "writtenOn": "2015-04-10T16:40:30Z",
      "side": 1,
      "message": "return -1 on invliad surrogate character used here.",
      "revId": "35f8288141c2a25445cbb7da1155d08d2f14195b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "636d8ab3_661373e1",
        "filename": "include/utils/Unicode.h",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1022037
      },
      "writtenOn": "2015-04-10T17:41:21Z",
      "side": 1,
      "message": "No, coming from UTF-32, \"such as\" is better. In UTF-32, any surrogate is invalid, and any value \u003e10FFFF. In UTF-16, only *unpaired* surrogates are invalid, everything else is fine.",
      "parentUuid": "6394aac1_c1e7e628",
      "revId": "35f8288141c2a25445cbb7da1155d08d2f14195b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "83999efb_a263bac6",
        "filename": "include/utils/Unicode.h",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1022037
      },
      "writtenOn": "2015-04-10T16:08:21Z",
      "side": 1,
      "message": ", that is, it contains unpaired surrogates,",
      "range": {
        "startLine": 107,
        "startChar": 3,
        "endLine": 107,
        "endChar": 45
      },
      "revId": "35f8288141c2a25445cbb7da1155d08d2f14195b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2368f29d_ed7dade2",
        "filename": "libutils/Unicode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 416,
      "author": {
        "id": 1022037
      },
      "writtenOn": "2015-04-10T16:08:21Z",
      "side": 1,
      "message": "FYI You could use ICU U16_IS_LEAD(*src) and U16_IS_TRAIL(*++src).\nfrom unicode/utf16.h",
      "range": {
        "startLine": 416,
        "startChar": 12,
        "endLine": 416,
        "endChar": 37
      },
      "revId": "35f8288141c2a25445cbb7da1155d08d2f14195b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3617abc_3a651d46",
        "filename": "libutils/Unicode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 416,
      "author": {
        "id": 1002951
      },
      "writtenOn": "2015-04-10T16:40:30Z",
      "side": 1,
      "message": "Nothing else in this file is using unicode/utf16.h, doesnt it make more sense to switch to that as part of some larger rewrite?",
      "parentUuid": "2368f29d_ed7dade2",
      "range": {
        "startLine": 416,
        "startChar": 12,
        "endLine": 416,
        "endChar": 37
      },
      "revId": "35f8288141c2a25445cbb7da1155d08d2f14195b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "636d8ab3_86cecfda",
        "filename": "libutils/Unicode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 416,
      "author": {
        "id": 1022037
      },
      "writtenOn": "2015-04-10T17:41:21Z",
      "side": 1,
      "message": "That\u0027s fine with me, I did mark it as FYI. I thought it would be nice to use a macro which is more readable than these expressions.",
      "parentUuid": "e3617abc_3a651d46",
      "range": {
        "startLine": 416,
        "startChar": 12,
        "endLine": 416,
        "endChar": 37
      },
      "revId": "35f8288141c2a25445cbb7da1155d08d2f14195b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3243be82_7e1d714e",
        "filename": "libutils/Unicode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 420,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2014-01-23T11:44:14Z",
      "side": 1,
      "message": "shouldn\u0027t this be src+\u003d2 ?",
      "range": {
        "startLine": 420,
        "startChar": 16,
        "endLine": 420,
        "endChar": 19
      },
      "revId": "35f8288141c2a25445cbb7da1155d08d2f14195b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3243be82_5e223588",
        "filename": "libutils/Unicode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 420,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2014-01-23T11:44:37Z",
      "side": 1,
      "message": "Oh, never mind.",
      "parentUuid": "3243be82_7e1d714e",
      "range": {
        "startLine": 420,
        "startChar": 16,
        "endLine": 420,
        "endChar": 19
      },
      "revId": "35f8288141c2a25445cbb7da1155d08d2f14195b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f265a62a_08d517fa",
        "filename": "libutils/Unicode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 420,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-01-24T03:08:26Z",
      "side": 1,
      "message": "yeah, might have been clearer as *(src + 1) in the if.",
      "parentUuid": "3243be82_5e223588",
      "range": {
        "startLine": 420,
        "startChar": 16,
        "endLine": 420,
        "endChar": 19
      },
      "revId": "35f8288141c2a25445cbb7da1155d08d2f14195b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "72b456b0_42acf63b",
        "filename": "libutils/Unicode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 422,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2014-01-24T03:08:26Z",
      "side": 1,
      "message": "utf16_to_utf8 doesn\u0027t check that it\u0027s receiving valid surrogate pairs. this change makes String8\u0027s constructors return the empty string for input with invalid surrogate pairs.",
      "revId": "35f8288141c2a25445cbb7da1155d08d2f14195b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "123a3aa9_70c6ee34",
        "filename": "libutils/Unicode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 422,
      "author": {
        "id": 1003957
      },
      "writtenOn": "2014-02-07T18:30:48Z",
      "side": 1,
      "message": "This is a bad change.  It could break code that is unknowingly transporting invalid surrogate pairs.\n\nWe should tolerate the problem as before.  And it absolutely must remain consistent with the behavior of utf16_to_utf8.",
      "parentUuid": "72b456b0_42acf63b",
      "revId": "35f8288141c2a25445cbb7da1155d08d2f14195b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "636d8ab3_86e7af54",
        "filename": "libutils/Unicode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 422,
      "author": {
        "id": 1022037
      },
      "writtenOn": "2015-04-10T17:41:21Z",
      "side": 1,
      "message": "I am agnostic about whether it\u0027s ok to change this function to report an error rather than guess a value for it.\n\nThe comment would be better as\n// illegal: unpaired surrogate\n\nActually, there is a bug: As is, the new version only detects that a lead surrogate is not followed by a trail surrogate. It does not detect that a trail surrogate was encountered where a single or lead unit should be.\n\nWith ICU macros, I would change this to the following which optimizes for the non-surrogate path. Feel free to rewrite into vanilla expressions. Note that the first macro detects either kind of surrogate, and the second quickly disambiguates (single-bit test).\n\nif (U16_IS_SURROGATE(*src)) {\n  if (U16_IS_SURROGATE_LEAD(*src) \u0026\u0026 U16_IS_TRAIL(*++src) {\n    // A UTF-16 surrogate pair always maps to 4 bytes in UTF-8.\n    ret +\u003d 4;\n    src++;\n  } else {\n    // illegal: unpaired surrogate\n    return -1;\n  }\n}",
      "parentUuid": "123a3aa9_70c6ee34",
      "revId": "35f8288141c2a25445cbb7da1155d08d2f14195b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4365e6c2_7d8a33e9",
        "filename": "libutils/tests/Unicode_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 1022037
      },
      "writtenOn": "2015-04-10T16:08:21Z",
      "side": 1,
      "message": "I don\u0027t understand where the +1 comes from.",
      "revId": "35f8288141c2a25445cbb7da1155d08d2f14195b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e356daec_62329ba2",
        "filename": "libutils/tests/Unicode_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 146,
      "author": {
        "id": 1022037
      },
      "writtenOn": "2015-04-10T17:41:21Z",
      "side": 1,
      "message": "This only tests for an unpaired lead surrogate. Please add a test that uses an unpaired trail surrogate (DC00..DFFF).",
      "range": {
        "startLine": 146,
        "startChar": 20,
        "endLine": 146,
        "endChar": 47
      },
      "revId": "35f8288141c2a25445cbb7da1155d08d2f14195b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}