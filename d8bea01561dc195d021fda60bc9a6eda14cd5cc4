{
  "comments": [
    {
      "key": {
        "uuid": "c53d5cc9_b9f8e429",
        "filename": "init/devices.cpp",
        "patchSetId": 11
      },
      "lineNbr": 2,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-05-25T05:25:53Z",
      "side": 1,
      "message": "or just undo this nonsense and go back to only having the initial creation date.",
      "range": {
        "startLine": 2,
        "startChar": 17,
        "endLine": 2,
        "endChar": 26
      },
      "revId": "d8bea01561dc195d021fda60bc9a6eda14cd5cc4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d90abd4_43ead528",
        "filename": "init/devices.cpp",
        "patchSetId": 11
      },
      "lineNbr": 2,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2017-05-25T16:31:07Z",
      "side": 1,
      "message": "Will do.",
      "parentUuid": "c53d5cc9_b9f8e429",
      "range": {
        "startLine": 2,
        "startChar": 17,
        "endLine": 2,
        "endChar": 26
      },
      "revId": "d8bea01561dc195d021fda60bc9a6eda14cd5cc4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "256d5a29_5b1bf9db",
        "filename": "init/devices.cpp",
        "patchSetId": 11
      },
      "lineNbr": 107,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-05-25T05:25:53Z",
      "side": 1,
      "message": "CHECK(!name_.empty()) to avoid npos \u003d\u003d 0 - 1 leading to pop_back on an empty string?",
      "revId": "d8bea01561dc195d021fda60bc9a6eda14cd5cc4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "42cb7698_5b57e5c0",
        "filename": "init/devices.cpp",
        "patchSetId": 11
      },
      "lineNbr": 107,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2017-05-25T16:31:07Z",
      "side": 1,
      "message": "These lines must start with either \"/dev\" or \"/sys\" given how they\u0027re set up in the parser, so I can add a check for either one of those or just \"/\".\n\nDCHECK maybe?  Unless the parser code changes, there\u0027s no way for this to be false at runtime.",
      "parentUuid": "256d5a29_5b1bf9db",
      "revId": "d8bea01561dc195d021fda60bc9a6eda14cd5cc4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e037c9a1_685f771d",
        "filename": "init/devices.cpp",
        "patchSetId": 11
      },
      "lineNbr": 107,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-05-25T16:37:47Z",
      "side": 1,
      "message": "or just flip the ifs, so you check npos first?",
      "parentUuid": "42cb7698_5b57e5c0",
      "revId": "d8bea01561dc195d021fda60bc9a6eda14cd5cc4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f37ce0f_11653fd9",
        "filename": "init/devices.cpp",
        "patchSetId": 11
      },
      "lineNbr": 107,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2017-05-25T16:44:14Z",
      "side": 1,
      "message": "if (wildcard_position !\u003d std::string::npos) {\n  if (wildcard_position \u003d\u003d name_.length() - 1) {\n    prefix_ \u003d true;\n    name.pop_back();\n  } else {\n    wildcard_ \u003d true;\n}\n\nWorks for me.",
      "parentUuid": "e037c9a1_685f771d",
      "revId": "d8bea01561dc195d021fda60bc9a6eda14cd5cc4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cfe9d7c6_e9fcc9fb",
        "filename": "init/devices.cpp",
        "patchSetId": 11
      },
      "lineNbr": 137,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-05-25T05:25:53Z",
      "side": 1,
      "message": "worth logging failures?",
      "range": {
        "startLine": 136,
        "startChar": 0,
        "endLine": 137,
        "endChar": 42
      },
      "revId": "d8bea01561dc195d021fda60bc9a6eda14cd5cc4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9d60ea63_465f0f81",
        "filename": "init/devices.cpp",
        "patchSetId": 11
      },
      "lineNbr": 137,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2017-05-25T16:31:07Z",
      "side": 1,
      "message": "Hm maybe.  These are very not likely to fail unless something major is wrong with the build, but that makes logging the failures trivial anyway.  I\u0027ll add it.  Same with the below.",
      "parentUuid": "cfe9d7c6_e9fcc9fb",
      "range": {
        "startLine": 136,
        "startChar": 0,
        "endLine": 137,
        "endChar": 42
      },
      "revId": "d8bea01561dc195d021fda60bc9a6eda14cd5cc4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cc6416b8_b5c9ac9c",
        "filename": "init/devices.cpp",
        "patchSetId": 11
      },
      "lineNbr": 170,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-05-25T05:25:53Z",
      "side": 1,
      "message": "report failures?",
      "revId": "d8bea01561dc195d021fda60bc9a6eda14cd5cc4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44c15d9c_835e787a",
        "filename": "init/firmware_handler.cpp",
        "patchSetId": 11
      },
      "lineNbr": 77,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-05-25T05:25:53Z",
      "side": 1,
      "message": "explain why this isn\u0027t just a while (IsBooting())?",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 77,
        "endChar": 30
      },
      "revId": "d8bea01561dc195d021fda60bc9a6eda14cd5cc4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eead6632_09d21834",
        "filename": "init/firmware_handler.cpp",
        "patchSetId": 11
      },
      "lineNbr": 77,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2017-05-25T16:31:07Z",
      "side": 1,
      "message": "Long story.  I should (and will for the next patchset) just revert this back to how it is checked in now, and have this file only move the code from devices.cpp instead of trying to clean it up (I wanted to get rid of the goto, but alas...).\n\nThe thought here was that we should check if we\u0027re booting, try to load the firmware, then if we were booting wait and loop.  The check for booting first has to happen to prevent a race where we fail to load the firmware (because we haven\u0027t mounted the appropriate FS\u0027s), then we mount them (happens in parallel), then we check IsBooting() and believe that we were not booting and therefore do not retry.\n\nAnyway...  All of this is wrong.  IsBooting() is wrong.  This should all be a system property.  We have an efficient WaitForProperty() which solves both this issue an the below one.  \n\nAnd this only even applies to legacy devices anymore.  With treble asking that /system and /vendor are mounted early, the first pass check to LoadFirmware() before checking if we\u0027ve mounted the right filesystems (erroneously called booting), will always find the firmwares if they\u0027re available.\n\nI digress.  tl;dr: I\u0027ll move this back to exactly the original code from devices.cpp (+/- style changes, e.g. LoadFirmware() not load_firmware()) for this CL and follow up in the future with a CL to do this without the sleep_for or the while loop (goto), etc.",
      "parentUuid": "44c15d9c_835e787a",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 77,
        "endChar": 30
      },
      "revId": "d8bea01561dc195d021fda60bc9a6eda14cd5cc4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6dc1f99f_fae6ab50",
        "filename": "init/firmware_handler.cpp",
        "patchSetId": 11
      },
      "lineNbr": 91,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-05-25T05:25:53Z",
      "side": 1,
      "message": "that\u0027s a long sleep given the aim of this change.",
      "revId": "d8bea01561dc195d021fda60bc9a6eda14cd5cc4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a6be299_430992ab",
        "filename": "init/firmware_handler.cpp",
        "patchSetId": 11
      },
      "lineNbr": 91,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2017-05-25T16:31:07Z",
      "side": 1,
      "message": "See above.",
      "parentUuid": "6dc1f99f_fae6ab50",
      "revId": "d8bea01561dc195d021fda60bc9a6eda14cd5cc4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab2e2fa5_37913e68",
        "filename": "init/init_parser.h",
        "patchSetId": 11
      },
      "lineNbr": 69,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-05-25T05:25:53Z",
      "side": 1,
      "message": "TODO?",
      "revId": "d8bea01561dc195d021fda60bc9a6eda14cd5cc4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e05c5758_c6629738",
        "filename": "init/init_parser.h",
        "patchSetId": 11
      },
      "lineNbr": 69,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2017-05-25T16:31:07Z",
      "side": 1,
      "message": "Will add.  We don\u0027t even need the singleton in init anymore either actually.  The changes for it aren\u0027t super pretty yet, but probably better than having this as a singleton, so I should probably just push that.",
      "parentUuid": "ab2e2fa5_37913e68",
      "revId": "d8bea01561dc195d021fda60bc9a6eda14cd5cc4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3353bbc7_509cdbbb",
        "filename": "init/uevent_listener.cpp",
        "patchSetId": 11
      },
      "lineNbr": 129,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-05-25T05:25:53Z",
      "side": 1,
      "message": "what should we do if the openat fails?",
      "revId": "d8bea01561dc195d021fda60bc9a6eda14cd5cc4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "595dc942_70b92a38",
        "filename": "init/uevent_listener.cpp",
        "patchSetId": 11
      },
      "lineNbr": 129,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2017-05-25T16:31:07Z",
      "side": 1,
      "message": "I think it\u0027s designed to fail and for us to ignore the error.  We don\u0027t check if a \u0027uevent\u0027 file exists then try to open it, we just try to open it, and it\u0027s not necessarily the case that all directories in /sys have a uevent file in them.\n\nWe could add a checks to see if a uevent file does exist and then see if we fail this openat(), but I can\u0027t imagine that we have any good recovery steps at that point either.\n\nIn any case, this code is coming up (mostly) unchanged from devices.cpp, so I think for this CL itself, keeping this behavior is fine?",
      "parentUuid": "3353bbc7_509cdbbb",
      "revId": "d8bea01561dc195d021fda60bc9a6eda14cd5cc4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc4fc0f7_f1875022",
        "filename": "init/uevent_listener.cpp",
        "patchSetId": 11
      },
      "lineNbr": 129,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-05-25T16:37:47Z",
      "side": 1,
      "message": "sgtm",
      "parentUuid": "595dc942_70b92a38",
      "revId": "d8bea01561dc195d021fda60bc9a6eda14cd5cc4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}