{
  "comments": [
    {
      "key": {
        "uuid": "486081c3_575e837c",
        "filename": "adb/pairing_connection/include/adb/pairing/pairing_connection.h",
        "patchSetId": 11
      },
      "lineNbr": 61,
      "author": {
        "id": 1010050
      },
      "writtenOn": "2020-02-20T06:47:42Z",
      "side": 1,
      "message": "do you want to say something about which thread this will be called on, since that may affect client thread safety requirements?",
      "range": {
        "startLine": 61,
        "startChar": 10,
        "endLine": 61,
        "endChar": 55
      },
      "revId": "1347611b513386eb8f987668acf26be2c5d2c923",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb7dcb94_8e002338",
        "filename": "adb/pairing_connection/include/adb/pairing/pairing_connection.h",
        "patchSetId": 11
      },
      "lineNbr": 61,
      "author": {
        "id": 1128973
      },
      "writtenOn": "2020-02-20T18:51:27Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "486081c3_575e837c",
      "range": {
        "startLine": 61,
        "startChar": 10,
        "endLine": 61,
        "endChar": 55
      },
      "revId": "1347611b513386eb8f987668acf26be2c5d2c923",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b35a641_3f836e74",
        "filename": "adb/pairing_connection/include/adb/pairing/pairing_connection.h",
        "patchSetId": 11
      },
      "lineNbr": 64,
      "author": {
        "id": 1010050
      },
      "writtenOn": "2020-02-20T06:47:42Z",
      "side": 1,
      "message": "I assume if false is returned, cb is never invoked? Probably good to be explicit about it.",
      "range": {
        "startLine": 64,
        "startChar": 56,
        "endLine": 64,
        "endChar": 61
      },
      "revId": "1347611b513386eb8f987668acf26be2c5d2c923",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d7262eb_45c7808c",
        "filename": "adb/pairing_connection/include/adb/pairing/pairing_connection.h",
        "patchSetId": 11
      },
      "lineNbr": 64,
      "author": {
        "id": 1128973
      },
      "writtenOn": "2020-02-20T18:51:27Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2b35a641_3f836e74",
      "range": {
        "startLine": 64,
        "startChar": 56,
        "endLine": 64,
        "endChar": 61
      },
      "revId": "1347611b513386eb8f987668acf26be2c5d2c923",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "33e6dce4_06504e47",
        "filename": "adb/pairing_connection/include/adb/pairing/pairing_connection.h",
        "patchSetId": 11
      },
      "lineNbr": 86,
      "author": {
        "id": 1010050
      },
      "writtenOn": "2020-02-20T06:47:42Z",
      "side": 1,
      "message": "not valid C, I believe?",
      "range": {
        "startLine": 86,
        "startChar": 58,
        "endLine": 86,
        "endChar": 67
      },
      "revId": "1347611b513386eb8f987668acf26be2c5d2c923",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "401a77d4_fce26e52",
        "filename": "adb/pairing_connection/include/adb/pairing/pairing_connection.h",
        "patchSetId": 11
      },
      "lineNbr": 86,
      "author": {
        "id": 1128973
      },
      "writtenOn": "2020-02-20T18:51:27Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "33e6dce4_06504e47",
      "range": {
        "startLine": 86,
        "startChar": 58,
        "endLine": 86,
        "endChar": 67
      },
      "revId": "1347611b513386eb8f987668acf26be2c5d2c923",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "92c8a894_86fa8ba0",
        "filename": "adb/pairing_connection/include/adb/pairing/pairing_header.h",
        "patchSetId": 11
      },
      "lineNbr": 22,
      "author": {
        "id": 1010050
      },
      "writtenOn": "2020-02-20T06:47:42Z",
      "side": 1,
      "message": "these can never change; is that OK?\n\nThat is, at runtime, the client\u0027s values will come from the header it compiled against, not whatever the library\u0027s values are. So there\u0027s no way to implement backward-compatible changes here.  \n\nFor example, any change to kMaxPeerInfoSize would mean the methods that take a PeerInfo may assume a bigger array than the client did (if the size increased in later releases), or conversely the client receiving the callback may assume the a bigger array than the library allocated (if the size decreased in later releases).",
      "revId": "1347611b513386eb8f987668acf26be2c5d2c923",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f031b778_2f98f049",
        "filename": "adb/pairing_connection/include/adb/pairing/pairing_header.h",
        "patchSetId": 11
      },
      "lineNbr": 22,
      "author": {
        "id": 1128973
      },
      "writtenOn": "2020-02-20T18:51:27Z",
      "side": 1,
      "message": "Hmm, I think changing PeerInfo fields to just raw data seems like a better choice here. So everything here can be moved into the implementation file. The only issue I am still debating is how to communicate the max payload size with different versions, or whether to allow updating the payload size at all.",
      "parentUuid": "92c8a894_86fa8ba0",
      "revId": "1347611b513386eb8f987668acf26be2c5d2c923",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5aa80928_e39a17e4",
        "filename": "adb/pairing_connection/include/adb/pairing/pairing_header.h",
        "patchSetId": 11
      },
      "lineNbr": 22,
      "author": {
        "id": 1010050
      },
      "writtenOn": "2020-02-20T18:56:38Z",
      "side": 1,
      "message": "Usual choices - allocate the PeerInfo for the user and have a _destroy method, or have a getPeerInfoSize() method.  \n\nSince it\u0027s an opaque bag of bytes in this part of the API, I don\u0027t really have any idea what\u0027s in it or how you set the values in it (none of the methods I recall seeing filled it in or described it, though I may have just missed it), I can\u0027t give much guidance on what makes sense.  But if a user is expected to be able to copy them or fill them in, you need to give a size out somehow.",
      "parentUuid": "f031b778_2f98f049",
      "revId": "1347611b513386eb8f987668acf26be2c5d2c923",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6a261fa_6a0d1e8b",
        "filename": "adb/pairing_connection/include/adb/pairing/pairing_header.h",
        "patchSetId": 11
      },
      "lineNbr": 22,
      "author": {
        "id": 1128973
      },
      "writtenOn": "2020-02-20T22:27:01Z",
      "side": 1,
      "message": "Ok, after contemplating for a while, this is what I want to do:\n1) put kMaxPeerInfoSize\u003d8192 into pairing_connection.h.\n\nYes, I know that I\u0027ll never be able to change it and that\u0027s okay. It seems like a bigger pain if the client and server has to communicate to figure out mutually agreed upon payload size. \n\nThis PeerInfo struct was initially meant to hold the peer\u0027s public key, and perhaps some small amount of metadata. Later on, we\u0027ll probably migrate to exchanging x.509 certificates. When we come to that point, I\u0027ll expose another set of APIs to grab the certificate, since this pairing connection is already wrapped in the tls connection, we can read it directly from the connection instead of sending it in PeerInfo (X.509 certificate size is unbounded anyways).\n\n\n2) Redefine PeerInfo as the following:\n\nstruct PeerInfo {\n  uint8_t type;\n  uint8_t data[kMaxPeerInfo - 1];\n} __attribute__((packed));\nstatic_assert(sizeof(PeerInfo) \u003d\u003d kMaxPeerInfoSize);\n\n\n3) Add enum for type field in PeerInfo\nenum PeerInfoType : uint8_t {\n  ADB_INFO_RSA_PUB_KEY \u003d 0,\n};",
      "parentUuid": "5aa80928_e39a17e4",
      "revId": "1347611b513386eb8f987668acf26be2c5d2c923",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20ea8b8f_b2e7cbf0",
        "filename": "adb/pairing_connection/include/adb/pairing/pairing_header.h",
        "patchSetId": 11
      },
      "lineNbr": 33,
      "author": {
        "id": 1128973
      },
      "writtenOn": "2020-02-20T18:51:27Z",
      "side": 1,
      "message": "PairingPacketHeader stuff belongs in the cpp file.",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 33,
        "endChar": 0
      },
      "revId": "1347611b513386eb8f987668acf26be2c5d2c923",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6a6f816_7372a720",
        "filename": "adb/pairing_connection/include/adb/pairing/pairing_header.h",
        "patchSetId": 11
      },
      "lineNbr": 33,
      "author": {
        "id": 1010050
      },
      "writtenOn": "2020-02-20T18:56:38Z",
      "side": 1,
      "message": "Thanks for catching - I meant to ask about that, but forgot to cross-check to see if it\u0027s used anywhere in the public methods.",
      "parentUuid": "20ea8b8f_b2e7cbf0",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 33,
        "endChar": 0
      },
      "revId": "1347611b513386eb8f987668acf26be2c5d2c923",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}