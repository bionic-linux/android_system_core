{
  "comments": [
    {
      "key": {
        "uuid": "1e2d8f05_e7de7f34",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-05-31T19:54:16Z",
      "side": 1,
      "message": "I would recommend to wrap the Error data members with a unique_ptr, it will shrink the sizeof(Result\u003cT\u003e) for small Ts.\n\n----\n\nDue to nature of how expected is implemented, it is union of success/error types.\n\nSo by making the error type here, something simple like \u0027Result\u003cint\u003e\u0027 will get very large because it has to also include the std::string. On most system std::string includes small string optimization (inline char[BUFSIZE]).",
      "range": {
        "startLine": 92,
        "startChar": 0,
        "endLine": 94,
        "endChar": 15
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "504428fe_ad05ba88",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-05-31T20:37:51Z",
      "side": 1,
      "message": "std:string should only be 24 bytes on Android (all assuming 64 bit system).  It\u0027s a union between the small string optimization and the long string control information, which is 2 size_t\u0027s and a pointer.\n\nOverall, I figured that these would only ever be stack allocated and discarded immediately after use, so I was okay with the 32 bytes (24 + 8 for errno) on the stack frame.  We could add the unique_ptr, but, assuming the unique_ptr is 16 bytes (a pointer for the pointer itself and a pointer for the deleter), we\u0027d only save 16 bytes but add a new heap allocation for every error returned.",
      "parentUuid": "1e2d8f05_e7de7f34",
      "range": {
        "startLine": 92,
        "startChar": 0,
        "endLine": 94,
        "endChar": 15
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62bc3a5d_2041e8c6",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-06-01T09:43:24Z",
      "side": 1,
      "message": "what do you think about renaming these to message and number so that we can write as follows?\n\nauto result \u003d foo();\nif (!result \u0026\u0026 result.error().number \u003d\u003d ENOENT) { ... }\n\nas_* sounds like functions",
      "range": {
        "startLine": 93,
        "startChar": 0,
        "endLine": 94,
        "endChar": 15
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bee09cdb_716b028e",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-06-03T21:16:59Z",
      "side": 1,
      "message": "+1 to removing as_ prefix\n\nDoesn\u0027t just using \u0027errno\u0027 as a name work, or it is some weird macro thing? \u0027error_number\u0027 also.",
      "parentUuid": "62bc3a5d_2041e8c6",
      "range": {
        "startLine": 93,
        "startChar": 0,
        "endLine": 94,
        "endChar": 15
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6a9a367_6ecf0464",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-06-03T21:16:59Z",
      "side": 1,
      "message": "With respect to the heap allocation, isn\u0027t that already the case due to the \"Error()\" nature? It glues the strerror to the stringstream string in the best case alone.\n---------\n\nIf it\u0027s just a few registers, iirc a parameter can be destacked and scalarized, which causes it to be enregistered for doing function calls across internal boundaries [they don\u0027t need to obey calling conventions, but they are limited by the # of registers].\n\nIf it\u0027s as big as several data types, it becomes increasingly less likely for that optimization to be applied.",
      "parentUuid": "504428fe_ad05ba88",
      "range": {
        "startLine": 92,
        "startChar": 0,
        "endLine": 94,
        "endChar": 15
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8029e309_509bef8f",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-06-03T23:18:57Z",
      "side": 1,
      "message": "I\u0027m okay with this if you think it\u0027s better.  \n\nI don\u0027t think it\u0027s often that we\u0027d pass this as a parameter though; that\u0027s a bit of an anti-pattern.  I\u0027m only ever using this as a return value, in which case RVO puts everything onto the stack of the parent, which is my end goal.\n\nBut you\u0027re right that the error case is already doing a ton of allocations with the stream, or string concatenations, so an extra one isn\u0027t going to hurt.",
      "parentUuid": "b6a9a367_6ecf0464",
      "range": {
        "startLine": 92,
        "startChar": 0,
        "endLine": 94,
        "endChar": 15
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bbb3405b_a9db02c9",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-06-03T23:18:57Z",
      "side": 1,
      "message": "It still suffers from the weird macro thing.  \n\nas_* is bad but it\u0027s pretty much the least bad of what I could think of when I submitted the change to make this use expected\u003c\u003e.  result.error().error_errno was just too much for me to deal with.\n\nIf we want to make this generic, we could use \u0027code\u0027 if we want to decouple this from errno.",
      "parentUuid": "bee09cdb_716b028e",
      "range": {
        "startLine": 93,
        "startChar": 0,
        "endLine": 94,
        "endChar": 15
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12a1c8d7_fa4f7ee9",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-06-04T04:27:30Z",
      "side": 1,
      "message": "I like `code` as well. Done.",
      "parentUuid": "bbb3405b_a9db02c9",
      "range": {
        "startLine": 93,
        "startChar": 0,
        "endLine": 94,
        "endChar": 15
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02a9f9dc_dfb31684",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-06-04T22:16:56Z",
      "side": 1,
      "message": "TL;DR its probably ok as it is for this CL\n\n-------------\n\nPersonally I also have needed to put the \u0027expected\u0027 into a struct sometimes, so size is not unimportant.\n \n  struct NamedResult {\n     std::string filename;\n     std::expected\u003cFileMetadata, errno\u003e;\n  };\n\n  std::vector\u003cNamedResult\u003e lookup_all_filenames(std::vector\u003cstd::string\u003e filenames) {\n    std::vector\u003cNamedResult\u003e res;\n    for (auto name : filenames) {\n      res.push_back( {name, lookup_file_metadata(name)} );\n    }\n    return res;\n  }\n\n  std::expected\u003cFileMetadata, errno\u003e lookup_file_metadata(std::string filename);\n\n  (actual code)\n\n  https://cs.corp.google.com/android/system/iorap/src/inode2filename/inode_result.h?q\u003dinode_result.h\u0026dr\u003dCSs\u0026l\u003d32\n\nThat being I\u0027m not really sure if this argument applies to your \u0027Result\u0027, I defined my own ostream operators to avoid bloating the error case with a heap allocation ever.\n\n-----\n\nMore generally though, I\u0027ve seen people write monadic style code in other languages:\n\n\n  ([1,2,3,4,5], [0,0,3,0,0]) . zip . map(divide) . map(divide) /* -\u003e List\u003cResult\u003cResult\u003cint\u003e\u003e */\n\n  auto divide(int x, int y) {\n    return (y !\u003d 0) ? (success{y}) : failure{};\n  }",
      "parentUuid": "8029e309_509bef8f",
      "range": {
        "startLine": 92,
        "startChar": 0,
        "endLine": 94,
        "endChar": 15
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e76705a_ca3abe83",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-05-31T19:54:16Z",
      "side": 1,
      "message": "Does this do anything? std::ostream\u0026 doesn\u0027t seem to have a \u0027T\u0026\u0026\u0027 overload? I imagine it would be just calling the same exact code as line 98.\n\nhttps://en.cppreference.com/w/cpp/io/basic_ostream/operator_ltlt2 (3)",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 105,
        "endChar": 1
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a633fcdd_76620a73",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-05-31T20:37:51Z",
      "side": 1,
      "message": "Ack; you\u0027re right this doesn\u0027t do anything useful.  It\u0027s going to copy the contents of the string into the stringstream, so it\u0027s not like there\u0027s a meaningful rvalue reference there.",
      "parentUuid": "3e76705a_ca3abe83",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 105,
        "endChar": 1
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d2a1211_9cfa831c",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-06-03T21:16:59Z",
      "side": 1,
      "message": "Maybe we can just remove it then?",
      "parentUuid": "a633fcdd_76620a73",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 105,
        "endChar": 1
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d4b76e5_77026e71",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-06-03T23:18:57Z",
      "side": 1,
      "message": "Agreed, that\u0027s what I meant with \u0027ack\u0027.",
      "parentUuid": "8d2a1211_9cfa831c",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 105,
        "endChar": 1
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a7ffe09_3bf7d058",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-06-04T04:27:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7d4b76e5_77026e71",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 105,
        "endChar": 1
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0027f96e_1736b961",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-05-31T19:54:16Z",
      "side": 1,
      "message": "nit: name is a bit weird. this acts more like an ErrorStream or ErrorBuilder. it especially doesn\u0027t seem to be useful by itself except to terminate via \u0027operator expected\u0027",
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c406de87_2f6eb006",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-05-31T20:37:51Z",
      "side": 1,
      "message": "Right that\u0027s how it\u0027s meant to be used.  See the example in the comment above, it\u0027s so you can do:\n\nreturn Error() \u003c\u003c \"SomeOtherCppFunction(\" \u003c\u003c input \u003c\u003c \") failed\";\n\nWe can of course name it something different than Error, especially if it\u0027d be used more widely.",
      "parentUuid": "0027f96e_1736b961",
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f5c753c_1a08e341",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-06-01T09:43:24Z",
      "side": 1,
      "message": "I think Error() \u003c\u003c \"blah\" is most natural.",
      "parentUuid": "c406de87_2f6eb006",
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2fab15ac_be6a8acf",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-06-03T21:16:59Z",
      "side": 1,
      "message": "Why does it even need to be \u003c\u003c? \n\nI suppose it\u0027s to be similar to LOG(x), but:\n\n   1) LOG() macros avoid evaluation when the log condition turns out to be false. These errors don\u0027t need that, that is already handled by the caller of Error() constructor.\n   2) Furthermore \"LOG(x) \u003c\u003c ...\" macros are for the old-school pre-C++11 style of programming before we had variadic templates.\n\nWhy not simply?\n\n   return \u0027Error(\"SomeOtherCppFunction(\", input, \") failed\")\u0027\n\nand it could just glob everything up with variadic arguments, and use the current stream implementation under the hood. \n\nAlso using the \"all parameters are available at the same time\" API, it can theoretically open up to optimizations later like calling str.reserve for sum of argument lengths.",
      "parentUuid": "2f5c753c_1a08e341",
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbb9728f_a925f589",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2019-06-03T23:10:01Z",
      "side": 1,
      "message": "\"Error(\"SomeOtherCppFunction(\", input, \") failed\")\" looks nice. I actually experimented this and found that it lacks formatting feature. But I doubt that formatting is used a lot. :-)\n\nI\u0027d love to have \"Errorf(\"SomeOtherFunction(%s) failed\", input)\". But I failed to implement this.(Note there is no .c_str())\n\nNonetheless, I\u0027m not against stream version. It is simple and easy to use/read.",
      "parentUuid": "2fab15ac_be6a8acf",
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae4dd738_1ecb20ae",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-06-03T23:18:57Z",
      "side": 1,
      "message": "This sounds like an excellent suggest.  If we do this, then this becomes significantly easier.  We wouldn\u0027t even need a class or the rather horrid implicit operator expected\u003cT, ResultError\u003e().  \n\nWe should be able to do it with two functions and two helpers:\n\nvoid ErrorConcat(std::stringstream\u0026 ss) {\n    return;\n}\n\ntemplate \u003ctypename T, typename... Ts\u003e\nvoid ErrorConcat(std::stringstream\u0026 ss, T\u0026\u0026 t, Ts\u0026\u0026... ts) {\n    ss \u003c\u003c t;\n    ErrorConcat(ss, ts...);\n}\n\ntemplate \u003ctypename... T\u003e\nResultError ErrnoError(T\u0026\u0026... ts) {\n  std::stringstream ss;\n  ErrorConcat(ss, ts...);\n  return ResultError{errno, ss.str()};\n}\n\ntemplate \u003ctypename... T\u003e\nResultError Error(T\u0026\u0026... ts) {\n  std::stringstream ss;\n  ErrorConcat(ss, ts...);\n  return ResultError{0, ss.str()};\n}\n\n\u003e \"Error(\"SomeOtherCppFunction(\", input, \") failed\")\" looks nice. I actually experimented this and found that it lacks formatting feature. But I doubt that formatting is used a lot. :-)\n\nWhat formatting features?  Things like std::oct?  It works for me with the above code.\n\n\u003e\u003e std::cout \u003c\u003c Error(\"hi \", std::oct, 16, \" bye\").str \u003c\u003c std::endl;\nhi 20 bye",
      "parentUuid": "2fab15ac_be6a8acf",
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "540f3974_98090600",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2019-06-03T23:39:09Z",
      "side": 1,
      "message": "Cool! (For me it is a little weird to see iomanips in the arguments. But it\u0027s okay, as I told, they are rarely used.)",
      "parentUuid": "ae4dd738_1ecb20ae",
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb252513_9bc665aa",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2019-06-03T23:54:40Z",
      "side": 1,
      "message": "But, wait. If we want to keep the behavior of ErrnoError(), strerror() needs to be appended.\n\ntemplate \u003ctypename... T\u003e\nResultError ErrnoError(T\u0026\u0026... ts) {\n  int saved_errno \u003d errno;\n  std::stringstream ss;\n  ErrorConcat(ss, ts...);\n  ss \u003c\u003c \": \" \u003c\u003c std::strerror(saved_errno);\n  return ResultError{saved_errno, ss.str()};\n}",
      "parentUuid": "540f3974_98090600",
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e2fc86b_bdd87f1b",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-06-04T00:07:10Z",
      "side": 1,
      "message": "Right; I wrote that too quickly and missed that.\n\nFWIW, I asked a few people around me and they think this strategy looks weirder compared to just using streams (and overall preferred if we did StringPrintf / fmtlib).",
      "parentUuid": "bb252513_9bc665aa",
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a0d03a7_cbe4613e",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-06-04T04:27:30Z",
      "side": 1,
      "message": "Ok, then let\u0027s address the issue in a follow-up CL. Perhaps we could support all: streams, variadic arg, StringPrintf, etc. \n\nI think we all agree on having Result in libbase, which is the main purpose of this change.",
      "parentUuid": "1e2fc86b_bdd87f1b",
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27168d4d_3aa3d6b7",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-05-31T19:54:16Z",
      "side": 1,
      "message": "Shouldn\u0027t this just be \u0027Error\u0027? It looks like it\u0027s returning a dangling rvalue reference?",
      "range": {
        "startLine": 118,
        "startChar": 2,
        "endLine": 118,
        "endChar": 9
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00244d7b_d3758c2a",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-05-31T20:37:51Z",
      "side": 1,
      "message": "I was really hoping to force this to only be usable with an rvalue error.  This doesn\u0027t work, so you\u0027re right; it should all just be Error\u0026 operator\u003c\u003c ...\n\nAnd given the above, we can even drop the std::forward\u003c\u003e, since there\u0027s no rvalue overloads on streams anyway.",
      "parentUuid": "27168d4d_3aa3d6b7",
      "range": {
        "startLine": 118,
        "startChar": 2,
        "endLine": 118,
        "endChar": 9
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "573d21b7_1ca0e1ce",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-06-01T09:43:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "00244d7b_d3758c2a",
      "range": {
        "startLine": 118,
        "startChar": 2,
        "endLine": 118,
        "endChar": 9
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b128a4f_a5a8023b",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-05-31T19:54:16Z",
      "side": 1,
      "message": "Same",
      "range": {
        "startLine": 123,
        "startChar": 2,
        "endLine": 123,
        "endChar": 9
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10b8195f_2ce4d90f",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-06-01T09:43:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9b128a4f_a5a8023b",
      "range": {
        "startLine": 123,
        "startChar": 2,
        "endLine": 123,
        "endChar": 9
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90fa14e0_9c9bc8a0",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 129,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-05-31T19:54:16Z",
      "side": 1,
      "message": "Same",
      "range": {
        "startLine": 129,
        "startChar": 2,
        "endLine": 129,
        "endChar": 9
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c69fe3f_7d6d966b",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 129,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-06-01T09:43:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "90fa14e0_9c9bc8a0",
      "range": {
        "startLine": 129,
        "startChar": 2,
        "endLine": 129,
        "endChar": 9
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "520cceb5_3548279c",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-05-31T19:54:16Z",
      "side": 1,
      "message": "nit: not sure if the standard is smart enough to figure out it should add an std::move(str) here.",
      "range": {
        "startLine": 141,
        "startChar": 13,
        "endLine": 141,
        "endChar": 16
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0398704_d02687dd",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-05-31T20:37:51Z",
      "side": 1,
      "message": "I\u0027m guessing not, so we should probably add it here.",
      "parentUuid": "520cceb5_3548279c",
      "range": {
        "startLine": 141,
        "startChar": 13,
        "endLine": 141,
        "endChar": 16
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0ed8b90_0f50eb7a",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-06-01T09:43:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d0398704_d02687dd",
      "range": {
        "startLine": 141,
        "startChar": 13,
        "endLine": 141,
        "endChar": 16
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4baac32_21f43295",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 146,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-05-31T19:54:16Z",
      "side": 1,
      "message": "nit: It\u0027s a bit inconsistent to mix CamelCase with under_case convention",
      "range": {
        "startLine": 146,
        "startChar": 6,
        "endLine": 146,
        "endChar": 15
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22bf793b_e7a530d4",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 146,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-05-31T20:37:51Z",
      "side": 1,
      "message": "I wanted to name it like an accessor (https://google.github.io/styleguide/cppguide.html#Function_Names), so errno(), but since errno is a macro, I couldn\u0027t and ended up adding a get_.",
      "parentUuid": "d4baac32_21f43295",
      "range": {
        "startLine": 146,
        "startChar": 6,
        "endLine": 146,
        "endChar": 15
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b683d4ab_8fb09337",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 146,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-06-01T09:43:24Z",
      "side": 1,
      "message": "I wonder if this is ever needed. Clients will get errno by reading as_errno in ResultError struct, right? I\u0027ve removed this.",
      "parentUuid": "22bf793b_e7a530d4",
      "range": {
        "startLine": 146,
        "startChar": 6,
        "endLine": 146,
        "endChar": 15
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "29c04a27_de853fe8",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 146,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-06-03T23:18:57Z",
      "side": 1,
      "message": "I used to use it before expected\u003c\u003e but not anymore, so agreed that it\u0027s best to just drop it.",
      "parentUuid": "b683d4ab_8fb09337",
      "range": {
        "startLine": 146,
        "startChar": 6,
        "endLine": 146,
        "endChar": 15
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86268fa3_f88c9b8e",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 146,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-06-04T04:27:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "29c04a27_de853fe8",
      "range": {
        "startLine": 146,
        "startChar": 6,
        "endLine": 146,
        "endChar": 15
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e31a637_19877235",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 154,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-05-31T19:54:16Z",
      "side": 1,
      "message": "AFAIK using the stringstream has a possibility of mutating the global \u0027errno\u0027 state [if there\u0027s errors]? This probably deserves additional consideration how to save/restore the global \u0027errno\u0027. Presumably a reasonable invariant may be:\n\n   int old_errno \u003d errno;\n   Result\u003cint\u003e failed \u003d (Error() \u003c\u003c \"failed\");\n   CHECK(errno \u003d\u003d old_errno);\n\nbut right now that\u0027s underspecified?",
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d134fd0_b0766da7",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 154,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-05-31T20:37:51Z",
      "side": 1,
      "message": "Do we really care about the global errno in this case?  If we\u0027re capturing it in the expected\u003c\u003e object already, then people should be referencing that directly, no?",
      "parentUuid": "2e31a637_19877235",
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52b04660_af3a02ee",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 154,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-06-01T09:43:24Z",
      "side": 1,
      "message": "Although I agree with Tom that clients should better use error().as_errno, I also think it is not a bad idea to preserve the global errno.\n\nDone and added a new test case for the invariant.",
      "parentUuid": "9d134fd0_b0766da7",
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2098b42_c27bc54a",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 166,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-05-31T19:54:16Z",
      "side": 1,
      "message": "nit: seems a bit too magical, why not android::base::expected\u003cstd::monostate, ResultError\u003e ?",
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20def612_2450b9ca",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 166,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-05-31T20:37:51Z",
      "side": 1,
      "message": "I did it this way, so that return values would be\n\nResult\u003cSuccess\u003e Function() ...\n\nI don\u0027t think\n\nSuccess Function() ...\n\nwould have quite the right look.",
      "parentUuid": "a2098b42_c27bc54a",
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05e4ea7b_b3a6e003",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 166,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-06-01T09:43:24Z",
      "side": 1,
      "message": "I agree with Tom.\n\nOr s/Success/None or s/Success/Nothing ?",
      "parentUuid": "20def612_2450b9ca",
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab57a61e_11a91677",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 166,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-06-03T21:16:59Z",
      "side": 1,
      "message": "Ahhhh, yes. That makes way more sense. Agreed \"Nothing\" would be better.\n\nPlus maybe a comment, \u0027Usage: Result\u003cNothing\u003e\u0027 ?",
      "parentUuid": "05e4ea7b_b3a6e003",
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33c3d568_105951a8",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 166,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-06-03T23:18:57Z",
      "side": 1,
      "message": "Sgtm; \u0027nothing\u0027 is fine.  Long term, this\u0027ll be Result\u003cvoid\u003e, right?  I took it from the paper, that the existence of expected\u003cvoid, T\u003e was meant for specifically this case.  I wonder if we can come up with a way to do expected\u003cvoid, T\u003e easily?",
      "parentUuid": "ab57a61e_11a91677",
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d608a17d_0f3d9c19",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 166,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-06-04T04:27:30Z",
      "side": 1,
      "message": "Done with \u0027Nothing\u0027.\n\nFor the specialization for void, yes, that is missing in current implementation. Doing it won\u0027t be difficult but I wonder if it is really necessary for us given that we will anyway use Result\u003cNothing\u003e.",
      "parentUuid": "33c3d568_105951a8",
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}