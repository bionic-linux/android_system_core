{
  "comments": [
    {
      "key": {
        "uuid": "1e2d8f05_e7de7f34",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-05-31T19:54:16Z",
      "side": 1,
      "message": "I would recommend to wrap the Error data members with a unique_ptr, it will shrink the sizeof(Result\u003cT\u003e) for small Ts.\n\n----\n\nDue to nature of how expected is implemented, it is union of success/error types.\n\nSo by making the error type here, something simple like \u0027Result\u003cint\u003e\u0027 will get very large because it has to also include the std::string. On most system std::string includes small string optimization (inline char[BUFSIZE]).",
      "range": {
        "startLine": 92,
        "startChar": 0,
        "endLine": 94,
        "endChar": 15
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "504428fe_ad05ba88",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-05-31T20:37:51Z",
      "side": 1,
      "message": "std:string should only be 24 bytes on Android (all assuming 64 bit system).  It\u0027s a union between the small string optimization and the long string control information, which is 2 size_t\u0027s and a pointer.\n\nOverall, I figured that these would only ever be stack allocated and discarded immediately after use, so I was okay with the 32 bytes (24 + 8 for errno) on the stack frame.  We could add the unique_ptr, but, assuming the unique_ptr is 16 bytes (a pointer for the pointer itself and a pointer for the deleter), we\u0027d only save 16 bytes but add a new heap allocation for every error returned.",
      "parentUuid": "1e2d8f05_e7de7f34",
      "range": {
        "startLine": 92,
        "startChar": 0,
        "endLine": 94,
        "endChar": 15
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e76705a_ca3abe83",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-05-31T19:54:16Z",
      "side": 1,
      "message": "Does this do anything? std::ostream\u0026 doesn\u0027t seem to have a \u0027T\u0026\u0026\u0027 overload? I imagine it would be just calling the same exact code as line 98.\n\nhttps://en.cppreference.com/w/cpp/io/basic_ostream/operator_ltlt2 (3)",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 105,
        "endChar": 1
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a633fcdd_76620a73",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-05-31T20:37:51Z",
      "side": 1,
      "message": "Ack; you\u0027re right this doesn\u0027t do anything useful.  It\u0027s going to copy the contents of the string into the stringstream, so it\u0027s not like there\u0027s a meaningful rvalue reference there.",
      "parentUuid": "3e76705a_ca3abe83",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 105,
        "endChar": 1
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0027f96e_1736b961",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-05-31T19:54:16Z",
      "side": 1,
      "message": "nit: name is a bit weird. this acts more like an ErrorStream or ErrorBuilder. it especially doesn\u0027t seem to be useful by itself except to terminate via \u0027operator expected\u0027",
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c406de87_2f6eb006",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-05-31T20:37:51Z",
      "side": 1,
      "message": "Right that\u0027s how it\u0027s meant to be used.  See the example in the comment above, it\u0027s so you can do:\n\nreturn Error() \u003c\u003c \"SomeOtherCppFunction(\" \u003c\u003c input \u003c\u003c \") failed\";\n\nWe can of course name it something different than Error, especially if it\u0027d be used more widely.",
      "parentUuid": "0027f96e_1736b961",
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27168d4d_3aa3d6b7",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-05-31T19:54:16Z",
      "side": 1,
      "message": "Shouldn\u0027t this just be \u0027Error\u0027? It looks like it\u0027s returning a dangling rvalue reference?",
      "range": {
        "startLine": 118,
        "startChar": 2,
        "endLine": 118,
        "endChar": 9
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00244d7b_d3758c2a",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-05-31T20:37:51Z",
      "side": 1,
      "message": "I was really hoping to force this to only be usable with an rvalue error.  This doesn\u0027t work, so you\u0027re right; it should all just be Error\u0026 operator\u003c\u003c ...\n\nAnd given the above, we can even drop the std::forward\u003c\u003e, since there\u0027s no rvalue overloads on streams anyway.",
      "parentUuid": "27168d4d_3aa3d6b7",
      "range": {
        "startLine": 118,
        "startChar": 2,
        "endLine": 118,
        "endChar": 9
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b128a4f_a5a8023b",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-05-31T19:54:16Z",
      "side": 1,
      "message": "Same",
      "range": {
        "startLine": 123,
        "startChar": 2,
        "endLine": 123,
        "endChar": 9
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90fa14e0_9c9bc8a0",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 129,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-05-31T19:54:16Z",
      "side": 1,
      "message": "Same",
      "range": {
        "startLine": 129,
        "startChar": 2,
        "endLine": 129,
        "endChar": 9
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "520cceb5_3548279c",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-05-31T19:54:16Z",
      "side": 1,
      "message": "nit: not sure if the standard is smart enough to figure out it should add an std::move(str) here.",
      "range": {
        "startLine": 141,
        "startChar": 13,
        "endLine": 141,
        "endChar": 16
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0398704_d02687dd",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-05-31T20:37:51Z",
      "side": 1,
      "message": "I\u0027m guessing not, so we should probably add it here.",
      "parentUuid": "520cceb5_3548279c",
      "range": {
        "startLine": 141,
        "startChar": 13,
        "endLine": 141,
        "endChar": 16
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4baac32_21f43295",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 146,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-05-31T19:54:16Z",
      "side": 1,
      "message": "nit: It\u0027s a bit inconsistent to mix CamelCase with under_case convention",
      "range": {
        "startLine": 146,
        "startChar": 6,
        "endLine": 146,
        "endChar": 15
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22bf793b_e7a530d4",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 146,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-05-31T20:37:51Z",
      "side": 1,
      "message": "I wanted to name it like an accessor (https://google.github.io/styleguide/cppguide.html#Function_Names), so errno(), but since errno is a macro, I couldn\u0027t and ended up adding a get_.",
      "parentUuid": "d4baac32_21f43295",
      "range": {
        "startLine": 146,
        "startChar": 6,
        "endLine": 146,
        "endChar": 15
      },
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e31a637_19877235",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 154,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-05-31T19:54:16Z",
      "side": 1,
      "message": "AFAIK using the stringstream has a possibility of mutating the global \u0027errno\u0027 state [if there\u0027s errors]? This probably deserves additional consideration how to save/restore the global \u0027errno\u0027. Presumably a reasonable invariant may be:\n\n   int old_errno \u003d errno;\n   Result\u003cint\u003e failed \u003d (Error() \u003c\u003c \"failed\");\n   CHECK(errno \u003d\u003d old_errno);\n\nbut right now that\u0027s underspecified?",
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d134fd0_b0766da7",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 154,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-05-31T20:37:51Z",
      "side": 1,
      "message": "Do we really care about the global errno in this case?  If we\u0027re capturing it in the expected\u003c\u003e object already, then people should be referencing that directly, no?",
      "parentUuid": "2e31a637_19877235",
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2098b42_c27bc54a",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 166,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-05-31T19:54:16Z",
      "side": 1,
      "message": "nit: seems a bit too magical, why not android::base::expected\u003cstd::monostate, ResultError\u003e ?",
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20def612_2450b9ca",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 166,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-05-31T20:37:51Z",
      "side": 1,
      "message": "I did it this way, so that return values would be\n\nResult\u003cSuccess\u003e Function() ...\n\nI don\u0027t think\n\nSuccess Function() ...\n\nwould have quite the right look.",
      "parentUuid": "a2098b42_c27bc54a",
      "revId": "c1ff683c42bd3577c7a2b2c1932146379b8a2800",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}