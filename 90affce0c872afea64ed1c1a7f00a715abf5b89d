{
  "comments": [
    {
      "key": {
        "uuid": "e5d265d7_5cf4fec1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-04-12T14:49:53Z",
      "side": 1,
      "message": "(i wish they\u0027d stop adding useless warnings to somewhat useful ones... is there a reason why we\u0027re not just turning this off? i can see some very small reason not to have turned off the gcc-compat warning [though even there i\u0027ve turned it off for my projects], but c++98 compatibility ... why is that useful for Android?)",
      "revId": "90affce0c872afea64ed1c1a7f00a715abf5b89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28c296ae_fc0f85ea",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2018-04-12T16:16:44Z",
      "side": 1,
      "message": "The problem here is that it is included as part of -Weverything. That is not something that we have turned on in the platform, but if a developer enables a particular local flag, it could override what we have selected. In the case of groups of warnings (-Weverything) vs. individual warning flags, we could add something like -Wno-extra-semi to our top-level flags. We just don\u0027t spend enough time curating that list as we probably should.",
      "parentUuid": "e5d265d7_5cf4fec1",
      "revId": "90affce0c872afea64ed1c1a7f00a715abf5b89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8600ce6f_23587acc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-04-12T17:15:20Z",
      "side": 1,
      "message": "yeah, that\u0027s what i meant: that this seems like a good candidate for the global \"no thanks\" list. in the unlikely event that there is someone actively working on code that needs c++98 compatibility, they can always explicitly turn it back on if/when they ever make this mistake.",
      "parentUuid": "28c296ae_fc0f85ea",
      "revId": "90affce0c872afea64ed1c1a7f00a715abf5b89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f5152343_66d68f60",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2018-04-12T19:07:12Z",
      "side": 1,
      "message": "This is already in the no-thanks list, but explicitly turned on by -Weverything (frameworks/native/libs/ui) and -Wextra-semi (system/tools/hidl).  libutils just happens to be in the crossfire since it\u0027s included everywhere, including hidl modules.\n\nI\u0027m trying to fix the warnings so we don\u0027t have to explicitly turn it off.  I am trying to catch everything by doing a checkbuild in internal.  If there are just too many places that need to be fixed, I\u0027ll just disable this.",
      "parentUuid": "8600ce6f_23587acc",
      "revId": "90affce0c872afea64ed1c1a7f00a715abf5b89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "78384aa6_007ab37f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-04-12T19:46:20Z",
      "side": 1,
      "message": "can\u0027t we just fix those two places instead then?\n\nwhat i really dislike about pandering to this bad warning is that it\u0027s imposing a bad restriction on *future* header files that we haven\u0027t even written yet too. forcing a language inconsistency from 1998 that was considered annoying enough to be fixed in a later revision...",
      "parentUuid": "f5152343_66d68f60",
      "revId": "90affce0c872afea64ed1c1a7f00a715abf5b89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c54de538_a6e426f0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2018-04-12T19:58:46Z",
      "side": 1,
      "message": "I understand your concern.  I\u0027ll just disable it globally in soong and if anyone wants this warning (which I doubt), they can do the cleanup.\n\nFeel free to revert this and https://android-review.googlesource.com/c/platform/system/core/+/662122.",
      "parentUuid": "78384aa6_007ab37f",
      "revId": "90affce0c872afea64ed1c1a7f00a715abf5b89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1653bd1_e381308c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-04-12T21:21:53Z",
      "side": 1,
      "message": "thanks!\n\nstyle-wise i don\u0027t care either way (and stroustrup seems to consider no-semicolon to be the canonical style), so i don\u0027t care enough to revert these. i just don\u0027t want our descendants to be wasting time removing optional semicolons from new code in another 20 years\u0027 time :-)\n\nis there a way to tell clang-format to remove them? that might be worth adding to the [somewhat-]canonical .clang-format files in system/core/...\n\n(stroustrup\u0027s thinking seems to have been \"Silly typing errors will inevitably arise from the syntactic similarity of the namespace constructs to\nother C++ constructs. I propose we allow an optional semicolon after a global declaration to lessen the\nfrustration. This would be a kind of ‘‘empty declaration’’ to match the empty statements.\"\nhttp://www.open-std.org/jtc1/sc22/wg21/docs/papers/1993/N0262.pdf )",
      "parentUuid": "c54de538_a6e426f0",
      "revId": "90affce0c872afea64ed1c1a7f00a715abf5b89d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}