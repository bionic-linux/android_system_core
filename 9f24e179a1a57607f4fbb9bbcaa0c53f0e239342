{
  "comments": [
    {
      "key": {
        "uuid": "dbe270f6_b7c87955",
        "filename": "adb/brotli_utils.h",
        "patchSetId": 5
      },
      "lineNbr": 113,
      "author": {
        "id": 1166043
      },
      "writtenOn": "2020-03-26T19:41:31Z",
      "side": 1,
      "message": "a few general notes on compression:\n- brotli is very efficient for APKs, but it never been design for high compression throughput. lz4 is much faster and requires less resources to compress,\n- already compressed entries (e.g. with LZMA) might become bigger as a result of re-compression. makes sense to detect and send the original data instead,\n- there is a way to detect uncompressible chunks without running through compression - e.g. read each sixteenth byte and try to evaluate randomness. if you are interested I can try to dig  up a code snippet doing that",
      "revId": "9f24e179a1a57607f4fbb9bbcaa0c53f0e239342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05c2c94a_bb833f6d",
        "filename": "adb/brotli_utils.h",
        "patchSetId": 5
      },
      "lineNbr": 113,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2020-03-26T19:48:18Z",
      "side": 1,
      "message": "\u003e brotli is very efficient for APKs, but it never been design for high compression throughput. lz4 is much faster and requires less resources to compress,\n\nYeah, my hope was that since we\u0027re almost always going from host to device, the host would be sufficiently fast enough that we would be able to saturate the pipe. This doesn\u0027t seem to be the case when naively compressing and sending from one thread, so I\u0027ll take a look at implementing LZ4.\n\n\u003e there is a way to detect uncompressible chunks without running through compression - e.g. read each sixteenth byte and try to evaluate randomness. if you are interested I can try to dig  up a code snippet doing that\n\nMy understanding is that brotli does this by default: https://tools.ietf.org/html/rfc7932#section-12",
      "parentUuid": "dbe270f6_b7c87955",
      "revId": "9f24e179a1a57607f4fbb9bbcaa0c53f0e239342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47a2347e_5f2fade2",
        "filename": "adb/brotli_utils.h",
        "patchSetId": 5
      },
      "lineNbr": 113,
      "author": {
        "id": 1080076
      },
      "writtenOn": "2020-03-26T19:59:04Z",
      "side": 1,
      "message": "+1\n1. brotli explicitly was designed to compress as much as possible at the expense of compression speed. It\u0027s probably the worst compression method to use for live operation. If you want to have something better than lz4 please try zstd at the faster levels - it is comparable to lzma in the ratio but is much faster at compression and decompression.\nI\u0027d still go with lz4 at first though\n2. for the apks (and zip archives in general) you can read the central directory and detect if the block\u0027s already compressed by reading its compression method - that\u0027s how we\u0027ve done it in master-instamatic",
      "parentUuid": "dbe270f6_b7c87955",
      "revId": "9f24e179a1a57607f4fbb9bbcaa0c53f0e239342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aca35970_9b75e373",
        "filename": "adb/brotli_utils.h",
        "patchSetId": 5
      },
      "lineNbr": 113,
      "author": {
        "id": 1080076
      },
      "writtenOn": "2020-03-26T20:23:30Z",
      "side": 1,
      "message": "Ooh, I\u0027m actually wrong about brotli design here (confused it with zopfli), apologies.\nApparently zstd on the lowest/fastest compression level could be an option - that\u0027s where it is faster and better than brotli, but still fast enough compared to LZ4.\n\u003eMy understanding is that brotli does this by default: https://tools.ietf.org/html/rfc7932#section-12\nnot sure if it\u0027s worth sending that data \u0027compressed\u0027 over the wire vs the original data, where the device won\u0027t need to run the decompression at all",
      "parentUuid": "47a2347e_5f2fade2",
      "revId": "9f24e179a1a57607f4fbb9bbcaa0c53f0e239342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7397e84_106cbd80",
        "filename": "adb/brotli_utils.h",
        "patchSetId": 5
      },
      "lineNbr": 113,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2020-03-26T20:23:43Z",
      "side": 1,
      "message": "+1 to Yurii. LZ4 is the right default here; maybe zstd. Client and server should negotiate supported compression schemes.",
      "parentUuid": "47a2347e_5f2fade2",
      "revId": "9f24e179a1a57607f4fbb9bbcaa0c53f0e239342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ff2206c_8db4ee28",
        "filename": "adb/transport.cpp",
        "patchSetId": 5
      },
      "lineNbr": 86,
      "author": {
        "id": 1080076
      },
      "writtenOn": "2020-03-26T19:59:04Z",
      "side": 1,
      "message": "is there a reason to have these separate? Especially if they\u0027re released together. Is this for the case when you want to remove the brotli support later?",
      "range": {
        "startLine": 86,
        "startChar": 18,
        "endLine": 86,
        "endChar": 42
      },
      "revId": "9f24e179a1a57607f4fbb9bbcaa0c53f0e239342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1411fe59_b86a3130",
        "filename": "adb/transport.h",
        "patchSetId": 5
      },
      "lineNbr": 90,
      "author": {
        "id": 1080076
      },
      "writtenOn": "2020-03-26T19:59:04Z",
      "side": 1,
      "message": "typo? v2?",
      "range": {
        "startLine": 90,
        "startChar": 38,
        "endLine": 90,
        "endChar": 40
      },
      "revId": "9f24e179a1a57607f4fbb9bbcaa0c53f0e239342",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}