{
  "comments": [
    {
      "key": {
        "uuid": "3848b01e_0c2f38c9",
        "filename": "fs_mgr/include_fstab/fstab/fstab.h",
        "patchSetId": 5
      },
      "lineNbr": 191,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-08T18:18:58Z",
      "side": 1,
      "message": "Do we really want this in a public header, especially the one for fstab?  This shouldn\u0027t be used anywhere other than within fs_mgr (and I don\u0027t see any other users in cs/ either).",
      "revId": "4655c4ead73fcfb36e08b3e6de25c55e865952f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9532e10d_84c9a820",
        "filename": "fs_mgr/include_fstab/fstab/fstab.h",
        "patchSetId": 5
      },
      "lineNbr": 191,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2019-01-09T04:57:42Z",
      "side": 1,
      "message": "This is because I used fs_mgr/libfs_avb/Android.bp to build libfs_avb.\nAnd can\u0027t want to have relative path include:  #include \"../fs_mgr_priv_boot_config.h\"\n\nSo move it to fstab.h such that I can include \u003cfstab/fstab.h\u003e with static_lib: libfstab.\n\nAnyway, I\u0027ll switch to use #include \"../fs_mgr_priv_boot_config.h\".\nOr let me know if you prefer to keep libfs_avb\u0027s bp stay in fs_mgr/Android.bp.",
      "parentUuid": "3848b01e_0c2f38c9",
      "revId": "4655c4ead73fcfb36e08b3e6de25c55e865952f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb1d9687_cc5a343d",
        "filename": "fs_mgr/include_fstab/fstab/fstab.h",
        "patchSetId": 5
      },
      "lineNbr": 191,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-09T18:10:07Z",
      "side": 1,
      "message": "The relative path isn\u0027t pretty, but I think it\u0027s better than exposing this entirely.  \n\nAlternatively and a bit more cleanly, this could be exposed in one of the fs_mgr headers, since it makes more sense there than with the fstab code.",
      "parentUuid": "9532e10d_84c9a820",
      "revId": "4655c4ead73fcfb36e08b3e6de25c55e865952f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66b1f8e4_8aaf0ee1",
        "filename": "fs_mgr/include_fstab/fstab/fstab.h",
        "patchSetId": 5
      },
      "lineNbr": 191,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2019-01-10T10:14:06Z",
      "side": 1,
      "message": "How about using extern ?\n\nBtw, originally I moved fs_mgr_get_boot_config() to fstab.h is because the source (fs_mgr_boot_config.cpp) is built with libfstab.",
      "parentUuid": "cb1d9687_cc5a343d",
      "revId": "4655c4ead73fcfb36e08b3e6de25c55e865952f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0c65e3b6_fa8f266f",
        "filename": "fs_mgr/libfs_avb/avb_util.cpp",
        "patchSetId": 5
      },
      "lineNbr": 31,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2019-01-08T10:28:49Z",
      "side": 1,
      "message": "Moved from original fs_avb.cpp.",
      "revId": "4655c4ead73fcfb36e08b3e6de25c55e865952f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5256a811_f0a68e5f",
        "filename": "fs_mgr/libfs_avb/avb_util.cpp",
        "patchSetId": 5
      },
      "lineNbr": 125,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2019-01-08T10:28:49Z",
      "side": 1,
      "message": "Will use range-for in another CL later.",
      "range": {
        "startLine": 125,
        "startChar": 9,
        "endLine": 125,
        "endChar": 62
      },
      "revId": "4655c4ead73fcfb36e08b3e6de25c55e865952f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e98f9bbf_c4d85681",
        "filename": "fs_mgr/libfs_avb/avb_util.h",
        "patchSetId": 5
      },
      "lineNbr": 42,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2019-01-08T10:28:49Z",
      "side": 1,
      "message": "Those are not New, just copied from the original fs_avb.cpp (and switch to Camel case).",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 42,
        "endChar": 53
      },
      "revId": "4655c4ead73fcfb36e08b3e6de25c55e865952f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab512b2b_3df10f7d",
        "filename": "fs_mgr/libfs_avb/fs_avb.cpp",
        "patchSetId": 5
      },
      "lineNbr": 55,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2019-01-08T10:28:49Z",
      "side": 1,
      "message": "Switched to range-for per previous comment.",
      "range": {
        "startLine": 52,
        "startChar": 3,
        "endLine": 55,
        "endChar": 5
      },
      "revId": "4655c4ead73fcfb36e08b3e6de25c55e865952f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2257e65b_f0a71454",
        "filename": "fs_mgr/libfs_avb/tests/basic_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 27,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2019-01-08T10:28:49Z",
      "side": 1,
      "message": "The test cases here are just copied from the bottom of fs_avb_unittest_util.cpp\n\nhttps://android-review.googlesource.com/c/platform/system/core/+/859356/2/fs_mgr/libfs_avb/tests/fs_avb_unittest_util.cpp#216",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 6
      },
      "revId": "4655c4ead73fcfb36e08b3e6de25c55e865952f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ddcd7ec_248945e6",
        "filename": "fs_mgr/libfs_avb/tests/fs_avb_test_util.cpp",
        "patchSetId": 5
      },
      "lineNbr": 36,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2019-01-09T08:56:09Z",
      "side": 1,
      "message": "This is from libchrome, too.\n\nI\u0027ll also drop this and use android::base::GetExecutableDirectory() + \"tests/data\" instead.",
      "range": {
        "startLine": 36,
        "startChar": 4,
        "endLine": 36,
        "endChar": 29
      },
      "revId": "4655c4ead73fcfb36e08b3e6de25c55e865952f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64715058_38de8271",
        "filename": "fs_mgr/libfs_avb/tests/fs_avb_test_util.cpp",
        "patchSetId": 5
      },
      "lineNbr": 36,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2019-01-10T10:15:15Z",
      "side": 1,
      "message": "Decided to do this later, at least until C++-17 \u003cfilesystem\u003e is available.",
      "parentUuid": "3ddcd7ec_248945e6",
      "range": {
        "startLine": 36,
        "startChar": 4,
        "endLine": 36,
        "endChar": 29
      },
      "revId": "4655c4ead73fcfb36e08b3e6de25c55e865952f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56176702_2f1ce4f4",
        "filename": "fs_mgr/libfs_avb/tests/fs_avb_test_util.cpp",
        "patchSetId": 5
      },
      "lineNbr": 36,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2019-01-11T00:13:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "64715058_38de8271",
      "range": {
        "startLine": 36,
        "startChar": 4,
        "endLine": 36,
        "endChar": 29
      },
      "revId": "4655c4ead73fcfb36e08b3e6de25c55e865952f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b15224c1_a09b0cb3",
        "filename": "fs_mgr/libfs_avb/tests/fs_avb_test_util.cpp",
        "patchSetId": 5
      },
      "lineNbr": 140,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2019-01-08T10:28:49Z",
      "side": 1,
      "message": "Fixed previous comment.",
      "range": {
        "startLine": 140,
        "startChar": 61,
        "endLine": 140,
        "endChar": 62
      },
      "revId": "4655c4ead73fcfb36e08b3e6de25c55e865952f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51dfbaa8_2d955f5a",
        "filename": "fs_mgr/libfs_avb/tests/fs_avb_test_util.cpp",
        "patchSetId": 5
      },
      "lineNbr": 140,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2019-01-11T00:13:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b15224c1_a09b0cb3",
      "range": {
        "startLine": 140,
        "startChar": 61,
        "endLine": 140,
        "endChar": 62
      },
      "revId": "4655c4ead73fcfb36e08b3e6de25c55e865952f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87bc7c3a_89a51323",
        "filename": "fs_mgr/libfs_avb/tests/fs_avb_test_util.h",
        "patchSetId": 5
      },
      "lineNbr": 82,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2019-01-08T10:28:49Z",
      "side": 1,
      "message": "To fix previous comment.",
      "range": {
        "startLine": 82,
        "startChar": 50,
        "endLine": 82,
        "endChar": 51
      },
      "revId": "4655c4ead73fcfb36e08b3e6de25c55e865952f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3598a95a_09c4ee61",
        "filename": "fs_mgr/libfs_avb/util.cpp",
        "patchSetId": 5
      },
      "lineNbr": 29,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2019-01-08T10:28:49Z",
      "side": 1,
      "message": "Those functions are moved from original fs_avb.cpp.",
      "range": {
        "startLine": 29,
        "startChar": 5,
        "endLine": 29,
        "endChar": 16
      },
      "revId": "4655c4ead73fcfb36e08b3e6de25c55e865952f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0c0c18dd_56d14346",
        "filename": "fs_mgr/libfs_avb/util.cpp",
        "patchSetId": 5
      },
      "lineNbr": 119,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2019-01-08T10:28:49Z",
      "side": 1,
      "message": "Those are copied then re-named from fs_mgr, so we don\u0027t need to include fs_mgr_priv.h.",
      "range": {
        "startLine": 85,
        "startChar": 0,
        "endLine": 119,
        "endChar": 0
      },
      "revId": "4655c4ead73fcfb36e08b3e6de25c55e865952f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6f3f3b58_41406edb",
        "filename": "fs_mgr/libfs_avb/util.h",
        "patchSetId": 5
      },
      "lineNbr": 26,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2019-01-08T10:28:49Z",
      "side": 1,
      "message": "libchrome logging.h and android-base logging.h have many duplicated macro definitions.\n\ne.g., CHECK(), ERROR, WARNING, etc.\n\nSo we can only include one of them.",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 26,
        "endChar": 6
      },
      "revId": "4655c4ead73fcfb36e08b3e6de25c55e865952f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9be4d63_73f1a0cc",
        "filename": "fs_mgr/libfs_avb/util.h",
        "patchSetId": 5
      },
      "lineNbr": 26,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-08T18:18:58Z",
      "side": 1,
      "message": "Why are we using libchrome anyway?  I noticed that in past CLs and probably should have commented.  Seems to be mainly for FilePath?  Does android-base not have equivalent functions, esp with the TempDir / TempFile classes?",
      "parentUuid": "6f3f3b58_41406edb",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 26,
        "endChar": 6
      },
      "revId": "4655c4ead73fcfb36e08b3e6de25c55e865952f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "125e0bbc_b9dc2baf",
        "filename": "fs_mgr/libfs_avb/util.h",
        "patchSetId": 5
      },
      "lineNbr": 26,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2019-01-09T04:57:42Z",
      "side": 1,
      "message": "android-base doesn\u0027t have Append(), similar to os.path.join() in python (then I don\u0027t have to deal with separators or drive letter, C:\\ ).\n\nAlso, android-base doesn\u0027t have GetTempDir() to get system\u0027s default tmp dir (in Linux, it\u0027s /tmp).\n\nAnyway, I can remove using libchrome, and just use string + for Append() then hardcoded /tmp/ for tests.\n\nI thought using libchrome will be more portable but it can\u0027t be used in Mac.\nSo hardcoded /tmp + \"/\" separators should probably be fine here.",
      "parentUuid": "d9be4d63_73f1a0cc",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 26,
        "endChar": 6
      },
      "revId": "4655c4ead73fcfb36e08b3e6de25c55e865952f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed4e9c7a_44fe8303",
        "filename": "fs_mgr/libfs_avb/util.h",
        "patchSetId": 5
      },
      "lineNbr": 26,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2019-01-09T08:56:09Z",
      "side": 1,
      "message": "After some survey, will try to use \u003cexperimental/filesystem\u003e from C++-17.",
      "parentUuid": "125e0bbc_b9dc2baf",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 26,
        "endChar": 6
      },
      "revId": "4655c4ead73fcfb36e08b3e6de25c55e865952f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1084528f_72ad56a0",
        "filename": "fs_mgr/libfs_avb/util.h",
        "patchSetId": 5
      },
      "lineNbr": 26,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-01-09T18:10:07Z",
      "side": 1,
      "message": "I\u0027m not sure that experimental/filesystem is ready yet, danalbert@ would know.\n\nDo we need to build any of this for windows?  I guess I\u0027m not totally sure if we plan to have windows host utils using this.  Presumably we wouldn\u0027t build the tests for windows host in any case?\n\nandroid-base does have GetSystemTempDir(); it also has TemporaryDir.  Are those not enough?",
      "parentUuid": "ed4e9c7a_44fe8303",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 26,
        "endChar": 6
      },
      "revId": "4655c4ead73fcfb36e08b3e6de25c55e865952f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06506c74_06e9a600",
        "filename": "fs_mgr/libfs_avb/util.h",
        "patchSetId": 5
      },
      "lineNbr": 26,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2019-01-10T09:50:24Z",
      "side": 1,
      "message": "experimental/filesystem is probably not ready (or at least no one is using it :)).\nThe source of external/libcxx seems not in sync between aosp and internal.\nhttps://android-review.googlesource.com/c/platform/external/libcxx/+/867534\n\nYup, we probably don\u0027t have to worry about windows.\nandroid-base\u0027s TemporaryDir() seems doesn\u0027t support create a tmp dir with a pattern.\n\ne.g., /tmp/libfs_avb-tests.XXXXXX ⇒ /tmp/libfs_avb-tests.WOY4PO\nThat way I can temporarily skip removing those test_dirs upon TearDown() and go into some directory to debug (e.g., using avbtool info_image --image /tmp/libfs_avb-tests.WOY4PO/boot.img). And I can easily `rm -rf /tmp/libfs_avb-tests*` finally.\n\nNot only the temp dir, many file related functions from libchrome is really handy.\nAnd it\u0027s built around the \u0027base::FilePath\u0027.\n\ne.g.,\nhttps://android.googlesource.com/platform/external/libchrome/+/pie-dev/base/files/file_util.h \n\n1. bool SetCurrentDirectory(const FilePath\u0026 path)\n2. bool GetFileSize(const FilePath\u0026 file_path, int64_t* file_size);\n3. bool ReadFileToString(const FilePath\u0026 path, std::string* contents);\n4. int ReadFile(const FilePath\u0026 filename, char* data, int max_size);\n5. int WriteFile(const FilePath\u0026 filename, const char* data, int size);\n\n\nI tried to remove using libchrome in ag/5997083, by:\n1. Avoid using SetCurrentDirectoy\n2. Use std::experimental::filesystem::file_size instead\n3. Use android::base::ReadFileToString()\n4. Open a fd by path, then call android::base::ReadFully(int fd, void* data, size_t byte_count);\n5  Open a fd by path, then call android::base::WriteFully(int fd, const void* data, size_t byte_count);\n\nBut 2 isn\u0027t available in AOSP currently, as stated in the beginning.\n\nCan we do this transition after IC?\nCurrently it\u0027s more urgent to get \"device code\" merged.\nlibchrome only affects host testing and we\u0027ll have more flexibility to change that later.\n\nAlso, libchrome is widely used in libavb\u0027s host test, too.\nhttps://android.googlesource.com/platform/external/avb/+/pie-dev/Android.bp#190",
      "parentUuid": "1084528f_72ad56a0",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 26,
        "endChar": 6
      },
      "revId": "4655c4ead73fcfb36e08b3e6de25c55e865952f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4987f3cf_7d1d3df4",
        "filename": "fs_mgr/libfs_avb/util.h",
        "patchSetId": 5
      },
      "lineNbr": 26,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2019-01-11T00:13:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "06506c74_06e9a600",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 26,
        "endChar": 6
      },
      "revId": "4655c4ead73fcfb36e08b3e6de25c55e865952f5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}