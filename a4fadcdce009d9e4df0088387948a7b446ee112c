{
  "comments": [
    {
      "key": {
        "uuid": "50b17cf0_43150967",
        "filename": "include/log/log.h",
        "patchSetId": 2
      },
      "lineNbr": 966,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-11-18T02:10:43Z",
      "side": 1,
      "message": "!\n\n(why is all this stuff even in \u003clog/log.h\u003e anyway? seems like there\u0027s way too much in here with no distinction between app API, platform API, and internal implementation details.)",
      "revId": "a4fadcdce009d9e4df0088387948a7b446ee112c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "50b17cf0_b9f1b2b5",
        "filename": "include/log/log.h",
        "patchSetId": 2
      },
      "lineNbr": 966,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2016-11-18T15:54:54Z",
      "side": 1,
      "message": "I am glad you broached this question. I have had troubles engaging anyone on how to architect this.\n\nThis #ifdef is to prevent the definition of this method if one does not include the private API. This file is being cultivate/curated to be _the_ Vendor API.\n\nIf a class can completely be defined inline, it can be used by a vendor. If I implement that class details in a library, we can not allow a vendor to use it because its shape carries the risk of changing from release to release. (I should add a comment at the top of the class to \u0027spain that goal)\n\nThe options are:\n\n- two classes, one with, and one without. The one with in private Is-A of the one without defined here. (Google coding standard asks that we stay away from Is-A and implement Has-A instead which will be exceedingly noisy)\n- Make this a public API. (However, I do not feel comfortable making android_log_write_list_buffer vendor public)\n- forgo adding this to the class, leave the android_log_write_list_buffer private, native, and C. (works too, class operator to return android_log_context reference)\n\nNB: there will be exactly _one_ internal user of this API. I can not imagine more, but imagination should not stifle planning.",
      "parentUuid": "50b17cf0_43150967",
      "revId": "a4fadcdce009d9e4df0088387948a7b446ee112c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "50b17cf0_8f5d8009",
        "filename": "include/log/log.h",
        "patchSetId": 2
      },
      "lineNbr": 966,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-11-18T18:05:32Z",
      "side": 1,
      "message": "\u003e This #ifdef is to prevent the definition of this method if one does not include the private API\n\nlike i said, i don\u0027t understand why you have three completely different things all in one file:\n\n1. NDK API: available to all *apps* for all time. not even minor ABI changes allowed.\n\n2. platform API: available to the platform. even source-incompatible changes allowed, though you\u0027ll have to work to keep blobs working etc.\n\n3. internal API: stuff that not even OEMs should be messing with (and if they do, it\u0027s basically the same as changing logd itself).\n\nat the moment, because you only have one file, you\u0027re basically lumping everything into 1. which doesn\u0027t seem good for anyone.\n\n(you\u0027re also making it harder for folks *reading* the headers to know what\u0027s what. even folks trying to be good are likely to be confused, and since there\u0027s no *enforcement* of the distinction between 2 and 3 above [and even 1\u0027s enforcement is circumventable], you\u0027re asking for a free-for-all.)\n\n\ni think you want [at least] three distinct files, and you should ask yourself which file each specific thing belongs in. (and typically the answer for any *class* is \"a file of its own\", but even just having the clear NDK/platform/internal distinction would be a step forward.)\n\nthe problem with the old headers wasn\u0027t that we had multiple files: it was that there was no logic behind what was in what file. (plus there were two *different* files for the \"NDK\" role.)",
      "parentUuid": "50b17cf0_b9f1b2b5",
      "revId": "a4fadcdce009d9e4df0088387948a7b446ee112c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "50b17cf0_e3053d32",
        "filename": "liblog/log_event_list.c",
        "patchSetId": 2
      },
      "lineNbr": 355,
      "author": {
        "id": 1121354
      },
      "writtenOn": "2016-11-18T02:32:03Z",
      "side": 1,
      "message": "oops?",
      "range": {
        "startLine": 355,
        "startChar": 10,
        "endLine": 355,
        "endChar": 14
      },
      "revId": "a4fadcdce009d9e4df0088387948a7b446ee112c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "50b17cf0_39c5a24e",
        "filename": "liblog/log_event_list.c",
        "patchSetId": 2
      },
      "lineNbr": 355,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2016-11-18T15:54:54Z",
      "side": 1,
      "message": "Good catch! I leave it as an exercise to the reader to determine the nature of this.\n\nOn purpose, hoping it would never get caught, and never be ascribed nefarious. It is my signature. :-) there has to be at least one booger joke in our code base, or we appear too serious.\n\nOr a freudian slip?\n\nEither way, caught, means it goes ...",
      "parentUuid": "50b17cf0_e3053d32",
      "range": {
        "startLine": 355,
        "startChar": 10,
        "endLine": 355,
        "endChar": 14
      },
      "revId": "a4fadcdce009d9e4df0088387948a7b446ee112c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "50b17cf0_39acc286",
        "filename": "liblog/tests/liblog_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2654,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2016-11-18T15:54:54Z",
      "side": 1,
      "message": "... or android_log_event_context_private, an Is-A of android_log_event_context?",
      "range": {
        "startLine": 2654,
        "startChar": 4,
        "endLine": 2654,
        "endChar": 29
      },
      "revId": "a4fadcdce009d9e4df0088387948a7b446ee112c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "50b17cf0_59b176dd",
        "filename": "liblog/tests/liblog_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2655,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2016-11-18T15:54:54Z",
      "side": 1,
      "message": "Discussion with enh@ could change this piece of implied conversion to std::string into something a bit more complicated? This fragment is to like a code example, shows us the minimum.\n\nNot in class:\n\nctx \u003c\u003c 1005 \u003c\u003c \"tag_def\" \u003c\u003c \"(tag|1),(name|3),(format|3)\";\nconst char* data \u003d NULL;\nsize_t length \u003d 0;\nandroid_log_write_list_buffer(ctx, \u0026data, \u0026length);\nEXPECT_TRUE(data !\u003d NULL);\n. . .\nEXPECT_EQ(android_log_buffer_to_string(data, length, msgbuf...",
      "range": {
        "startLine": 2655,
        "startChar": 23,
        "endLine": 2655,
        "endChar": 80
      },
      "revId": "a4fadcdce009d9e4df0088387948a7b446ee112c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}