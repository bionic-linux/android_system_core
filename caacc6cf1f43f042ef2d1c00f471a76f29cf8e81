{
  "comments": [
    {
      "key": {
        "uuid": "3cf018b1_edeaa716",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 138,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2017-02-24T23:38:38Z",
      "side": 1,
      "message": "Format",
      "range": {
        "startLine": 138,
        "startChar": 47,
        "endLine": 138,
        "endChar": 54
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8fd1de73_491c8515",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 460,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2017-02-24T23:38:38Z",
      "side": 1,
      "message": "Server side?  Device side?\n\nI think we\u0027re going to need some guidance on what a device is expected to do here.  In particular, messing with the partition table is a quick way to irreversibly brick a device.  In the past, as part of the fastbootd project, we considered having a region of the storage that was owned by Android that we could subpartition into system/vendor/odm/etc. as we saw fit, without messing with the bootloader owned partitions.",
      "range": {
        "startLine": 459,
        "startChar": 56,
        "endLine": 460,
        "endChar": 62
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "49771521_f6c8002d",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 460,
      "author": {
        "id": 1097918
      },
      "writtenOn": "2017-02-24T23:47:06Z",
      "side": 1,
      "message": "bootloader (device-side) fastboot implementation (server) is responsible for generation of partition table from the data passed by fastboot client running on PC/Mac host.\nthe fact that bootloader itself is generating partition table image would guarantee this image is compatible with the device geometry.",
      "parentUuid": "8fd1de73_491c8515",
      "range": {
        "startLine": 459,
        "startChar": 56,
        "endLine": 460,
        "endChar": 62
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b587440d_ed4a9360",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 460,
      "author": {
        "id": 1138338
      },
      "writtenOn": "2017-02-24T23:49:00Z",
      "side": 1,
      "message": "\u003e Server side?  Device side?\nI will use host side and device side to make it more clear. It is device side.\n\n \u003e \n \u003e I think we\u0027re going to need some guidance on what a device is\n \u003e expected to do here.  In particular, messing with the partition\n \u003e table is a quick way to irreversibly brick a device.  In the past,\n \u003e as part of the fastbootd project, we considered having a region of\n \u003e the storage that was owned by Android that we could subpartition\n \u003e into system/vendor/odm/etc. as we saw fit, without messing with the\n \u003e bootloader owned partitions.\n\nIt is up to the vendor what restriction to put on this command, since the device side can handle that. Vendors may want to not support this command at all on production devices (they can send \"partition command not supported on production devices\") to the user to make it clear. Or they can support partitioning of specific volumes by the user if the device is unlocked, etc. There is no restriction on that.",
      "parentUuid": "8fd1de73_491c8515",
      "range": {
        "startLine": 459,
        "startChar": 56,
        "endLine": 460,
        "endChar": 62
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4edc0e3f_1745101b",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 460,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2017-02-24T23:49:11Z",
      "side": 1,
      "message": "I\u0027m not worried about the device geometry, I\u0027m worried about what happens when you change the location of the bootloader partition and brick your device.",
      "parentUuid": "49771521_f6c8002d",
      "range": {
        "startLine": 459,
        "startChar": 56,
        "endLine": 460,
        "endChar": 62
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3721ebfc_620823d3",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 460,
      "author": {
        "id": 1138338
      },
      "writtenOn": "2017-02-24T23:54:22Z",
      "side": 1,
      "message": "Please read my previous comment (bottom part) and that is not still clear let me know. TLDR: this command is not really meant to be used by the user.",
      "parentUuid": "4edc0e3f_1745101b",
      "range": {
        "startLine": 459,
        "startChar": 56,
        "endLine": 460,
        "endChar": 62
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3b07a3c_9ab8d661",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 468,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-24T22:37:12Z",
      "side": 1,
      "message": "volume",
      "range": {
        "startLine": 468,
        "startChar": 14,
        "endLine": 468,
        "endChar": 20
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1646a3a4_1c2a9e5a",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 468,
      "author": {
        "id": 1138338
      },
      "writtenOn": "2017-02-24T23:40:02Z",
      "side": 1,
      "message": "will fix",
      "parentUuid": "b3b07a3c_9ab8d661",
      "range": {
        "startLine": 468,
        "startChar": 14,
        "endLine": 468,
        "endChar": 20
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac100dc4_aa622255",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 486,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-24T22:37:12Z",
      "side": 1,
      "message": "addressable",
      "range": {
        "startLine": 486,
        "startChar": 11,
        "endLine": 486,
        "endChar": 22
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "876656b3_5d65a9e2",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 486,
      "author": {
        "id": 1138338
      },
      "writtenOn": "2017-02-24T23:40:02Z",
      "side": 1,
      "message": "will fix",
      "parentUuid": "ac100dc4_aa622255",
      "range": {
        "startLine": 486,
        "startChar": 11,
        "endLine": 486,
        "endChar": 22
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f84ad156_81dd8866",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 488,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2017-02-24T23:38:38Z",
      "side": 1,
      "message": "The name \"lun\" is confusing for emmc, is there a better name to describe hardware partitions?",
      "range": {
        "startLine": 488,
        "startChar": 10,
        "endLine": 488,
        "endChar": 13
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7121addc_438fa7cb",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 488,
      "author": {
        "id": 1097918
      },
      "writtenOn": "2017-02-24T23:47:06Z",
      "side": 1,
      "message": "this is called partition in emmc spec, and lun in ufs spec;\nwhatever we chose will be confusing for the other spec; current choice is based on the assumption that going forward we shall mostly if not exclusively use UFS chips, since eMMC technology became outdated hence lun (from UFS spec) is used",
      "parentUuid": "f84ad156_81dd8866",
      "range": {
        "startLine": 488,
        "startChar": 10,
        "endLine": 488,
        "endChar": 13
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4e9f223_d9217c7b",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 490,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-24T22:37:12Z",
      "side": 1,
      "message": "present",
      "range": {
        "startLine": 490,
        "startChar": 45,
        "endLine": 490,
        "endChar": 52
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c0a1caa2_a07571a3",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 490,
      "author": {
        "id": 1138338
      },
      "writtenOn": "2017-02-24T23:40:02Z",
      "side": 1,
      "message": "will fix",
      "parentUuid": "b4e9f223_d9217c7b",
      "range": {
        "startLine": 490,
        "startChar": 45,
        "endLine": 490,
        "endChar": 52
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b93863f_e4c982c9",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 513,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-24T22:37:12Z",
      "side": 1,
      "message": "extra whitespace",
      "range": {
        "startLine": 513,
        "startChar": 76,
        "endLine": 513,
        "endChar": 77
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8cb54486_23b2ebd3",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 513,
      "author": {
        "id": 1138338
      },
      "writtenOn": "2017-02-24T23:40:02Z",
      "side": 1,
      "message": "will fix",
      "parentUuid": "8b93863f_e4c982c9",
      "range": {
        "startLine": 513,
        "startChar": 76,
        "endLine": 513,
        "endChar": 77
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "005e78dc_cdc33491",
        "filename": "fastboot/engine.cpp",
        "patchSetId": 12
      },
      "lineNbr": 171,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-24T22:37:12Z",
      "side": 1,
      "message": "nit: prefer size_t for things like buffer lengths.",
      "range": {
        "startLine": 171,
        "startChar": 50,
        "endLine": 171,
        "endChar": 58
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c8603398_6fb7119a",
        "filename": "fastboot/engine.cpp",
        "patchSetId": 12
      },
      "lineNbr": 171,
      "author": {
        "id": 1138338
      },
      "writtenOn": "2017-02-24T23:40:02Z",
      "side": 1,
      "message": "So do I. the only problem is that other fb_queue_* functions are unsigned too. I will change it but it will look odd to me.",
      "parentUuid": "005e78dc_cdc33491",
      "range": {
        "startLine": 171,
        "startChar": 50,
        "endLine": 171,
        "endChar": 58
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27544f20_7a65df4b",
        "filename": "fastboot/engine.cpp",
        "patchSetId": 12
      },
      "lineNbr": 174,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-24T22:37:12Z",
      "side": 1,
      "message": "It looks like these fb_queue_* functions all expect that they\u0027re given ownership of the memory passed to them so they don\u0027t need to make a persistent copy themselves. Can we follow that same rule here to keep it consistent?\n\nAs far as I can tell this memory is never released, the program just exits - is that right? If so, just dynamically allocate your std::vector\u003c\u003e and pass in the underlying array here. It\u0027s no worse than leaving un-deleted buffers floating around and matches the existing functionality better.",
      "range": {
        "startLine": 174,
        "startChar": 4,
        "endLine": 174,
        "endChar": 29
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c0e4940_d504d2c4",
        "filename": "fastboot/engine.cpp",
        "patchSetId": 12
      },
      "lineNbr": 174,
      "author": {
        "id": 1138338
      },
      "writtenOn": "2017-02-24T23:40:02Z",
      "side": 1,
      "message": "\u003e It looks like these fb_queue_* functions all expect that they\u0027re\n \u003e given ownership of the memory passed to them so they don\u0027t need to\n \u003e make a persistent copy themselves. Can we follow that same rule\n \u003e here to keep it consistent?\n \u003e \n \u003e As far as I can tell this memory is never released, the program\n \u003e just exits - is that right?\n\nthat is what I understood too. Actually I asked that question on previous comments but not body answered. However, I did run valgrind. \n\nLEAK SUMMARY:\n\u003d\u003d174075\u003d\u003d    definitely lost: 0 bytes in 0 blocks\n\u003d\u003d174075\u003d\u003d    indirectly lost: 0 bytes in 0 blocks\n\u003d\u003d174075\u003d\u003d      possibly lost: 0 bytes in 0 blocks\n\u003d\u003d174075\u003d\u003d    still reachable: 2,275 bytes in 17 blocks\n\u003d\u003d174075\u003d\u003d         suppressed: 0 bytes in 0 blocks\n\nWhich shows 0. I was expecting some leaks or have some ownership pass over using unique_ptr or something like that.\n\n\u003e If so, just dynamically allocate your\n \u003e std::vector\u003c\u003e and pass in the underlying array here. It\u0027s no worse\n \u003e than leaving un-deleted buffers floating around and matches the\n \u003e existing functionality better.\n\nSounds good to me. I think another patch can be created in order to fix that and make it more clear how the buffers are freed.",
      "parentUuid": "27544f20_7a65df4b",
      "range": {
        "startLine": 174,
        "startChar": 4,
        "endLine": 174,
        "endChar": 29
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4d4be05_7e5bebcc",
        "filename": "fastboot/partition.cpp",
        "patchSetId": 12
      },
      "lineNbr": 52,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-24T22:37:12Z",
      "side": 1,
      "message": "These feel like they should be member variables of StorageInfo (or some other class we define) instead.\n\nMaking these static here will make writing unittests a lot harder and seems more prone to unanticipated side effects.\n\nSpeaking of, I would strongly recommend unittests for this file - just pass some sample XML strings to StorageInfo trying to hit some corner cases and make sure the resulting PartitionTable and Partition objects are what you would expect them to be.",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 52,
        "endChar": 21
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4462d29_2bf3083a",
        "filename": "fastboot/partition.h",
        "patchSetId": 12
      },
      "lineNbr": 24,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-24T22:37:12Z",
      "side": 1,
      "message": "I know legacy code doesn\u0027t always follow this, but try to keep https://google.github.io/styleguide/cppguide.html#Naming in mind for new code.\n\nIn particular, type names (enums, structs, classes) and function names should be UpperCamelCase, and private class data members should end with a trailing underscore.",
      "range": {
        "startLine": 24,
        "startChar": 5,
        "endLine": 24,
        "endChar": 19
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6dbc969a_7ca300f8",
        "filename": "fastboot/partition.h",
        "patchSetId": 12
      },
      "lineNbr": 25,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-24T22:37:12Z",
      "side": 1,
      "message": "Similarly, new constants should use kConstantName.",
      "range": {
        "startLine": 25,
        "startChar": 2,
        "endLine": 25,
        "endChar": 21
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3036cdae_67b31b3d",
        "filename": "fastboot/partition.h",
        "patchSetId": 12
      },
      "lineNbr": 53,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-24T22:37:12Z",
      "side": 1,
      "message": "This data seems like an internal detail, suggest making it a private nested type under PartitionTable class:\n\n  class PartitionTable {\n   public:\n    ...\n\n   private:\n    struct Header {\n      ...\n    };\n\n    Header header_;\n    std::vector\u003cPartition\u003e partitions_;\n  }",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 53,
        "endChar": 30
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c0b290ca_04ba1951",
        "filename": "fastboot/partition.h",
        "patchSetId": 12
      },
      "lineNbr": 57,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-24T22:37:12Z",
      "side": 1,
      "message": "Looks like internal state, can this be private instead?\n\nAlso, making it static means that partition table lun numbering carries over between tables - is that what we want? If someone calls \"partition\" twice in the same fastboot command, e.g.\n\n  fastboot partition foo.xml partition bar.xml\n\nThis current_lun value will carry over between the two so that foo.xml affects bar.xml.",
      "range": {
        "startLine": 57,
        "startChar": 2,
        "endLine": 57,
        "endChar": 25
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee060574_df4bf23b",
        "filename": "fastboot/partition.h",
        "patchSetId": 12
      },
      "lineNbr": 70,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-24T22:37:12Z",
      "side": 1,
      "message": "Seems like these aren\u0027t used anywhere, can we get rid of them?",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 70,
        "endChar": 48
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}