{
  "comments": [
    {
      "key": {
        "uuid": "3cf018b1_edeaa716",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 138,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2017-02-24T23:38:38Z",
      "side": 1,
      "message": "Format",
      "range": {
        "startLine": 138,
        "startChar": 47,
        "endLine": 138,
        "endChar": 54
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8fd1de73_491c8515",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 460,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2017-02-24T23:38:38Z",
      "side": 1,
      "message": "Server side?  Device side?\n\nI think we\u0027re going to need some guidance on what a device is expected to do here.  In particular, messing with the partition table is a quick way to irreversibly brick a device.  In the past, as part of the fastbootd project, we considered having a region of the storage that was owned by Android that we could subpartition into system/vendor/odm/etc. as we saw fit, without messing with the bootloader owned partitions.",
      "range": {
        "startLine": 459,
        "startChar": 56,
        "endLine": 460,
        "endChar": 62
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "49771521_f6c8002d",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 460,
      "author": {
        "id": 1097918
      },
      "writtenOn": "2017-02-24T23:47:06Z",
      "side": 1,
      "message": "bootloader (device-side) fastboot implementation (server) is responsible for generation of partition table from the data passed by fastboot client running on PC/Mac host.\nthe fact that bootloader itself is generating partition table image would guarantee this image is compatible with the device geometry.",
      "parentUuid": "8fd1de73_491c8515",
      "range": {
        "startLine": 459,
        "startChar": 56,
        "endLine": 460,
        "endChar": 62
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b587440d_ed4a9360",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 460,
      "author": {
        "id": 1138338
      },
      "writtenOn": "2017-02-24T23:49:00Z",
      "side": 1,
      "message": "\u003e Server side?  Device side?\nI will use host side and device side to make it more clear. It is device side.\n\n \u003e \n \u003e I think we\u0027re going to need some guidance on what a device is\n \u003e expected to do here.  In particular, messing with the partition\n \u003e table is a quick way to irreversibly brick a device.  In the past,\n \u003e as part of the fastbootd project, we considered having a region of\n \u003e the storage that was owned by Android that we could subpartition\n \u003e into system/vendor/odm/etc. as we saw fit, without messing with the\n \u003e bootloader owned partitions.\n\nIt is up to the vendor what restriction to put on this command, since the device side can handle that. Vendors may want to not support this command at all on production devices (they can send \"partition command not supported on production devices\") to the user to make it clear. Or they can support partitioning of specific volumes by the user if the device is unlocked, etc. There is no restriction on that.",
      "parentUuid": "8fd1de73_491c8515",
      "range": {
        "startLine": 459,
        "startChar": 56,
        "endLine": 460,
        "endChar": 62
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4edc0e3f_1745101b",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 460,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2017-02-24T23:49:11Z",
      "side": 1,
      "message": "I\u0027m not worried about the device geometry, I\u0027m worried about what happens when you change the location of the bootloader partition and brick your device.",
      "parentUuid": "49771521_f6c8002d",
      "range": {
        "startLine": 459,
        "startChar": 56,
        "endLine": 460,
        "endChar": 62
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3721ebfc_620823d3",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 460,
      "author": {
        "id": 1138338
      },
      "writtenOn": "2017-02-24T23:54:22Z",
      "side": 1,
      "message": "Please read my previous comment (bottom part) and that is not still clear let me know. TLDR: this command is not really meant to be used by the user.",
      "parentUuid": "4edc0e3f_1745101b",
      "range": {
        "startLine": 459,
        "startChar": 56,
        "endLine": 460,
        "endChar": 62
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "844b73db_d3212f39",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 460,
      "author": {
        "id": 1097918
      },
      "writtenOn": "2017-02-24T23:55:25Z",
      "side": 1,
      "message": "do not quite follow; this operation as no different from most other \"fastboot flash xyz\" operations in that sense; any error and device is bricked (can\u0027t boot);\nupdating partitions will fall in the same category as updating other critical boot files (do any of it wrong and you\u0027ll need to use recovery tools in device emergency download mode).\nWhat this change does is \"simply\" making the process of updating partitions more easy for end user, since many HW details are hidden from user who only gives partition names ans sizes, and device would dod the rest.",
      "parentUuid": "4edc0e3f_1745101b",
      "range": {
        "startLine": 459,
        "startChar": 56,
        "endLine": 460,
        "endChar": 62
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ea255d0_2814e66d",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 460,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2017-02-24T23:59:40Z",
      "side": 1,
      "message": "Vendors generally don\u0027t use fastboot, they only implement it because we tell them to, so we need to specify the behaviors that we want.  Should the bootloader pretend that all the vendor-owned partitions don\u0027t exist, and partition around them?  What should they do if the requested partition table overlaps a vendor one?  Should this be allowed at all on production devices after fastboot oem unlock, or only on development bootloaders?\n\nAll existing fastboot commands are supposed to be recoverable - if you flash a bad boot.img, you can always hold down the volume keys to get back into fastboot and flash a good one.  The one exception is flashing the bootloader, but that is generally signed so only a good one should be accepted.\n\nImplementing this correctly on the device side is non-trivial, and I still haven\u0027t seen what the use case is for it.",
      "parentUuid": "4edc0e3f_1745101b",
      "range": {
        "startLine": 459,
        "startChar": 56,
        "endLine": 460,
        "endChar": 62
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3458350_2aacfd72",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 460,
      "author": {
        "id": 1097918
      },
      "writtenOn": "2017-02-25T00:09:26Z",
      "side": 1,
      "message": "I would disagree that vendors don\u0027t use fastboot; factory process is not using fastboot, but OEM developers do use it, and need to flash partition tables is very basic and universal; I believe it is time to unify the ways people do it.\n\n\"flashing bootloader\" is exactly the use case that is using this command under the hood. other use cases are non-critical partition table updates (which would allow to create custom partitions, resize system, vendor, and userdata.\nhowever, mechanism itself does not have any restrictions, it is just the compatible way of partitioning the device.\n\nIn the absence of convenient partition uipdate tool all the OEMs invent their own; some use custom tools (like QCOM), some embed special oem commands into fastboot; one way or another this is necessary part of development cycle, so why not have it done in nice and generic way?",
      "parentUuid": "9ea255d0_2814e66d",
      "range": {
        "startLine": 459,
        "startChar": 56,
        "endLine": 460,
        "endChar": 62
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f60e7a81_8c171913",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 460,
      "author": {
        "id": 1138338
      },
      "writtenOn": "2017-02-25T00:21:32Z",
      "side": 1,
      "message": "\u003e Vendors generally don\u0027t use fastboot,\n\n\nwe (google) as a OEM of the pixel device would like to use it.\n\n\n they only implement it\n \u003e because we tell them to, so we need to specify the behaviors that\n \u003e we want.\n\n\nThat is the good think about the change. It does not really change anything, it is only parsing information and passing it to the device side fastboot which is implemented by vendors. They have all the control about what can be done and what can not.\n\n\u003e  Should the bootloader pretend that all the vendor-owned\n \u003e partitions don\u0027t exist, and partition around them?\n\n\nI don\u0027t think is a good idea to have some partitions hidden and some visible in the same LUN. I think it would be common sense to put all partition you don\u0027t want to modify under one LUN and others we allow to modify in other LUN.\n\n\n\u003e  What should\n \u003e they do if the requested partition table overlaps a vendor one? \n\nthat should not be the case. Anyway when you modify some partition table all partitions there will be erase, that is what is expected (no only in android devices). So, you wisely choose your partition layout\n\n\n \u003e Should this be allowed at all on production devices after fastboot\n \u003e oem unlock, or only on development bootloaders?\n\n\nit is really up to the vendor. if you want to be ROM creator friendly. You could have one LUN with boot, system and data partitions and allow user to freely change partition sizes (or introduce new partitions). So that, if someone wants to put a bigger kernel (unlikely) he can.\n\n\n \u003e \n \u003e All existing fastboot commands are supposed to be recoverable - if\n \u003e you flash a bad boot.img, you can always hold down the volume keys\n \u003e to get back into fastboot and flash a good one.  The one exception\n \u003e is flashing the bootloader, but that is generally signed so only a\n \u003e good one should be accepted.\n \u003e \n \u003e Implementing this correctly on the device side is non-trivial, and\n \u003e I still haven\u0027t seen what the use case is for it.\n\n\nit is meant for development phases of the phones, to avoid using the awfully vendor tools, and for OTA updates, that I am not sure how are they managing partition resize changes currently.",
      "parentUuid": "9ea255d0_2814e66d",
      "range": {
        "startLine": 459,
        "startChar": 56,
        "endLine": 460,
        "endChar": 62
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a473dfcf_4e073761",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 460,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2017-02-25T00:41:21Z",
      "side": 1,
      "message": "All of these questions should be answered in the documentation, or at least in our bootloader requirements doc we give to vendors.",
      "parentUuid": "f60e7a81_8c171913",
      "range": {
        "startLine": 459,
        "startChar": 56,
        "endLine": 460,
        "endChar": 62
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e52e7975_b8b1c9c4",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 460,
      "author": {
        "id": 1097918
      },
      "writtenOn": "2017-02-25T01:09:19Z",
      "side": 1,
      "message": "Colin, this is the doc you\u0027re suggesting we update?\nhttps://docs.google.com/document/d/1R3QVGPJ4_yAv8e-V35GLvJJ75XDGrLrandL-D6JTW4o/edit\n\nplease see the updated doc with my suggestions.",
      "parentUuid": "a473dfcf_4e073761",
      "range": {
        "startLine": 459,
        "startChar": 56,
        "endLine": 460,
        "endChar": 62
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3b07a3c_9ab8d661",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 468,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-24T22:37:12Z",
      "side": 1,
      "message": "volume",
      "range": {
        "startLine": 468,
        "startChar": 14,
        "endLine": 468,
        "endChar": 20
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1646a3a4_1c2a9e5a",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 468,
      "author": {
        "id": 1138338
      },
      "writtenOn": "2017-02-24T23:40:02Z",
      "side": 1,
      "message": "will fix",
      "parentUuid": "b3b07a3c_9ab8d661",
      "range": {
        "startLine": 468,
        "startChar": 14,
        "endLine": 468,
        "endChar": 20
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac100dc4_aa622255",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 486,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-24T22:37:12Z",
      "side": 1,
      "message": "addressable",
      "range": {
        "startLine": 486,
        "startChar": 11,
        "endLine": 486,
        "endChar": 22
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "876656b3_5d65a9e2",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 486,
      "author": {
        "id": 1138338
      },
      "writtenOn": "2017-02-24T23:40:02Z",
      "side": 1,
      "message": "will fix",
      "parentUuid": "ac100dc4_aa622255",
      "range": {
        "startLine": 486,
        "startChar": 11,
        "endLine": 486,
        "endChar": 22
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f84ad156_81dd8866",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 488,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2017-02-24T23:38:38Z",
      "side": 1,
      "message": "The name \"lun\" is confusing for emmc, is there a better name to describe hardware partitions?",
      "range": {
        "startLine": 488,
        "startChar": 10,
        "endLine": 488,
        "endChar": 13
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7121addc_438fa7cb",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 488,
      "author": {
        "id": 1097918
      },
      "writtenOn": "2017-02-24T23:47:06Z",
      "side": 1,
      "message": "this is called partition in emmc spec, and lun in ufs spec;\nwhatever we chose will be confusing for the other spec; current choice is based on the assumption that going forward we shall mostly if not exclusively use UFS chips, since eMMC technology became outdated hence lun (from UFS spec) is used",
      "parentUuid": "f84ad156_81dd8866",
      "range": {
        "startLine": 488,
        "startChar": 10,
        "endLine": 488,
        "endChar": 13
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4e9f223_d9217c7b",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 490,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-24T22:37:12Z",
      "side": 1,
      "message": "present",
      "range": {
        "startLine": 490,
        "startChar": 45,
        "endLine": 490,
        "endChar": 52
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c0a1caa2_a07571a3",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 490,
      "author": {
        "id": 1138338
      },
      "writtenOn": "2017-02-24T23:40:02Z",
      "side": 1,
      "message": "will fix",
      "parentUuid": "b4e9f223_d9217c7b",
      "range": {
        "startLine": 490,
        "startChar": 45,
        "endLine": 490,
        "endChar": 52
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b93863f_e4c982c9",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 513,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-24T22:37:12Z",
      "side": 1,
      "message": "extra whitespace",
      "range": {
        "startLine": 513,
        "startChar": 76,
        "endLine": 513,
        "endChar": 77
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8cb54486_23b2ebd3",
        "filename": "fastboot/README.md",
        "patchSetId": 12
      },
      "lineNbr": 513,
      "author": {
        "id": 1138338
      },
      "writtenOn": "2017-02-24T23:40:02Z",
      "side": 1,
      "message": "will fix",
      "parentUuid": "8b93863f_e4c982c9",
      "range": {
        "startLine": 513,
        "startChar": 76,
        "endLine": 513,
        "endChar": 77
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "005e78dc_cdc33491",
        "filename": "fastboot/engine.cpp",
        "patchSetId": 12
      },
      "lineNbr": 171,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-24T22:37:12Z",
      "side": 1,
      "message": "nit: prefer size_t for things like buffer lengths.",
      "range": {
        "startLine": 171,
        "startChar": 50,
        "endLine": 171,
        "endChar": 58
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c8603398_6fb7119a",
        "filename": "fastboot/engine.cpp",
        "patchSetId": 12
      },
      "lineNbr": 171,
      "author": {
        "id": 1138338
      },
      "writtenOn": "2017-02-24T23:40:02Z",
      "side": 1,
      "message": "So do I. the only problem is that other fb_queue_* functions are unsigned too. I will change it but it will look odd to me.",
      "parentUuid": "005e78dc_cdc33491",
      "range": {
        "startLine": 171,
        "startChar": 50,
        "endLine": 171,
        "endChar": 58
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27544f20_7a65df4b",
        "filename": "fastboot/engine.cpp",
        "patchSetId": 12
      },
      "lineNbr": 174,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-24T22:37:12Z",
      "side": 1,
      "message": "It looks like these fb_queue_* functions all expect that they\u0027re given ownership of the memory passed to them so they don\u0027t need to make a persistent copy themselves. Can we follow that same rule here to keep it consistent?\n\nAs far as I can tell this memory is never released, the program just exits - is that right? If so, just dynamically allocate your std::vector\u003c\u003e and pass in the underlying array here. It\u0027s no worse than leaving un-deleted buffers floating around and matches the existing functionality better.",
      "range": {
        "startLine": 174,
        "startChar": 4,
        "endLine": 174,
        "endChar": 29
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c0e4940_d504d2c4",
        "filename": "fastboot/engine.cpp",
        "patchSetId": 12
      },
      "lineNbr": 174,
      "author": {
        "id": 1138338
      },
      "writtenOn": "2017-02-24T23:40:02Z",
      "side": 1,
      "message": "\u003e It looks like these fb_queue_* functions all expect that they\u0027re\n \u003e given ownership of the memory passed to them so they don\u0027t need to\n \u003e make a persistent copy themselves. Can we follow that same rule\n \u003e here to keep it consistent?\n \u003e \n \u003e As far as I can tell this memory is never released, the program\n \u003e just exits - is that right?\n\nthat is what I understood too. Actually I asked that question on previous comments but not body answered. However, I did run valgrind. \n\nLEAK SUMMARY:\n\u003d\u003d174075\u003d\u003d    definitely lost: 0 bytes in 0 blocks\n\u003d\u003d174075\u003d\u003d    indirectly lost: 0 bytes in 0 blocks\n\u003d\u003d174075\u003d\u003d      possibly lost: 0 bytes in 0 blocks\n\u003d\u003d174075\u003d\u003d    still reachable: 2,275 bytes in 17 blocks\n\u003d\u003d174075\u003d\u003d         suppressed: 0 bytes in 0 blocks\n\nWhich shows 0. I was expecting some leaks or have some ownership pass over using unique_ptr or something like that.\n\n\u003e If so, just dynamically allocate your\n \u003e std::vector\u003c\u003e and pass in the underlying array here. It\u0027s no worse\n \u003e than leaving un-deleted buffers floating around and matches the\n \u003e existing functionality better.\n\nSounds good to me. I think another patch can be created in order to fix that and make it more clear how the buffers are freed.",
      "parentUuid": "27544f20_7a65df4b",
      "range": {
        "startLine": 174,
        "startChar": 4,
        "endLine": 174,
        "endChar": 29
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8eb5458_4d6b0055",
        "filename": "fastboot/engine.cpp",
        "patchSetId": 12
      },
      "lineNbr": 174,
      "author": {
        "id": 1138338
      },
      "writtenOn": "2017-02-25T00:36:54Z",
      "side": 1,
      "message": "Unfortunately after the changes:\n\nvoid fb_queue_partition(unsigned num, void *data, size_t sz)\n{\n    Action *a;\n\n    a \u003d queue_action(OP_DOWNLOAD, \"\");\n\n    a-\u003edata \u003d data;\n    a-\u003esize \u003d (uint32_t)sz;\n    a-\u003emsg \u003d mkmsg(\"sending partition table %u (%d B)\", num, sz);\n\n    a \u003d queue_action(OP_COMMAND, \"partition\");\n    a-\u003emsg \u003d mkmsg(\"writing partition table %u \", num);\n}\n...\nstatic int do_partition_table(const std::string\u0026 fname)\n{\n    storage_info info(fname);\n\n    for (auto\u0026 p : info.get_partition_tables()) {\n        auto data \u003d new std::vector\u003cuint8_t\u003e(p.serialize());\n        fb_queue_partition(p.get_lun(), data-\u003edata(), data-\u003esize());\n    }\n\n    return 0;\n}\n..\n\nMemory leaked is reported.\n\n\u003d\u003d182933\u003d\u003d LEAK SUMMARY:\n\u003d\u003d182933\u003d\u003d    definitely lost: 72 bytes in 3 blocks\n\n\u003e \"It\u0027s no worse than leaving un-deleted buffers floating around and matches the existing functionality better.\"\n\nSome how it is worse. is there any other solution ?",
      "parentUuid": "7c0e4940_d504d2c4",
      "range": {
        "startLine": 174,
        "startChar": 4,
        "endLine": 174,
        "endChar": 29
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d422c02d_397f506e",
        "filename": "fastboot/engine.cpp",
        "patchSetId": 12
      },
      "lineNbr": 174,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-25T00:46:42Z",
      "side": 1,
      "message": "Maybe I was a little loose using \"no worse\" - it\u0027s no worse in the sense that it\u0027s still unreleased memory, but you are correct that it falls under a different valgrind category.\n\nThe raw buffers can technically still be reached because they have pointers from the global action_list. std::vector\u003c\u003e is different because we\u0027re only retaining the pointer to the underlying buffer in action_list - the additional bookkeeping data is indeed lost and unrecoverable.\n\nI suppose since speed/memory usage isn\u0027t really a concern here, let\u0027s not kill ourselves trying to avoid a buffer copy, but let\u0027s do it in the caller so that fb_queue_partition() follows the same ownership semantics (e.g. assumes ownership of the pointer)\n\nTL;DR: go back to a stack-allocated std::vector\u003c\u003e, and copy its data to a dynamically allocated raw buffer in the caller rather than in fb_queue_partition()",
      "parentUuid": "e8eb5458_4d6b0055",
      "range": {
        "startLine": 174,
        "startChar": 4,
        "endLine": 174,
        "endChar": 29
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4d4be05_7e5bebcc",
        "filename": "fastboot/partition.cpp",
        "patchSetId": 12
      },
      "lineNbr": 52,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-24T22:37:12Z",
      "side": 1,
      "message": "These feel like they should be member variables of StorageInfo (or some other class we define) instead.\n\nMaking these static here will make writing unittests a lot harder and seems more prone to unanticipated side effects.\n\nSpeaking of, I would strongly recommend unittests for this file - just pass some sample XML strings to StorageInfo trying to hit some corner cases and make sure the resulting PartitionTable and Partition objects are what you would expect them to be.",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 52,
        "endChar": 21
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed82bfbc_79cbd9ee",
        "filename": "fastboot/partition.cpp",
        "patchSetId": 12
      },
      "lineNbr": 52,
      "author": {
        "id": 1138338
      },
      "writtenOn": "2017-02-25T01:17:14Z",
      "side": 1,
      "message": "\u003e These feel like they should be member variables of StorageInfo (or\n \u003e some other class we define) instead.\n\nyeah, that sounds good.\n\n \u003e \n \u003e Making these static here will make writing unittests a lot harder\n \u003e and seems more prone to unanticipated side effects.\n \u003e \n \u003e Speaking of, I would strongly recommend unittests for this file -\n \u003e just pass some sample XML strings to StorageInfo trying to hit some\n \u003e corner cases and make sure the resulting PartitionTable and\n \u003e Partition objects are what you would expect them to be.\n\nI will look into how to integrate the unittest",
      "parentUuid": "b4d4be05_7e5bebcc",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 52,
        "endChar": 21
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4462d29_2bf3083a",
        "filename": "fastboot/partition.h",
        "patchSetId": 12
      },
      "lineNbr": 24,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-24T22:37:12Z",
      "side": 1,
      "message": "I know legacy code doesn\u0027t always follow this, but try to keep https://google.github.io/styleguide/cppguide.html#Naming in mind for new code.\n\nIn particular, type names (enums, structs, classes) and function names should be UpperCamelCase, and private class data members should end with a trailing underscore.",
      "range": {
        "startLine": 24,
        "startChar": 5,
        "endLine": 24,
        "endChar": 19
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "032fb2b7_11699590",
        "filename": "fastboot/partition.h",
        "patchSetId": 12
      },
      "lineNbr": 24,
      "author": {
        "id": 1138338
      },
      "writtenOn": "2017-02-25T01:17:14Z",
      "side": 1,
      "message": "I started with that style because I followed the current style of fastboot. which is basically C code with only .cpp name. But since now it is following more C++ Style I can do the changes.",
      "parentUuid": "c4462d29_2bf3083a",
      "range": {
        "startLine": 24,
        "startChar": 5,
        "endLine": 24,
        "endChar": 19
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6dbc969a_7ca300f8",
        "filename": "fastboot/partition.h",
        "patchSetId": 12
      },
      "lineNbr": 25,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-24T22:37:12Z",
      "side": 1,
      "message": "Similarly, new constants should use kConstantName.",
      "range": {
        "startLine": 25,
        "startChar": 2,
        "endLine": 25,
        "endChar": 21
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef41fdaf_3549eafc",
        "filename": "fastboot/partition.h",
        "patchSetId": 12
      },
      "lineNbr": 25,
      "author": {
        "id": 1138338
      },
      "writtenOn": "2017-02-25T01:17:14Z",
      "side": 1,
      "message": "sure",
      "parentUuid": "6dbc969a_7ca300f8",
      "range": {
        "startLine": 25,
        "startChar": 2,
        "endLine": 25,
        "endChar": 21
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3036cdae_67b31b3d",
        "filename": "fastboot/partition.h",
        "patchSetId": 12
      },
      "lineNbr": 53,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-24T22:37:12Z",
      "side": 1,
      "message": "This data seems like an internal detail, suggest making it a private nested type under PartitionTable class:\n\n  class PartitionTable {\n   public:\n    ...\n\n   private:\n    struct Header {\n      ...\n    };\n\n    Header header_;\n    std::vector\u003cPartition\u003e partitions_;\n  }",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 53,
        "endChar": 30
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4c1cce9_406509c3",
        "filename": "fastboot/partition.h",
        "patchSetId": 12
      },
      "lineNbr": 53,
      "author": {
        "id": 1138338
      },
      "writtenOn": "2017-02-25T01:17:14Z",
      "side": 1,
      "message": "sure",
      "parentUuid": "3036cdae_67b31b3d",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 53,
        "endChar": 30
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c0b290ca_04ba1951",
        "filename": "fastboot/partition.h",
        "patchSetId": 12
      },
      "lineNbr": 57,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-24T22:37:12Z",
      "side": 1,
      "message": "Looks like internal state, can this be private instead?\n\nAlso, making it static means that partition table lun numbering carries over between tables - is that what we want? If someone calls \"partition\" twice in the same fastboot command, e.g.\n\n  fastboot partition foo.xml partition bar.xml\n\nThis current_lun value will carry over between the two so that foo.xml affects bar.xml.",
      "range": {
        "startLine": 57,
        "startChar": 2,
        "endLine": 57,
        "endChar": 25
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f725dced_dd867205",
        "filename": "fastboot/partition.h",
        "patchSetId": 12
      },
      "lineNbr": 57,
      "author": {
        "id": 1138338
      },
      "writtenOn": "2017-02-25T01:17:14Z",
      "side": 1,
      "message": "That is not supported right now.\n\nsaid that. I also don\u0027t like that. I use that also to keep this behavior:\n\nAttribute lun:    unique id of the physical instance for emmc device this is\n                  partition (Boot0/1, RPMB, GP0/1/2/3, USER) for ufs device this\n                  is UFS LUN# (0..7). if not present volumes will be enumerated\n                  in the order they are found in the XML\n\n\"f not present volumes will be enumerated in the order they are found in the XML\"\n\nit was the simplest way to do int since the one that knows how many partitions have been process is storage_info but where attr lun is read is inside partition_table constructor which has not idea of how many partition have been processed.\n\nI prefer simplicity always but I can think in other solution.",
      "parentUuid": "c0b290ca_04ba1951",
      "range": {
        "startLine": 57,
        "startChar": 2,
        "endLine": 57,
        "endChar": 25
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee060574_df4bf23b",
        "filename": "fastboot/partition.h",
        "patchSetId": 12
      },
      "lineNbr": 70,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-24T22:37:12Z",
      "side": 1,
      "message": "Seems like these aren\u0027t used anywhere, can we get rid of them?",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 70,
        "endChar": 48
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7bb3503c_17a7eadf",
        "filename": "fastboot/partition.h",
        "patchSetId": 12
      },
      "lineNbr": 70,
      "author": {
        "id": 1138338
      },
      "writtenOn": "2017-02-25T01:17:14Z",
      "side": 1,
      "message": "Oh yes, they are leftovers from previous code. I will get rid of them",
      "parentUuid": "ee060574_df4bf23b",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 70,
        "endChar": 48
      },
      "revId": "caacc6cf1f43f042ef2d1c00f471a76f29cf8e81",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}