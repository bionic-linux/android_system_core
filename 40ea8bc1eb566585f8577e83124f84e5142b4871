{
  "comments": [
    {
      "key": {
        "uuid": "9850d91c_c894c84c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-08-19T21:56:20Z",
      "side": 1,
      "message": "yeah, the thing that always made me sad was how unfriendly the OpenSSL APIs were to things like std::unique_ptr --- you couldn\u0027t even conveniently use RAII to make them a bit less unsafe.",
      "revId": "40ea8bc1eb566585f8577e83124f84e5142b4871",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e9162ae8_4aaa5a62",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1031048
      },
      "writtenOn": "2020-08-20T15:06:20Z",
      "side": 1,
      "message": "BoringSSL provides a bssl::UniquePtr\u003cT\u003e nowadays. I would have switched this file to it, but it was C. :-) We are stuck with the various takes-ownership-only-on-success APIs for OpenSSL compatibility, so it\u0027s still a little annoying, but ah well. At some point I need to write new RSA creation functions because the setters they wrote are truly atrocious.\n\nThis is probably a really dumb question (I don\u0027t Android much), but how do I tell which test is timing out? I see \"TIMEOUT: The test is cancelled after timeout.\", but I can\u0027t find the button to view details.",
      "parentUuid": "9850d91c_c894c84c",
      "revId": "40ea8bc1eb566585f8577e83124f84e5142b4871",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "647154ab_11f92c3a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-08-20T15:50:29Z",
      "side": 1,
      "message": "there\u0027s no reason for this file to be C any more. that was brillo\u0027s fault, but that\u0027s long gone now.\n\nas for the timeouts: not your fault. there have been/are infrastructure issues. the machines should automatically kick off another run when they\u0027re back on their feet... oh, looks like they already did at 04:21 :-)",
      "parentUuid": "e9162ae8_4aaa5a62",
      "revId": "40ea8bc1eb566585f8577e83124f84e5142b4871",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef5879f8_1ff1b01d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-08-20T16:26:51Z",
      "side": 1,
      "message": "still looks like an infrastructure issue (from the lack of any link to specific tests)...",
      "revId": "40ea8bc1eb566585f8577e83124f84e5142b4871",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c21b5b59_787e221c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-08-21T17:40:20Z",
      "side": 1,
      "message": "a quick codesearch (https://source.corp.google.com/search?q\u003dbssl::UniquePtr%20RSA_set0_key) suggests that people are struggling with this --- \"should i .get() or .release() when talking to RSA_set0_key()?\" confusion, for example. (or, in other cases, just assume it can\u0027t fail :-) )",
      "parentUuid": "647154ab_11f92c3a",
      "revId": "40ea8bc1eb566585f8577e83124f84e5142b4871",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a961e33_b2743615",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1031048
      },
      "writtenOn": "2020-08-21T18:00:58Z",
      "side": 1,
      "message": "Yeah, this API is terrible. :-) It\u0027s also problematic for BoringSSL internally because callers end up filling in the RSA key piecemeal, but we actually need to check some invariants and also derive some information for Montgomery reduction, so we end up doing this complex internal locking.\n\nI\u0027m going to add some new ones, though we\u0027ll be stuck supporting both due to OpenSSL compat.\nhttps://docs.google.com/document/d/1w-vqHwYo5JpHVReDuuO3LyajYsJ0qMqt-vuf4M269pM/edit",
      "parentUuid": "c21b5b59_787e221c",
      "revId": "40ea8bc1eb566585f8577e83124f84e5142b4871",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}