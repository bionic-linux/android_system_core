{
  "comments": [
    {
      "key": {
        "uuid": "40867080_7ff122e3",
        "filename": "fs_mgr/libdm/dm.cpp",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-05-15T15:55:28Z",
      "side": 1,
      "message": "I just worry about this check.  I know we use it elsewhere, but it has a few caveats now: it will be true in fastbootd and it will be true before the first switch_root in first_stage_init (though, I don\u0027t think we use libdm before then)\n\nMay that cause some problems?  Or do the property checks below fully distinguish the fastbootd case from the non-AB OTA case?  It may be worth a comment on the function in either case.",
      "revId": "a4abeb2852e3d701053d5b1a0ed31e83a54332fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d72d5f9_98c21cf5",
        "filename": "fs_mgr/libdm/dm.cpp",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 1088085
      },
      "writtenOn": "2020-05-18T18:53:47Z",
      "side": 1,
      "message": "I was thinking about ro.boot.mode\u003drecovery. But I am not sure if it can distinguish recovery and fastbootd. Will init.svc.recovery work in this case?",
      "parentUuid": "40867080_7ff122e3",
      "revId": "a4abeb2852e3d701053d5b1a0ed31e83a54332fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2aaf544_01c742d0",
        "filename": "fs_mgr/libdm/dm.cpp",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 1088085
      },
      "writtenOn": "2020-05-18T19:48:25Z",
      "side": 1,
      "message": "Another option is to add a LOCAL_CFLAGS when building updater. So the marco will be visible in libdm",
      "parentUuid": "0d72d5f9_98c21cf5",
      "revId": "a4abeb2852e3d701053d5b1a0ed31e83a54332fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb9d2c0b_32ccc177",
        "filename": "fs_mgr/libdm/dm.cpp",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2020-05-18T20:37:40Z",
      "side": 1,
      "message": "I don\u0027t think we need to distinguish recovery and fastbootd in this case. The problem we are trying to solve is to run R updater with Q (and below) recovery. See L171. Fastbootd always have the same version as recovery because it is in the recovery image, not from the OTA package.\n\nAdding cflags to updater won\u0027t work because the static library libdm is built separately. I think you need a special libdm_updater (with LOCAL_CFLAGS) then link updater to this special libdm_updater variant.",
      "parentUuid": "e2aaf544_01c742d0",
      "revId": "a4abeb2852e3d701053d5b1a0ed31e83a54332fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b43595eb_a584f091",
        "filename": "fs_mgr/libdm/dm.cpp",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 1088085
      },
      "writtenOn": "2020-05-18T20:53:21Z",
      "side": 1,
      "message": "right, we\u0027ll need another libdm_updater. Checking \"/system/bin/recovery\" sounds reasonable to me. Do we have any standard for ro.boot.mode?",
      "parentUuid": "cb9d2c0b_32ccc177",
      "revId": "a4abeb2852e3d701053d5b1a0ed31e83a54332fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3cbd357_2d8e6216",
        "filename": "fs_mgr/libdm/dm.cpp",
        "patchSetId": 3
      },
      "lineNbr": 145,
      "author": {
        "id": 1421169
      },
      "writtenOn": "2020-05-15T15:57:31Z",
      "side": 1,
      "message": "Even older recoveries might not mount /system\nThere must be a better way to determine if in recovery.",
      "parentUuid": "",
      "revId": "a4abeb2852e3d701053d5b1a0ed31e83a54332fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "106a7213_951e65a1",
        "filename": "fs_mgr/libdm/dm.cpp",
        "patchSetId": 3
      },
      "lineNbr": 145,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-05-15T16:02:21Z",
      "side": 1,
      "message": "I forget when we made the change, but recovery.img now uses /system/bin/... as its filesystem, mirroring the layout of system.img, so trying to access that file doesn\u0027t imply mounting /system.\n\nBut you\u0027re right in that since we changed that path, older recoveries may not have recovery in that location, so we\u0027ll need a better check for them.",
      "parentUuid": "f3cbd357_2d8e6216",
      "revId": "a4abeb2852e3d701053d5b1a0ed31e83a54332fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc6923e5_34b8f0d6",
        "filename": "fs_mgr/libdm/dm.cpp",
        "patchSetId": 3
      },
      "lineNbr": 145,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2020-05-15T17:58:48Z",
      "side": 1,
      "message": "This is only relevant to DAP devices (i.e. Q-launches) upgrading to R. Are there other recovery paths possible on Q? (Non-DAP devices won\u0027t using libdm in the updater, and non-A/B has no retrofit DAP case.)",
      "parentUuid": "106a7213_951e65a1",
      "revId": "a4abeb2852e3d701053d5b1a0ed31e83a54332fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff5b2551_d5177ae2",
        "filename": "fs_mgr/libdm/dm.cpp",
        "patchSetId": 3
      },
      "lineNbr": 145,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2020-05-15T19:43:44Z",
      "side": 1,
      "message": "+1 to David\u0027s comment. Although, DAP devices doesn\u0027t necessary mean Q launches; we have DAP retrofits.",
      "parentUuid": "dc6923e5_34b8f0d6",
      "revId": "a4abeb2852e3d701053d5b1a0ed31e83a54332fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9339bc2d_cc2d8f23",
        "filename": "fs_mgr/libdm/dm.cpp",
        "patchSetId": 3
      },
      "lineNbr": 145,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2020-05-18T17:58:25Z",
      "side": 1,
      "message": "Ping. Felix, can you clarify whether this is a problem for a Q launch Non-AB device?",
      "parentUuid": "ff5b2551_d5177ae2",
      "revId": "a4abeb2852e3d701053d5b1a0ed31e83a54332fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66a73897_d73acec8",
        "filename": "fs_mgr/libdm/dm.cpp",
        "patchSetId": 3
      },
      "lineNbr": 145,
      "author": {
        "id": 1421169
      },
      "writtenOn": "2020-05-18T20:42:21Z",
      "side": 1,
      "message": "By DAP you mean Dynamic Partitions?\n\nI see libdm, by inclusion in libfs_mgr, used in all sorts of places, both for AB and non-AB as well as DAP devices.\n\nImportant is that it ends up in the updater binary, which could end up getting processed by an older recovery.",
      "parentUuid": "dc6923e5_34b8f0d6",
      "revId": "a4abeb2852e3d701053d5b1a0ed31e83a54332fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8aff7809_403f0b63",
        "filename": "fs_mgr/libdm/dm.cpp",
        "patchSetId": 3
      },
      "lineNbr": 145,
      "author": {
        "id": 1421169
      },
      "writtenOn": "2020-05-18T20:42:21Z",
      "side": 1,
      "message": "@danderson the device would be pre-Q launch.",
      "parentUuid": "",
      "revId": "a4abeb2852e3d701053d5b1a0ed31e83a54332fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17d36b6b_d2b19bba",
        "filename": "fs_mgr/libdm/dm.cpp",
        "patchSetId": 3
      },
      "lineNbr": 145,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2020-05-18T20:47:47Z",
      "side": 1,
      "message": "DAP \u003d\u003d Dynamic (Android) Partitions\n\nlibdm is indeed included by libfs_mgr, but libdm is only used by DAP devices.\n\nThis table:\n\n         |  DAP   |  non-DAP\n  A/B    |        |    \n  Non-A/B|  here  |   \n\nA/B DAP and non-DAP: uses update_engine, so this does not apply\nnon-A/B non-DAP: does not use libdm at all\nnon-A/B DAP: affected by this CL",
      "parentUuid": "66a73897_d73acec8",
      "revId": "a4abeb2852e3d701053d5b1a0ed31e83a54332fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45382337_def58613",
        "filename": "fs_mgr/libdm/dm.cpp",
        "patchSetId": 3
      },
      "lineNbr": 171,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2020-05-15T19:43:44Z",
      "side": 1,
      "message": "From Build.java:\n```\n         * The user-visible version string.  E.g., \"1.0\" or \"3.4b5\" or \"bananas\".\n         *\n         * This field is an opaque string. Do not assume that its value\n         * has any particular structure or that values of RELEASE from\n         * different releases can be somehow ordered.\n```\n\nI see this pattern in various places. Is there a reason why ro.build.version.sdk isn\u0027t used release? (Tom, do you know?)",
      "range": {
        "startLine": 171,
        "startChar": 53,
        "endLine": 171,
        "endChar": 77
      },
      "revId": "a4abeb2852e3d701053d5b1a0ed31e83a54332fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "257948b8_2b22ac93",
        "filename": "fs_mgr/libdm/dm.cpp",
        "patchSetId": 3
      },
      "lineNbr": 171,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-05-15T19:52:56Z",
      "side": 1,
      "message": "I have no idea, sorry.",
      "parentUuid": "45382337_def58613",
      "range": {
        "startLine": 171,
        "startChar": 53,
        "endLine": 171,
        "endChar": 77
      },
      "revId": "a4abeb2852e3d701053d5b1a0ed31e83a54332fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01a80602_2232178b",
        "filename": "fs_mgr/libdm/dm.cpp",
        "patchSetId": 3
      },
      "lineNbr": 171,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2020-05-15T19:54:10Z",
      "side": 1,
      "message": "+dwillemsen to see if he has a better idea here.",
      "parentUuid": "257948b8_2b22ac93",
      "range": {
        "startLine": 171,
        "startChar": 53,
        "endLine": 171,
        "endChar": 77
      },
      "revId": "a4abeb2852e3d701053d5b1a0ed31e83a54332fe",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}