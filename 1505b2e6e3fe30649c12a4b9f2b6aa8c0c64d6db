{
  "comments": [
    {
      "key": {
        "uuid": "d4162500_cef6076d",
        "filename": "libbacktrace/UnwindMap.cpp",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 1015378
      },
      "writtenOn": "2016-06-16T02:42:42Z",
      "side": 1,
      "message": "What about the case where one thread is modifying the map and another thread is reading? I don\u0027t think STL data structures can usually safely handle that.",
      "range": {
        "startLine": 89,
        "startChar": 30,
        "endLine": 89,
        "endChar": 39
      },
      "revId": "1505b2e6e3fe30649c12a4b9f2b6aa8c0c64d6db",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4162500_7b58500d",
        "filename": "libbacktrace/UnwindMap.cpp",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 1019050
      },
      "writtenOn": "2016-06-16T18:06:59Z",
      "side": 1,
      "message": "This whole thing is a mess having to deal with the libunwind interface.\n\nFortunately, the only place that accesses the map data is the iterator code so I\u0027m going to have to change the callers to do a lock.",
      "parentUuid": "d4162500_cef6076d",
      "range": {
        "startLine": 89,
        "startChar": 30,
        "endLine": 89,
        "endChar": 39
      },
      "revId": "1505b2e6e3fe30649c12a4b9f2b6aa8c0c64d6db",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}