{
  "comments": [
    {
      "key": {
        "uuid": "27529551_4193684c",
        "filename": "mkbootimg/bootimg.h",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 1000413
      },
      "writtenOn": "2013-09-10T19:18:33Z",
      "side": 1,
      "message": "let\u0027s add another two fields here:\n\n   uint32_t hdr_version;\n   uint32_t hdr_len;\n\nThis way we can manage future expansion. Should now set the version to 1 (maybe add a define at top and describe what the new version means), and then set len to sizeof(boot_img_hdr).\n\nThis way you can test the version in the bootloader/fastboot implementaiton thingie and go from there.",
      "revId": "d35ce3563b4d86702cec4c8f7031fb8a1c55cac2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27529551_c15f787c",
        "filename": "mkbootimg/bootimg.h",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 1011333
      },
      "writtenOn": "2013-09-10T19:34:08Z",
      "side": 1,
      "message": "I don\u0027t think we can do this. Let\u0027s say a device has bootimages with header version 0 on it. Then you want to create an incremental OTA update. If mkbootimg is now creating version 1 headers, how can we instruct it to generate version 0 for the source target files package? If it is always generating version 1 headers then the binary diffs won\u0027t be correct.",
      "parentUuid": "27529551_4193684c",
      "revId": "d35ce3563b4d86702cec4c8f7031fb8a1c55cac2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c768d904_35e31050",
        "filename": "mkbootimg/bootimg.h",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 1000413
      },
      "writtenOn": "2013-09-10T19:41:43Z",
      "side": 1,
      "message": "If the bootloader only supports version 0, it won\u0027t know to look for extra_cmdline or even bother with looking at the version field. But that\u0027s not what you are asking I don\u0027t think.\n\nWhy won\u0027t the diffs be correct? Maybe I\u0027m missing something, I haven\u0027t looked at what assumptions recovery makes about boot images. From what I understand, the OTA source should be generated from a previous build, which would have been created before these changes were in, and thus would have the version field set to 0.",
      "parentUuid": "27529551_c15f787c",
      "revId": "d35ce3563b4d86702cec4c8f7031fb8a1c55cac2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c768d904_b51d607f",
        "filename": "mkbootimg/bootimg.h",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 1011333
      },
      "writtenOn": "2013-09-10T19:47:38Z",
      "side": 1,
      "message": "OTA updates are generated from a target files package. The boot images have not been built. Instead, during the ota_from_target_files process, mkbootimg is run to create boot images for both source and target. This is why you have to be very very very careful if you ever change mkbootimg as the boot images generated must match bit-for-bit what is already on the device.\n\nThe reason why the boot images aren\u0027t prebuilt inside the taget-files-package (as far as I can determine) is so that sign-target-files-apks can replace the key used to verify OTA updates inside the recovery console ramdisk.",
      "parentUuid": "c768d904_35e31050",
      "revId": "d35ce3563b4d86702cec4c8f7031fb8a1c55cac2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87e501f5_1b6e1bc0",
        "filename": "mkbootimg/bootimg.h",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 1000413
      },
      "writtenOn": "2013-09-11T18:35:01Z",
      "side": 1,
      "message": "Ah, gotcha. Eeek, that would be bad indeed.\nThis, to me, sounds like a bug in our OTA package generation. Image (source or target) generation should be hermetic (well \"ish\" anyway) so the tools used to generate the source images should come from the build that created the source target files. Anything else and we always run the risk of having such issues all over the place. This sounds very fragile. I\u0027ll file a bug here and see if we can get that addressed.",
      "parentUuid": "c768d904_b51d607f",
      "revId": "d35ce3563b4d86702cec4c8f7031fb8a1c55cac2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}