{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "73ad99db_76de219b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2020-10-26T19:11:20Z",
      "side": 1,
      "message": "Please be more specific about the usage of this new action. Cgroup abstraction layer was created to move away from direct file access towards higher abstraction level \"actions\". \"Write a file\" action defeats that purpose, therefore I\u0027m very skeptical about this approach.\n\n-2 until there is reasoning why we need this.",
      "revId": "16be96930d646bb6fd98b61686d087aa072f4bcb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f39ecad8_c6e0929b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1105075
      },
      "writtenOn": "2020-10-26T22:42:54Z",
      "side": 1,
      "message": "I think this is bases on Quentin\u0027s suggestion to use vendor scheduler extension control knob.",
      "parentUuid": "73ad99db_76de219b",
      "revId": "16be96930d646bb6fd98b61686d087aa072f4bcb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b0844ff_6f0757cf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1324603
      },
      "writtenOn": "2020-10-27T02:34:30Z",
      "side": 1,
      "message": "Yes, because it\u0027s harder to support cgroup file node extension, there is a workaround of using sysfs file node instead. Please refer to the detail in b/170507963. Thanks.",
      "parentUuid": "f39ecad8_c6e0929b",
      "revId": "16be96930d646bb6fd98b61686d087aa072f4bcb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e49e4ff2_4bd4afd5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2020-10-27T17:32:24Z",
      "side": 1,
      "message": "Agrh. This is such a hack...\n\nPlease replace AddToFileNodeAction with a SetPreferHighCapAction class which at least would represent the *intent* of the action rather than the *mechanism*. Later on when we replace this hack with something more appropriate it will be easier to handle such change if actions represent *what* we want to do rather than *how* it is done.",
      "parentUuid": "4b0844ff_6f0757cf",
      "revId": "16be96930d646bb6fd98b61686d087aa072f4bcb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b48fdfe_dad8a627",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1324603
      },
      "writtenOn": "2020-10-28T12:09:09Z",
      "side": 1,
      "message": "Yes, this is a hack :) We could change the action name, it\u0027s just libprocessgroup is generic, so I use a more general term in the first place. PreferHighCap feature is only for pixel currently, so I would like to confirm that you would like to change to this name?",
      "parentUuid": "e49e4ff2_4bd4afd5",
      "revId": "16be96930d646bb6fd98b61686d087aa072f4bcb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6c36b77_84cda361",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1569742
      },
      "writtenOn": "2020-10-28T13:29:54Z",
      "side": 1,
      "message": "FWIW I would also recommend to keep the name generic. Other partners are likely to have different features that use the same mechanism (that is, have a sysfs node exposed by vendor code), so we need that to work for them too ...",
      "parentUuid": "2b48fdfe_dad8a627",
      "revId": "16be96930d646bb6fd98b61686d087aa072f4bcb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "464185e1_f0526bef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2020-10-29T00:52:15Z",
      "side": 1,
      "message": "The problem is, as you correctly noted, that such mechanism opens doors for more hacks... We are trying to use cgroup abstraction layer with something that is not even part of a cgroup, instead it\u0027s a sysfs node.\n\nIf we want to be that generic, I suggest we have a WriteFile operation with attributes \"File\" and \"Value\" and we can support \"\u003cpid\u003e\" and \"\u003cuid\u003e\" replacement in both attributes like we do in CgroupController::GetProcsFilePath().",
      "parentUuid": "c6c36b77_84cda361",
      "revId": "16be96930d646bb6fd98b61686d087aa072f4bcb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}