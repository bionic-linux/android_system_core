{
  "comments": [
    {
      "key": {
        "uuid": "ed9ab306_fdc9a5ae",
        "filename": "fs_mgr/fs_mgr_remount.cpp",
        "patchSetId": 11
      },
      "lineNbr": 121,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-02-07T19:11:27Z",
      "side": 1,
      "message": "I still think this would be cleaner if we broke this up into separate functions.  This for loop + auto overlayfs_candidates \u003d fs_mgr_overlayfs_candidate_list(\u0026fstab); can be factored out into a separate FindRemountablePartitions() function.",
      "revId": "8a6075c7a6c5bd15c4f097964d65b4f969427f33",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b2b8e12_be676acd",
        "filename": "fs_mgr/fs_mgr_remount.cpp",
        "patchSetId": 11
      },
      "lineNbr": 121,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2019-02-07T21:41:50Z",
      "side": 1,
      "message": "This interacts with later CL modifications in the stack, arguments that would need to be supplied:\n\nfstab\noverlayfs_candidates\nverity\ncan_reboot\noverlayfs_valid\n\narguments returned:\n\nall\nall_overlayfs\n\nI will have to think about how I can split out all the mining into \"though chunks\" so that this request makes sense.",
      "parentUuid": "ed9ab306_fdc9a5ae",
      "revId": "8a6075c7a6c5bd15c4f097964d65b4f969427f33",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f59a3159_1dda9d67",
        "filename": "fs_mgr/fs_mgr_remount.cpp",
        "patchSetId": 11
      },
      "lineNbr": 146,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-02-07T19:11:27Z",
      "side": 1,
      "message": "This too looks like it can be factored out along with auto verity \u003d fs_mgr_overlayfs_verity_enabled_list(); into a separate function.",
      "revId": "8a6075c7a6c5bd15c4f097964d65b4f969427f33",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "594196c9_3bcb8db4",
        "filename": "fs_mgr/fs_mgr_remount.cpp",
        "patchSetId": 11
      },
      "lineNbr": 146,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2019-02-07T21:41:50Z",
      "side": 1,
      "message": "Above and here may be simplified if I had the ability to set some user-defined flags in FstabEntry like \u0027is_verity_protected\u0027 and \u0027is_wrapped_by_overlayfs\u0027.\n\nResisting making my own fstab class ...",
      "parentUuid": "f59a3159_1dda9d67",
      "revId": "8a6075c7a6c5bd15c4f097964d65b4f969427f33",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ceb3a436_9d8bfc27",
        "filename": "fs_mgr/fs_mgr_remount.cpp",
        "patchSetId": 11
      },
      "lineNbr": 146,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-02-07T23:14:55Z",
      "side": 1,
      "message": "Honestly, maybe not the worst idea.  Or better yet, adding the parts you\u0027re missing to the current fstab.\n\nFor is_verity_protected, you\u0027re relying on fs_mgr_update_verity_state() which I already want to refactor.  Would it help if I did take https://android-review.googlesource.com/c/platform/system/core/+/863409 to completion?  In this case you wouldn\u0027t need the verity vector at all; you could just call this function on each of the items in the fstab.\n\nSame thing for is_wrapped_by_overlayfs; you mean using that to replace fs_mgr_overlayfs_candidate_list(), right?  Instead of a separate flag, could we make a IsOverlayFsWrapped() function that takes a single FstabEntry as a parameter?\n\nI think if both of those functions took just an FstabEntry as their parameter, then this code would simplify greatly.",
      "parentUuid": "594196c9_3bcb8db4",
      "revId": "8a6075c7a6c5bd15c4f097964d65b4f969427f33",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "464debe0_4a67a6c2",
        "filename": "fs_mgr/fs_mgr_remount.cpp",
        "patchSetId": 11
      },
      "lineNbr": 146,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2019-02-07T23:33:34Z",
      "side": 1,
      "message": "I\u0027d say \u0027do it\u0027 for the refactor of verity state checking, this CL can wait as it is a \u0027second choice\u0027 fix to a P1 issue, and a \u0027first choice\u0027 fix for a P3 developer wish list (a remount command, and a refactor of the \u0027adb remount\u0027 operations).\n\nI was going to do something like this FYI:\n\n     // Generate the list of supported overlayfs mount points.\n     auto overlayfs_candidates \u003d fs_mgr_overlayfs_candidate_list(\u0026fstab);\n+    auto is_wrapped_by_overlayfs \u003d [\u0026overlayfs_candidates](const android::fs_mgr::FstabEntry\u0026 entry) {\n+        auto mount_point \u003d entry.mount_point;\n+        if (mount_point \u003d\u003d \"/\") mount_point \u003d \"/system\";\n+        return std::find(overlayfs_candidates.begin(), overlayfs_candidates.end(), mount_point) !\u003d overlayfs_candidates.end();\n+    };",
      "parentUuid": "ceb3a436_9d8bfc27",
      "revId": "8a6075c7a6c5bd15c4f097964d65b4f969427f33",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}