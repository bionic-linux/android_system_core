{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7305cd0b_854741fd",
        "filename": "init/property_service.cpp",
        "patchSetId": 5
      },
      "lineNbr": 98,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2021-05-06T06:57:02Z",
      "side": 1,
      "message": "nit: mentions that the legacy prob will be set if BOARD_USE_VBMETA_DIGTEST_IN_FINGERPRINT is true in the commit message next time. \n\nBtw, compares to having BOARD_USE_VBMETA_DIGTEST_IN_FINGERPRINT to enable this per board, just wondering will it be better if we add a new property for this purpose.\n\ne.g., ro.build.nextgen.fingerprint, ro.build.nextgen.id, etc.",
      "range": {
        "startLine": 98,
        "startChar": 42,
        "endLine": 98,
        "endChar": 69
      },
      "revId": "a12cf3edf33ee8e08327bebdf8c40f628e78a209",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd86f43b_bdc080bd",
        "filename": "init/property_service.cpp",
        "patchSetId": 5
      },
      "lineNbr": 98,
      "author": {
        "id": 1088085
      },
      "writtenOn": "2021-05-06T17:14:32Z",
      "side": 1,
      "message": "hmm, I still need a BoardConfig to not set \"ro.build.id\" at build time. I can surely add a ro.build.nextgen.fingerprint if the BOARD_USE_VBMETA_DIGTEST_IN_FINGERPRINT is true.",
      "parentUuid": "7305cd0b_854741fd",
      "range": {
        "startLine": 98,
        "startChar": 42,
        "endLine": 98,
        "endChar": 69
      },
      "revId": "a12cf3edf33ee8e08327bebdf8c40f628e78a209",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc552f6e_eac8bdf1",
        "filename": "init/property_service.cpp",
        "patchSetId": 5
      },
      "lineNbr": 98,
      "author": {
        "id": 1088085
      },
      "writtenOn": "2021-05-06T22:34:00Z",
      "side": 1,
      "message": "On a second thought, `ro.build.nextgen.fingerprint` doesn\u0027t do much... If the `ro.build.id` isn\u0027t set at build time, init will have to set it to some value to make the fingerprint useful....",
      "parentUuid": "dd86f43b_bdc080bd",
      "range": {
        "startLine": 98,
        "startChar": 42,
        "endLine": 98,
        "endChar": 69
      },
      "revId": "a12cf3edf33ee8e08327bebdf8c40f628e78a209",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ffe69799_d1595207",
        "filename": "init/property_service.cpp",
        "patchSetId": 5
      },
      "lineNbr": 98,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2021-05-07T05:05:32Z",
      "side": 1,
      "message": "OK, no question from my side.\nThanks for the explanation.",
      "parentUuid": "fc552f6e_eac8bdf1",
      "range": {
        "startLine": 98,
        "startChar": 42,
        "endLine": 98,
        "endChar": 69
      },
      "revId": "a12cf3edf33ee8e08327bebdf8c40f628e78a209",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4bedee3_d8691a97",
        "filename": "init/property_service.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1103,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2021-05-06T07:02:08Z",
      "side": 1,
      "message": "Why are you adding a \"new\" \"ro.build.legacy.fingerprint\" prop that contains the \"old\" value, and assigning the \"new\" fingerprint value to the \"old\" \"ro.build.fingerprint\" prop. Even more confusing is that if \"ro.build.legacy.id\" isn\u0027t set, then \"ro.build.legacy.fingerprint\" would be empty, and \"ro.build.fingerprint\" would fallback to contain the \"old\" fingerprint value again?\n\nCan we consider to instead add a new prop \"ro.build.\u003cnew prop directive\u003e.fingerprint\" that contains the new fingerprint, and don\u0027t alter the value of \"ro.build.fingerprint\"? I think it could be less confusing and less mental burden for test writers, if we made the fingerprint change a conscious decision by the test owner, that is the test has to explicitly read the new prop to get the new value. Right now, a test could read \"ro.build.fingerprint\" and get the new or old fingerprint, depending on the BOARD variable BOARD_USE_VBMETA_DIGTEST_IN_FINGERPRINT, which isn\u0027t available to the test to read during runtime?",
      "range": {
        "startLine": 1102,
        "startChar": 4,
        "endLine": 1103,
        "endChar": 47
      },
      "revId": "a12cf3edf33ee8e08327bebdf8c40f628e78a209",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29b841cb_bd9b87ac",
        "filename": "init/property_service.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1103,
      "author": {
        "id": 1128729
      },
      "writtenOn": "2021-05-06T07:37:22Z",
      "side": 1,
      "message": "+1.\nFor backward compatibility reason, we might keep the original property with the original value. And we can upgrade the depended systems upgrade to use new property one-by-one.",
      "parentUuid": "f4bedee3_d8691a97",
      "range": {
        "startLine": 1102,
        "startChar": 4,
        "endLine": 1103,
        "endChar": 47
      },
      "revId": "a12cf3edf33ee8e08327bebdf8c40f628e78a209",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e2f65dc_f4e7409f",
        "filename": "init/property_service.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1103,
      "author": {
        "id": 1088085
      },
      "writtenOn": "2021-05-06T17:11:52Z",
      "side": 1,
      "message": "That\u0027s actually the entire purpose of http://go/compatible-build-fingerprint. We want to make the value of \"ro.build.fingerprint\" unique. So most of the existing clients can continue to use the fingerprint without switching to read the new property. For example, APFE who approves build based on fingerprints.\n\nThe legacy fingerprint is really designed as a saftey measurement. In rare case, if you still want the old fingerprint, here is the place to find it. But that client should understand what it\u0027s doing; and make code changes in itself. \n\nWhich test rely on the behavior of \"ro.build.fingerprint\"? I think the test should just use the fingerprint value as is; and it doesn\u0027t need to differentiate how the build.id is set.",
      "parentUuid": "29b841cb_bd9b87ac",
      "range": {
        "startLine": 1102,
        "startChar": 4,
        "endLine": 1103,
        "endChar": 47
      },
      "revId": "a12cf3edf33ee8e08327bebdf8c40f628e78a209",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ac8bbad_9d600c7e",
        "filename": "init/property_service.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1103,
      "author": {
        "id": 1088085
      },
      "writtenOn": "2021-05-06T17:34:36Z",
      "side": 1,
      "message": "btw, we eventually want to enable the boardconfig on all pixels. And clients/tests shouldn\u0027t look at the legacy fingerprint, unless there is a good reason",
      "parentUuid": "4e2f65dc_f4e7409f",
      "range": {
        "startLine": 1102,
        "startChar": 4,
        "endLine": 1103,
        "endChar": 47
      },
      "revId": "a12cf3edf33ee8e08327bebdf8c40f628e78a209",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}