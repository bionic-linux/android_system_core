{
  "comments": [
    {
      "key": {
        "uuid": "ebf653d4_7cca7ed5",
        "filename": "base/logging.cpp",
        "patchSetId": 5
      },
      "lineNbr": 90,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-04-06T20:49:08Z",
      "side": 1,
      "message": "Drop inline, it\u0027s cleaner and the compiler will figure this out anyway.\n\nOpenKmsg() is how this should be formatted (we go by g3 style here).",
      "revId": "1e1e90993316bfcc3468a211f060e9fc63158dd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df9541ee_7a6eaaa0",
        "filename": "base/logging.cpp",
        "patchSetId": 5
      },
      "lineNbr": 101,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-04-06T20:49:08Z",
      "side": 1,
      "message": "We only need one of F_GETFL and fstat(), right?  fstat()\u0027s st_mode gives us the mode that we can check for O_WRONLY.  We should check that fstat() returns \u003d\u003d 0 for success instead of \u003e\u003d.\n\nAlthough, are these checks needed?  I\u0027d either check 1) simply if the fd is valid or 2) check the rdev is actually kmsg.",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 101,
        "endChar": 91
      },
      "revId": "1e1e90993316bfcc3468a211f060e9fc63158dd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1fea1c1_b0beefa1",
        "filename": "base/logging.cpp",
        "patchSetId": 5
      },
      "lineNbr": 101,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-04-06T21:12:02Z",
      "side": 1,
      "message": "st_mode is the filesystem permission mode/type, not the open flags. So we need both (if my check for O_WRONLY is OK that is, O_RDWR is OK, but we currently do not do so)\n\nif rdev \u003d\u003d kmsg I was not initially not brave enough, non zero was good enough, despite the fact it is always the same, pedantically does not mean it is going to always be the same? \n\n#define MEM_MAJOR 1\n. . .\n#ifdef CONFIG_PRINTK\n        [11] \u003d { \"kmsg\", 0644, \u0026kmsg_fops, NULL },\n#endif\n\nConcerned about making the code _that_ fragile, but given this has not changed since linux epoch (or at least 2005) I expect its OK.",
      "parentUuid": "df9541ee_7a6eaaa0",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 101,
        "endChar": 91
      },
      "revId": "1e1e90993316bfcc3468a211f060e9fc63158dd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2426060a_cd5b0f28",
        "filename": "base/logging.cpp",
        "patchSetId": 5
      },
      "lineNbr": 101,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-04-06T21:19:34Z",
      "side": 1,
      "message": "\u003e st_mode is the filesystem permission mode/type, not the open flags. So we need both (if my check for O_WRONLY is OK that is, O_RDWR is OK, but we currently do not do so)\n\nUnderstood.\n\n\u003e if rdev \u003d\u003d kmsg I was not initially not brave enough, non zero was good enough, despite the fact it is always the same, pedantically does not mean it is going to always be the same? \n\nI am comfortable that it will never change.  Init hard codes this during device creation as well, https://cs.corp.google.com/android/system/core/init/init.cpp?q\u003dfile:init.cpp\u0026sq\u003dpackage:%5Eandroid$\u0026dr\u0026l\u003d589\n\nI\u0027m also comfortable skipping all of these checks and just ensuring that the fd is valid.",
      "parentUuid": "a1fea1c1_b0beefa1",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 101,
        "endChar": 91
      },
      "revId": "1e1e90993316bfcc3468a211f060e9fc63158dd4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}