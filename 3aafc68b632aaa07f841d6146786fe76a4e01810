{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3c3d4b5e_f598d166",
        "filename": "trusty/libtrusty-rs/src/lib.rs",
        "patchSetId": 9
      },
      "lineNbr": 79,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2022-04-01T21:09:49Z",
      "side": 1,
      "message": "tipc is a message-oriented protocol, not a stream-oriented protocol",
      "range": {
        "startLine": 79,
        "startChar": 9,
        "endLine": 79,
        "endChar": 15
      },
      "revId": "3aafc68b632aaa07f841d6146786fe76a4e01810",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8cb8c61_70139229",
        "filename": "trusty/libtrusty-rs/src/lib.rs",
        "patchSetId": 9
      },
      "lineNbr": 79,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2022-04-01T21:50:34Z",
      "side": 1,
      "message": "Good point, probably also worth noting explicitly in the docstring that tipc is a datagram protocol and each write will be sent as a separate message.",
      "parentUuid": "3c3d4b5e_f598d166",
      "range": {
        "startLine": 79,
        "startChar": 9,
        "endLine": 79,
        "endChar": 15
      },
      "revId": "3aafc68b632aaa07f841d6146786fe76a4e01810",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8afdefcc_87501c80",
        "filename": "trusty/libtrusty-rs/src/lib.rs",
        "patchSetId": 9
      },
      "lineNbr": 79,
      "author": {
        "id": 1902326
      },
      "writtenOn": "2022-04-01T22:40:11Z",
      "side": 1,
      "message": "Ah, thanks for clarifying! I had initially named this type `TipcChannel`, but with the way that we use `read()`/`write()` to send/receive data it seemed like it was behaving more like a byte stream. I can fix the name and update the docs to clarify.\n\nThough I\u0027m now wondering if it makes sense to use the `Read` and `Write` traits here. Between this comment and [your other comment](https://android-review.googlesource.com/c/platform/system/core/+/2050795/comments/c744edc4_508f3bb1) noting that flush isn\u0027t supported for this file type, it seems like it would be clearer and more direct to provide `send` and `recv` methods (plus maybe a `send_with_shared_memory` or something to handle the functionality that `tipc_send` does in the C lib).",
      "parentUuid": "a8cb8c61_70139229",
      "range": {
        "startLine": 79,
        "startChar": 9,
        "endLine": 79,
        "endChar": 15
      },
      "revId": "3aafc68b632aaa07f841d6146786fe76a4e01810",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8dfd1730_bdd92334",
        "filename": "trusty/libtrusty-rs/src/lib.rs",
        "patchSetId": 9
      },
      "lineNbr": 79,
      "author": {
        "id": 1902326
      },
      "writtenOn": "2022-04-01T23:03:21Z",
      "side": 1,
      "message": "On a related note, what happens if the userspace code calls `read()` on the tipc fd with a buffer that isn\u0027t large enough to hold the entire incoming message? Do you need to do multiple read calls until you\u0027ve read the whole thing? Or is it an error to attempt to partially read a message? Either way we\u0027ll want to document the behavior,but if you\u0027re expected to do multiple reads to finish reading the message then we might also want to have a `recv_all` method that takes a `\u0026mut Vec\u003cu8\u003e` and handles that logic for you (akin to [`Read::read_to_end`](https://doc.rust-lang.org/stable/std/io/trait.Read.html#method.read_to_end).\n\nAlso, does TIPC do anything to delineate messages? Is there a sentinel value or anything between messages so that you know you\u0027ve received the full message? Or do you just keep calling `read()` until it doesn\u0027t completely fill the buffer?",
      "parentUuid": "8afdefcc_87501c80",
      "range": {
        "startLine": 79,
        "startChar": 9,
        "endLine": 79,
        "endChar": 15
      },
      "revId": "3aafc68b632aaa07f841d6146786fe76a4e01810",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f42dbe7_2468bd71",
        "filename": "trusty/libtrusty-rs/src/lib.rs",
        "patchSetId": 9
      },
      "lineNbr": 79,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2022-04-01T23:09:51Z",
      "side": 1,
      "message": "You can\u0027t do multiple reads. I think you\u0027ll get an error if your buffer isn\u0027t large enough, although I\u0027d have to go test or read code to confirm that.\n\nI think send/recv would make a better model. This really isn\u0027t file I/O, so it\u0027s odd to use the same trait even if it technically would work.",
      "parentUuid": "8afdefcc_87501c80",
      "range": {
        "startLine": 79,
        "startChar": 9,
        "endLine": 79,
        "endChar": 15
      },
      "revId": "3aafc68b632aaa07f841d6146786fe76a4e01810",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99741283_c6daf806",
        "filename": "trusty/libtrusty-rs/src/lib.rs",
        "patchSetId": 9
      },
      "lineNbr": 100,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2022-04-01T21:09:49Z",
      "side": 1,
      "message": "Did you really test this? This puts the tipc device file descriptor into to the tipc stream, not the return value of tipc_connect,which should be the connection fd.\n\nEven if this works (which I find unlikely) you\u0027re leaking a fd from tipc_connect.",
      "revId": "3aafc68b632aaa07f841d6146786fe76a4e01810",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34a837d6_d578e327",
        "filename": "trusty/libtrusty-rs/src/lib.rs",
        "patchSetId": 9
      },
      "lineNbr": 100,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2022-04-01T21:41:31Z",
      "side": 1,
      "message": "This is how tipc_connect works. The return value from the ioctl isn\u0027t a new fd, it\u0027s an error code. You first open the file, pass that to the ioctl, then return the file if the ioctl succeeded.",
      "parentUuid": "99741283_c6daf806",
      "revId": "3aafc68b632aaa07f841d6146786fe76a4e01810",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f8f5dad_9b951a2d",
        "filename": "trusty/libtrusty-rs/src/lib.rs",
        "patchSetId": 9
      },
      "lineNbr": 100,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2022-04-01T21:43:48Z",
      "side": 1,
      "message": "Sorry, I went back and checked and realized I had misread.",
      "parentUuid": "34a837d6_d578e327",
      "revId": "3aafc68b632aaa07f841d6146786fe76a4e01810",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c744edc4_508f3bb1",
        "filename": "trusty/libtrusty-rs/src/lib.rs",
        "patchSetId": 9
      },
      "lineNbr": 118,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2022-04-01T21:09:49Z",
      "side": 1,
      "message": "Flush isn\u0027t implemented for this file type. I don\u0027t know if that means it will error or no-op, but either way I\u0027m not sure that calling it makes any sense.",
      "revId": "3aafc68b632aaa07f841d6146786fe76a4e01810",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a0f4bdf_3f2ed7c7",
        "filename": "trusty/libtrusty-rs/src/lib.rs",
        "patchSetId": 9
      },
      "lineNbr": 130,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2022-04-01T21:09:49Z",
      "side": 1,
      "message": "Might be worth factoring this out into its own file.",
      "revId": "3aafc68b632aaa07f841d6146786fe76a4e01810",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a83fae45_5df064c4",
        "filename": "trusty/libtrusty-rs/src/lib.rs",
        "patchSetId": 9
      },
      "lineNbr": 130,
      "author": {
        "id": 1902326
      },
      "writtenOn": "2022-04-01T22:40:41Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7a0f4bdf_3f2ed7c7",
      "revId": "3aafc68b632aaa07f841d6146786fe76a4e01810",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a02e02fd_4246cff3",
        "filename": "trusty/libtrusty-rs/src/lib.rs",
        "patchSetId": 9
      },
      "lineNbr": 163,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2022-04-01T21:09:49Z",
      "side": 1,
      "message": "This is defined, but not used anywhere - I\u0027m actually a bit surprised that the dead code lint doesn\u0027t fire on this, but that might be due to the macro-based declaration.\n\nEither add a method that uses this (e.g. to send both data and fds) or remove it and add it in the CL that will use it.",
      "revId": "3aafc68b632aaa07f841d6146786fe76a4e01810",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5ec22a5f_28f21383",
        "filename": "trusty/libtrusty-rs/src/lib.rs",
        "patchSetId": 9
      },
      "lineNbr": 163,
      "author": {
        "id": 1902326
      },
      "writtenOn": "2022-04-01T22:40:11Z",
      "side": 1,
      "message": "I\u0027ll remove this and re-add it when I port `tipc_send`. I had originally started porting it but ended up removing the rest of the code in order to simplify the initial CL. This is likely not generating a dead code warning because the macro generates a `pub` function, and iirc `pub` items never get marked as dead code even if they\u0027re never publicly exported.",
      "parentUuid": "a02e02fd_4246cff3",
      "revId": "3aafc68b632aaa07f841d6146786fe76a4e01810",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}