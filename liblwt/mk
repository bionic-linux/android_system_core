#!/usr/bin/bash

# Copyright (C) 2022 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e

if [ ! -d gen ] ; then
	mkdir gen
fi

# DEFS='-D_DEFAULT_SOURCE'
DEFS='-D_GNU_SOURCE'
DEFS="$DEFS -DLWT_PTR_BITS=64"
# DEFS="$DEFS -DLWT_FIXED_ADDRESSES"
DEFS="$DEFS -DLWT_CTX_ARRAY"

CFLAGS='-fomit-frame-pointer -pthread -Werror -Wall'
CFLAGS="$CFLAGS -fdiagnostics-color=never"
CFLAGS="$CFLAGS -static"

CMD=$(basename $0)

usage()
{
	echo "usage: $CMD [x64 | arm64]" 1>&2
	exit 1
}

if [ $# -ne 1 ] ; then
	usage
fi

UNAME_M="$(uname -m)"

ARCH="$1"

if [ "$ARCH" = x64 ] ; then
	DEFS="$DEFS -DLWT_X64"
	CFLAGS="$CFLAGS -m64"
	CC="gcc-11 -std=c17"
	CXX=g++-11
	CPP=cpp-11
	DUMP=objdump
	NM=nm
elif [ "$ARCH" = arm64 ] ; then
	DEFS="$DEFS -DLWT_ARM64"
	CFLAGS="$CFLAGS -march=armv8.1-a"
	if [ $UNAME_M = aarch64 ] ; then
		CC=gcc
		CXX=g++
		CPP=cpp
		DUMP=objdump
		NM=nm
		DEFS="$DEFS -DLWT_CPU_PTHREAD_KEY"
	else
		CC="aarch64-linux-gnu-gcc-11 -std=c17"
		CXX=aarch64-linux-gnu-g++-11 
		CPP=aarch64-linux-gnu-cpp-11
		DUMP=aarch64-linux-gnu-objdump 
		NM=aarch64-linux-gnu-nm 
	fi
else
	usage
fi


run()
{
	echo "+ $*" 1>&2
	"$@"
}

run $CC $DEFS $CFLAGS lwt_genassym.c -o gen/lwt_genassym
run gen/lwt_genassym | pr -t -e32 > lwt_asm_gen.h

run $CC $DEFS $CFLAGS -S -O3 lwt_sched.c -o gen/lwt_sched.s

run $CC $DEFS $CFLAGS -c -O3 lwt_sched.c -o gen/lwt_sched.o

run $DUMP gen/lwt_sched.o -d > gen/lwt_sched.dump-$ARCH

run $CPP $DEFS lwt_arch.S > gen/lwt_arch_gen.s
run $CC $DEFS $CFLAGS -c gen/lwt_arch_gen.s -o gen/lwt_arch_gen.o
run $DUMP -d gen/lwt_arch_gen.o > gen/lwt_arch_gen.dump-$ARCH

if [ $UNAME_M != aarch64 ] ; then
	run $CC -r -o gen/lwt.o gen/lwt_arch_gen.o gen/lwt_sched.o
	run $DUMP -d gen/lwt.o > gen/lwt.dump-$ARCH
	{
		run $NM gen/lwt.o | egrep ' [TDB] '
		run $NM gen/lwt.o | fgrep ' U '
	} | tee gen/lwt-syms-$ARCH
fi

run $CC $DEFS $CFLAGS -c -O3 test-lwt.c -o gen/test-lwt.o

BINARIES=''

for PROG in test-lwt ; do
	for HW in '-DLWT_MP -DLWT_SMT' -DLWT_MP '' ; do
		hw="${HW/DLWT_/}"
		hw="${hw/DLWT_/}"
		hw="${hw/ /}"
		# adeb's bash (version 5.0.3(1)) does not support:
		#	hw="${hw@L}"
		hw=$(echo $hw | tr 'A-Z' 'a-z')
		for BUILD in -DLWT_DEBUG -DLWT_BITS '' ; do
			build="${BUILD/DLWT_/}"
			for COMP_OPT in -g -O3 '-O3 -g' ; do
				comp_opt="${COMP_OPT/ /}"
				BIN="${PROG}${hw}${build}${comp_opt}-${ARCH}"
				BINARIES="$BINARIES ./gen/$BIN"
				run $CC $DEFS $CFLAGS \
					$HW \
					$BUILD \
					$COMP_OPT \
					-o gen/$BIN \
					$PROG.c \
					lwt_sched.c \
					gen/lwt_arch_gen.s
			done
		done
	done
done

echo $BINARIES | tr ' ' '\012' > gen/binaries-$ARCH

run $CC $DEFS $CFLAGS -DLWT_DEBUG -g -o gen/test_schedq-g-$ARCH test_schedq.c gen/lwt_arch_gen.s
run $CC $DEFS $CFLAGS -DLWT_DEBUG -O3 -o gen/test_schedq-O3-$ARCH test_schedq.c gen/lwt_arch_gen.s
run $CC $DEFS $CFLAGS -DLWT_DEBUG -O3 -g -o gen/test_schedq-O3-g-$ARCH test_schedq.c gen/lwt_arch_gen.s

if [ "$ARCH" = x64 ] ; then
	run clang -std=c17 $DEFS $CFLAGS -DLWT_DEBUG -g -o gen/test_schedq-clang-g-$ARCH test_schedq.c gen/lwt_arch_gen.s
fi

# $CXX -std=c++17 $DEFS $CFLAGS -DLWT_DEBUG -g -o gen/test_schedq-c++-g-$ARCH test_schedq.c gen/lwt_arch_gen.s

run $CC $DEFS $CFLAGS -O3 -g -o gen/test-pthread-O3-g-$ARCH test-pthread.c
