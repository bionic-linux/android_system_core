{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7aa3a706_d9347114",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-10T20:31:16Z",
      "side": 1,
      "message": "This is only releasing one refcount of ownership.\n\nCall \u0027releaseOne\u0027 and add docs a bit, either on the method or in the Strong",
      "revId": "969caf1008c46eed334ab04af60512bfcd97aad8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bb3d0484_baf5c1ca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-10T20:31:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7aa3a706_d9347114",
      "revId": "969caf1008c46eed334ab04af60512bfcd97aad8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4267800_556a3d7c",
        "filename": "libutils/binder/include/utils/StrongPointer.h",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-10T20:31:16Z",
      "side": 1,
      "message": "This is only releasing one refcount of ownership. Maybe \u0027releaseOne\u0027 or similar? Or document more. In the commit message, you say instead of running ~sp. Of course, it\u0027s unsafe in generaly to call \u0027delete ret\u0027. You must call \u0027ret-\u003edecStrong()\u0027 because there may be something else that owns it. Or were you thinking something else?\n\nDo you have the case where you want to use this, so I can see what you mean? I can see how this API would be useful, but it\u0027s also probably better to avoid managing ownership like this.",
      "revId": "969caf1008c46eed334ab04af60512bfcd97aad8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03c81f43_63d70f37",
        "filename": "libutils/binder/include/utils/StrongPointer.h",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2023-11-10T20:42:10Z",
      "side": 1,
      "message": "I called it `release()` because that\u0027s what `std::unique_ptr` calls it. It\u0027s on a specific sp\u003c\u003e, so I\u0027m not sure releaseOne would add much additional clarity?\n\nAs for usage, yeah any place we need to store a shared pointer in a jlong as a broadly common example. I want to migrate to using sp\u003cT\u003e::make() as a general rule, but then hit the issue with this missing\n\nExamples:\n\nhttps://cs.android.com/android/platform/superproject/main/+/main:frameworks/base/libs/hwui/jni/android_graphics_RenderNode.cpp;drc\u003dcab4afeb64bbc6280990b34bd55270b19218ac04;l\u003d61\n\nhttps://cs.android.com/android/platform/superproject/main/+/main:frameworks/base/libs/hwui/jni/Gainmap.cpp;drc\u003db1c20eea9e53c2ae1147ce44ed25e524a4e51cc1;l\u003d62\n\nhttps://cs.android.com/android/platform/superproject/main/+/main:frameworks/base/core/jni/android_window_ScreenCapture.cpp;drc\u003d20ca02e27015e8ae53f4283500fb20933d55053c;l\u003d239",
      "parentUuid": "b4267800_556a3d7c",
      "revId": "969caf1008c46eed334ab04af60512bfcd97aad8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d74f5fbf_5bc6dcba",
        "filename": "libutils/binder/include/utils/StrongPointer.h",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-11-10T20:53:18Z",
      "side": 1,
      "message": "btw - you saw the cflag you can set to migrate to sp\u003cT\u003e::make, right? ðŸ˜„ ANDROID_UTILS_REF_BASE_DISABLE_IMPLICIT_CONSTRUCTION - you should set this!\n\nAnyway, there is no std::shared_ptr::release. \u0027release\u0027 often carries the connotation that you now own the object, which is not true here, so I think there is some opportunity for confusion here.\n\nYou have the code now:\n\n```\n    sp\u003cgui::IScreenCaptureListener\u003e listener \u003d\n            sp\u003cScreenCaptureListenerWrapper\u003e::make(env, consumerObj);\n    listener-\u003eincStrong((void*)nativeCreateScreenCaptureListener);\n    return reinterpret_cast\u003cjlong\u003e(listener.get());\n```\n\nwith this change, it could be changed to:\n\n```\n    return reinterpret_cast\u003cjlong\u003e(sp\u003cScreenCaptureListenerWrapper\u003e::make(env, consumerObj).release());\n```\n\nOne downside actually is that you\u0027d lose the debug information \u0027(void*) nativeCreateScreenCaptureListener\u0027, but that seems okay. Also, if you use this API, you\u0027ll no longer have matching \u0027incStrong\u0027 and \u0027decStrong\u0027, which I honestly see as the biggest clarity issue - you have to know you are pairing decStrong with incStrong in the constructor.\n\nDo you think there\u0027s some other more explicit name we could use? I think the code I quoted above with incStrong and make is probably better than a shortcut - fewer things to think about at the cost of a few lines of code, but if you feel strongly about adding this API, I think it needs more docs, bigger name to distinguish it from \u0027release\u0027, and maybe add a test as well?\n\nbut yeah, I am not convinced we should encourage this type of thing, as necessary as it is. WDYT?",
      "parentUuid": "03c81f43_63d70f37",
      "revId": "969caf1008c46eed334ab04af60512bfcd97aad8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "268f1145_7026d056",
        "filename": "libutils/binder/include/utils/StrongPointer.h",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1010103
      },
      "writtenOn": "2023-11-10T20:59:54Z",
      "side": 1,
      "message": "\u003e Anyway, there is no std::shared_ptr::release. \u0027release\u0027 often carries the connotation that you now own the object\n\nYeah but that\u0027s because shared_ptr is an external refcount system, which StrongPointer is not.\n\n\u003e you have to know you are pairing decStrong with incStrong in the constructor.\n\nYeah but that\u0027s very well defined and very explicit since the type itself is the one doing the refcounting, not sp\u003c\u003e (unlike std::shared_ptr)\n\n\u003e One downside actually is that you\u0027d lose the debug information \u0027(void*) nativeCreateScreenCaptureListener\u0027, but that seems okay. \n\nIt\u0027s a no-op on LightRefBase which is all my chunk of sp\u003c\u003e usages cares about ðŸ˜Š\n\n\u003e but yeah, I am not convinced we should encourage this type of thing, as necessary as it is. WDYT?\n\nIt\u0027s pretty silly to force me to pay for 2 atomics I don\u0027t need, no? That\u0027s a pretty big discouragement to using `ANDROID_UTILS_REF_BASE_DISABLE_IMPLICIT_CONSTRUCTION`",
      "parentUuid": "d74f5fbf_5bc6dcba",
      "revId": "969caf1008c46eed334ab04af60512bfcd97aad8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}