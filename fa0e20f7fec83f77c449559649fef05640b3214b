{
  "comments": [
    {
      "key": {
        "uuid": "7efd6f27_2a2c18ac",
        "filename": "libutils/SharedBuffer.h",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2019-08-06T21:58:01Z",
      "side": 1,
      "message": "nit: leave reserved at the end?",
      "range": {
        "startLine": 105,
        "startChar": 44,
        "endLine": 105,
        "endChar": 53
      },
      "revId": "fa0e20f7fec83f77c449559649fef05640b3214b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec662a16_2eb680ce",
        "filename": "libutils/SharedBuffer.h",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1349653
      },
      "writtenOn": "2019-08-07T21:11:54Z",
      "side": 1,
      "message": "I\u0027d prefer having mClientMetadata at the end, as the client data follows that.",
      "parentUuid": "7efd6f27_2a2c18ac",
      "range": {
        "startLine": 105,
        "startChar": 44,
        "endLine": 105,
        "endChar": 53
      },
      "revId": "fa0e20f7fec83f77c449559649fef05640b3214b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d2f9d15_cea83d8b",
        "filename": "libutils/SharedBuffer.h",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2019-08-08T16:20:49Z",
      "side": 1,
      "message": "Sorry, I missed that these things had to overlap",
      "parentUuid": "ec662a16_2eb680ce",
      "range": {
        "startLine": 105,
        "startChar": 44,
        "endLine": 105,
        "endChar": 53
      },
      "revId": "fa0e20f7fec83f77c449559649fef05640b3214b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02bb2d1b_e5574a2b",
        "filename": "libutils/include/utils/String16.h",
        "patchSetId": 1
      },
      "lineNbr": 142,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2019-08-06T21:58:01Z",
      "side": 1,
      "message": "does this need to be public?",
      "range": {
        "startLine": 142,
        "startChar": 9,
        "endLine": 142,
        "endChar": 23
      },
      "revId": "fa0e20f7fec83f77c449559649fef05640b3214b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66861589_3794b08e",
        "filename": "libutils/include/utils/String16.h",
        "patchSetId": 1
      },
      "lineNbr": 142,
      "author": {
        "id": 1349653
      },
      "writtenOn": "2019-08-07T21:11:54Z",
      "side": 1,
      "message": "It\u0027s mainly for testing. Added a comment.",
      "parentUuid": "02bb2d1b_e5574a2b",
      "range": {
        "startLine": 142,
        "startChar": 9,
        "endLine": 142,
        "endChar": 23
      },
      "revId": "fa0e20f7fec83f77c449559649fef05640b3214b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2416148a_6b2c1a2c",
        "filename": "libutils/include/utils/String16.h",
        "patchSetId": 1
      },
      "lineNbr": 160,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2019-08-06T21:58:01Z",
      "side": 1,
      "message": "are there that many users? Can they be fixed instead?",
      "range": {
        "startLine": 160,
        "startChar": 0,
        "endLine": 160,
        "endChar": 26
      },
      "revId": "fa0e20f7fec83f77c449559649fef05640b3214b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0828bec8_c6958095",
        "filename": "libutils/include/utils/String16.h",
        "patchSetId": 1
      },
      "lineNbr": 160,
      "author": {
        "id": 1349653
      },
      "writtenOn": "2019-08-07T21:11:54Z",
      "side": 1,
      "message": "We can probably fix what we can see (there\u0027s not many places that errors out without this when I build cuttlefish), but I don\u0027t want vendors to have to upgrade to C++14 or above just to continue using String16.",
      "parentUuid": "2416148a_6b2c1a2c",
      "range": {
        "startLine": 160,
        "startChar": 0,
        "endLine": 160,
        "endChar": 26
      },
      "revId": "fa0e20f7fec83f77c449559649fef05640b3214b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d76c6b96_517d8696",
        "filename": "libutils/include/utils/String16.h",
        "patchSetId": 1
      },
      "lineNbr": 160,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-08-07T21:29:21Z",
      "side": 1,
      "message": "yeah, please don\u0027t add _new_ hacks like this. we\u0027ve been trying to remove them. (especially not for C++14. there would be more excuse for C++17, and obviously C++20 is only experimental so that would make sense.)",
      "parentUuid": "0828bec8_c6958095",
      "range": {
        "startLine": 160,
        "startChar": 0,
        "endLine": 160,
        "endChar": 26
      },
      "revId": "fa0e20f7fec83f77c449559649fef05640b3214b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b9986e4_c3e1b3aa",
        "filename": "libutils/include/utils/String16.h",
        "patchSetId": 1
      },
      "lineNbr": 160,
      "author": {
        "id": 1349653
      },
      "writtenOn": "2019-08-07T21:39:41Z",
      "side": 1,
      "message": "I\u0027d much rather if we can change the size of String16 and do this properly. See my reply below.",
      "parentUuid": "d76c6b96_517d8696",
      "range": {
        "startLine": 160,
        "startChar": 0,
        "endLine": 160,
        "endChar": 26
      },
      "revId": "fa0e20f7fec83f77c449559649fef05640b3214b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8165371_78029edb",
        "filename": "libutils/include/utils/String16.h",
        "patchSetId": 1
      },
      "lineNbr": 160,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2019-08-09T17:26:33Z",
      "side": 1,
      "message": "Ping on this though. Can you update the users of this instead to avoid special compilation options?",
      "parentUuid": "9b9986e4_c3e1b3aa",
      "range": {
        "startLine": 160,
        "startChar": 0,
        "endLine": 160,
        "endChar": 26
      },
      "revId": "fa0e20f7fec83f77c449559649fef05640b3214b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c7617ef_9689881e",
        "filename": "libutils/include/utils/String16.h",
        "patchSetId": 1
      },
      "lineNbr": 160,
      "author": {
        "id": 1349653
      },
      "writtenOn": "2019-08-09T17:50:15Z",
      "side": 1,
      "message": "Are we fine with requiring all users (including partners) of String16 to upgrade to C++17? I can fix the offending users that we have control over if that\u0027s the intention.",
      "parentUuid": "d8165371_78029edb",
      "range": {
        "startLine": 160,
        "startChar": 0,
        "endLine": 160,
        "endChar": 26
      },
      "revId": "fa0e20f7fec83f77c449559649fef05640b3214b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da8837a0_ef1f4263",
        "filename": "libutils/include/utils/String16.h",
        "patchSetId": 1
      },
      "lineNbr": 160,
      "author": {
        "id": 1349653
      },
      "writtenOn": "2019-08-09T18:02:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4c7617ef_9689881e",
      "range": {
        "startLine": 160,
        "startChar": 0,
        "endLine": 160,
        "endChar": 26
      },
      "revId": "fa0e20f7fec83f77c449559649fef05640b3214b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25517a01_5a663294",
        "filename": "libutils/include/utils/String16.h",
        "patchSetId": 1
      },
      "lineNbr": 171,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2019-08-06T21:58:01Z",
      "side": 1,
      "message": "can we avoid exposing this type and only expose a function which does static data -\u003e String16?",
      "range": {
        "startLine": 171,
        "startChar": 27,
        "endLine": 171,
        "endChar": 38
      },
      "revId": "fa0e20f7fec83f77c449559649fef05640b3214b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e67a45b_405f71b3",
        "filename": "libutils/include/utils/String16.h",
        "patchSetId": 1
      },
      "lineNbr": 171,
      "author": {
        "id": 1349653
      },
      "writtenOn": "2019-08-07T21:11:54Z",
      "side": 1,
      "message": "I would prefer that as well, but I couldn\u0027t find a way to do that. The main obstacle is that we need something to tell the compiler to allocate the static storage space. Given that we can\u0027t change the size of String16 (backward compatibility), anything that\u0027s clean (i.e. const String16 mystr(...)) isn\u0027t going to be allocating the space we need.",
      "parentUuid": "25517a01_5a663294",
      "range": {
        "startLine": 171,
        "startChar": 27,
        "endLine": 171,
        "endChar": 38
      },
      "revId": "fa0e20f7fec83f77c449559649fef05640b3214b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "053561c4_a6bba603",
        "filename": "libutils/include/utils/String16.h",
        "patchSetId": 1
      },
      "lineNbr": 171,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-08-07T21:29:21Z",
      "side": 1,
      "message": "is that true? i thought libutils was vndk?",
      "parentUuid": "3e67a45b_405f71b3",
      "range": {
        "startLine": 171,
        "startChar": 27,
        "endLine": 171,
        "endChar": 38
      },
      "revId": "fa0e20f7fec83f77c449559649fef05640b3214b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff288956_8626c298",
        "filename": "libutils/include/utils/String16.h",
        "patchSetId": 1
      },
      "lineNbr": 171,
      "author": {
        "id": 1349653
      },
      "writtenOn": "2019-08-07T21:39:41Z",
      "side": 1,
      "message": "\"backward compatibility\" is probably too vague a term. My concern is the prebuilts. If we change the size of String16, any prebuilt that uses String16 would have to be rebuilt.",
      "parentUuid": "053561c4_a6bba603",
      "range": {
        "startLine": 171,
        "startChar": 27,
        "endLine": 171,
        "endChar": 38
      },
      "revId": "fa0e20f7fec83f77c449559649fef05640b3214b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f028505d_eeb17691",
        "filename": "libutils/include/utils/String16.h",
        "patchSetId": 1
      },
      "lineNbr": 171,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2019-08-07T21:49:49Z",
      "side": 1,
      "message": "Why doesn\u0027t this work:\n\nprivate: template \u003csize_t N\u003e struct StaticData ...\nprivate: template \u003csize_t N\u003e explicit constexpr String16(const StaticData\u003cN\u003e\u0026 s)\nprivate: template \u003csize_t N\u003e static constexpr const StaticData\u003cN\u003e makeStaticData(const char16_t (\u0026s)[N])\n\npublic:\n   template \u003csize_t N\u003e\n   constexpr String16 FromStatic(const char16_t (\u0026s)[N]) {...}",
      "parentUuid": "ff288956_8626c298",
      "range": {
        "startLine": 171,
        "startChar": 27,
        "endLine": 171,
        "endChar": 38
      },
      "revId": "fa0e20f7fec83f77c449559649fef05640b3214b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84addbeb_b756a9fe",
        "filename": "libutils/include/utils/String16.h",
        "patchSetId": 1
      },
      "lineNbr": 171,
      "author": {
        "id": 1349653
      },
      "writtenOn": "2019-08-07T21:56:09Z",
      "side": 1,
      "message": "I tried this. I assume FromStatic() does something like \"return String16(makeStaticData(str));\". This way you\u0027d be taking the pointer address of an object on the stack. (Yeah there\u0027s no stack at compile time but the effect is the same, you get a pointer pointing to some garbage.)",
      "parentUuid": "f028505d_eeb17691",
      "range": {
        "startLine": 171,
        "startChar": 27,
        "endLine": 171,
        "endChar": 38
      },
      "revId": "fa0e20f7fec83f77c449559649fef05640b3214b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e480ba3_d9f80603",
        "filename": "libutils/include/utils/String16.h",
        "patchSetId": 1
      },
      "lineNbr": 171,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2019-08-08T16:20:49Z",
      "side": 1,
      "message": "Sorry, Vic. I had misunderstood part of the implementation before. I think we can live with these constructors. We just might want some additional comments for how SharedBuffer/StaticData are being overlaid in memory. It\u0027s a bit confusing. Maybe there is a better way?",
      "parentUuid": "84addbeb_b756a9fe",
      "range": {
        "startLine": 171,
        "startChar": 27,
        "endLine": 171,
        "endChar": 38
      },
      "revId": "fa0e20f7fec83f77c449559649fef05640b3214b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "469e5868_d6448e16",
        "filename": "libutils/include/utils/String16.h",
        "patchSetId": 1
      },
      "lineNbr": 171,
      "author": {
        "id": 1349653
      },
      "writtenOn": "2019-08-08T17:37:39Z",
      "side": 1,
      "message": "I think it might be possible to inherit String16 and make a StaticString16\u003csize_t N\u003e to house the storage. That\u0027d make things less ugly.",
      "parentUuid": "7e480ba3_d9f80603",
      "range": {
        "startLine": 171,
        "startChar": 27,
        "endLine": 171,
        "endChar": 38
      },
      "revId": "fa0e20f7fec83f77c449559649fef05640b3214b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c0dc85f_bfefe69e",
        "filename": "libutils/include/utils/String16.h",
        "patchSetId": 1
      },
      "lineNbr": 171,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2019-08-08T17:51:27Z",
      "side": 1,
      "message": "Still painful to invent polymorphism, but I agree it should make things easier to organize.",
      "parentUuid": "469e5868_d6448e16",
      "range": {
        "startLine": 171,
        "startChar": 27,
        "endLine": 171,
        "endChar": 38
      },
      "revId": "fa0e20f7fec83f77c449559649fef05640b3214b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5d37c03_5126b1fa",
        "filename": "libutils/include/utils/String16.h",
        "patchSetId": 1
      },
      "lineNbr": 171,
      "author": {
        "id": 1349653
      },
      "writtenOn": "2019-08-08T20:15:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4c0dc85f_bfefe69e",
      "range": {
        "startLine": 171,
        "startChar": 27,
        "endLine": 171,
        "endChar": 38
      },
      "revId": "fa0e20f7fec83f77c449559649fef05640b3214b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}