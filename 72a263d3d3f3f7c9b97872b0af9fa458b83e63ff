{
  "comments": [
    {
      "key": {
        "uuid": "ebadc3fd_b2420070",
        "filename": "include/log/logger.h",
        "patchSetId": 5
      },
      "lineNbr": 158,
      "author": {
        "id": 1015340
      },
      "writtenOn": "2015-01-23T22:39:40Z",
      "side": 1,
      "message": "Ugh, this is ugly.\n\nUnless I\u0027m misreading this, struct logger_list is internal to the logger only and you can change its definition with impunity.  So just add another flag rather than abusing the mode field.",
      "revId": "72a263d3d3f3f7c9b97872b0af9fa458b83e63ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bc7afd5_a5759e6c",
        "filename": "include/log/logger.h",
        "patchSetId": 5
      },
      "lineNbr": 158,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2015-01-23T23:40:02Z",
      "side": 1,
      "message": "Not internal to logger, used by all that wish to read the logs (including outsiders, of which I expect set to be zero since I did not release with any fanfare) and why I resisted changing the API. One of the places is a separate project.\n\n- logcat\n- debuggerd\n- jni\n\nI\u0027d be more willing to create a new function with a descriptive name than add a flag.",
      "parentUuid": "ebadc3fd_b2420070",
      "revId": "72a263d3d3f3f7c9b97872b0af9fa458b83e63ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b58c71b_ef8be1ff",
        "filename": "include/log/logger.h",
        "patchSetId": 5
      },
      "lineNbr": 159,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2015-01-26T17:55:03Z",
      "side": 1,
      "message": "Currently mode takes the O_NONBLOCK, O_RDONLY and now the O_PSTORE flags. The mode is a \u0027flags\u0027 variable, adding another flag variable when we have so many bits still available does present a problem for me.\n\nWould you feel more comfortable me using O_DIRECT without the above rename; and documenting each flags effect? Or inventing a new set of mode flags that does not inherit from the system open flags?",
      "range": {
        "startLine": 159,
        "startChar": 46,
        "endLine": 159,
        "endChar": 54
      },
      "revId": "72a263d3d3f3f7c9b97872b0af9fa458b83e63ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ebadc3fd_92c25c67",
        "filename": "liblog/log_read.c",
        "patchSetId": 5
      },
      "lineNbr": 358,
      "author": {
        "id": 1015340
      },
      "writtenOn": "2015-01-23T22:39:40Z",
      "side": 1,
      "message": "???",
      "range": {
        "startLine": 358,
        "startChar": 0,
        "endLine": 358,
        "endChar": 62
      },
      "revId": "72a263d3d3f3f7c9b97872b0af9fa458b83e63ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6bcab3df_06563a9e",
        "filename": "liblog/log_read.c",
        "patchSetId": 5
      },
      "lineNbr": 358,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2015-01-23T23:40:02Z",
      "side": 1,
      "message": "This was for nnk to see, I can remove it now ...",
      "parentUuid": "ebadc3fd_92c25c67",
      "range": {
        "startLine": 358,
        "startChar": 0,
        "endLine": 358,
        "endChar": 62
      },
      "revId": "72a263d3d3f3f7c9b97872b0af9fa458b83e63ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b16fb00_f4c11814",
        "filename": "liblog/log_read.c",
        "patchSetId": 5
      },
      "lineNbr": 635,
      "author": {
        "id": 1015340
      },
      "writtenOn": "2015-01-23T22:39:40Z",
      "side": 1,
      "message": "Put this branch in a helper, it\u0027s too long and complex to leave nested here.",
      "revId": "72a263d3d3f3f7c9b97872b0af9fa458b83e63ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b16fb00_14c93437",
        "filename": "liblog/log_read.c",
        "patchSetId": 5
      },
      "lineNbr": 730,
      "author": {
        "id": 1015340
      },
      "writtenOn": "2015-01-23T22:39:40Z",
      "side": 1,
      "message": "__builtin_unreachable()",
      "range": {
        "startLine": 729,
        "startChar": 8,
        "endLine": 730,
        "endChar": 19
      },
      "revId": "72a263d3d3f3f7c9b97872b0af9fa458b83e63ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6bcab3df_a6ada62d",
        "filename": "liblog/log_read.c",
        "patchSetId": 5
      },
      "lineNbr": 730,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2015-01-23T23:40:02Z",
      "side": 1,
      "message": "TKS, I will see if there is something in bionic that defines a helper for this.",
      "parentUuid": "2b16fb00_14c93437",
      "range": {
        "startLine": 729,
        "startChar": 8,
        "endLine": 730,
        "endChar": 19
      },
      "revId": "72a263d3d3f3f7c9b97872b0af9fa458b83e63ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}