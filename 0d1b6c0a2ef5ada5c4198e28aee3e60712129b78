{
  "comments": [
    {
      "key": {
        "uuid": "3675adb9_fc0b5d65",
        "filename": "adb/sysdeps_win32.cpp",
        "patchSetId": 4
      },
      "lineNbr": 3512,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-10-23T00:18:46Z",
      "side": 1,
      "message": "how many callers are there of these? should we just rewrite them to use UTF8ToWide/WideToUTF8 directly?",
      "revId": "0d1b6c0a2ef5ada5c4198e28aee3e60712129b78",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "166d09ed_80cbdada",
        "filename": "adb/sysdeps_win32.cpp",
        "patchSetId": 4
      },
      "lineNbr": 3512,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2015-10-23T00:36:31Z",
      "side": 1,
      "message": "~14 callers to widen(), ~8 callers to narrow(). I think it makes sense to rewrite (especially because I like a non-fatal error-path), let me know the timing: in this commit or after?",
      "parentUuid": "3675adb9_fc0b5d65",
      "revId": "0d1b6c0a2ef5ada5c4198e28aee3e60712129b78",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "968019c6_9f8b3f5e",
        "filename": "adb/sysdeps_win32.cpp",
        "patchSetId": 4
      },
      "lineNbr": 3512,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-10-23T04:46:23Z",
      "side": 1,
      "message": "either\u0027s fine, i was just curious about direction.",
      "parentUuid": "166d09ed_80cbdada",
      "revId": "0d1b6c0a2ef5ada5c4198e28aee3e60712129b78",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56a1415d_651b3cbb",
        "filename": "adb/sysdeps_win32.cpp",
        "patchSetId": 4
      },
      "lineNbr": 3512,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2015-10-23T05:08:44Z",
      "side": 1,
      "message": "Ok, I\u0027m thinking as a separate commit so that the stuff is broken for a minimal amount of time.",
      "parentUuid": "968019c6_9f8b3f5e",
      "revId": "0d1b6c0a2ef5ada5c4198e28aee3e60712129b78",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56a1415d_c290064a",
        "filename": "base/include/base/u8.h",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-10-23T00:18:46Z",
      "side": 1,
      "message": "why u8 rather than utf8? (for the files and the namespace.)",
      "revId": "0d1b6c0a2ef5ada5c4198e28aee3e60712129b78",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6699de6_3daeb706",
        "filename": "base/include/base/u8.h",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2015-10-23T00:36:31Z",
      "side": 1,
      "message": "I think I was influenced by the C++ string literal prefix of \u0027u8\u0027, but it doesn\u0027t matter to me. Just give the word and I can change u8 \u003d\u003e utf8.",
      "parentUuid": "56a1415d_c290064a",
      "revId": "0d1b6c0a2ef5ada5c4198e28aee3e60712129b78",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6661112_9ed9fd7d",
        "filename": "base/include/base/u8.h",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-10-23T04:46:23Z",
      "side": 1,
      "message": "yeah, u8\u0027s too new, man from the future :-)",
      "parentUuid": "b6699de6_3daeb706",
      "revId": "0d1b6c0a2ef5ada5c4198e28aee3e60712129b78",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3675adb9_8749b6a4",
        "filename": "base/include/base/u8.h",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2015-10-23T05:08:44Z",
      "side": 1,
      "message": "Ok, I\u0027ll rename u8 stuff to utf8 in the next PS.",
      "parentUuid": "d6661112_9ed9fd7d",
      "revId": "0d1b6c0a2ef5ada5c4198e28aee3e60712129b78",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6661112_7eed09ba",
        "filename": "base/include/base/u8.h",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-10-23T00:18:46Z",
      "side": 1,
      "message": "why don\u0027t we want to be able to just #include this file and have open et cetera just work, even on Windows? shouldn\u0027t the \u0027using\u0027s be in this file? (and if the reason is that we want the \"wide\" functions independently, let\u0027s just move them into their own header.)",
      "revId": "0d1b6c0a2ef5ada5c4198e28aee3e60712129b78",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6661112_3e9b1141",
        "filename": "base/include/base/u8.h",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2015-10-23T00:36:31Z",
      "side": 1,
      "message": "So your idea is to put \"using android::base::u8::open,unlink,etc\" in this file? Then the caller would do the following?\n\nnamespace { // gotta put your code in a namespace\n#include \"base/u8.h\"\nvoid SomeFunction() {...\n} // namespace\n\nI can try prototyping that, just give me suggestions on the filenames for the files containing the wide funcs and this file full of \"using\u0027s\".",
      "parentUuid": "d6661112_7eed09ba",
      "revId": "0d1b6c0a2ef5ada5c4198e28aee3e60712129b78",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56a1415d_25c3f46c",
        "filename": "base/include/base/u8.h",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-10-23T04:46:23Z",
      "side": 1,
      "message": "why do we need the anonymous namespace?",
      "parentUuid": "d6661112_3e9b1141",
      "revId": "0d1b6c0a2ef5ada5c4198e28aee3e60712129b78",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f66f95e4_487e479d",
        "filename": "base/include/base/u8.h",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2015-10-23T05:08:44Z",
      "side": 1,
      "message": "When I tried:\n\nusing android::base::u8::open;\nvoid SomeFunc() {\nopen(...\n\nBuilding host_cross_libbase_test said:\n\nerror: ‘open’ is already declared in this scope\n using android::base::u8::open;\n                          ^\nWeird, huh? Ideas?\n\nLet me know what you think and I can continue prototyping.",
      "parentUuid": "56a1415d_25c3f46c",
      "revId": "0d1b6c0a2ef5ada5c4198e28aee3e60712129b78",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6699de6_6ba0e9cc",
        "filename": "base/include/base/u8.h",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2015-10-23T17:55:29Z",
      "side": 1,
      "message": "It makes sense that we can\u0027t bring in a second open() function with the same signature to the global namespace, I\u0027m not sure there\u0027s any way to override global functions like that unless they are weakly linked.\n\nWhat about using the preprocessor to reroute open/unlink instead? It\u0027s the only way I can think of to automatically replace these functions without requiring the user to be in a namespace, but it may be preferable to stick with namespace + using instead.\n\n  #ifdef _WIN32\n  #define open ::android::base::u8::open\n  #define unlink ::android::base::u8::unlink\n  #endif",
      "parentUuid": "f66f95e4_487e479d",
      "revId": "0d1b6c0a2ef5ada5c4198e28aee3e60712129b78",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96df3923_be3d19f7",
        "filename": "base/include/base/u8.h",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-10-23T18:03:03Z",
      "side": 1,
      "message": "yeah, that\u0027s what we have in adb and what i assume spencer\u0027s trying to get away from, but it does seem like reality is trying to push us back in that direction.\n\ni wonder how much of this goes away if we delete from libbase  the stuff we can get from libchrome? (iirc our Read/Write functions are a superset of the libchrome ones.)",
      "parentUuid": "b6699de6_6ba0e9cc",
      "revId": "0d1b6c0a2ef5ada5c4198e28aee3e60712129b78",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76dac536_63f4d6f5",
        "filename": "base/include/base/u8.h",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2015-10-23T22:05:40Z",
      "side": 1,
      "message": "To use libchrome\u0027s base::ReadFileToString(), we\u0027d need to pass it a FilePath object, which uses std::wstring internally on Windows and std::string elsewhere. To get a FilePath object, you can use `static FilePath FilePath::FromUTF8Unsafe(const std::string\u0026)\u0027 or just go hog-wild and use FilePath all over the adb codebase.\n\nLet\u0027s face it, libchrome has a ton of useful stuff, it just requires the caller to \u0027get religion\u0027 and use its APIs the way they want them to be used. Remember the headaches we had getting mkdirs() to work? libchrome has FilePath and base::CreateDirectory() to solve that in a sec.\n\nSo it\u0027s up to you guys what direction you want adb/libbase to take: POSIX-y like adb is generally right now, or more platform-neutral with various abstractions from libchrome. There\u0027s a lot to consider like what future people working on adb/base will be familiar with, will you be able to fix bugs in libchrome, etc.\n\nLet me know what you guys decide and then I can continue prototyping.",
      "parentUuid": "96df3923_be3d19f7",
      "revId": "0d1b6c0a2ef5ada5c4198e28aee3e60712129b78",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36e4cdf6_4116f663",
        "filename": "base/include/base/u8.h",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2015-10-23T22:05:40Z",
      "side": 1,
      "message": "Yeah, it does make sense that you can\u0027t bring in a second open() -- that\u0027s why adding an anonymous namespace works, because you\u0027re importing an open() function into an empty anonymous namespace.\n\nI did the preprocessor tricks in adb\u0027s sysdeps.h and although it works, it is somewhat fragile. See what I had to do with #define stat adb_stat for an example. Or the fact that a struct member named open will probably fail to compile with the macros in your comment. Basically, the macro technique is fragile and maybe ok for the scope of a single app (like adb), but I\u0027m hesitant to recommend it for a base library that is potentially used by more code (which I may not even be compiling).\n\nBut really the call is up to you guys, I\u0027ll go with whatever direction you guys want. My primary goal is just to get adb stable on Windows, so I\u0027m happy to go along with whatever big designs you guys want.\n\nStepping back, I see only a few ways to solve the big issues:\n\n1. Make new APIs and have everyone call those. This might be android::base::utf8::open(), or it might be libchrome\u0027s base::file::OpenFile(const FilePath\u0026), or some other abstraction. Other codebases that I\u0027ve worked on have gone this route.\n\n2. Let code call open() and use source code tricks (macros or using) to redirect calls to substitutions. This is what adb does right now with macros.\n\n3. Let code call open() and use linker tricks (--wrap or some other symbol overriding technique, I think there is even an __asm() trick that I saw in bionic). I haven\u0027t tried this since it seems even more fragile and hard to comprehend.\n\nI\u0027m open to ideas.",
      "parentUuid": "b6699de6_6ba0e9cc",
      "revId": "0d1b6c0a2ef5ada5c4198e28aee3e60712129b78",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96df3923_c4869218",
        "filename": "base/include/base/u8.h",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2015-10-23T22:27:43Z",
      "side": 1,
      "message": "I forgot to mention that libchrome also has other stuff that libbase provides:\n\nhttps://android.googlesource.com/platform/external/libchrome/+/master/base/logging.h\nhttps://android.googlesource.com/platform/external/libchrome/+/master/base/strings/stringprintf.h\nhttps://android.googlesource.com/platform/external/libchrome/+/master/base/strings/string_split.h\nhttps://android.googlesource.com/platform/external/libchrome/+/master/base/strings/string_util.h\n\nSo in theory, perhaps one could go hog-wild and kill most of libbase in favor of libchrome. I don\u0027t have a horse in the race (and I don\u0027t know the real purposes of libbase and libchrome), just sayin\u0027. Probably a Googler with more context around who uses libbase and libchrome could analyze this situation better...",
      "parentUuid": "76dac536_63f4d6f5",
      "revId": "0d1b6c0a2ef5ada5c4198e28aee3e60712129b78",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6d8bd3b_25757a8b",
        "filename": "base/include/base/u8.h",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2015-10-23T22:58:06Z",
      "side": 1,
      "message": "Ugh yeah forgot about someone wanting to declare their own thing called open and how the macros would behave. Gross.\n\nWould it be fairly straightforward to go with this \"using\" technique to get Windows fixed, but rather than re-implementing these 6 conversion functions link libchrome and use the existing functions instead? Or would that also involve bringing in a lot of additional libchrome stuff?\n\nI\u0027m thinking that way we can punt on the larger unification question for now but at least we aren\u0027t adding more duplicate code between the two.",
      "parentUuid": "96df3923_c4869218",
      "revId": "0d1b6c0a2ef5ada5c4198e28aee3e60712129b78",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f66f95e4_a2e70447",
        "filename": "base/u8.cpp",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-10-23T00:18:46Z",
      "side": 1,
      "message": "no, let\u0027s definitely not consider anything other than deleting libutils :-)\n\nwe really do need to find the time to work on Win32 libc++ though. hopefully in 2016.",
      "revId": "0d1b6c0a2ef5ada5c4198e28aee3e60712129b78",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "166d09ed_c032328c",
        "filename": "base/u8.cpp",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2015-10-23T00:36:31Z",
      "side": 1,
      "message": "Ok, so libutils is crufty, I gather? Anyway, let me know if I should edit libutils/Unicode.cpp out of this comment.",
      "parentUuid": "f66f95e4_a2e70447",
      "revId": "0d1b6c0a2ef5ada5c4198e28aee3e60712129b78",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56a1415d_e5dc2c48",
        "filename": "base/u8.cpp",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-10-23T04:46:23Z",
      "side": 1,
      "message": "very crufty.\n\nthe libchrome vs libbase question is an excellent one, and we should really come up with an actual plan on that front, but libutils is definitely something we\u0027d like to kill.",
      "parentUuid": "166d09ed_c032328c",
      "revId": "0d1b6c0a2ef5ada5c4198e28aee3e60712129b78",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "968019c6_4aaf23ba",
        "filename": "base/u8.cpp",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2015-10-23T05:08:44Z",
      "side": 1,
      "message": "Ok, I\u0027ll remove it from the comments in the next PS.",
      "parentUuid": "56a1415d_e5dc2c48",
      "revId": "0d1b6c0a2ef5ada5c4198e28aee3e60712129b78",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}