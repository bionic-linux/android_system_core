{
  "comments": [
    {
      "key": {
        "uuid": "1ff42a6f_14b11166",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 3
      },
      "lineNbr": 94,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-06-04T22:16:56Z",
      "side": 1,
      "message": "minor: I think I would prefer if these were hidden behind a function, leaving it open in the future for optimizations (like removing dynamically allocated strings or reducing the sizeof).\n\n   std::string message() const {\n    ...\n   }\n   int code() const {\n    ...\n   }",
      "range": {
        "startLine": 92,
        "startChar": 0,
        "endLine": 94,
        "endChar": 11
      },
      "revId": "219e9014d0a436d4d395b9d50c19ca7315bb28fa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4fa7c00_8d53e933",
        "filename": "init/builtins.cpp",
        "patchSetId": 3
      },
      "lineNbr": 100,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-06-04T18:16:22Z",
      "side": 1,
      "message": "I this would be better as return {};  I assume that once we have std::expected\u003cvoid, T\u003e that return {}; is going to be the suggested \u0027successful\u0027 return.  \n\nI\u0027m still semi-iffy on the term \u0027Nothing\u0027 since it carries a slightly negative connotation to me.  return Nothing(); doesn\u0027t sound like \u0027success\u0027\n\nHonestly, I\u0027d rather investigate implementing expected\u003cvoid, T\u003e than doing this.  It shouldn\u0027t be too much effort, right?  And it\u0027ll align better upstream.",
      "range": {
        "startLine": 100,
        "startChar": 4,
        "endLine": 100,
        "endChar": 21
      },
      "revId": "219e9014d0a436d4d395b9d50c19ca7315bb28fa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9fceed6_d1194c54",
        "filename": "init/builtins.cpp",
        "patchSetId": 3
      },
      "lineNbr": 100,
      "author": {
        "id": 1021471
      },
      "writtenOn": "2019-06-04T22:21:54Z",
      "side": 1,
      "message": "+1 for {} over Nothing. Doesn\u0027t that already work with monostate? It should according to std::expected spec\n\n   http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0323r4.html#expected.object.ctor\n\n   expected() -\u003e initialize the value with T{}",
      "parentUuid": "f4fa7c00_8d53e933",
      "range": {
        "startLine": 100,
        "startChar": 4,
        "endLine": 100,
        "endChar": 21
      },
      "revId": "219e9014d0a436d4d395b9d50c19ca7315bb28fa",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}