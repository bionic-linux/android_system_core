{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9e740a29_16ce7d28",
        "filename": "trusty/storage/proxy/checkpoint_handling.cpp",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 1114938
      },
      "writtenOn": "2021-10-08T05:16:07Z",
      "side": 1,
      "message": "Nit: alphabetize includes with a particular group.",
      "revId": "8fb56b7175d062e76fcc7c5786164ebdbb5a96da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "caf8dc91_d4725e97",
        "filename": "trusty/storage/proxy/checkpoint_handling.cpp",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 1888075
      },
      "writtenOn": "2021-10-08T05:32:42Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9e740a29_16ce7d28",
      "revId": "8fb56b7175d062e76fcc7c5786164ebdbb5a96da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8efac401_4a32304c",
        "filename": "trusty/storage/proxy/checkpoint_handling.cpp",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 1114938
      },
      "writtenOn": "2021-10-08T05:16:07Z",
      "side": 1,
      "message": "Nit: the could be collapsed to \"checkpointingDoneForever\" or something like that.",
      "range": {
        "startLine": 38,
        "startChar": 8,
        "endLine": 38,
        "endChar": 49
      },
      "revId": "8fb56b7175d062e76fcc7c5786164ebdbb5a96da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd58debb_64bbc195",
        "filename": "trusty/storage/proxy/checkpoint_handling.cpp",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 1888075
      },
      "writtenOn": "2021-10-08T05:32:42Z",
      "side": 1,
      "message": "Stephen preferred separate variables for flexibility: \"we could possibly reset the cache state to handle userspace reboots or other remounts, but then we need a mechanism to do that\".",
      "parentUuid": "8efac401_4a32304c",
      "range": {
        "startLine": 38,
        "startChar": 8,
        "endLine": 38,
        "endChar": 49
      },
      "revId": "8fb56b7175d062e76fcc7c5786164ebdbb5a96da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f9fd566_7ee569dd",
        "filename": "trusty/storage/proxy/checkpoint_handling.cpp",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-10-11T20:02:47Z",
      "side": 1,
      "message": "I don\u0027t have a strong preference here, but in the future we may need to reset the cached state.",
      "parentUuid": "dd58debb_64bbc195",
      "range": {
        "startLine": 38,
        "startChar": 8,
        "endLine": 38,
        "endChar": 49
      },
      "revId": "8fb56b7175d062e76fcc7c5786164ebdbb5a96da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78445268_e1aec8ea",
        "filename": "trusty/storage/proxy/checkpoint_handling.cpp",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 1114938
      },
      "writtenOn": "2021-10-11T20:20:38Z",
      "side": 1,
      "message": "Nit: That doesn\u0027t require two variables.  Right now, we effectively have one variable that says \"we know for sure checkpointing will not occur now or in the future\".  (Except expressed inefficiently.)  If that variable gets cleared, then we start looking again.  If we think checkpointing is on, it is never cached because we need to keep re-evaluating it.",
      "parentUuid": "dd58debb_64bbc195",
      "range": {
        "startLine": 38,
        "startChar": 8,
        "endLine": 38,
        "endChar": 49
      },
      "revId": "8fb56b7175d062e76fcc7c5786164ebdbb5a96da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ae3e95cc_30a83642",
        "filename": "trusty/storage/proxy/checkpoint_handling.cpp",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 1888075
      },
      "writtenOn": "2021-10-11T20:53:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "78445268_e1aec8ea",
      "range": {
        "startLine": 38,
        "startChar": 8,
        "endLine": 38,
        "endChar": 49
      },
      "revId": "8fb56b7175d062e76fcc7c5786164ebdbb5a96da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99937452_1f1907f1",
        "filename": "trusty/storage/proxy/checkpoint_handling.cpp",
        "patchSetId": 3
      },
      "lineNbr": 59,
      "author": {
        "id": 1114938
      },
      "writtenOn": "2021-10-08T05:16:07Z",
      "side": 1,
      "message": "Why is this an internal error and not:\n        isCheckpointing \u003d false;\n        checkpointStateCached \u003d true;\n        *active \u003d false;\n        return 0;",
      "revId": "8fb56b7175d062e76fcc7c5786164ebdbb5a96da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd3684fd_2edba2b0",
        "filename": "trusty/storage/proxy/checkpoint_handling.cpp",
        "patchSetId": 3
      },
      "lineNbr": 59,
      "author": {
        "id": 1888075
      },
      "writtenOn": "2021-10-08T05:32:42Z",
      "side": 1,
      "message": "It\u0027s not something we expect to encounter in the wild.\n\nreturn value of 0 is used in \"known\" case (/data is not mounted the first time storageproxyd boots, or it is mounted and we can infer the checkpointing or absence thereforeof).",
      "parentUuid": "99937452_1f1907f1",
      "revId": "8fb56b7175d062e76fcc7c5786164ebdbb5a96da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23223811_dd354190",
        "filename": "trusty/storage/proxy/checkpoint_handling.cpp",
        "patchSetId": 3
      },
      "lineNbr": 59,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-10-08T05:42:30Z",
      "side": 1,
      "message": "We don\u0027t handle checkpointing for non-f2fs /data yet, but it can do checkpointing, so it\u0027s an \"unknown\" state.\n\nWe should probably downgrade this LOGE to a LOGW.",
      "parentUuid": "bd3684fd_2edba2b0",
      "revId": "8fb56b7175d062e76fcc7c5786164ebdbb5a96da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8e75112_84c8cb14",
        "filename": "trusty/storage/proxy/checkpoint_handling.cpp",
        "patchSetId": 3
      },
      "lineNbr": 59,
      "author": {
        "id": 1888075
      },
      "writtenOn": "2021-10-08T05:43:12Z",
      "side": 1,
      "message": "Refactored in the newest patch set.",
      "parentUuid": "bd3684fd_2edba2b0",
      "revId": "8fb56b7175d062e76fcc7c5786164ebdbb5a96da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b95d2182_3b398d98",
        "filename": "trusty/storage/proxy/checkpoint_handling.cpp",
        "patchSetId": 3
      },
      "lineNbr": 59,
      "author": {
        "id": 1888075
      },
      "writtenOn": "2021-10-12T04:57:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d8e75112_84c8cb14",
      "revId": "8fb56b7175d062e76fcc7c5786164ebdbb5a96da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bf9fc48_5eeeea5d",
        "filename": "trusty/storage/proxy/checkpoint_handling.cpp",
        "patchSetId": 3
      },
      "lineNbr": 72,
      "author": {
        "id": 1114938
      },
      "writtenOn": "2021-10-08T05:59:14Z",
      "side": 1,
      "message": "Nit: checkpointValueStart?",
      "range": {
        "startLine": 72,
        "startChar": 64,
        "endLine": 72,
        "endChar": 77
      },
      "revId": "8fb56b7175d062e76fcc7c5786164ebdbb5a96da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b97078a5_10dd9599",
        "filename": "trusty/storage/proxy/checkpoint_handling.cpp",
        "patchSetId": 3
      },
      "lineNbr": 72,
      "author": {
        "id": 1888075
      },
      "writtenOn": "2021-10-08T06:24:44Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9bf9fc48_5eeeea5d",
      "range": {
        "startLine": 72,
        "startChar": 64,
        "endLine": 72,
        "endChar": 77
      },
      "revId": "8fb56b7175d062e76fcc7c5786164ebdbb5a96da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89dc1a76_cb532763",
        "filename": "trusty/storage/proxy/checkpoint_handling.cpp",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1114938
      },
      "writtenOn": "2021-10-08T05:16:07Z",
      "side": 1,
      "message": "It\u0027s not clear to me why std::min is needed.  Document what you\u0027re trying to clip?",
      "revId": "8fb56b7175d062e76fcc7c5786164ebdbb5a96da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5dfdc31c_4afe9f9b",
        "filename": "trusty/storage/proxy/checkpoint_handling.cpp",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1888075
      },
      "writtenOn": "2021-10-08T05:40:48Z",
      "side": 1,
      "message": "It was overly cautious to avoid reading past the end of the buffer in the following statement:\ndataEntry-\u003efs_options.substr(checkpointValueStart,checkpointSize)\n\nsubstr truncates as needed, so I\u0027ll refactor it out.",
      "parentUuid": "89dc1a76_cb532763",
      "revId": "8fb56b7175d062e76fcc7c5786164ebdbb5a96da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71d7c5cd_df306761",
        "filename": "trusty/storage/proxy/checkpoint_handling.cpp",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1114938
      },
      "writtenOn": "2021-10-08T05:59:14Z",
      "side": 1,
      "message": "checkpointValueEnd \u003c\u003d s.length()\ncheckpointValueStart \u003c\u003d checkpointValueEnd\ns.substr(checkpointValueStart, checkpointValueEnd-checkpointValueStart) should always be inside the string?\nAnd if it couldn\u0027t, clamping checkpointValueEnd-checkpointValueStart to 6 would likely not fix all the corner cases?\n\nThe fix you did seems the opposite direction you should go... you should be picking out the value between \"checkpoint\u003d\" and \",\"|EOF, whatever it is.",
      "parentUuid": "5dfdc31c_4afe9f9b",
      "revId": "8fb56b7175d062e76fcc7c5786164ebdbb5a96da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5108debc_4406e01a",
        "filename": "trusty/storage/proxy/checkpoint_handling.cpp",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1888075
      },
      "writtenOn": "2021-10-08T05:59:52Z",
      "side": 1,
      "message": "My bad, that\u0027s to prevent reading past:\n    \"blah blah,checkpoint\u003ddisable,more stuff here\"\nWe only want to read up to \"disable,\". Will upload another CL reverting this.",
      "parentUuid": "5dfdc31c_4afe9f9b",
      "revId": "8fb56b7175d062e76fcc7c5786164ebdbb5a96da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66487611_5cb76d5e",
        "filename": "trusty/storage/proxy/checkpoint_handling.cpp",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1888075
      },
      "writtenOn": "2021-10-08T06:24:44Z",
      "side": 1,
      "message": "Let\u0027s try again:\n\nThe data entry looks like \"... blah,checkpoint\u003ddisable:0,blah ...\".\n\nWe want to know if the checkpoint value is prefixed by \"disable\", but we only scan up to the first comma (or end of the string)",
      "parentUuid": "5108debc_4406e01a",
      "revId": "8fb56b7175d062e76fcc7c5786164ebdbb5a96da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdcfe848_2045a2cb",
        "filename": "trusty/storage/proxy/checkpoint_handling.cpp",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1888075
      },
      "writtenOn": "2021-10-08T06:30:12Z",
      "side": 1,
      "message": "Just matching the following 6 characters against \"disable\" would work in this specific case, but checkpointValueEnd and checkpointValueSize goes through the motions of parsing comma-separated entries.",
      "parentUuid": "66487611_5cb76d5e",
      "revId": "8fb56b7175d062e76fcc7c5786164ebdbb5a96da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c36800e9_c0defa80",
        "filename": "trusty/storage/proxy/checkpoint_handling.cpp",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-10-08T07:22:23Z",
      "side": 1,
      "message": "The option can include other stuff after `disable`, see https://www.kernel.org/doc/Documentation/filesystems/f2fs.txt. I think just checking `strlen(\"disable\")` length bytes is the simplest thing we can do, and we can ignore finding the comma.",
      "parentUuid": "5108debc_4406e01a",
      "revId": "8fb56b7175d062e76fcc7c5786164ebdbb5a96da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b6fb07c_0ef35e7d",
        "filename": "trusty/storage/proxy/checkpoint_handling.cpp",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1888075
      },
      "writtenOn": "2021-10-08T07:40:10Z",
      "side": 1,
      "message": "Ok, back to simplified.",
      "parentUuid": "c36800e9_c0defa80",
      "revId": "8fb56b7175d062e76fcc7c5786164ebdbb5a96da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19bb0e2f_128d0243",
        "filename": "trusty/storage/proxy/proxy.c",
        "patchSetId": 3
      },
      "lineNbr": 148,
      "author": {
        "id": 1114938
      },
      "writtenOn": "2021-10-08T05:16:07Z",
      "side": 1,
      "message": "A key question is what we should do if we don\u0027t know if checkpointing is active or not due to internal errors.  Arguably we should be cautious.  On the other hand, there might be some corner cases we\u0027re gumming up.  Documenting why unknown \u003d\u003d go for it.",
      "range": {
        "startLine": 148,
        "startChar": 16,
        "endLine": 148,
        "endChar": 23
      },
      "revId": "8fb56b7175d062e76fcc7c5786164ebdbb5a96da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "206b2c16_4f16abb4",
        "filename": "trusty/storage/proxy/proxy.c",
        "patchSetId": 3
      },
      "lineNbr": 148,
      "author": {
        "id": 1888075
      },
      "writtenOn": "2021-10-08T05:32:42Z",
      "side": 1,
      "message": "/data not being mounted is the corner case.",
      "parentUuid": "19bb0e2f_128d0243",
      "range": {
        "startLine": 148,
        "startChar": 16,
        "endLine": 148,
        "endChar": 23
      },
      "revId": "8fb56b7175d062e76fcc7c5786164ebdbb5a96da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e33a3e6_51cc288e",
        "filename": "trusty/storage/proxy/proxy.c",
        "patchSetId": 3
      },
      "lineNbr": 148,
      "author": {
        "id": 1809421
      },
      "writtenOn": "2021-10-08T05:42:30Z",
      "side": 1,
      "message": "We handle that case with return 0 now, so it could be an error except for the non-f2fs case for qemu or other devices without f2fs userdata.",
      "parentUuid": "206b2c16_4f16abb4",
      "range": {
        "startLine": 148,
        "startChar": 16,
        "endLine": 148,
        "endChar": 23
      },
      "revId": "8fb56b7175d062e76fcc7c5786164ebdbb5a96da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2d62f79_34ff3287",
        "filename": "trusty/storage/proxy/proxy.c",
        "patchSetId": 3
      },
      "lineNbr": 148,
      "author": {
        "id": 1888075
      },
      "writtenOn": "2021-10-08T05:43:12Z",
      "side": 1,
      "message": "Refactored out in the newest patch set.",
      "parentUuid": "206b2c16_4f16abb4",
      "range": {
        "startLine": 148,
        "startChar": 16,
        "endLine": 148,
        "endChar": 23
      },
      "revId": "8fb56b7175d062e76fcc7c5786164ebdbb5a96da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e5c3515_774abaa4",
        "filename": "trusty/storage/proxy/proxy.c",
        "patchSetId": 3
      },
      "lineNbr": 148,
      "author": {
        "id": 1888075
      },
      "writtenOn": "2021-10-08T06:40:41Z",
      "side": 1,
      "message": "Both proxy.c::is_checkpoint_active and checkpoint_handling.cpp::isCheckpointing both default to false, hence the (rc \u003d\u003d 0) check was actually redundant i.e., if rc !\u003d 0, then is_checkpoint_active is false, hence it won\u0027t enter the while loop anyway.",
      "parentUuid": "e2d62f79_34ff3287",
      "range": {
        "startLine": 148,
        "startChar": 16,
        "endLine": 148,
        "endChar": 23
      },
      "revId": "8fb56b7175d062e76fcc7c5786164ebdbb5a96da",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}