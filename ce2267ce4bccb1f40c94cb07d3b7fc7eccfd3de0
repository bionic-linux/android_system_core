{
  "comments": [
    {
      "key": {
        "uuid": "3a636df9_1a2ab102",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 377,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-10-31T20:24:41Z",
      "side": 1,
      "message": "I\u0027m not a big fan of having a switch statement in a for loop.  I thought that we were going to handle these before the switch statement, something like:\n\nfor (size_t i \u003d 5; i \u003c args.size(); ++i) {\n  // Handle these \n}\n\nswitch (max(4, args.size()) {\n  // Handle the positional arguments\n}\n\nOr maybe even refactor out parsing of those parameters and:\n\ncase 7:\n  ParseExtraArgs(args[6]);\ncase 6:\n  ParseExtraArgs(args[5]);\n\nWhich becomes slightly easier if it were a lambda,\n\nauto parse_extra_args \u003d [\u0026] (const std::string\u0026 arg) {\n  // Do all the parsing and have the rest of the variables in this function easily available.\n}",
      "revId": "ce2267ce4bccb1f40c94cb07d3b7fc7eccfd3de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4198fc94_2ce01837",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 377,
      "author": {
        "id": 1060907
      },
      "writtenOn": "2019-10-31T21:28:47Z",
      "side": 1,
      "message": "I\u0027m not sure I understand why switch-in-a-loop is bad? It does look a bit weird I admit, but it appeals to me: handle each argument in turn, if it\u0027s positional do one thing, otherwise do another. I can do a switch and then a loop, but it annoys me that the switch handles the arguments backwards.",
      "parentUuid": "3a636df9_1a2ab102",
      "revId": "ce2267ce4bccb1f40c94cb07d3b7fc7eccfd3de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09f57e4c_8246b252",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 377,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-10-31T21:58:00Z",
      "side": 1,
      "message": "That\u0027s fair. You can keep it if you want, it just looks strange to me.",
      "parentUuid": "4198fc94_2ce01837",
      "revId": "ce2267ce4bccb1f40c94cb07d3b7fc7eccfd3de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48b2a5c9_c7a0e6a2",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 397,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-10-31T20:24:41Z",
      "side": 1,
      "message": "We can use android::base::Split() here instead.  We can check that there\u0027re exactly 2 pieces as well.",
      "revId": "ce2267ce4bccb1f40c94cb07d3b7fc7eccfd3de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6329b8f_e81c5c73",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 397,
      "author": {
        "id": 1060907
      },
      "writtenOn": "2019-10-31T23:15:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "48b2a5c9_c7a0e6a2",
      "revId": "ce2267ce4bccb1f40c94cb07d3b7fc7eccfd3de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7dfcfde_f074ebaf",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 399,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-10-31T20:24:41Z",
      "side": 1,
      "message": "This is missing \u003c\u003c \"\u0027\"",
      "range": {
        "startLine": 399,
        "startChar": 72,
        "endLine": 399,
        "endChar": 73
      },
      "revId": "ce2267ce4bccb1f40c94cb07d3b7fc7eccfd3de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4a37209_da1d4e01",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 399,
      "author": {
        "id": 1060907
      },
      "writtenOn": "2019-10-31T21:28:47Z",
      "side": 1,
      "message": "What\u0027s the purpose of that?",
      "parentUuid": "f7dfcfde_f074ebaf",
      "range": {
        "startLine": 399,
        "startChar": 72,
        "endLine": 399,
        "endChar": 73
      },
      "revId": "ce2267ce4bccb1f40c94cb07d3b7fc7eccfd3de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed24145d_5932428b",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 399,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-10-31T21:58:00Z",
      "side": 1,
      "message": "There\u0027s a beginning single quote but not end quote in the log message.  It looks like my comment rendered poorly but it\u0027s \" \u0027 \" not just \" \"",
      "parentUuid": "d4a37209_da1d4e01",
      "range": {
        "startLine": 399,
        "startChar": 72,
        "endLine": 399,
        "endChar": 73
      },
      "revId": "ce2267ce4bccb1f40c94cb07d3b7fc7eccfd3de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecf9a59b_40597f0b",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 399,
      "author": {
        "id": 1060907
      },
      "writtenOn": "2019-10-31T23:15:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ed24145d_5932428b",
      "range": {
        "startLine": 399,
        "startChar": 72,
        "endLine": 399,
        "endChar": 73
      },
      "revId": "ce2267ce4bccb1f40c94cb07d3b7fc7eccfd3de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "423b862d_2a724995",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 403,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-10-31T20:24:41Z",
      "side": 1,
      "message": "We should probably add a check that \u0027encryption\u0027 and \u0027key\u0027 are not specified twice.  \n\nLikely a check at the end that \u0027key\u0027 isn\u0027t specified if encryption is \u0027None\u0027\n\nWe have host_init_verifier that\u0027ll check this syntax during build time, so we should make it as strict as possible.",
      "revId": "ce2267ce4bccb1f40c94cb07d3b7fc7eccfd3de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc9d9527_7c195994",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 403,
      "author": {
        "id": 1060907
      },
      "writtenOn": "2019-10-31T21:28:47Z",
      "side": 1,
      "message": "Sure, can do. How does host_init_verifier check the syntax without executing the command? Do I need to change something else to make that possible?",
      "parentUuid": "423b862d_2a724995",
      "revId": "ce2267ce4bccb1f40c94cb07d3b7fc7eccfd3de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2f6daec_070cb88d",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 403,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-10-31T21:58:00Z",
      "side": 1,
      "message": "Ah, right.  I forgot that this code isn\u0027t run for host.  The code that is run is in https://cs.corp.google.com/android/system/core/init/check_builtins.cpp?l\u003d123\n\nProbably best if we could do something like I did with ParseRestorecon() and make a ParseMkdir() function that parses args into a struct with the right info or returns an error.  That way the check code just checks if ParseMkdir() succeeds.",
      "parentUuid": "cc9d9527_7c195994",
      "revId": "ce2267ce4bccb1f40c94cb07d3b7fc7eccfd3de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "546c36f4_70a1e765",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 403,
      "author": {
        "id": 1060907
      },
      "writtenOn": "2019-10-31T23:15:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b2f6daec_070cb88d",
      "revId": "ce2267ce4bccb1f40c94cb07d3b7fc7eccfd3de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b09a2740_fb1cbe6e",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 429,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-10-31T20:24:41Z",
      "side": 1,
      "message": "const std::string",
      "range": {
        "startLine": 429,
        "startChar": 4,
        "endLine": 429,
        "endChar": 15
      },
      "revId": "ce2267ce4bccb1f40c94cb07d3b7fc7eccfd3de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a72051d7_bb9ca222",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 429,
      "author": {
        "id": 1060907
      },
      "writtenOn": "2019-10-31T23:15:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b09a2740_fb1cbe6e",
      "range": {
        "startLine": 429,
        "startChar": 4,
        "endLine": 429,
        "endChar": 15
      },
      "revId": "ce2267ce4bccb1f40c94cb07d3b7fc7eccfd3de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10da1d4a_c4f211d3",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 430,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-10-31T20:24:41Z",
      "side": 1,
      "message": "We already have `using android::base::StartsWith` at the top of the file, so we can drop this.",
      "range": {
        "startLine": 430,
        "startChar": 8,
        "endLine": 430,
        "endChar": 23
      },
      "revId": "ce2267ce4bccb1f40c94cb07d3b7fc7eccfd3de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62e6f069_13a1106e",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 430,
      "author": {
        "id": 1060907
      },
      "writtenOn": "2019-10-31T23:15:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "10da1d4a_c4f211d3",
      "range": {
        "startLine": 430,
        "startChar": 8,
        "endLine": 430,
        "endChar": 23
      },
      "revId": "ce2267ce4bccb1f40c94cb07d3b7fc7eccfd3de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df7ce2d0_20bf9fff",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 433,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-10-31T20:24:41Z",
      "side": 1,
      "message": "How strict do we want to make this?  Again, host_init_verifier will require this at build time, so we can make it rather strict.\n\nIf we\u0027re worried about backwards compatibility, we can enforce this only when SelinuxGetVendorAndroidVersion() \u003e\u003d __ANDROID_API_R__",
      "revId": "ce2267ce4bccb1f40c94cb07d3b7fc7eccfd3de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b23cc734_72696c7c",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 433,
      "author": {
        "id": 1060907
      },
      "writtenOn": "2019-10-31T21:28:47Z",
      "side": 1,
      "message": "I would like to make this an error, but I don\u0027t want to have to revert this change, so I\u0027m putting that off to a subsequent change :)",
      "parentUuid": "df7ce2d0_20bf9fff",
      "revId": "ce2267ce4bccb1f40c94cb07d3b7fc7eccfd3de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f10f68d_88f50de8",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 433,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-10-31T21:58:00Z",
      "side": 1,
      "message": "Sounds good!\n\nFor what it\u0027s worth, once this is in host_init_verifier, you should get great coverage at build time for what it\u0027ll break.",
      "parentUuid": "b23cc734_72696c7c",
      "revId": "ce2267ce4bccb1f40c94cb07d3b7fc7eccfd3de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "736ef790_77c04f02",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 433,
      "author": {
        "id": 1060907
      },
      "writtenOn": "2019-10-31T23:15:12Z",
      "side": 1,
      "message": "Great news - thanks!",
      "parentUuid": "1f10f68d_88f50de8",
      "revId": "ce2267ce4bccb1f40c94cb07d3b7fc7eccfd3de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c99b797_9e283bd6",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1307,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-10-31T20:24:41Z",
      "side": 1,
      "message": "This should be 6, right?  The existing 4 + encryption\u003d and key\u003d ?",
      "range": {
        "startLine": 1307,
        "startChar": 44,
        "endLine": 1307,
        "endChar": 48
      },
      "revId": "ce2267ce4bccb1f40c94cb07d3b7fc7eccfd3de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37cefa69_3275f6b0",
        "filename": "init/builtins.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1307,
      "author": {
        "id": 1060907
      },
      "writtenOn": "2019-10-31T23:15:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5c99b797_9e283bd6",
      "range": {
        "startLine": 1307,
        "startChar": 44,
        "endLine": 1307,
        "endChar": 48
      },
      "revId": "ce2267ce4bccb1f40c94cb07d3b7fc7eccfd3de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f81533b0_c3775caa",
        "filename": "init/fscrypt_init_extensions.cpp",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-10-31T20:24:41Z",
      "side": 1,
      "message": "Should we check that we were actually able to delete the contents?",
      "revId": "ce2267ce4bccb1f40c94cb07d3b7fc7eccfd3de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2a6888d_3ea1b6ff",
        "filename": "init/fscrypt_init_extensions.cpp",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1060907
      },
      "writtenOn": "2019-10-31T21:28:47Z",
      "side": 1,
      "message": "We try to set the policy again; this will only succeed if we deleted the contents.",
      "parentUuid": "f81533b0_c3775caa",
      "revId": "ce2267ce4bccb1f40c94cb07d3b7fc7eccfd3de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1a4624e_d2d032e9",
        "filename": "init/fscrypt_init_extensions.cpp",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-10-31T21:58:00Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c2a6888d_3ea1b6ff",
      "revId": "ce2267ce4bccb1f40c94cb07d3b7fc7eccfd3de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "01ca520b_b6c3bd35",
        "filename": "init/fscrypt_init_extensions.cpp",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1060907
      },
      "writtenOn": "2019-10-31T23:15:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c1a4624e_d2d032e9",
      "revId": "ce2267ce4bccb1f40c94cb07d3b7fc7eccfd3de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba8fa746_5ae970f3",
        "filename": "rootdir/init.rc",
        "patchSetId": 1
      },
      "lineNbr": 872,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-10-31T20:24:41Z",
      "side": 1,
      "message": "The code above implies that this should be a space.",
      "range": {
        "startLine": 872,
        "startChar": 62,
        "endLine": 872,
        "endChar": 63
      },
      "revId": "ce2267ce4bccb1f40c94cb07d3b7fc7eccfd3de0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}