{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0193a55b_00698e28",
        "filename": "debuggerd/libdebuggerd/tombstone_proto.cpp",
        "patchSetId": 11
      },
      "lineNbr": 264,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2024-05-30T23:51:22Z",
      "side": 1,
      "message": "would not it be more readable to iterate from size() down to 0, and look up (original_off - off) % size ?",
      "fixSuggestions": [
        {
          "fixId": "4685299f_447c23d1",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "debuggerd/libdebuggerd/tombstone_proto.cpp",
              "range": {
                "startLine": 258,
                "startChar": 0,
                "endLine": 264,
                "endChar": 0
              },
              "replacement": "  for (uintptr_t off \u003d buf_size; off !\u003d 0; off -\u003d 16) {\n    if (handle_off(off - 16)) {\n      return;\n    }\n"
            }
          ]
        }
      ],
      "revId": "cbd8d2af81a8781a6176c6531b815c7c09de3442",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e102d423_643bee9c",
        "filename": "debuggerd/libdebuggerd/tombstone_proto.cpp",
        "patchSetId": 11
      },
      "lineNbr": 264,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-05-31T00:02:59Z",
      "side": 1,
      "message": "I am confused. We need to start at original_off (so we can bail out at the first missing entry, and so we can keep the LRU order), so we would be iterating _up_ to size. That would work % we have to fix up the remainder for negative values (`-1 % 3 \u003d\u003d -1`)",
      "parentUuid": "0193a55b_00698e28",
      "revId": "cbd8d2af81a8781a6176c6531b815c7c09de3442",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "114b0c1f_a08c21e2",
        "filename": "debuggerd/libdebuggerd/tombstone_proto.cpp",
        "patchSetId": 11
      },
      "lineNbr": 264,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-05-31T20:21:52Z",
      "side": 1,
      "message": "Done. Also added a test for the read routine.",
      "parentUuid": "e102d423_643bee9c",
      "revId": "cbd8d2af81a8781a6176c6531b815c7c09de3442",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5fba6dcb_e10c0436",
        "filename": "debuggerd/proto/tombstone.proto",
        "patchSetId": 11
      },
      "lineNbr": 136,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2024-05-30T23:51:22Z",
      "side": 1,
      "message": "This looks wrong - StackObject should refer to a candidate stack allocation, not raw history dump. Also, the result of parsing this history would be potentially multiple MemoryError structs, so I guess it should live directly in Tombstone.",
      "fixSuggestions": [
        {
          "fixId": "6bfe6bf9_b7d962f4",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "debuggerd/proto/tombstone.proto",
              "range": {
                "startLine": 107,
                "startChar": 0,
                "endLine": 108,
                "endChar": 0
              },
              "replacement": "message StackHistoryBuffer {\n"
            },
            {
              "path": "debuggerd/proto/tombstone.proto",
              "range": {
                "startLine": 136,
                "startChar": 0,
                "endLine": 137,
                "endChar": 0
              },
              "replacement": "    StackHistoryBuffer stack \u003d 4;\n"
            }
          ]
        }
      ],
      "revId": "cbd8d2af81a8781a6176c6531b815c7c09de3442",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a553a0fa_41fb0957",
        "filename": "debuggerd/proto/tombstone.proto",
        "patchSetId": 11
      },
      "lineNbr": 136,
      "author": {
        "id": 1268571
      },
      "writtenOn": "2024-05-31T20:58:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5fba6dcb_e10c0436",
      "revId": "cbd8d2af81a8781a6176c6531b815c7c09de3442",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6887cdb8_5130f7a6",
        "filename": "debuggerd/proto/tombstone.proto",
        "patchSetId": 11
      },
      "lineNbr": 136,
      "author": {
        "id": 1005967
      },
      "writtenOn": "2024-05-31T22:48:06Z",
      "side": 1,
      "message": "Actually... why don\u0027t we put it in the corresponding Thread object? And then proto-to-text conversion will naturally group it with the target thread dump, where it makes a lot more sense.",
      "parentUuid": "a553a0fa_41fb0957",
      "revId": "cbd8d2af81a8781a6176c6531b815c7c09de3442",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}