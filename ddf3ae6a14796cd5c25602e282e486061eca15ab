{
  "comments": [
    {
      "key": {
        "uuid": "6d0d3d35_6ea6780c",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2019-06-10T06:58:51Z",
      "side": 1,
      "message": "Is it okay to have anonymous namespace in a header file? The compiler complains about this. But I don\u0027t know what the style guide says about this. We can move the implementation to .cpp file?",
      "range": {
        "startLine": 118,
        "startChar": 0,
        "endLine": 118,
        "endChar": 11
      },
      "revId": "ddf3ae6a14796cd5c25602e282e486061eca15ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5aeddefe_299e9d8f",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 118,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-06-10T08:45:49Z",
      "side": 1,
      "message": "I think it\u0027s okay. I see +600 anonymous namespace in header files in our tree.",
      "parentUuid": "6d0d3d35_6ea6780c",
      "range": {
        "startLine": 118,
        "startChar": 0,
        "endLine": 118,
        "endChar": 11
      },
      "revId": "ddf3ae6a14796cd5c25602e282e486061eca15ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "49293ff9_983aec65",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2019-06-10T06:58:51Z",
      "side": 1,
      "message": "Or, [[maybe_unused]] here?",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 120,
        "endChar": 4
      },
      "revId": "ddf3ae6a14796cd5c25602e282e486061eca15ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee745337_69282fab",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-06-10T08:45:49Z",
      "side": 1,
      "message": "I\u0027ve inlined these.",
      "parentUuid": "49293ff9_983aec65",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 120,
        "endChar": 4
      },
      "revId": "ddf3ae6a14796cd5c25602e282e486061eca15ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5fb26cf3_31e9e0b3",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2019-06-10T06:58:51Z",
      "side": 1,
      "message": "This specialization doesn\u0027t have many chances due to universal reference of \"operator\u003c\u003c(T\u0026\u0026 t)\".\nFor example, the following code will choose the operator\u003c\u003c(T\u0026\u0026t), not operator\u003c\u003c(const ResultError\u0026)\n\n    auto result \u003d foo();\n    if (!result)\n      return Error() \u003c\u003c result.error();\n    ...\n\nIn this case, I\u0027d rather use \"if constexpr\" like following.\n\n    Error\u0026 operator\u003c\u003c(T\u0026\u0026 t) {\n      if constexpr (std::is_same_v\u003cstd::remove_cv_t\u003cstd::remove_reference_t\u003cT\u003e\u003e, ResultError\u003e) {\n        ...\n\nOr, we could borrow std::remove_cvref_t from C++20 ;)",
      "range": {
        "startLine": 153,
        "startChar": 0,
        "endLine": 153,
        "endChar": 54
      },
      "revId": "ddf3ae6a14796cd5c25602e282e486061eca15ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ec95fbf_2644a978",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-06-10T08:45:49Z",
      "side": 1,
      "message": "Good point. Done.",
      "parentUuid": "5fb26cf3_31e9e0b3",
      "range": {
        "startLine": 153,
        "startChar": 0,
        "endLine": 153,
        "endChar": 54
      },
      "revId": "ddf3ae6a14796cd5c25602e282e486061eca15ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6f4162ae_47d5cfd9",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2019-06-10T06:58:51Z",
      "side": 1,
      "message": "This will cause appending std::strerror() at the end of the message. Since ResultError#message already contains the strerror() if it is made out of ErrnoError(), we don\u0027t have to append it again. I also thought this line is missing when I saw this first. It seems that others might do the same mistake in the future.",
      "range": {
        "startLine": 157,
        "startChar": 4,
        "endLine": 157,
        "endChar": 25
      },
      "revId": "ddf3ae6a14796cd5c25602e282e486061eca15ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc7e6a7e_7c9c1577",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2019-06-10T08:45:49Z",
      "side": 1,
      "message": "ok. I\u0027ve made append_errno_ const to prevent future mistake.",
      "parentUuid": "6f4162ae_47d5cfd9",
      "range": {
        "startLine": 157,
        "startChar": 4,
        "endLine": 157,
        "endChar": 25
      },
      "revId": "ddf3ae6a14796cd5c25602e282e486061eca15ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f567d26_58441ece",
        "filename": "base/include/android-base/result.h",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 1415877
      },
      "writtenOn": "2019-06-10T14:55:36Z",
      "side": 1,
      "message": "Great!",
      "parentUuid": "bc7e6a7e_7c9c1577",
      "range": {
        "startLine": 157,
        "startChar": 4,
        "endLine": 157,
        "endChar": 25
      },
      "revId": "ddf3ae6a14796cd5c25602e282e486061eca15ab",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}