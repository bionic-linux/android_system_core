{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ec7a1ab4_2907310a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 10,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2024-04-09T23:27:11Z",
      "side": 1,
      "message": "Why is that a problem? In my understanding, the main idea was that package watchdog gets the first chance to mitigate the issue, and then falls back to other means which I think includes fs checkpoint rollback.",
      "range": {
        "startLine": 9,
        "startChar": 54,
        "endLine": 10,
        "endChar": 30
      },
      "revId": "6e35e37cc650cab83fb7823957b307e341e213f0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9c3345e_cdd67600",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 10,
      "author": {
        "id": 1977615
      },
      "writtenOn": "2024-04-10T14:00:06Z",
      "side": 1,
      "message": "We dont mind fs checkpoint rollback being performed before RescueParty. Our concern was that none of RescueParty mitigations were executed at all. This way fs checkpoint rollback behaves the same way as before and ramdump is taken as well but only once in 24hrs. RescueParty can takeover if the issue still exists.\n\nBut we are open to consider either. Which do you think is a better way in this scenario?",
      "parentUuid": "ec7a1ab4_2907310a",
      "range": {
        "startLine": 9,
        "startChar": 54,
        "endLine": 10,
        "endChar": 30
      },
      "revId": "6e35e37cc650cab83fb7823957b307e341e213f0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b76eb44c_3a696e5f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 10,
      "author": {
        "id": 1060436
      },
      "writtenOn": "2024-04-10T14:26:01Z",
      "side": 1,
      "message": "My main concern with the change we made earlier is that after an OTA / Mainline update that breaks a critical service, this watchdog wouldn\u0027t kick in early, and the device would actually make it to a successful boot but be broken... at which point the filesystem based rollback would be erased I believe.\n\nBy allowing one reboot early, we allow the filesystem rollback to be applied; if there isn\u0027t one, the throttling here will ensure that next reboot PackageWatchdog gets a chance to run.",
      "parentUuid": "c9c3345e_cdd67600",
      "range": {
        "startLine": 9,
        "startChar": 54,
        "endLine": 10,
        "endChar": 30
      },
      "revId": "6e35e37cc650cab83fb7823957b307e341e213f0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "792ef987_07f351ea",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 10,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2024-04-11T02:13:54Z",
      "side": 1,
      "message": "Ok. So, you want to minimize the impact of this change, and it was not your intention to implement the suggested relationship between package watchdog init at least in this CL. Got it.",
      "parentUuid": "b76eb44c_3a696e5f",
      "range": {
        "startLine": 9,
        "startChar": 54,
        "endLine": 10,
        "endChar": 30
      },
      "revId": "6e35e37cc650cab83fb7823957b307e341e213f0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33a33e0e_0a02a550",
        "filename": "init/service.cpp",
        "patchSetId": 6
      },
      "lineNbr": 358,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2024-04-09T23:27:11Z",
      "side": 1,
      "message": "we don\u0027t have to construct a string in the heap.\n\n`constexpr const char native_watchdog_reboot_time[] \u003d \"...\";`",
      "range": {
        "startLine": 358,
        "startChar": 4,
        "endLine": 358,
        "endChar": 43
      },
      "revId": "6e35e37cc650cab83fb7823957b307e341e213f0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0eb187e0_01bbfc75",
        "filename": "init/service.cpp",
        "patchSetId": 6
      },
      "lineNbr": 358,
      "author": {
        "id": 1977615
      },
      "writtenOn": "2024-04-10T14:00:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "33a33e0e_0a02a550",
      "range": {
        "startLine": 358,
        "startChar": 4,
        "endLine": 358,
        "endChar": 43
      },
      "revId": "6e35e37cc650cab83fb7823957b307e341e213f0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "009cbd4b_3b3be178",
        "filename": "init/service.cpp",
        "patchSetId": 6
      },
      "lineNbr": 373,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2024-04-09T23:27:11Z",
      "side": 1,
      "message": "nit: style. `epoch_time`",
      "range": {
        "startLine": 373,
        "startChar": 33,
        "endLine": 373,
        "endChar": 42
      },
      "revId": "6e35e37cc650cab83fb7823957b307e341e213f0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4799a18a_b98a4358",
        "filename": "init/service.cpp",
        "patchSetId": 6
      },
      "lineNbr": 373,
      "author": {
        "id": 1977615
      },
      "writtenOn": "2024-04-10T14:00:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "009cbd4b_3b3be178",
      "range": {
        "startLine": 373,
        "startChar": 33,
        "endLine": 373,
        "endChar": 42
      },
      "revId": "6e35e37cc650cab83fb7823957b307e341e213f0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "36434d8a_c6a4e6ca",
        "filename": "init/service.cpp",
        "patchSetId": 6
      },
      "lineNbr": 380,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2024-04-09T23:27:11Z",
      "side": 1,
      "message": "It\u0027s a pity that we have GetIntProperty but not SetIntProperty. :(",
      "range": {
        "startLine": 380,
        "startChar": 28,
        "endLine": 380,
        "endChar": 39
      },
      "revId": "6e35e37cc650cab83fb7823957b307e341e213f0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45bdb2e0_239e1c74",
        "filename": "init/service.cpp",
        "patchSetId": 6
      },
      "lineNbr": 385,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2024-04-09T23:27:11Z",
      "side": 1,
      "message": "For debugging, you may want to leave some logs for the `else` case as well.",
      "range": {
        "startLine": 385,
        "startChar": 24,
        "endLine": 385,
        "endChar": 25
      },
      "revId": "6e35e37cc650cab83fb7823957b307e341e213f0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb9c0256_19ece7c6",
        "filename": "init/service.cpp",
        "patchSetId": 6
      },
      "lineNbr": 385,
      "author": {
        "id": 1977615
      },
      "writtenOn": "2024-04-10T14:00:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "45bdb2e0_239e1c74",
      "range": {
        "startLine": 385,
        "startChar": 24,
        "endLine": 385,
        "endChar": 25
      },
      "revId": "6e35e37cc650cab83fb7823957b307e341e213f0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}