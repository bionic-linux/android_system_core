{
  "comments": [
    {
      "key": {
        "uuid": "77a11aaa_7663b658",
        "filename": "liblog/tests/liblog_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1600,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-01-06T19:53:50Z",
      "side": 1,
      "message": "it counts all messages matching the supplied timestamp?  (and/or are there other nuances of \"end-to-end\" here?)",
      "range": {
        "startLine": 1600,
        "startChar": 37,
        "endLine": 1600,
        "endChar": 73
      },
      "revId": "120a5a399a75ca5aa9e951a3bca6e08473314d53",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77a11aaa_b1536857",
        "filename": "liblog/tests/liblog_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1600,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-01-06T21:19:18Z",
      "side": 1,
      "message": "end-to-end is log a message, then fire up a log reader to check if it made it.\n\nI detail the nuance of _payload_ timestamp signature content below in the comment where ++count occurs. This saved a longer comment here by giving more programmatic detail below. The other nuance is that they also only come from my pid, and we only check the last 1000 lines, but that is an efficiency that if removed would only add cpu cycles and have zero difference in the result.",
      "parentUuid": "77a11aaa_7663b658",
      "range": {
        "startLine": 1600,
        "startChar": 37,
        "endLine": 1600,
        "endChar": 73
      },
      "revId": "120a5a399a75ca5aa9e951a3bca6e08473314d53",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77a11aaa_d6546219",
        "filename": "liblog/tests/liblog_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1616,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-01-06T19:53:50Z",
      "side": 1,
      "message": "These constants are mysterious to me... if they\u0027re not very obvious to anybody who works on logger testing maybe add symbols or comments?",
      "range": {
        "startLine": 1616,
        "startChar": 34,
        "endLine": 1616,
        "endChar": 43
      },
      "revId": "120a5a399a75ca5aa9e951a3bca6e08473314d53",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77a11aaa_51ff9cf2",
        "filename": "liblog/tests/liblog_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1616,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-01-06T21:19:18Z",
      "side": 1,
      "message": "gTests started out life with _no_ support for native events binary decoding. We only added support this (last) year for native event support, and it is too clunky for just these tiny single LONG event messages. However, we also defined static structures for common event payload signatures which can be used here rather efficiently.\n\nWe will add a CL prior to this one to change as many over as possible to this new world order.",
      "parentUuid": "77a11aaa_d6546219",
      "range": {
        "startLine": 1616,
        "startChar": 34,
        "endLine": 1616,
        "endChar": 43
      },
      "revId": "120a5a399a75ca5aa9e951a3bca6e08473314d53",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77a11aaa_f637a63c",
        "filename": "liblog/tests/liblog_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1648,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-01-06T19:53:50Z",
      "side": 1,
      "message": "This is saying be careful of any other concurrent tests that may call setuid() and interfere with proper operation of this test?",
      "range": {
        "startLine": 1648,
        "startChar": 47,
        "endLine": 1648,
        "endChar": 71
      },
      "revId": "120a5a399a75ca5aa9e951a3bca6e08473314d53",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77a11aaa_91f9040e",
        "filename": "liblog/tests/liblog_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1648,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-01-06T21:19:18Z",
      "side": 1,
      "message": "There are no concurrent tests. All tests in this process here are sequential.",
      "parentUuid": "77a11aaa_f637a63c",
      "range": {
        "startLine": 1648,
        "startChar": 47,
        "endLine": 1648,
        "endChar": 71
      },
      "revId": "120a5a399a75ca5aa9e951a3bca6e08473314d53",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77a11aaa_b6c8be0d",
        "filename": "liblog/tests/liblog_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1649,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-01-06T19:53:50Z",
      "side": 1,
      "message": "some other test\u0027s [?]",
      "range": {
        "startLine": 1649,
        "startChar": 38,
        "endLine": 1649,
        "endChar": 47
      },
      "revId": "120a5a399a75ca5aa9e951a3bca6e08473314d53",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77a11aaa_9641faac",
        "filename": "liblog/tests/liblog_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1651,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-01-06T19:53:50Z",
      "side": 1,
      "message": "as near as possible [?]",
      "range": {
        "startLine": 1651,
        "startChar": 64,
        "endLine": 1651,
        "endChar": 74
      },
      "revId": "120a5a399a75ca5aa9e951a3bca6e08473314d53",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77a11aaa_d62b8292",
        "filename": "liblog/tests/liblog_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1652,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-01-06T19:53:50Z",
      "side": 1,
      "message": "Is that what determines test execution order?",
      "range": {
        "startLine": 1652,
        "startChar": 7,
        "endLine": 1652,
        "endChar": 29
      },
      "revId": "120a5a399a75ca5aa9e951a3bca6e08473314d53",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77a11aaa_d6dc62d0",
        "filename": "liblog/tests/liblog_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1653,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-01-06T19:53:50Z",
      "side": 1,
      "message": "tests that would be adversely affected by emptying the log [?]",
      "range": {
        "startLine": 1653,
        "startChar": 20,
        "endLine": 1653,
        "endChar": 25
      },
      "revId": "120a5a399a75ca5aa9e951a3bca6e08473314d53",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77a11aaa_f6288698",
        "filename": "liblog/tests/liblog_test.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1699,
      "author": {
        "id": 1004277
      },
      "writtenOn": "2017-01-06T19:53:50Z",
      "side": 1,
      "message": "determined",
      "range": {
        "startLine": 1699,
        "startChar": 22,
        "endLine": 1699,
        "endChar": 33
      },
      "revId": "120a5a399a75ca5aa9e951a3bca6e08473314d53",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}