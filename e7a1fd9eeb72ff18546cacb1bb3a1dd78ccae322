{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "819d2d6c_941679ef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2022-08-06T07:36:42Z",
      "side": 1,
      "message": "I\u0027m thinking maybe we should separate overlay remount and legacy remount code, and process them in two separate pass...\n\nThe newly refactored code is much better to read than before, and it revealed the very intertwined logic of the two types of \"remount\". Making the code logic still hard to reason with.\n",
      "revId": "e7a1fd9eeb72ff18546cacb1bb3a1dd78ccae322",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "307fb1c3_5aa66ffc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1358301
      },
      "writtenOn": "2022-08-08T18:30:27Z",
      "side": 1,
      "message": "Hi folks, this is Harry from the Android CrystalBall team. Our boot time tests seems to indicate that this chain of changes are causing a regression in boot time. Could you please revert? Thank you!\n\nThis relation chain\u0027s result: https://screenshot.googleplex.com/7WU2bgUB8jmyuBg\n\nRegressions in postsubmit:\n \nhttps://data.corp.google.com/sites/sovxarifgsq9/perfcop_single_metric/?f\u003dbuild_target:in:redfin-userdebug\u0026f\u003dmetric_key:eq:ActivityManagerTiming_TotalBootTime-mean\u0026f\u003datp_test_name:eq:asit%2Fperf%2Fboottime_test\u0026f\u003dtest_name:eq:(null)\n\nhttps://data.corp.google.com/sites/sovxarifgsq9/perfcop_single_metric/?f\u003dbuild_target:in:redfin-userdebug\u0026f\u003dmetric_key:eq:SystemServerTiming_StartServices-mean\u0026f\u003datp_test_name:eq:asit%2Fperf%2Fboottime_test\u0026f\u003dtest_name:eq:(null)",
      "revId": "e7a1fd9eeb72ff18546cacb1bb3a1dd78ccae322",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7e4f0f7_eae12d84",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2022-08-08T19:33:06Z",
      "side": 1,
      "message": "This CL hasn\u0027t been checked in yet - how do we narrow it down to a merged CL?",
      "parentUuid": "307fb1c3_5aa66ffc",
      "revId": "e7a1fd9eeb72ff18546cacb1bb3a1dd78ccae322",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10189dec_f4c3c588",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1073883
      },
      "writtenOn": "2022-08-08T20:39:32Z",
      "side": 1,
      "message": "Can you verify if any of your CL is merged in this range?\n\nhttps://screenshot.googleplex.com/56cSwwKQxx4vc9E",
      "parentUuid": "f7e4f0f7_eae12d84",
      "revId": "e7a1fd9eeb72ff18546cacb1bb3a1dd78ccae322",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45c57dc8_e3a04dc9",
        "filename": "fs_mgr/fs_mgr_remount.cpp",
        "patchSetId": 9
      },
      "lineNbr": 242,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2022-08-06T07:36:42Z",
      "side": 1,
      "message": "fstab.end()",
      "range": {
        "startLine": 242,
        "startChar": 18,
        "endLine": 242,
        "endChar": 28
      },
      "revId": "e7a1fd9eeb72ff18546cacb1bb3a1dd78ccae322",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d9b928c_416b9fea",
        "filename": "fs_mgr/fs_mgr_remount.cpp",
        "patchSetId": 9
      },
      "lineNbr": 257,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2022-08-06T07:36:42Z",
      "side": 1,
      "message": "ok went through the latest iteration, I think RN the code works, but couldn\u0027t this be simplified to:\n\n!fs_mgr_overlayfs_already_mounted(entry.mount_point) \u0026\u0026 !IsRemountable(candidates, entry)\n\n?\n\nfor overlayfs remount partitions,\n  if is remounted already, fs_mgr_overlayfs_already_mounted() \u003d\u003e true\n  if not remounted, IsRemountable() \u003d\u003e true\nfor legacy remount partitions,\n  no matter it\u0027s remounted or not, IsRemountable(candidates, entry) \u003d\u003e true\n  since the fstab mount *entry* is always MS_RDONLY\n  \n--\n\nwe also shouldn\u0027t be calling fs_mgr_overlayfs_already_mounted() with proc_mount_point\n  \n  auto proc_mount_point \u003d (mount_point \u003d\u003d \"/system\") ? \"/\" : mount_point;\n  \nbecause /system overlay is mounted after SwitchRoot, so it\u0027s mountpoint is still /system...\n\n1. mount /system (system device now mounted at /system)\n2. SwitchRoot(/system) (system device now mounted at /)\n3. mount system-overlay (system-overlay mounted at /system)",
      "revId": "e7a1fd9eeb72ff18546cacb1bb3a1dd78ccae322",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}