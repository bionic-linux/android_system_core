{
  "comments": [
    {
      "key": {
        "uuid": "300b1fab_676c1200",
        "filename": "base/include/android-base/properties.h",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2016-09-22T00:00:19Z",
      "side": 1,
      "message": "Given the recent __ANDROID__ vs __BIONIC__ cleanups, this error doesn\u0027t match the ifdef. It seems like we\u0027ll want at least a stub system properties implementation for host bionic?",
      "range": {
        "startLine": 21,
        "startChar": 12,
        "endLine": 21,
        "endChar": 18
      },
      "revId": "a8c3a9131d059c0800944815978e436304e2821a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "300b1fab_471b4e8a",
        "filename": "base/include/android-base/properties.h",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-09-22T00:11:26Z",
      "side": 1,
      "message": "duh, meant to say __BIONIC__. going to be a hard habit to get out of ...",
      "parentUuid": "300b1fab_676c1200",
      "range": {
        "startLine": 21,
        "startChar": 12,
        "endLine": 21,
        "endChar": 18
      },
      "revId": "a8c3a9131d059c0800944815978e436304e2821a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "300b1fab_1b2b6bef",
        "filename": "base/include/android-base/properties.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1013984
      },
      "writtenOn": "2016-09-22T16:54:07Z",
      "side": 1,
      "message": "I know these commands are kind of obvious, but I would document them.\n\nFor exmaple, looking at both, my first doubt was does SetProperty returns a boolean and GetProperty doesn\u0027t? It would be nice it does (so I know whether the property exist or not), but I guess that\u0027s not possible due to how it\u0027s implemented...",
      "revId": "a8c3a9131d059c0800944815978e436304e2821a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "300b1fab_5b0a0381",
        "filename": "base/include/android-base/properties.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-09-22T16:57:07Z",
      "side": 1,
      "message": "try the latest patchset :-)\n\nthe trouble with system properties is that nothing is obvious --- i actually didn\u0027t document these because i didn\u0027t want to get bogged down explaining all the weird nonsense. i\u0027m very tempted to just make SetProperty void too and admit that, honestly, there\u0027s no good way to know whether your attempt to set actually succeeded. (but it\u0027s not _completely_ useless because we will return false if your key or value are too long, for example: it\u0027s all the more subtle failures that will be reported as success.)",
      "parentUuid": "300b1fab_1b2b6bef",
      "revId": "a8c3a9131d059c0800944815978e436304e2821a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0272349_b43fc0e2",
        "filename": "base/include/android-base/properties.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2016-09-22T16:57:55Z",
      "side": 1,
      "message": "should this be bool too ? is there a distinction between the key being too long (is that a thing ?) and the property not being found ?",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 29,
        "endChar": 5
      },
      "revId": "a8c3a9131d059c0800944815978e436304e2821a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "300b1fab_bbc57f04",
        "filename": "base/include/android-base/properties.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-09-22T17:04:54Z",
      "side": 1,
      "message": "there hasn\u0027t historically been such a distinction, and i couldn\u0027t think of a case where we\u0027d need one.\n\nthe big question here does seem to be \"should we distinguish \u0027not found\u0027 from \u0027empty\u0027\", and my provisional answer there is similar (for the reason outlined on an earlier comment to jmgao: you can\u0027t delete system properties, so there isn\u0027t much of a useful distinction between \u0027not found\u0027 and \u0027empty\u0027 anyway). if anyone has examples where it would have been useful to distinguish, let me know.\n\n(we can also easily go from void -\u003e bool later; return types aren\u0027t part of the mangled name.)\n\npersonally i\u0027m actually more tempted to make SetProperty void... if you look at https://cs.corp.google.com/android/external/toybox/toys/android/setprop.c?type\u003dcs\u0026q\u003dfile:setprop.c\u0026sq\u003dpackage:%5Eandroid$\u0026l\u003d3 you\u0027ll see that a caller that cares really ends up duplicating most of the init logic anyway.\n\nnew reviewers: note that this is not the current patchset. please look at the current one (https://android-review.googlesource.com/#/c/277377/3/base/include/android-base/properties.h).",
      "parentUuid": "d0272349_b43fc0e2",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 29,
        "endChar": 5
      },
      "revId": "a8c3a9131d059c0800944815978e436304e2821a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0272349_9433a419",
        "filename": "base/include/android-base/properties.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2016-09-22T17:13:16Z",
      "side": 1,
      "message": "I only asked because IIRC, keys have a size limit too. I was under the impression that callers would want to abort on bad keys. Maybe nobody cares.",
      "parentUuid": "300b1fab_bbc57f04",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 29,
        "endChar": 5
      },
      "revId": "a8c3a9131d059c0800944815978e436304e2821a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9035ab64_85b7e4d1",
        "filename": "base/include/android-base/properties.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-09-22T17:52:10Z",
      "side": 1,
      "message": "but there are other limitations on keys too (valid characters, prefixes, ...) and those change.\n\ni didn\u0027t use the result of the C API in /system/bin/getprop (https://cs.corp.google.com/android/external/toybox/toys/android/getprop.c?q\u003dfile:getprop.c\u0026sq\u003dpackage:%5Eandroid$\u0026l\u003d2) because it doesn\u0027t tell you anything useful. if you look at __system_property_get, it can\u0027t fail. even if the key is missing it returns 0 / fills in the empty string.\n\nfrom what i can see of existing callers, they mainly use the return value because it\u0027s the length. but s.length()/s.empty() replace that.\n\nwe\u0027ve seen tons of complaints about system properties over the years, but afaik, no one\u0027s ever complained about \u0027get\u0027 never failing and not distinguishing between \u0027empty\u0027 and \u0027missing\u0027. (because, i think, you can\u0027t _remove_ a system property. so it just doesn\u0027t come up in practice.)",
      "parentUuid": "d0272349_9433a419",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 29,
        "endChar": 5
      },
      "revId": "a8c3a9131d059c0800944815978e436304e2821a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "300b1fab_47690eee",
        "filename": "base/properties.cpp",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2016-09-22T00:00:19Z",
      "side": 1,
      "message": "But we don\u0027t pass that on to the caller?\n\nProperties with an empty value can exist, right? If so, should this return a bool instead, denoting whether a property was found?",
      "revId": "a8c3a9131d059c0800944815978e436304e2821a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "300b1fab_a70c4a4e",
        "filename": "base/properties.cpp",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-09-22T00:11:26Z",
      "side": 1,
      "message": "as you can see, i was a bit confused on that point myself. yes, they can. but the existing APIs (other than doing what you see here) don\u0027t let you tell the difference. i\u0027m not sure whether that difference is useful: setting a default seems to be the actual usual intent.\n\ni think just replacing this comment with something like \"if unset, leave `value` so it can serve as a default\" is fine.",
      "parentUuid": "300b1fab_47690eee",
      "revId": "a8c3a9131d059c0800944815978e436304e2821a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "300b1fab_276dfac1",
        "filename": "base/properties.cpp",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2016-09-22T00:30:03Z",
      "side": 1,
      "message": "The following seems a bit surprising, though:\n\n    SetProperty(\"foo\", \"\");\n    std::string bar \u003d \"bar\";\n    GetProperty(\"foo\", \u0026bar);\n\nAlso, the comment should probably go in the header.",
      "parentUuid": "300b1fab_a70c4a4e",
      "revId": "a8c3a9131d059c0800944815978e436304e2821a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "300b1fab_c7a73ebf",
        "filename": "base/properties.cpp",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-09-22T01:38:25Z",
      "side": 1,
      "message": "what seems surprising? it\u0027s perhaps not how i\u0027d have designed system properties myself, but then i think i\u0027d have done just about *everything* differently. but this seems consistent with how they\u0027ve always worked to me.\n\nif we find a caller who\u0027d use the bool we can always change later. but i don\u0027t think anyone\u0027s ever needed it yet. (not least because you can\u0027t delete a property. so \u0027empty\u0027 is a fairly usual state.)",
      "parentUuid": "300b1fab_276dfac1",
      "revId": "a8c3a9131d059c0800944815978e436304e2821a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}