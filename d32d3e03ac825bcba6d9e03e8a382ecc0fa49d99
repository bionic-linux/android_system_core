{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a29a960c_505918d6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-03-02T01:37:48Z",
      "side": 1,
      "message": "Hmm I am not sure about this. Will memberwise initialization zero-out the unspecified fields?\n\nAlso, this will conflict with aosp/2004731. Could you wait until that is merged before submitting this? Thanks!",
      "revId": "d32d3e03ac825bcba6d9e03e8a382ecc0fa49d99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21095d4c_722a7bba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-03-02T01:38:02Z",
      "side": 1,
      "message": "unresolving for better visibility",
      "parentUuid": "a29a960c_505918d6",
      "revId": "d32d3e03ac825bcba6d9e03e8a382ecc0fa49d99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4eea686a_93477ed6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-03-02T01:47:53Z",
      "side": 1,
      "message": "https://en.cppreference.com/w/cpp/language/aggregate_initialization\n\nIt looks like designated initialization is available at C++20. I think we are at C++17 right now (unless I have outdated information)",
      "parentUuid": "21095d4c_722a7bba",
      "revId": "d32d3e03ac825bcba6d9e03e8a382ecc0fa49d99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf3012df_4e38f6cc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1869780
      },
      "writtenOn": "2022-03-02T17:13:53Z",
      "side": 1,
      "message": "Right, this patch relies on a C++20 feature. Is it safe to raise the required conformance level from C++17 to C++20 or should I rather drop this patch?",
      "parentUuid": "4eea686a_93477ed6",
      "revId": "d32d3e03ac825bcba6d9e03e8a382ecc0fa49d99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e27281c6_51c5ad2a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-03-02T19:23:33Z",
      "side": 1,
      "message": "I think you need to consult the build team / clang team to know this for sure.",
      "parentUuid": "bf3012df_4e38f6cc",
      "revId": "d32d3e03ac825bcba6d9e03e8a382ecc0fa49d99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b3e08f0_ed721eac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-03-02T19:24:36Z",
      "side": 1,
      "message": "Colin / Stephen, do we have C++20 support right now? Or does C++20 requires the experimental flag in Android.bp?\n\nIf it requires the experimental flag, I would rather drop this patch.",
      "parentUuid": "e27281c6_51c5ad2a",
      "revId": "d32d3e03ac825bcba6d9e03e8a382ecc0fa49d99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14f46d00_c9c4a49e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2022-03-02T19:30:01Z",
      "side": 1,
      "message": "You can use C++20 now (except for library features, since libc++ is still not fully updated for it). You may have to set `cpp_std` appropriately if this gives you presubmit failures. https://cs.android.com/search?q\u003dcpp_std:\u0026sq\u003d\u0026ss\u003dandroid%2Fplatform%2Fsuperproject has some examples of how to do this in an Android.bp.",
      "parentUuid": "6b3e08f0_ed721eac",
      "revId": "d32d3e03ac825bcba6d9e03e8a382ecc0fa49d99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "046be279_09f8112f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-03-02T19:42:49Z",
      "side": 1,
      "message": "You mean like `cpp_std: \"experimental\"` or `cpp_std: \"gnu++20\"`? Would `cpp_std: \"c++20\"` work?\n\nAnyways, looks like TH is happy with it, so feel free to submit this change without an Android.bp change.",
      "parentUuid": "14f46d00_c9c4a49e",
      "revId": "d32d3e03ac825bcba6d9e03e8a382ecc0fa49d99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35cbf332_8215c3be",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2022-03-02T19:43:13Z",
      "side": 1,
      "message": "Oh wait I submitted the other change. Bart can you re-base and fix the conflicts? Thanks.",
      "revId": "d32d3e03ac825bcba6d9e03e8a382ecc0fa49d99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "33ae79e1_f1a0ba0f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2022-03-02T19:57:09Z",
      "side": 1,
      "message": "Yeah, it depends on what you want, but I would avoid `\"experimental\"`, since that will eventually change, and is not preferred. If it works without specifying, that\u0027s the best option, but I would probably choose `c++20` or `gnu++20` depending on what you want to hold yourself to, if that doesn\u0027t work.",
      "parentUuid": "046be279_09f8112f",
      "revId": "d32d3e03ac825bcba6d9e03e8a382ecc0fa49d99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3fbfd6e2_a4b636d3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2022-03-02T21:01:01Z",
      "side": 1,
      "message": "(you may already know this but...) when we do bump the platform default to C++20, it\u0027ll be to *gnu++20* because almost everyone actually wants the various extensions. if you do prefer *c++20* please add a comment in the .bp file explaining _why_ you chose that, so whoever does the cleanup knows that it was deliberate (and then whoever does the C++23 bump will know whether or not you meant *max* 20, or *min* 20 --- yeah, none of our choices here are great, and ideally we\u0027d have gotten to the global C++20 bump sooner so you\u0027d never have been in this position; sadly C++20 changes some operator lookup rules, so it\u0027s a non-trivial bump :-( ).",
      "parentUuid": "33ae79e1_f1a0ba0f",
      "revId": "d32d3e03ac825bcba6d9e03e8a382ecc0fa49d99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}