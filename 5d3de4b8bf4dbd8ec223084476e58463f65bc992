{
  "comments": [
    {
      "key": {
        "uuid": "9e7810c1_28ba9883",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-03-04T22:44:30Z",
      "side": 1,
      "message": "I really feel we need a test which exercises this, perhaps to guard against races.\n\nAre there any corner cases we need to consider?",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 16,
        "endChar": 27
      },
      "revId": "5d3de4b8bf4dbd8ec223084476e58463f65bc992",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b81d380_1339e09c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-03-04T23:56:34Z",
      "side": 1,
      "message": "What service do you think we should control to test this?  I tested with bootanim.  Perhaps we won\u0027t destabilize the device too much if we start that a few times after boot?\n\nThere\u0027s a corner case if we try to enable oneshot and the service is currently starting (as in SVC_RESTART or SVC_RESTARTING, waiting for the next set of process actions to restart it).  It\u0027ll currently continue to restart; I think that\u0027s WAI though, since we don\u0027t know why the process was restarting.  It will be oneshot (aka not restart) if it again exits.\n\nWe have locks around reaping a process and disabling oneshot, so there\u0027s no race within init if a oneshot process is exiting and someone attempts to turn oneshot off.  However, there is a fundamental race here, since if a service is just about to exit and another process wants to disable oneshot for it; that other process has no way of guarantee\u0027ing that the ctl.oneshot_off message will be handled init before the service is reaped.  There\u0027s not much that we can do there within init.  The process can always ctl.start the service again to ensure that it is running after disabling oneshot.\n\nI think those are the only two corner cases; if the process is either running or stopped, then oneshot will be handled correctly the next time it\u0027s needed.",
      "parentUuid": "9e7810c1_28ba9883",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 16,
        "endChar": 27
      },
      "revId": "5d3de4b8bf4dbd8ec223084476e58463f65bc992",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4a94af3_deb8fae1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-03-05T00:04:58Z",
      "side": 1,
      "message": "Note also aidl_test_service, which you could use on cuttlefish.\n\n\u003e There\u0027s a corner case if we try to enable oneshot and the service is currently starting\n\nHmm, I will have to think about this more in b/140310064. It could be tricky if a service crashes (and restarts) when we are asking to shut it down, but not too tricky",
      "parentUuid": "8b81d380_1339e09c",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 16,
        "endChar": 27
      },
      "revId": "5d3de4b8bf4dbd8ec223084476e58463f65bc992",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ed36924_9143146f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-03-05T00:07:51Z",
      "side": 1,
      "message": "\u003e Note also aidl_test_service, which you could use on cuttlefish.\n\nDoes it have a .rc file that goes along with it?  I didn\u0027t see it.  Unfortunately, we\u0027ll need to use a real service that init loads through its rc files.\n\n\u003e Hmm, I will have to think about this more in b/140310064. It could be tricky if a service crashes (and restarts) when we are asking to shut it down, but not too tricky\n\nDoes your use case require turning services into oneshot and not often?  I figure that once a service is determined to be a lazy HAL that it will always be a lazy HAL, and vice versa.  Is that not the case?",
      "parentUuid": "b4a94af3_deb8fae1",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 16,
        "endChar": 27
      },
      "revId": "5d3de4b8bf4dbd8ec223084476e58463f65bc992",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "799b72fa_9dc7bda9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-03-05T00:14:32Z",
      "side": 1,
      "message": "Yes, it requires changing it often: b/147841742#comment6.",
      "parentUuid": "4ed36924_9143146f",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 16,
        "endChar": 27
      },
      "revId": "5d3de4b8bf4dbd8ec223084476e58463f65bc992",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6187be17_472dc9c3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-03-05T00:33:41Z",
      "side": 1,
      "message": "Where is the .rc file?  I don\u0027t see it referenced here: https://cs.android.com/android/platform/superproject/+/master:system/tools/aidl/Android.bp;l\u003d229?q\u003daidl_test_service or in that source directory.",
      "parentUuid": "799b72fa_9dc7bda9",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 16,
        "endChar": 27
      },
      "revId": "5d3de4b8bf4dbd8ec223084476e58463f65bc992",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e00cc0f_54163ef8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-03-05T00:47:27Z",
      "side": 1,
      "message": "Sorry, got this confused with aidl_lazy_test.",
      "parentUuid": "6187be17_472dc9c3",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 16,
        "endChar": 27
      },
      "revId": "5d3de4b8bf4dbd8ec223084476e58463f65bc992",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ed234e0_c750018a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1525136
      },
      "writtenOn": "2020-03-05T00:49:58Z",
      "side": 1,
      "message": "Ah, I was just about to ask about that. That one has a .rc file at https://cs.corp.google.com/android/system/tools/aidl/tests/lazy_test/aidl_lazy_test_server.rc.",
      "parentUuid": "1e00cc0f_54163ef8",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 16,
        "endChar": 27
      },
      "revId": "5d3de4b8bf4dbd8ec223084476e58463f65bc992",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "016cbeab_9bc6fb60",
        "filename": "init/init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 377,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-03-04T19:12:15Z",
      "side": 1,
      "message": "Do we actually need oneshot_off?  I added it for completeness, but maybe let\u0027s skip it if we don\u0027t need it.",
      "revId": "5d3de4b8bf4dbd8ec223084476e58463f65bc992",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee9b062a_0570d302",
        "filename": "init/init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 377,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-03-04T22:44:30Z",
      "side": 1,
      "message": "yes",
      "parentUuid": "016cbeab_9bc6fb60",
      "revId": "5d3de4b8bf4dbd8ec223084476e58463f65bc992",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e06e9ee_228f5f3b",
        "filename": "init/init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 382,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-03-04T19:12:15Z",
      "side": 1,
      "message": "Do we actually need interface_oneshot_on ?  hwservicemanager works through interfaces, not services, right?  \n\nIs it possible that a service will host multiple interfaces and only a subset of those interfaces are started lazily?",
      "range": {
        "startLine": 382,
        "startChar": 31,
        "endLine": 382,
        "endChar": 55
      },
      "revId": "5d3de4b8bf4dbd8ec223084476e58463f65bc992",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72956fb5_edfc4ead",
        "filename": "init/init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 382,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-03-04T22:44:30Z",
      "side": 1,
      "message": "oof - yes, we need this as well.\n\nActually, it seems that we should separate the implementation to talk about set/action\n\nsets: individual service name, service class, interface, (and some psuedo classes like \u0027critical\u0027)\naction: start, stop, restart, oneshot on, oneshot off\n\nIdeally, we avoid implementing the product of these.",
      "parentUuid": "2e06e9ee_228f5f3b",
      "range": {
        "startLine": 382,
        "startChar": 31,
        "endLine": 382,
        "endChar": 55
      },
      "revId": "5d3de4b8bf4dbd8ec223084476e58463f65bc992",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90f414d7_ffcb03a4",
        "filename": "init/init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 382,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-03-04T23:56:34Z",
      "side": 1,
      "message": "I really hope that we won\u0027t need more of these in general, though I can understand why we\u0027d want to plan for it.  \n\nMore concretely, what do you think we should do here?  Should we come up with a strategy now to generalize these property names now?  Something like:\n\n\u003cset\u003e_\u003caction\u003e\n\u003cset\u003e_\u003coption\u003e_\u003cvalue\u003e \n\n?\n\nAt least if we generalize it now, then we won\u0027t need to actually implement the product of those; it\u0027ll be handled for us.",
      "parentUuid": "72956fb5_edfc4ead",
      "range": {
        "startLine": 382,
        "startChar": 31,
        "endLine": 382,
        "endChar": 55
      },
      "revId": "5d3de4b8bf4dbd8ec223084476e58463f65bc992",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58ce1a87_8a0fb7b5",
        "filename": "init/init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 382,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-03-05T00:13:15Z",
      "side": 1,
      "message": "This is the extend of my thought,and it is general in the sense that it enocdes only the current operations (which always act on a specific set of services)\n\nkPrefixes \u003d map {\n    \"interface_\" -\u003e ControlTarget::INTERFACE,\n    ...\n}\nkActions \u003d map {\n    \"stop\" -\u003e DoControlStop,\n    ...\n}\n\nassert none of kActions has prefix in kPrefixes\n\nfor each prefix, if matches property, trim property, and use that control target\n\nelse if no prefix matches, use SERVICE control target\n\nFor remainder of property, try to match action.",
      "parentUuid": "90f414d7_ffcb03a4",
      "range": {
        "startLine": 382,
        "startChar": 31,
        "endLine": 382,
        "endChar": 55
      },
      "revId": "5d3de4b8bf4dbd8ec223084476e58463f65bc992",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b5ef9bf_a7ef251e",
        "filename": "init/init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 382,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-03-05T00:33:41Z",
      "side": 1,
      "message": "Ack, that\u0027s what I was thinking too.  Let me do that.",
      "parentUuid": "58ce1a87_8a0fb7b5",
      "range": {
        "startLine": 382,
        "startChar": 31,
        "endLine": 382,
        "endChar": 55
      },
      "revId": "5d3de4b8bf4dbd8ec223084476e58463f65bc992",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}