{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ae0cd7bc_abadf3e2",
        "filename": "libcutils/fs_config.cpp",
        "patchSetId": 1
      },
      "lineNbr": 385,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-14T00:05:17Z",
      "side": 1,
      "message": "not only don\u0027t i understand this change, i don\u0027t understand how this code _used_ to work :-)\n\nokay, so it _used_ to work because there\u0027s a sentinel at the end of the array, so we always match this:\n```\n    { 00644, AID_ROOT,      AID_ROOT,      0, 0 },\n```\nbut then why is it correct to only set mode in the fallthrough case? are the other callers of this function all fine with that? why?",
      "revId": "e8d68569da0c6dca1fcd104c37e3ba038929a5fc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9601e7f_b9c3efc4",
        "filename": "libcutils/fs_config.cpp",
        "patchSetId": 1
      },
      "lineNbr": 385,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2024-03-14T01:21:15Z",
      "side": 1,
      "message": "Yes, it is indeed confusing. You can find the callers in code search: https://cs.android.com/android/platform/superproject/main/+/main:system/core/libcutils/fs_config.cpp?q\u003dsymbol%3A%5Cbfs_config%5Cb%20case%3Ayes\n\nThis function appears to have two kinds of callers. The first is adbd and mkbootfs where the mode potentially comes from the actual file on the host and uid/gid/capabilities are initialized to reasonable defaults (adb has uid\u003dgid\u003d-1 so root now does fchown(fd, -1, -1) for files not in fs_config, which is equivalent to fchown(fd, 0, 0) for a file that root just created), and the second is fs_config (i.e. the command line tool of the same name) and erofs-utils which query fs_config for building the filesystem image without leaking information from the host, so they set these variables to 0. (Hmm, I just noticed that fs_config-the-command-line-tool leaves capabilities uninitialized, so we should be initializing to 0 to preserve behavior.) Ideally we wouldn\u0027t touch any of these variables if we didn\u0027t find an fs_config so the caller gets whatever default it wants, but we need to preserve the behavior for the second kind of caller (otherwise some files will end up being chmod 000 in the image and the system will fail to boot), hence the code here.\n\n(I\u0027m ignoring fs_get_stats which takes a mode as a command line argument, sets `*uid\u003d*gid\u003d-1` and leaves capabilities uninitialized but doesn\u0027t read from it, but I couldn\u0027t find any users of fs_get_stats so maybe we can delete it?) \n\nI guess another option would be to figure out which files in the image are relying on the sentinel so we can add a proper fs_config entry for them. Then we should be able to remove these three lines and use `{}` as the sentinel.",
      "parentUuid": "ae0cd7bc_abadf3e2",
      "revId": "e8d68569da0c6dca1fcd104c37e3ba038929a5fc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8d7a8c4_4204477e",
        "filename": "libcutils/fs_config.cpp",
        "patchSetId": 1
      },
      "lineNbr": 385,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-14T15:41:30Z",
      "side": 1,
      "message": "\u003e so we should be initializing to 0 to preserve behavior\n\nyeah, that\u0027s what i meant, especially because there are potentially other callers in vendor code we can\u0027t see --- i think if we touch this, we need to preserve the \"copy the sentinel values\" semantics, no matter how questionable the sentinel values might be.\n\n\u003e I couldn\u0027t find any users of fs_get_stats so maybe we can delete it?\n\noh, well spotted --- that\u0027s been dead since i removed the also-dead tarball cruft that was the sole caller, back in 2019:\n```\ncommit 440c99f1f252e3fa7a37472ef24ce8a75cd54390\nAuthor: Elliott Hughes \u003cenh@google.com\u003e\nDate:   Thu Jul 11 18:35:20 2019 -0700\n\n    Stop building unnecessary tarballs.\n    \n    Test: treehugger\n    Change-Id: Iaba2aa6d09ad891f37171cc76778d08c78c78f93\n```\n\nhttps://android-review.git.corp.google.com/c/platform/build/+/3004133 removes this too.",
      "parentUuid": "e9601e7f_b9c3efc4",
      "revId": "e8d68569da0c6dca1fcd104c37e3ba038929a5fc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a3d9302d_e05ae7a5",
        "filename": "libcutils/fs_config.cpp",
        "patchSetId": 1
      },
      "lineNbr": 385,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2024-03-14T19:55:07Z",
      "side": 1,
      "message": "Okay, I introduced a new function fs_config_nodefault with the semantics adbd wants and used it from there.",
      "parentUuid": "c8d7a8c4_4204477e",
      "revId": "e8d68569da0c6dca1fcd104c37e3ba038929a5fc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e0f174f_018ad23f",
        "filename": "libcutils/fs_config.cpp",
        "patchSetId": 1
      },
      "lineNbr": 385,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-14T19:59:19Z",
      "side": 1,
      "message": "isn\u0027t it easier to just change the return type instead, and signal whether we\u0027re returning the default or not?\n\n(otherwise there are a lot of other \"this api is terrible, shouldn\u0027t we fix some of the defects?\" questions!)",
      "parentUuid": "a3d9302d_e05ae7a5",
      "revId": "e8d68569da0c6dca1fcd104c37e3ba038929a5fc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "476c0340_bf074083",
        "filename": "libcutils/fs_config.cpp",
        "patchSetId": 1
      },
      "lineNbr": 385,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2024-03-14T20:41:21Z",
      "side": 1,
      "message": "If I try changing the return type I get build failures from external projects, e.g.:\n```\nexternal/f2fs-tools/fsck/sload.c:339:18: error: incompatible function pointer types assigning to \u0027fs_config_f\u0027 (aka \u0027void (*)(const char *, int, const char *, unsigned int *, unsigned int *, unsigned int *, unsigned long *)\u0027) from \u0027bool (const char *, int, const char *, unsigned int *, unsigned int *, unsigned int *, uint64_t *)\u0027 (aka \u0027bool (const char *, int, const char *, unsigned int *, unsigned int *, unsigned int *, unsigned long *)\u0027) [-Wincompatible-function-pointer-types]\n  339 |                 fs_config_func \u003d fs_config;\n      |                                ^ ~~~~~~~~~\n1 error generated.\nexternal/e2fsprogs/contrib/android/perms.c:371:18: error: incompatible function pointer types assigning to \u0027fs_config_f\u0027 (aka \u0027void (*)(const char *, int, const char *, unsigned int *, unsigned int *, unsigned int *, unsigned long *)\u0027) from \u0027bool (const char *, int, const char *, unsigned int *, unsigned int *, unsigned int *, uint64_t *)\u0027 (aka \u0027bool (const char *, int, const char *, unsigned int *, unsigned int *, unsigned int *, unsigned long *)\u0027) [-Wincompatible-function-pointer-types]\n  371 |                 fs_config_func \u003d fs_config;\n      |                                ^ ~~~~~~~~~\n```\nSo it seems like changing the return type will result in more churn overall.",
      "parentUuid": "8e0f174f_018ad23f",
      "revId": "e8d68569da0c6dca1fcd104c37e3ba038929a5fc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae4c9981_2a168a29",
        "filename": "libcutils/fs_config.cpp",
        "patchSetId": 1
      },
      "lineNbr": 385,
      "author": {
        "id": 1067098
      },
      "writtenOn": "2024-03-20T18:22:32Z",
      "side": 1,
      "message": "Ping... I wouldn\u0027t expect it to make much difference whether we have one or two interfaces to this API if we ever get around to replacing it.",
      "parentUuid": "476c0340_bf074083",
      "revId": "e8d68569da0c6dca1fcd104c37e3ba038929a5fc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}