{
  "comments": [
    {
      "key": {
        "uuid": "39c68ba1_68fe8a80",
        "filename": "libcutils/tests/AshmemTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 342,
      "author": {
        "id": 1115183
      },
      "writtenOn": "2018-01-31T01:38:51Z",
      "side": 1,
      "message": "I think this continues when (fd \u003c 0 \u0026\u0026 errorNumber !\u003d EPROTOTYPE) whereas the old version would break, is that a problem?",
      "range": {
        "startLine": 342,
        "startChar": 16,
        "endLine": 342,
        "endChar": 24
      },
      "revId": "497a58374cec4850a38e8a0ef5c588a6af0f91a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "224b731c_1f70e82e",
        "filename": "libcutils/tests/AshmemTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 342,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-01-31T15:41:23Z",
      "side": 1,
      "message": "Good call, but we are playing with the subtleties. socket() does not establish protocol, it creates a PF_UNIX file descriptor. connect() does, and that is where EPROTOTYPE would return because if we \u0027selected\u0027 the wrong way to connect w.r.t. the server-side of the socket.",
      "parentUuid": "39c68ba1_68fe8a80",
      "range": {
        "startLine": 342,
        "startChar": 16,
        "endLine": 342,
        "endChar": 24
      },
      "revId": "497a58374cec4850a38e8a0ef5c588a6af0f91a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db89c2f1_abef9444",
        "filename": "libcutils/tests/AshmemTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 342,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-01-31T20:52:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "224b731c_1f70e82e",
      "range": {
        "startLine": 342,
        "startChar": 16,
        "endLine": 342,
        "endChar": 24
      },
      "revId": "497a58374cec4850a38e8a0ef5c588a6af0f91a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "425c6fa8_ba50f50b",
        "filename": "libcutils/tests/AshmemTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 471,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-01-31T15:41:23Z",
      "side": 1,
      "message": "I am still wary of this code and maybe should rationalize with a comment so others can understand where I came from.\n\nI really wanted to randomly scatter across the platform picking nodes and going to town. Hoping to hit named pipes and sockets if they existed (I expect HALs to use \u0027em, but our platform does not name \u0027em). I figured this was the best way of capturing all _used_ files, nodes, and named pipes, and scales a lot better than scanning the _entire_ directory tree. It does not hit any connected sockets though.\n\nThen we focus on /dev/ below.",
      "range": {
        "startLine": 422,
        "startChar": 0,
        "endLine": 471,
        "endChar": 5
      },
      "revId": "497a58374cec4850a38e8a0ef5c588a6af0f91a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1f87fbe_f8f8a5a1",
        "filename": "libcutils/tests/AshmemTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 471,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-01-31T20:52:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "425c6fa8_ba50f50b",
      "range": {
        "startLine": 422,
        "startChar": 0,
        "endLine": 471,
        "endChar": 5
      },
      "revId": "497a58374cec4850a38e8a0ef5c588a6af0f91a5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}