{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "175f8ed3_4e6909a1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2024-05-30T20:51:48Z",
      "side": 1,
      "message": "(forgot to add reviewers)",
      "revId": "753ffa9fc788aff7bc6605fd93208cee0a8a9007",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f813471d_07d16dd6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2024-05-31T14:45:07Z",
      "side": 1,
      "message": "lgtm, will defer to Hans for the +2.  minor nits only, feel free to ignore.",
      "revId": "753ffa9fc788aff7bc6605fd93208cee0a8a9007",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a545a946_8ad9099c",
        "filename": "libutils/binder/RefBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 769,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2024-05-31T14:45:07Z",
      "side": 1,
      "message": "nit: why are we using an atomic for mFlags? seems unnecessary as it appears set/modified only in the ctor.",
      "range": {
        "startLine": 769,
        "startChar": 44,
        "endLine": 769,
        "endChar": 64
      },
      "fixSuggestions": [
        {
          "fixId": "06646853_c04ab2bf",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "libutils/binder/RefBase.cpp",
              "range": {
                "startLine": 190,
                "startChar": 0,
                "endLine": 191,
                "endChar": 0
              },
              "replacement": "    int32_t                mFlags;\n"
            },
            {
              "path": "libutils/binder/RefBase.cpp",
              "range": {
                "startLine": 500,
                "startChar": 0,
                "endLine": 501,
                "endChar": 0
              },
              "replacement": "        int32_t flags \u003d refs-\u003emFlags;\n"
            },
            {
              "path": "libutils/binder/RefBase.cpp",
              "range": {
                "startLine": 584,
                "startChar": 0,
                "endLine": 585,
                "endChar": 0
              },
              "replacement": "    int32_t flags \u003d impl-\u003emFlags;\n"
            },
            {
              "path": "libutils/binder/RefBase.cpp",
              "range": {
                "startLine": 638,
                "startChar": 0,
                "endLine": 639,
                "endChar": 0
              },
              "replacement": "        int32_t flags \u003d impl-\u003emFlags;\n"
            },
            {
              "path": "libutils/binder/RefBase.cpp",
              "range": {
                "startLine": 769,
                "startChar": 0,
                "endLine": 770,
                "endChar": 0
              },
              "replacement": "    int32_t flags \u003d mRefs-\u003emFlags;\n"
            },
            {
              "path": "libutils/binder/RefBase.cpp",
              "range": {
                "startLine": 817,
                "startChar": 0,
                "endLine": 818,
                "endChar": 0
              },
              "replacement": "    mRefs-\u003emFlags |\u003d mode;\n"
            }
          ]
        }
      ],
      "revId": "753ffa9fc788aff7bc6605fd93208cee0a8a9007",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a72590f_aa4b8394",
        "filename": "libutils/binder/RefBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 769,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2024-05-31T15:37:14Z",
      "side": 1,
      "message": "probably decay or old mistake in 20yo code. We could change it, as you\u0027re right it\u0027s a bit silly, though iirc - atomic + relaxed should be virtually no difference here? does it matter except code clarity?",
      "parentUuid": "a545a946_8ad9099c",
      "range": {
        "startLine": 769,
        "startChar": 44,
        "endLine": 769,
        "endChar": 64
      },
      "revId": "753ffa9fc788aff7bc6605fd93208cee0a8a9007",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f24d7872_65fda640",
        "filename": "libutils/binder/RefBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 769,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2024-05-31T17:29:36Z",
      "side": 1,
      "message": "What about extendObjectLifetime? I don\u0027t think the interface currently prevents it from being called concurrently. Thankfully, I think it actually isn\u0027t. But that restriction would need to be documented.\n\nFor the loads, it probably generates about the same code either way. Atomic implies some minor optimization restrictions. The load cannot be reordered with another load that could possibly alias it. However it does make some difference for the code generated for extendObjectLifeTime. The atomic read-modify-write is usually appreciably slower than load-or-store.",
      "parentUuid": "5a72590f_aa4b8394",
      "range": {
        "startLine": 769,
        "startChar": 44,
        "endLine": 769,
        "endChar": 64
      },
      "revId": "753ffa9fc788aff7bc6605fd93208cee0a8a9007",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "afbfab96_e14a43d6",
        "filename": "libutils/binder/RefBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 769,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2024-05-31T17:50:27Z",
      "side": 1,
      "message": "Good point, so no change. extendObjectLifeTime is protected (not private) today, so we have to assume it may be used.",
      "parentUuid": "f24d7872_65fda640",
      "range": {
        "startLine": 769,
        "startChar": 44,
        "endLine": 769,
        "endChar": 64
      },
      "revId": "753ffa9fc788aff7bc6605fd93208cee0a8a9007",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29a5a5af_de0f2d61",
        "filename": "libutils/binder/RefBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 770,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2024-05-31T14:45:07Z",
      "side": 1,
      "message": "nit: stale comment after change.",
      "range": {
        "startLine": 770,
        "startChar": 0,
        "endLine": 770,
        "endChar": 55
      },
      "fixSuggestions": [
        {
          "fixId": "4989ca89_6c95fe60",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "libutils/binder/RefBase.cpp",
              "range": {
                "startLine": 770,
                "startChar": 0,
                "endLine": 773,
                "endChar": 0
              },
              "replacement": "    // If the object has a strong reference, we can\u0027t free it now.\n"
            }
          ]
        }
      ],
      "revId": "753ffa9fc788aff7bc6605fd93208cee0a8a9007",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2659a8fb_4c81b075",
        "filename": "libutils/binder/RefBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 770,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2024-05-31T15:37:14Z",
      "side": 1,
      "message": "Fix applied.",
      "parentUuid": "29a5a5af_de0f2d61",
      "range": {
        "startLine": 770,
        "startChar": 0,
        "endLine": 770,
        "endChar": 55
      },
      "revId": "753ffa9fc788aff7bc6605fd93208cee0a8a9007",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01f1b852_a329dc2a",
        "filename": "libutils/binder/RefBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 803,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2024-05-31T14:45:07Z",
      "side": 1,
      "message": "nit: please add a comment why memory_order_relaxed is okay here, as it does not provide a memory barrier.  See references:\n\nhttps://en.cppreference.com/w/cpp/atomic/memory_order#Relaxed_ordering\nhttps://www.boost.org/doc/libs/1_57_0/doc/html/atomic/usage_examples.html#boost_atomic.usage_examples.example_reference_counters",
      "range": {
        "startLine": 803,
        "startChar": 31,
        "endLine": 803,
        "endChar": 51
      },
      "fixSuggestions": [
        {
          "fixId": "a05a2643_c35ad454",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "libutils/binder/RefBase.cpp",
              "range": {
                "startLine": 803,
                "startChar": 0,
                "endLine": 803,
                "endChar": 0
              },
              "replacement": "    //\n    // We use memory_order_relaxed here because we don\u0027t care about the\n    // ordering of the load and the delete.\n"
            }
          ]
        }
      ],
      "revId": "753ffa9fc788aff7bc6605fd93208cee0a8a9007",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e55976e_b84cbd81",
        "filename": "libutils/binder/RefBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 803,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2024-05-31T15:37:14Z",
      "side": 1,
      "message": "It\u0027s funny the AI-suggested fix explains what memory_order_relaxed is, instead of why it\u0027s okay.\n\nIf it uses a stronger memory order, it may catch some cases where stack allocated (or equivalently, allocated but not-inc\u0027d) RefBase are double-owned, sent to another thread, and used while being deleted here. Hans, wdyt?\n\nHonestly, part of me thinks the leak is better than risking an extra \u0027delete\u0027 to help a case which is already managing objects in an unsupported way, since this change could make certain types of UB worse. Though - I am not a coward.",
      "parentUuid": "01f1b852_a329dc2a",
      "range": {
        "startLine": 803,
        "startChar": 31,
        "endLine": 803,
        "endChar": 51
      },
      "revId": "753ffa9fc788aff7bc6605fd93208cee0a8a9007",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d41c3a57_4f75cfff",
        "filename": "libutils/binder/RefBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 803,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2024-05-31T17:29:36Z",
      "side": 1,
      "message": "I agree that this should probably be an acquire load. In the weak lifetime case, if we reacquire a weak reference in the destructor, some other thread could presumably have gotten a hold of it and incremented the count, and we need to make sure it has again released the count before the deletion here? And there is no real cost to making it acquire since it\u0027s basically never executed; it\u0027s probably worth it just to avoid the comment.\n\nIt\u0027s also unclear to me this can ever work in all corner cases. It looks to me like attemptIncStrong can be used to promote a weak reference if the strong reference has never been used? So if I create a weak reference in the destructor, and another thread promotes that to a strong one, I doubt anything good happens? \n\nIt increasingly feels to me that if you violate our usage advice, and then try to exercise all the odd corner cases, you will probably lose sooner or later.",
      "parentUuid": "5e55976e_b84cbd81",
      "range": {
        "startLine": 803,
        "startChar": 31,
        "endLine": 803,
        "endChar": 51
      },
      "revId": "753ffa9fc788aff7bc6605fd93208cee0a8a9007",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b94aec7_836dfea7",
        "filename": "libutils/binder/RefBase.cpp",
        "patchSetId": 1
      },
      "lineNbr": 803,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2024-05-31T17:50:27Z",
      "side": 1,
      "message": "Whether it\u0027s acquire or relaxed, it doesn\u0027t change whether attemptIncStrong is UB in the case another thread double-owns weakref_type, but let me hold off for this CL for now, you give me two new ideas.",
      "parentUuid": "d41c3a57_4f75cfff",
      "range": {
        "startLine": 803,
        "startChar": 31,
        "endLine": 803,
        "endChar": 51
      },
      "revId": "753ffa9fc788aff7bc6605fd93208cee0a8a9007",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42ba59f1_ba8a9f82",
        "filename": "libutils/binder/RefBase_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 284,
      "author": {
        "id": 1040213
      },
      "writtenOn": "2024-05-31T14:45:07Z",
      "side": 1,
      "message": "nit: would initialize to false make the code more clear?",
      "range": {
        "startLine": 284,
        "startChar": 17,
        "endLine": 284,
        "endChar": 19
      },
      "revId": "753ffa9fc788aff7bc6605fd93208cee0a8a9007",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e85e8eb8_584ff856",
        "filename": "libutils/binder/RefBase_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 284,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2024-05-31T15:37:14Z",
      "side": 1,
      "message": "Yes, though the pattern in this test relies on constructor to set false, so I\u0027m okay with it.",
      "parentUuid": "42ba59f1_ba8a9f82",
      "range": {
        "startLine": 284,
        "startChar": 17,
        "endLine": 284,
        "endChar": 19
      },
      "revId": "753ffa9fc788aff7bc6605fd93208cee0a8a9007",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}