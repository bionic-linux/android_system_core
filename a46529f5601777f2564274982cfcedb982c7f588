{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c5724090_09ebe329",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2023-03-10T15:28:03Z",
      "side": 1,
      "message": "LGTM from my perspective. Thanks, Shikha.\n\nBut this has to be approved by one of the owners.",
      "revId": "a46529f5601777f2564274982cfcedb982c7f588",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32646261_bb210ecb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-03-10T19:25:34Z",
      "side": 1,
      "message": "why can\u0027t you just have something that listens on the usual socket? (that is: why do we need to change this code at all?)",
      "revId": "a46529f5601777f2564274982cfcedb982c7f588",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8c827b47_bf96d350",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1897307
      },
      "writtenOn": "2023-03-13T10:51:33Z",
      "side": 1,
      "message": "By usual socket, do you mean the socket tombstoned is listening on \u0026 crash_dump connects to?\n\nWe already have tombstoned.microdroid inside VM that listens on the usual socket. It responds to crash_dump with a fd backed by a file in guest filesystem \u0026 crash_dump writes on it. This file was later transmitted outside the VM.\n\nThe idea behind this change was to remove the tombstoned from VM, \u0026 have crash_dump write directly to virtual socket instead of writing on a guest file. The listener outside VM will then dump the data on a tombstone file in Android. This saves some precious RAM in VM (as we do not need the tombstoned/the transmitter daemon/the files which were backed by tmpfs in the VM)",
      "parentUuid": "32646261_bb210ecb",
      "revId": "a46529f5601777f2564274982cfcedb982c7f588",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "739ea00b_26597366",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-03-14T02:08:10Z",
      "side": 1,
      "message": "\u003e This saves some precious RAM in VM (as we do not need the tombstoned/the transmitter daemon/the files which were backed by tmpfs in the VM)\n\nhow much? enough to persuade me that it\u0027s worth the extra complexity on our side? (because the current implementation sounds like the better design from our perspective.)",
      "parentUuid": "8c827b47_bf96d350",
      "revId": "a46529f5601777f2564274982cfcedb982c7f588",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38bb944d_cfd072a2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1897307
      },
      "writtenOn": "2023-03-14T14:44:02Z",
      "side": 1,
      "message": "Atleast 900kB of Microdroid userspace memory. There are other goals of this as well listed in go/vm-tombstone under \u0027Goals of re-architecture\u0027 section (such as removing cascading failure).\n\nBy the way, I don\u0027t follow how this increases the complexity on Android. Infact, nothing changes on Android, the tombstone handling changes only inside Microdroid, which infact is a simplification given we are removing the extra write of tombstones.\n https://docs.google.com/document/d/1_cj1wEsWrvdhYxzvRajTDq3TeDYV9frcwlh9YvYyX5U/edit#bookmark\u003did.r7fyqx9msl5o has the diagram/design.",
      "parentUuid": "739ea00b_26597366",
      "revId": "a46529f5601777f2564274982cfcedb982c7f588",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "017c0b7b_b3d98d7d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-03-15T00:10:31Z",
      "side": 1,
      "message": "why so much? 1MiB sounds unreasonable for `accept()`?",
      "parentUuid": "38bb944d_cfd072a2",
      "revId": "a46529f5601777f2564274982cfcedb982c7f588",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5bcb9160_e2fc032a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2023-03-15T08:27:23Z",
      "side": 1,
      "message": "Yeah, I think this actually is a simplification from the architectural perspective. We don\u0027t need to run tombstoned both in host and guest VMs.\n\nThe only complexity this CL brought might be the addition of vsock as a new transport mechanism. Furthermore, the change is well isolated from the rest of the code, IMO.",
      "parentUuid": "017c0b7b_b3d98d7d",
      "revId": "a46529f5601777f2564274982cfcedb982c7f588",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3cdc598_0827adda",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1897307
      },
      "writtenOn": "2023-03-15T09:40:17Z",
      "side": 1,
      "message": "`why so much? 1MiB sounds unreasonable for accept()?` -\u003e 1MiB comes from tombstoned \u0026 tombstoned_transmit (each contributing to half of it). tombstoned as a process is way more complex. It does accept requests, manages crash queues from different processes, manages intercepts, concurrent dumps, load balancing (max concurrent dumps) etc, appropriate naming of files - we let most of this be handled by tombstoned in host \u0026 hence dont need the daemon in Microdroid.",
      "parentUuid": "5bcb9160_e2fc032a",
      "revId": "a46529f5601777f2564274982cfcedb982c7f588",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50524922_ad732f29",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-03-16T18:31:04Z",
      "side": 1,
      "message": "\u003e The only complexity this CL brought might be the addition of vsock as a new transport mechanism. Furthermore, the change is well isolated from the rest of the code, IMO.\n\nwell, it\u0027s 140 lines of new codes that isn\u0027t used in the regular system and has no tests.\n\nis there a way to at least write some tests to cover the new code?",
      "parentUuid": "d3cdc598_0827adda",
      "revId": "a46529f5601777f2564274982cfcedb982c7f588",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac5e29bf_0744e463",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2023-03-17T01:52:01Z",
      "side": 1,
      "message": "Yes, we have several tests for this. https://cs.android.com/search?q\u003dpackages%2Fmodules%2FVirtualization%2Ftests%2Fhostside%2Fjava%2Fcom%2Fandroid%2Fmicrodroid%2Ftest%2FMicrodroidHostTests.java%20tombstone\u0026sq\u003d\u0026ss\u003dandroid%2Fplatform%2Fsuperproject",
      "parentUuid": "50524922_ad732f29",
      "revId": "a46529f5601777f2564274982cfcedb982c7f588",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f6a12c7_d14027f4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-03-17T18:43:16Z",
      "side": 1,
      "message": "are they in global presubmit? if not (and probably even if so), shouldn\u0027t they go into TEST_MAPPING?",
      "parentUuid": "ac5e29bf_0744e463",
      "revId": "a46529f5601777f2564274982cfcedb982c7f588",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb4d169d_e0efe6a2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2023-03-18T01:13:39Z",
      "side": 1,
      "message": "They are in TEST_MAPPING at packages/modules/Virtualization, but not here. I think we need to add the test here as well. Over to Shikha.",
      "parentUuid": "7f6a12c7_d14027f4",
      "revId": "a46529f5601777f2564274982cfcedb982c7f588",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}