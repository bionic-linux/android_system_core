{
  "comments": [
    {
      "key": {
        "uuid": "ab04074e_801280c7",
        "filename": "libcutils/sockets.cpp",
        "patchSetId": 7
      },
      "lineNbr": 96,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-11-05T20:59:18Z",
      "side": 1,
      "message": "i don\u0027t think these mean what you think they mean --- they\u0027re not as useful as they sound (and probably shouldn\u0027t be used here). in general, these are what i like to call \"minimum maximums\". so pretty meaningless except as a _lower_ bound.",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 96,
        "endChar": 6
      },
      "revId": "547e0dc45a6f2eca161b29b34a7f5ebbbc8d4b01",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "abd88709_a6e61cfe",
        "filename": "libcutils/sockets.cpp",
        "patchSetId": 7
      },
      "lineNbr": 96,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2016-11-07T15:39:44Z",
      "side": 1,
      "message": "SC_OPEN_MAX is system per-process maximum as reported by Linux. The others are, as you say, minimum maximums and in my exuberance used them to retain the check in the face of windows or MAC builds.\n\nThanks. Looking at it again, I see them as clutter and will remove them from here in a followup CL.",
      "parentUuid": "ab04074e_801280c7",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 96,
        "endChar": 6
      },
      "revId": "547e0dc45a6f2eca161b29b34a7f5ebbbc8d4b01",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab04074e_60179cb9",
        "filename": "libcutils/sockets.cpp",
        "patchSetId": 7
      },
      "lineNbr": 107,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-11-05T20:59:18Z",
      "side": 1,
      "message": "why do you even define this function for Windows? is this ever useful off the device? seems like you\u0027re just making everything more complicated to no advantage?",
      "revId": "547e0dc45a6f2eca161b29b34a7f5ebbbc8d4b01",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "abd88709_c6e320ed",
        "filename": "libcutils/sockets.cpp",
        "patchSetId": 7
      },
      "lineNbr": 107,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2016-11-07T15:39:44Z",
      "side": 1,
      "message": "Maybe cargo, it was defined, did not want to audit whether it was right to be in the windows or MAC build, only accepted that it was. Removing this file from the windows build is a separate investigation and CL-set.\n\n(I thought this fragment would work on Windows, but I am missing the include-fu, so I opted to ifdef it out since it was new functionality).",
      "parentUuid": "ab04074e_60179cb9",
      "revId": "547e0dc45a6f2eca161b29b34a7f5ebbbc8d4b01",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab04074e_c01be8e0",
        "filename": "libcutils/tests/sockets_test.cpp",
        "patchSetId": 7
      },
      "lineNbr": 215,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2016-11-05T20:59:18Z",
      "side": 1,
      "message": "this is an int, not a boolean.",
      "range": {
        "startLine": 215,
        "startChar": 31,
        "endLine": 215,
        "endChar": 35
      },
      "revId": "547e0dc45a6f2eca161b29b34a7f5ebbbc8d4b01",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "abd88709_46aad06e",
        "filename": "libcutils/tests/sockets_test.cpp",
        "patchSetId": 7
      },
      "lineNbr": 215,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2016-11-07T15:51:14Z",
      "side": 1,
      "message": "C++ Reference: 4.7 the type bool can be converted to int with the value false becoming ​0​ and true becoming 1. No cast is necessary as this is an implied conversion.\n\nIf this is abhorrent with regards to the Android Coding standard (?) then I will respin.",
      "parentUuid": "ab04074e_c01be8e0",
      "range": {
        "startLine": 215,
        "startChar": 31,
        "endLine": 215,
        "endChar": 35
      },
      "revId": "547e0dc45a6f2eca161b29b34a7f5ebbbc8d4b01",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}