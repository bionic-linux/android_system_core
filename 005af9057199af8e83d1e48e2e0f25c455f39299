{
  "comments": [
    {
      "key": {
        "uuid": "469ba9f3_cddbd3d7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-08-30T17:02:50Z",
      "side": 1,
      "message": "Does fs_mgr_do_mount_one() respect nofail?  I see it returning an error if the mount fails without any checks for nofail.  I only see nofail checks in fs_mgr_mount_all().",
      "revId": "005af9057199af8e83d1e48e2e0f25c455f39299",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8eed5e0_f542b6d8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-08-30T17:27:42Z",
      "side": 1,
      "message": "if fs_mgr_is_nofail skips setting error_count in fs_mgr_mount_all.\n\nYou are right, fs_mgr_do_mount_one was a typo, in my head it was fs_mgr_mount_all",
      "parentUuid": "469ba9f3_cddbd3d7",
      "revId": "005af9057199af8e83d1e48e2e0f25c455f39299",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df0979ca_fd6c66c9",
        "filename": "init/first_stage_mount.cpp",
        "patchSetId": 1
      },
      "lineNbr": 346,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-08-30T17:02:50Z",
      "side": 1,
      "message": "We can fail below too in either SetUpDmVerity() or fs_mgr_do_mount_one(), we want to not fail in those cases too if nofail is set, right?\n\nIt seems better to move this to line ~379 and not return false from MountPartitions() in the case of nofail.",
      "revId": "005af9057199af8e83d1e48e2e0f25c455f39299",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad3b2467_647ff37b",
        "filename": "init/first_stage_mount.cpp",
        "patchSetId": 1
      },
      "lineNbr": 346,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-08-30T17:27:42Z",
      "side": 1,
      "message": "Agreed, sort of. I have some worries and architectural concerns that this change brings up about that.\n\nYes, we can fail, but this is an _incremental_ change (that was also on code from last week, then back-ported to the current) in my mind to deal with failing if there is no partition allocated. In _my_ usage case, failing the dm setup is OK (for example for /mnt/scratch), but failing to mount it if it does exist, I _do_ want to fail. I can not address this yet, any ideas?\n\nI actually am willing, and want to support setup of _two_ entries (not covered by this change):\n\n        scratch_ext4 {\n\t\tcompatible \u003d \"android,scratch\";\n\t\tdev \u003d \"scratch\";\n\t\tmount_point \u003d \"/mnt/scratch\";\n\t\ttype \u003d \"ext4\";\n\t\tmnt_flags \u003d \"rw\";\n\t\tfsmgr_flags \u003d \"logical\";\n\t};\n        scratch_f2fs {\n\t\tcompatible \u003d \"android,scratch\";\n\t\tdev \u003d \"scratch\";\n\t\tmount_point \u003d \"/mnt/scratch\";\n\t\ttype \u003d \"f2fs\";\n\t\tmnt_flags \u003d \"rw\";\n\t\tfsmgr_flags \u003d \"logical\";\n\t};\n        // something here to let it go if the logical partition does not exist.\n        scratch_fallthrough {\n                ????\n\nmount_all allows multiple near-identical mounts to be specified like this, taking one that works. Ideally we would want more of mount_all logic in here to handle that case. The problem with 379 is that we run the risk of partners (and me included) specifying nofail in this case, when in fact we _require_ one to work and none should be specified nofail.\n\nOf course, on a device we know, the dtb should only specify the _one_ we want. In that case not putting the check on 379 fills _my_ needs, allowing one to fail but not the other, a \"logical\" version of nofail ...",
      "parentUuid": "df0979ca_fd6c66c9",
      "revId": "005af9057199af8e83d1e48e2e0f25c455f39299",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02ac837a_14d7f618",
        "filename": "init/first_stage_mount.cpp",
        "patchSetId": 1
      },
      "lineNbr": 346,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-08-30T17:39:56Z",
      "side": 1,
      "message": "Hmm sounds like mount_with_alternatives().  Perhaps we need to merge this loop with fs_mgr_mount_all().  That\u0027s probably something that we should do anyway as we make 1st stage mount more and more generic.",
      "parentUuid": "ad3b2467_647ff37b",
      "revId": "005af9057199af8e83d1e48e2e0f25c455f39299",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2d0f4f2_6507bcf2",
        "filename": "init/first_stage_mount.cpp",
        "patchSetId": 1
      },
      "lineNbr": 346,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-08-30T20:13:26Z",
      "side": 1,
      "message": "I pondered nofail over meetings and lunch, and came to the conclusion for KISS and consistency that nofail be moved to 379. Stop worrying about the subtly where I want partitions to missed, but if present, required. nofail functionality needs to be _clear_.\n\nBut doing so means that if /mnt/scratch does not mount (filesystem damaged?) then the adb remount overrides disappear _silently_ (minus logs), and an engineer spends several hours wondering why his change is not fixing a problem, and retries with more instrumentation to find out why, then discovers that the adb remount was _borken_ ...\n\nwith_alternatives, consider it when (And if) we need it?\n\nAbout the other ideas \u003cscratches head\u003e do we want to rewrite this to _use_ fs_mgr_mount_all (since fstab is missing at this phase anyways, only dt is present)? Out of scope for my feature, but sounds like we then have implied mount_all --early with only dt (fstab in ramdisk?), mount_all --early in second phase with all fstabs, and mount_all --late.\n\nOut of scope for _this_ one change, but should be a unification effort by _someone_.",
      "parentUuid": "02ac837a_14d7f618",
      "revId": "005af9057199af8e83d1e48e2e0f25c455f39299",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8829bdd_f1bcc9e1",
        "filename": "init/first_stage_mount.cpp",
        "patchSetId": 1
      },
      "lineNbr": 346,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-08-30T20:53:36Z",
      "side": 1,
      "message": "I think we probably should merge it with fs_mgr_mount_all() at some point.  I\u0027ll add it to my list.\n\nmount_with_alternatives() is a function that exists already by the way and is used in fs_mgr_mount_all().  It\u0027s intended to do precisely what you\u0027re trying to do here.  But in the shorter term what you\u0027re doing here is probably okay.\n\nOn a side note, why would we need an ext4 and f2fs version of /scratch?  Especially in the same fstab?\n\nAlso /mnt/scratch won\u0027t work since vold takes over /mnt/... (except /mnt/{vendor,product})",
      "parentUuid": "a2d0f4f2_6507bcf2",
      "revId": "005af9057199af8e83d1e48e2e0f25c455f39299",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}