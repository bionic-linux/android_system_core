{
  "comments": [
    {
      "key": {
        "uuid": "c4470300_7d035b2a",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 5
      },
      "lineNbr": 167,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-03-09T22:50:28Z",
      "side": 1,
      "message": "is there a bound to how many times this can recurse? should this function have a while loop instead?",
      "revId": "0c3b8e38b1956e1dac0be92d646aaa43e50f86c2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e8b19fe_9a36709d",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 5
      },
      "lineNbr": 167,
      "author": {
        "id": 1088085
      },
      "writtenOn": "2020-03-09T22:56:38Z",
      "side": 1,
      "message": "I thought compiler would optimize for me if I put the recursion in the tail. But I could switch to use a loop.",
      "parentUuid": "c4470300_7d035b2a",
      "revId": "0c3b8e38b1956e1dac0be92d646aaa43e50f86c2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d3b3362_d5594738",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 5
      },
      "lineNbr": 167,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-03-09T23:01:27Z",
      "side": 1,
      "message": "i doubt it\u0027s clever enough for that here. what does objdump say?",
      "parentUuid": "5e8b19fe_9a36709d",
      "revId": "0c3b8e38b1956e1dac0be92d646aaa43e50f86c2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b945973_1d60c6e1",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 5
      },
      "lineNbr": 167,
      "author": {
        "id": 1088085
      },
      "writtenOn": "2020-03-09T23:44:59Z",
      "side": 1,
      "message": "Need a 2nd eye on the assembly: https://paste.googleplex.com/5670689660993536\n\nI feel the compiler indeed does some optimization. And sp isn\u0027t involved in the assembly. Though I am not 100% sure",
      "parentUuid": "3d3b3362_d5594738",
      "revId": "0c3b8e38b1956e1dac0be92d646aaa43e50f86c2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb2d4339_4cea5d37",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 5
      },
      "lineNbr": 167,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-03-09T23:53:09Z",
      "side": 1,
      "message": "the beq to 5f00 is the \" \u003d\u003d 0\" case. that then does a branch with link to the address it loads into r3, and then a pop into the program counter of the original link register value (pushed at 5ebe) when it returns. so i don\u0027t think it\u0027s optimizing the recursion away here. (the reason you\u0027re not seeing an explicit branch with link to ::Next is because it\u0027s going via the vtable, which is why you have all the indirection through r3 at 5f00/5f02.)",
      "parentUuid": "8b945973_1d60c6e1",
      "revId": "0c3b8e38b1956e1dac0be92d646aaa43e50f86c2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "404d7b25_ef098086",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 5
      },
      "lineNbr": 167,
      "author": {
        "id": 1088085
      },
      "writtenOn": "2020-03-10T07:48:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fb2d4339_4cea5d37",
      "revId": "0c3b8e38b1956e1dac0be92d646aaa43e50f86c2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "14281319_383b9670",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 5
      },
      "lineNbr": 182,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2020-03-10T09:15:35Z",
      "side": 1,
      "message": "Are callers really going to recover in this case ? Maybe we should just CHECK() instead.",
      "range": {
        "startLine": 178,
        "startChar": 2,
        "endLine": 182,
        "endChar": 3
      },
      "revId": "0c3b8e38b1956e1dac0be92d646aaa43e50f86c2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a75d99d8_08fa117c",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 5
      },
      "lineNbr": 182,
      "author": {
        "id": 1088085
      },
      "writtenOn": "2020-03-10T18:54:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "14281319_383b9670",
      "range": {
        "startLine": 178,
        "startChar": 2,
        "endLine": 182,
        "endChar": 3
      },
      "revId": "0c3b8e38b1956e1dac0be92d646aaa43e50f86c2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11653261_132591b7",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 5
      },
      "lineNbr": 188,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-03-09T22:50:28Z",
      "side": 1,
      "message": "or make hash_table_ a std::unique_ptr?\n\n(free() is guaranteed to be a no-op on nullptr, so you don\u0027t actually need the if.)",
      "revId": "0c3b8e38b1956e1dac0be92d646aaa43e50f86c2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5ce57ab_cf3f1d33",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 5
      },
      "lineNbr": 188,
      "author": {
        "id": 1088085
      },
      "writtenOn": "2020-03-10T07:48:58Z",
      "side": 1,
      "message": "I will leave it as a regular pointer for now due to the array like access \"hash_table_[ent] ..\"\nIt\u0027s more like a std::vector, but our manual allocation may save some memory.",
      "parentUuid": "11653261_132591b7",
      "revId": "0c3b8e38b1956e1dac0be92d646aaa43e50f86c2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e13a622_78198e7b",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 5
      },
      "lineNbr": 188,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2020-03-10T09:15:35Z",
      "side": 1,
      "message": "unique_ptr does define operator[], no ? i think you may need to do unique_ptr\u003c..[]\u003e though.",
      "parentUuid": "b5ce57ab_cf3f1d33",
      "revId": "0c3b8e38b1956e1dac0be92d646aaa43e50f86c2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c277eb2_e9fe7b15",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 5
      },
      "lineNbr": 188,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-03-10T17:54:56Z",
      "side": 1,
      "message": "yes, that should work.",
      "parentUuid": "3e13a622_78198e7b",
      "revId": "0c3b8e38b1956e1dac0be92d646aaa43e50f86c2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2503ca5d_f2f288f9",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 5
      },
      "lineNbr": 188,
      "author": {
        "id": 1088085
      },
      "writtenOn": "2020-03-10T18:54:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5c277eb2_e9fe7b15",
      "revId": "0c3b8e38b1956e1dac0be92d646aaa43e50f86c2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6ed14efb_9c65c176",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 5
      },
      "lineNbr": 377,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2020-03-09T22:50:28Z",
      "side": 1,
      "message": "just delete this line? Create already logged a more detailed message anyway...",
      "revId": "0c3b8e38b1956e1dac0be92d646aaa43e50f86c2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "903e8b24_be05b4b2",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 5
      },
      "lineNbr": 377,
      "author": {
        "id": 1088085
      },
      "writtenOn": "2020-03-10T07:48:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6ed14efb_9c65c176",
      "revId": "0c3b8e38b1956e1dac0be92d646aaa43e50f86c2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}