{
  "comments": [
    {
      "key": {
        "uuid": "6c91dab6_8e22911c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-12-13T16:18:02Z",
      "side": 1,
      "message": "Do you have ideas of how this will be used in the future?  If not, it may be worth skipping until we really need it.  Even if we end up with many more versions, it may be simpler to have a single set of information (major/minor version) for accepting or rejecting clients.",
      "revId": "6d827bb7e7c0e9d81ca720faa1a07cd0a5fc4c3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f27579d8_c9a92a95",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2019-12-13T22:37:55Z",
      "side": 1,
      "message": "The upcoming flag (VIRTUAL_AB_DEVICE) really doesn\u0027t need a version bump, it\u0027s informational only, so I wanted two separate flag fields: one that necessitates a new parser, and one that doesn\u0027t.\n\nI don\u0027t have an immediate use case for incompat_flags though, so I can leave it out for now. Instead I\u0027ll put a note on the flags field that it\u0027s not for requiring new features.",
      "parentUuid": "6c91dab6_8e22911c",
      "revId": "6d827bb7e7c0e9d81ca720faa1a07cd0a5fc4c3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b28cc11c_7c9d36ee",
        "filename": "fs_mgr/liblp/io_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 746,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-12-13T16:18:02Z",
      "side": 1,
      "message": "Related to the below comment, maybe let\u0027s write to flags and read it back out?",
      "revId": "6d827bb7e7c0e9d81ca720faa1a07cd0a5fc4c3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d44302ad_d941cb28",
        "filename": "fs_mgr/liblp/io_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 746,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2019-12-13T22:37:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b28cc11c_7c9d36ee",
      "revId": "6d827bb7e7c0e9d81ca720faa1a07cd0a5fc4c3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94ccb978_938e8f17",
        "filename": "fs_mgr/liblp/io_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 769,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2019-12-13T16:18:02Z",
      "side": 1,
      "message": "I was a bit confused at first by the name compared to what the test is doing.  Could we be more clear that this test is meant to reject metadata with unknown incompat flags?  RejectMetadataWithUnknownIncompatFlags seems clunky, but accurate.",
      "range": {
        "startLine": 769,
        "startChar": 18,
        "endLine": 769,
        "endChar": 35
      },
      "revId": "6d827bb7e7c0e9d81ca720faa1a07cd0a5fc4c3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd1f48ce_43d1914f",
        "filename": "fs_mgr/liblp/io_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 769,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2019-12-13T22:37:55Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "94ccb978_938e8f17",
      "range": {
        "startLine": 769,
        "startChar": 18,
        "endLine": 769,
        "endChar": 35
      },
      "revId": "6d827bb7e7c0e9d81ca720faa1a07cd0a5fc4c3f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}