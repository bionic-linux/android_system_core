{
  "comments": [
    {
      "key": {
        "uuid": "69767bfd_f1731606",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 13
      },
      "lineNbr": 125,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2018-09-20T15:58:49Z",
      "side": 1,
      "message": "Naming convention...",
      "range": {
        "startLine": 125,
        "startChar": 12,
        "endLine": 125,
        "endChar": 13
      },
      "revId": "5a503efaf03227a99f54f50657c922c9e8a6af5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44d19c37_69d2c135",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 13
      },
      "lineNbr": 133,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-06-19T20:04:48Z",
      "side": 1,
      "message": "does anyone remember where this came from? should this be 0xffff? where did the extra 8 bits come from?",
      "range": {
        "startLine": 133,
        "startChar": 72,
        "endLine": 133,
        "endChar": 80
      },
      "revId": "5a503efaf03227a99f54f50657c922c9e8a6af5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c72cecf_e987fac2",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 13
      },
      "lineNbr": 133,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2019-06-20T15:53:00Z",
      "side": 1,
      "message": "I think it\u0027s an approximation, though one that seems funky, especially since it can crash the process.\n\nThe CD can have |2B| entries (as that\u0027s the size in the EOCD). If you assume on average at most 256 bytes per record (that\u0027s 200B of payload for file name, \"extra\" and comment), then you get to this?",
      "parentUuid": "44d19c37_69d2c135",
      "range": {
        "startLine": 133,
        "startChar": 72,
        "endLine": 133,
        "endChar": 80
      },
      "revId": "5a503efaf03227a99f54f50657c922c9e8a6af5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa6aac5c_95629a73",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 13
      },
      "lineNbr": 133,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-06-20T15:56:36Z",
      "side": 1,
      "message": "yeah, a little later xunchang@ explained in detail on the new CL that motivated this question. he (a) provided a PoC valid zip file that this code chokes on and (b) pointed out that the single caller already has the correct check. so this incorrect assertion will disappear shortly...",
      "parentUuid": "0c72cecf_e987fac2",
      "range": {
        "startLine": 133,
        "startChar": 72,
        "endLine": 133,
        "endChar": 80
      },
      "revId": "5a503efaf03227a99f54f50657c922c9e8a6af5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7cda888_d7e795b0",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 13
      },
      "lineNbr": 380,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2018-09-20T15:58:49Z",
      "side": 1,
      "message": "This being C++, can\u0027t we use something better nowadays?",
      "range": {
        "startLine": 380,
        "startChar": 6,
        "endLine": 380,
        "endChar": 100
      },
      "revId": "5a503efaf03227a99f54f50657c922c9e8a6af5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bde2f1ca_5c462459",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 13
      },
      "lineNbr": 380,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-09-20T17:25:45Z",
      "side": 1,
      "message": "if you mean \"than calloc\", not really.\n\nif you mean \"than writing your own hash table\", i wondered that too. if nothing else it might be interesting to compare the memory usage between this one and the STL ones.",
      "parentUuid": "b7cda888_d7e795b0",
      "range": {
        "startLine": 380,
        "startChar": 6,
        "endLine": 380,
        "endChar": 100
      },
      "revId": "5a503efaf03227a99f54f50657c922c9e8a6af5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b3f923e_1ae8e31a",
        "filename": "libziparchive/zip_archive.cc",
        "patchSetId": 13
      },
      "lineNbr": 380,
      "author": {
        "id": 1041833
      },
      "writtenOn": "2018-09-20T17:58:13Z",
      "side": 1,
      "message": "Argh, I had hoped that you could use initializer list syntax, but I guess you cannot. One could use a vector, though (removing the explicit size, trading it for indirection); that would have only trivial overhead, I think (though what do I know, my attempts at removing the power-of-2 showed nontrivial overhead).\n\nSTL ones all have nontrivial overhead compared to this minimalistic implementation with chaining (see ART\u0027s one, which is still space-wise better than STL ones, while spending more memory on storing hash in the keys).",
      "parentUuid": "bde2f1ca_5c462459",
      "range": {
        "startLine": 380,
        "startChar": 6,
        "endLine": 380,
        "endChar": 100
      },
      "revId": "5a503efaf03227a99f54f50657c922c9e8a6af5e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}