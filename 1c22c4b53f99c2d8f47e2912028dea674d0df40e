{
  "comments": [
    {
      "key": {
        "uuid": "61c81476_96dccca1",
        "filename": "init/property_service.c",
        "patchSetId": 1
      },
      "lineNbr": 550,
      "author": {
        "id": 1010111
      },
      "writtenOn": "2014-12-18T14:28:21Z",
      "side": 1,
      "message": "This is wrong on two counts:\n\n1. We don\u0027t hardcode security context strings in code; we look them up via selabel_lookup (for files) or compute them via security_compute_create() (for processes and sockets).\n\n2. u:object_r:property_socket:s0 is a context for the socket file (/dev/socket/property_service), which is distinct and separate from the socket itself.  Unix/local domain sockets have two associated kernel objects:  a socket and a file that names it.  The socket is typically labeled the same as its creating/owning process.  The file is labeled based on file_contexts using selabel_lookup.  create_socket() takes a context argument in order to allow init to label sockets created for other services with the service domains rather than its own domain.  But the property socket is supposed to be labeled with init\u0027s domain because init is the receiver.",
      "revId": "1c22c4b53f99c2d8f47e2912028dea674d0df40e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61c81476_d6d6447f",
        "filename": "init/property_service.c",
        "patchSetId": 1
      },
      "lineNbr": 550,
      "author": {
        "id": 1010111
      },
      "writtenOn": "2014-12-18T14:35:58Z",
      "side": 1,
      "message": "Note that in policy, we permit domains to connect to the property service via macro calls like unix_socket_connect(shell, property, init).  The unix_socket_connect macro (defined in te_macros) expands to:\n\nallow shell property_socket:sock_file write;\nallow shell init:unix_stream_socket connectto;\n\nThe first rule allows the shell domain to write to the /dev/socket/property_service socket file.  The second rule allows the shell domain to connect to init\u0027s Unix/local stream socket endpoint, which has init\u0027s domain.  This is correct.  Similar calls to unix_socket_connect() are used for all authorized users of the property service.\n\nI don\u0027t know what problem you were trying to address here, but this is not a correct fix.",
      "parentUuid": "61c81476_96dccca1",
      "revId": "1c22c4b53f99c2d8f47e2912028dea674d0df40e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a1ae8c91_dbe7473c",
        "filename": "init/property_service.c",
        "patchSetId": 1
      },
      "lineNbr": 550,
      "author": {
        "id": 1010111
      },
      "writtenOn": "2014-12-18T15:03:52Z",
      "side": 1,
      "message": "Also, note that create_socket() already looks up the file context via selabel_lookup() from file_contexts, so it is already assigning this security context to the /dev/socket/property_service socket file at creation time.  But the context argument to create_socket() is for the socket object, not the socket file, and only when creating sockets for a different process as for service socket stanzas in init.rc.",
      "parentUuid": "61c81476_d6d6447f",
      "revId": "1c22c4b53f99c2d8f47e2912028dea674d0df40e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}