{
  "comments": [
    {
      "key": {
        "uuid": "0110eb5f_0e791bf6",
        "filename": "base/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 178,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-09-17T14:57:31Z",
      "side": 1,
      "message": "+jmgao,rprichard for whether they think this is likely to cause any problems?",
      "revId": "7a209c677fcc24e8bd92c2b9138cec1ce74a5dd5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "111d4174_fe0dbd66",
        "filename": "base/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 178,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2019-09-17T15:34:59Z",
      "side": 1,
      "message": "This is required for \u0027endian_test.cpp\u0027 at L145.\n\nOtherwise, it has linkage error if without -lws2_32:\n\nlld-link: error: undefined symbol: __imp_htons\n\u003e\u003e\u003e referenced by out/soong/.intermediates/system/core/base/libbase_test/windows_x86_64/obj/system/core/base/endian_test.o:(_ZN17endian_smoke_Test8TestBodyEv)\n\nlld-link: error: undefined symbol: __imp_htonl\n\u003e\u003e\u003e referenced by out/soong/.intermediates/system/core/base/libbase_test/windows_x86_64/obj/system/core/base/endian_test.o:(_ZN17endian_smoke_Test8TestBodyEv)\n\nlld-link: error: undefined symbol: __imp_ntohs\n\u003e\u003e\u003e referenced by out/soong/.intermediates/system/core/base/libbase_test/windows_x86_64/obj/system/core/base/endian_test.o:(_ZN17endian_smoke_Test8TestBodyEv)\n\nlld-link: error: undefined symbol: __imp_ntohl\n\u003e\u003e\u003e referenced by out/soong/.intermediates/system/core/base/libbase_test/windows_x86_64/obj/system/core/base/endian_test.o:(_ZN17endian_smoke_Test8TestBodyEv)\nclang-9: error: linker command failed with exit code 1 (use -v to see invocation)\n23:34:07 ninja failed with: exit status 1",
      "parentUuid": "0110eb5f_0e791bf6",
      "revId": "7a209c677fcc24e8bd92c2b9138cec1ce74a5dd5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bef87e0e_6cc85b49",
        "filename": "base/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 178,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2019-09-17T19:29:17Z",
      "side": 1,
      "message": "It looks like this change replaces an instruction (rol/bswap) with an function call into a DLL, which would be slower. It seems unlikely to matter in practice? If it mattered, code could call __builtin_bswap* directly, or maybe we could keep defining the macros after the #include \u003cwinsock2.h\u003e.\n\nI think we would need this ws2_32.dll dependency in any Windows exe/dll that uses these functions? It looks like adb.exe/fastboot.exe already list -lws2_32, and ab/P9838219 built a set of Windows binaries.",
      "parentUuid": "111d4174_fe0dbd66",
      "revId": "7a209c677fcc24e8bd92c2b9138cec1ce74a5dd5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "378e3df9_90e70eea",
        "filename": "base/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 178,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2019-09-17T19:32:50Z",
      "side": 1,
      "message": "yeah, that was my question: is it ever unreasonable to add that dependency? i\u0027m assuming it\u0027s fine.",
      "parentUuid": "bef87e0e_6cc85b49",
      "revId": "7a209c677fcc24e8bd92c2b9138cec1ce74a5dd5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aff46cd1_87bafc01",
        "filename": "base/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 178,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2019-09-18T04:32:55Z",
      "side": 1,
      "message": "On my laptop, it adds about 2ms to an executable\u0027s startup time. Probably fine?",
      "parentUuid": "378e3df9_90e70eea",
      "revId": "7a209c677fcc24e8bd92c2b9138cec1ce74a5dd5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c511048_eb555463",
        "filename": "base/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 178,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2019-09-18T04:44:06Z",
      "side": 1,
      "message": "\u003e or maybe we could keep defining the macros after the #include \u003cwinsock2.h\u003e.\n\nOK, this sounds better so we don\u0027t have to call into a DLL.\n(although performance shouldn\u0027t be a concern on host side tools).\n\nAnd looks like \u003clibutils/ByteOrder.h\u003e did similar things (include winsoc2.h first, then have macro definition).\nhttps://android.googlesource.com/platform/system/core/+/refs/heads/master/libutils/include/utils/ByteOrder.h#24",
      "parentUuid": "aff46cd1_87bafc01",
      "revId": "7a209c677fcc24e8bd92c2b9138cec1ce74a5dd5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}