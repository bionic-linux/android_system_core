{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d40bcce4_3bdf5596",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 5
      },
      "lineNbr": 463,
      "author": {
        "id": 1069898
      },
      "writtenOn": "2024-04-24T00:46:14Z",
      "side": 1,
      "message": "We should not do this if current process isn\u0027t using native-bridge (i.e. there is no guest registers). I don\u0027t see a check here or anywhere else that would implement this logic. Am I missing something?",
      "revId": "d1969e54ae102a2ef0b4b17eacabe7b29e484294",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f928e7c_43f175ca",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 5
      },
      "lineNbr": 463,
      "author": {
        "id": 1997365
      },
      "writtenOn": "2024-04-25T17:41:15Z",
      "side": 1,
      "message": "Is there a check that can be used here? Is something like `#ifdef NATIVE_BRIDGE` (ART_TARGET_ANDROID)?",
      "parentUuid": "d40bcce4_3bdf5596",
      "revId": "d1969e54ae102a2ef0b4b17eacabe7b29e484294",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1061000d_79fd0622",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 5
      },
      "lineNbr": 463,
      "author": {
        "id": 1069991
      },
      "writtenOn": "2024-04-25T17:55:41Z",
      "side": 1,
      "message": "This couldn\u0027t be determined statically. In fact it\u0027s not even property of the process, it\u0027s property of the process **thread**.\n\nIf appropriate TLS slot doesn\u0027t have reference to valid guest CPU state then such thread is native-only and if it crashed then we should store host registers.",
      "parentUuid": "8f928e7c_43f175ca",
      "revId": "d1969e54ae102a2ef0b4b17eacabe7b29e484294",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44d7d860_af688943",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 5
      },
      "lineNbr": 463,
      "author": {
        "id": 1069898
      },
      "writtenOn": "2024-04-25T21:03:54Z",
      "side": 1,
      "message": "On a closer look, your `PTRACE_PEEKDATA` call will return -1 if ptr points to unmapped memory or is invalid (i.e. guest state is uninitialized). The result won\u0027t match the signature and we\u0027ll return. Maybe just add a comment that we thought this scenario through.",
      "parentUuid": "1061000d_79fd0622",
      "revId": "d1969e54ae102a2ef0b4b17eacabe7b29e484294",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d7ccbb7a_8e1238b3",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 5
      },
      "lineNbr": 463,
      "author": {
        "id": 1997365
      },
      "writtenOn": "2024-04-27T05:34:05Z",
      "side": 1,
      "message": "In the case, the TLS doesn\u0027t have a valid reference, the GetGuestStateTlsPointer() will return nullptr. I can do a nullptr check before ptrace call. Added a comment for the scenario for unmapped memory or invalid.",
      "parentUuid": "44d7d860_af688943",
      "revId": "d1969e54ae102a2ef0b4b17eacabe7b29e484294",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb3b6cb0_c5c06456",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 5
      },
      "lineNbr": 464,
      "author": {
        "id": 1069898
      },
      "writtenOn": "2024-04-24T00:46:14Z",
      "side": 1,
      "message": "In case of failure this needs to be freed. Prefer https://en.cppreference.com/w/cpp/language/raii. Using `std::unique_ptr` should suffice here.\n\nIt\u0027s also probably a good idea to allocate them closer to the first use at #481. This way you\u0027ll skip two potential failure points.",
      "revId": "d1969e54ae102a2ef0b4b17eacabe7b29e484294",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b2566e0_32010559",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 5
      },
      "lineNbr": 464,
      "author": {
        "id": 1069898
      },
      "writtenOn": "2024-04-24T00:51:01Z",
      "side": 1,
      "message": "Actually since you don\u0027t return them, it\u0027s better to allocate on stack:\n\n```\nNativeBridgeGuestRegs guest_regs;\n```",
      "parentUuid": "bb3b6cb0_c5c06456",
      "revId": "d1969e54ae102a2ef0b4b17eacabe7b29e484294",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5790f41a_72b639de",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 5
      },
      "lineNbr": 464,
      "author": {
        "id": 1997365
      },
      "writtenOn": "2024-04-27T05:34:05Z",
      "side": 1,
      "message": "Makes sense, moved it to line 481 and allocate it on stack.",
      "parentUuid": "5b2566e0_32010559",
      "revId": "d1969e54ae102a2ef0b4b17eacabe7b29e484294",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d7bb25f_3f6912b9",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 5
      },
      "lineNbr": 473,
      "author": {
        "id": 1069898
      },
      "writtenOn": "2024-04-24T00:46:14Z",
      "side": 1,
      "message": "This also needs to be freed after we taken out the registers.",
      "revId": "d1969e54ae102a2ef0b4b17eacabe7b29e484294",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "046faeaa_15b3649d",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 5
      },
      "lineNbr": 473,
      "author": {
        "id": 1069991
      },
      "writtenOn": "2024-04-24T01:09:28Z",
      "side": 1,
      "message": "Maybe just put it into `std::unique_ptr` with `make_unique` ?\n\nThat\u0027s why `std::unique_ptr` exists in the first place.\n\nSomething like:\n```\nauto guest_state_data_copy \u003d std::make_unique\u003cunsigned char[]\u003e(guest_state_data_size);\n```",
      "parentUuid": "0d7bb25f_3f6912b9",
      "revId": "d1969e54ae102a2ef0b4b17eacabe7b29e484294",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23e24c04_56975eed",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 5
      },
      "lineNbr": 473,
      "author": {
        "id": 1997365
      },
      "writtenOn": "2024-04-27T05:34:05Z",
      "side": 1,
      "message": "The guest_state_data_copy needs to be `void*`. Tried to use `get()` but the result is different from using malloc. I wonder if the guest_state_data_copy will be cast to CPU State type so make it unsigned char[] change things? Added a `free()` function.",
      "parentUuid": "046faeaa_15b3649d",
      "revId": "d1969e54ae102a2ef0b4b17eacabe7b29e484294",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "648fc697_c02d2978",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 5
      },
      "lineNbr": 481,
      "author": {
        "id": 1069898
      },
      "writtenOn": "2024-04-24T00:46:14Z",
      "side": 1,
      "message": "Are you sure you need this cast? I though `void*` to `const void*` is cast automatically.",
      "range": {
        "startLine": 481,
        "startChar": 26,
        "endLine": 481,
        "endChar": 55
      },
      "revId": "d1969e54ae102a2ef0b4b17eacabe7b29e484294",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d7c886f8_4c81ff0b",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 5
      },
      "lineNbr": 481,
      "author": {
        "id": 1997365
      },
      "writtenOn": "2024-04-27T05:34:05Z",
      "side": 1,
      "message": "Ah, okay, removed this cast.",
      "parentUuid": "648fc697_c02d2978",
      "range": {
        "startLine": 481,
        "startChar": 26,
        "endLine": 481,
        "endChar": 55
      },
      "revId": "d1969e54ae102a2ef0b4b17eacabe7b29e484294",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "091d7716_a7f6ed42",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 5
      },
      "lineNbr": 489,
      "author": {
        "id": 1069898
      },
      "writtenOn": "2024-04-24T00:46:14Z",
      "side": 1,
      "message": "You cannot return a pointer to stack memory (stack is scratched on return). We need to allocate `arm_user_regs` on heap (e.g. using `new`)",
      "range": {
        "startLine": 489,
        "startChar": 76,
        "endLine": 489,
        "endChar": 90
      },
      "revId": "d1969e54ae102a2ef0b4b17eacabe7b29e484294",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3984ffef_e11a9029",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 5
      },
      "lineNbr": 489,
      "author": {
        "id": 1069991
      },
      "writtenOn": "2024-04-24T01:09:28Z",
      "side": 1,
      "message": "Maybe use here `make_unique`, too?\n\nThe code here is not using `make_unique` but that\u0027s for historical reasons: make_unique is C++14 construct and I suspect that code was written when C++14 wasn\u0027t available.\n\nhttps://abseil.io/tips/126",
      "parentUuid": "091d7716_a7f6ed42",
      "range": {
        "startLine": 489,
        "startChar": 76,
        "endLine": 489,
        "endChar": 90
      },
      "revId": "d1969e54ae102a2ef0b4b17eacabe7b29e484294",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d3235c9_ea2fb769",
        "filename": "debuggerd/crash_dump.cpp",
        "patchSetId": 5
      },
      "lineNbr": 489,
      "author": {
        "id": 1997365
      },
      "writtenOn": "2024-04-27T05:34:05Z",
      "side": 1,
      "message": "Hmm, I might miss something. I think the function `unwindstack::RegsArm::Read()` will return a pointer to heap: http://shortn/_CcF3X3R7Il. The data in `arm_user_regs` seems get copied over.",
      "parentUuid": "3984ffef_e11a9029",
      "range": {
        "startLine": 489,
        "startChar": 76,
        "endLine": 489,
        "endChar": 90
      },
      "revId": "d1969e54ae102a2ef0b4b17eacabe7b29e484294",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}