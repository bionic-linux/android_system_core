{
  "comments": [
    {
      "key": {
        "uuid": "849451c2_582f3c40",
        "filename": "adb/adb_auth_host.cpp",
        "patchSetId": 2
      },
      "lineNbr": 309,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2015-08-28T23:27:31Z",
      "side": 1,
      "message": "nit: lowercase to fit with the other adb \"error: blah\" output ;-) Doesn\u0027t really matter; what matters most is real info the user can use.",
      "range": {
        "startLine": 309,
        "startChar": 19,
        "endLine": 309,
        "endChar": 20
      },
      "revId": "ea515aa0dc3cb709d01df3d533b0f9a3e589f8a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "046221c0_315b8080",
        "filename": "adb/adb_auth_host.cpp",
        "patchSetId": 2
      },
      "lineNbr": 311,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2015-08-28T23:27:31Z",
      "side": 1,
      "message": "kill the line? (I suppose fatal() should be marked with a compiler attribute to specify that it doesn\u0027t return, but can\u0027t do it all in a day...)",
      "range": {
        "startLine": 311,
        "startChar": 12,
        "endLine": 311,
        "endChar": 22
      },
      "revId": "ea515aa0dc3cb709d01df3d533b0f9a3e589f8a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "248c8586_84a6c895",
        "filename": "adb/adb_auth_host.cpp",
        "patchSetId": 2
      },
      "lineNbr": 417,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2015-08-29T00:20:50Z",
      "side": 1,
      "message": "It turns out that adbkey.pub does not contain any \\r or \\n, so *in practice* it doesn\u0027t matter whether this reads it in text or binary mode. Adbkey.pub is written by write_public_keyfile which uses fopen which defaults to text mode, but the data that is written out is \u003cbase64\u003e\u003cspace\u003e\u003cusername\u003e@\u003chostname\u003e which does not have any \\r or \\n to translate in the first place.\n\nSo in practice RFTS() is fine here.\n\nBut taking a step back, how should this really be done? My opinion is that since this file format is really text, it should use text mode on both read and write on Windows. But that\u0027s just my opinion and I could be convinced out of it.\n\nPersonally on my machines I use editors that handle unix style line-endings, but silly Notepad that comes with the OS doesn\u0027t recognize it.",
      "range": {
        "startLine": 417,
        "startChar": 24,
        "endLine": 417,
        "endChar": 40
      },
      "revId": "ea515aa0dc3cb709d01df3d533b0f9a3e589f8a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4700952_67fdfb77",
        "filename": "adb/commandline.cpp",
        "patchSetId": 2
      },
      "lineNbr": 535,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2015-08-29T00:20:50Z",
      "side": 1,
      "message": "I\u0027m convinced that this reads in text mode and breaks adb sideload. So I think you could either modify RFTS() to pass _O_BINARY to open() always, or maybe create ReadFileToString(arg0, arg1, extra_open_flags) where you pass _O_BINARY (or make it a boolean, whatever), or make another API, etc. you get the idea.\n\nSo basically, Windows is annoying because it forces cross-platform code to have this notion of textmode vs. binmode if it wants the files to be readable by Notepad. It\u0027s up to you guys how you want to deal with this. You could just say \u0027screw Notepad\u0027 and just use binary mode everywhere. Personally I can live with that, but I don\u0027t know about everyone else (here is an example: idea.log only has \\n so newbie Windows Android Studio users can\u0027t even easily read the log comfortably!)\n\nBTW, loading binary data into std::string sounds ok at the outset (because std::string is documented to handle embedded nulls), but I read that if you accidentally call c_str(), that truncates to the first NULL. That sounds a bit scary. Maybe it means that you really want ReadFileToString (text mode) and ReadFileToVector (binary). I dunno, these are really design questions for component owners. :)",
      "range": {
        "startLine": 535,
        "startChar": 9,
        "endLine": 535,
        "endChar": 40
      },
      "revId": "ea515aa0dc3cb709d01df3d533b0f9a3e589f8a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8497f201_b268a801",
        "filename": "adb/commandline.cpp",
        "patchSetId": 2
      },
      "lineNbr": 535,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2015-09-01T18:00:47Z",
      "side": 1,
      "message": "i checked the google3 code this is based on, and they use O_BINARY or equivalent. (you can see chromium\u0027s copy at https://code.google.com/p/chromium/codesearch#chromium/src/base/files/file_util.cc\u0026sq\u003dpackage:chromium\u0026l\u003d133.)\n\nthe only places adb currently uses these functions are in Linux-only code anyway, so it seems like adding that flag wouldn\u0027t break anything.\n\n(on the whole i also think this behavior is less surprising. the obvious exception being cases where the next thing you plan on doing is android::base::Split(content, \"\\n\"), but maybe that\u0027s just a sign we should have something like simpleperf\u0027s LineReader class in libbase...)",
      "parentUuid": "c4700952_67fdfb77",
      "range": {
        "startLine": 535,
        "startChar": 9,
        "endLine": 535,
        "endChar": 40
      },
      "revId": "ea515aa0dc3cb709d01df3d533b0f9a3e589f8a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e486eed4_dbf78bc0",
        "filename": "adb/commandline.cpp",
        "patchSetId": 2
      },
      "lineNbr": 535,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2015-09-01T19:48:47Z",
      "side": 1,
      "message": "Ok, O_BINARY or equiv sounds fine to me. If this needs to be revisited in the future you can add ReadTextFileToString() or LineReader, etc.",
      "parentUuid": "8497f201_b268a801",
      "range": {
        "startLine": 535,
        "startChar": 9,
        "endLine": 535,
        "endChar": 40
      },
      "revId": "ea515aa0dc3cb709d01df3d533b0f9a3e589f8a3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}