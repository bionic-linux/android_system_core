{
  "comments": [
    {
      "key": {
        "uuid": "f6b0760b_7ecdaddd",
        "filename": "metricsd/metrics_daemon.rc",
        "patchSetId": 3
      },
      "lineNbr": 4,
      "author": {
        "id": 1040868
      },
      "writtenOn": "2015-11-07T00:23:05Z",
      "side": 1,
      "message": "shouldn\u0027t this pass --logtosyslog ?",
      "revId": "b64ca446d15a5f2a64e859df478bd85aa0c9be1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "760646d1_d74cdc1d",
        "filename": "metricsd/metrics_daemon.rc",
        "patchSetId": 3
      },
      "lineNbr": 4,
      "author": {
        "id": 1076133
      },
      "writtenOn": "2015-11-09T20:43:54Z",
      "side": 1,
      "message": "I may have misunderstood your email: I thought you suggested tying the logging mechanism (stderr or syslog) to how we ran the daemon (foreground or daemonized). As we run it in the foreground we would log to stderr.\n\nDo you instead want all daemons started by init to log to syslog ?",
      "parentUuid": "f6b0760b_7ecdaddd",
      "revId": "b64ca446d15a5f2a64e859df478bd85aa0c9be1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56cb02e2_06963a0b",
        "filename": "metricsd/metrics_daemon.rc",
        "patchSetId": 3
      },
      "lineNbr": 4,
      "author": {
        "id": 1040868
      },
      "writtenOn": "2015-11-09T22:58:02Z",
      "side": 1,
      "message": "right ... don\u0027t we want to syslog ?  stdout/stderr is going nowhere ...",
      "parentUuid": "760646d1_d74cdc1d",
      "revId": "b64ca446d15a5f2a64e859df478bd85aa0c9be1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16ac2a06_ac90e374",
        "filename": "metricsd/metrics_daemon.rc",
        "patchSetId": 3
      },
      "lineNbr": 4,
      "author": {
        "id": 1076133
      },
      "writtenOn": "2015-11-09T23:50:57Z",
      "side": 1,
      "message": "init seems to collect stderr and send it to logcat (I\u0027m guessing this is done by init).\nlaunched by init with --foreground, the log messages from metrics_daemon are sent to logcat.",
      "parentUuid": "56cb02e2_06963a0b",
      "revId": "b64ca446d15a5f2a64e859df478bd85aa0c9be1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6a6b626_ae13b7a7",
        "filename": "metricsd/metrics_daemon.rc",
        "patchSetId": 3
      },
      "lineNbr": 4,
      "author": {
        "id": 1076778
      },
      "writtenOn": "2015-11-10T00:00:05Z",
      "side": 1,
      "message": "IIUC, I think all logs are actually output to stderr.  And either init or some other android functionality collects that and outputs it into logcat.  Adding the kLogToSyslog as far as I can tell, only adds a call to syslog(..) and does nothing else different from the other cases: http://cs/googleplex-android/external/libchromeos/brillo/syslog_logging.cc\u0026l\u003d70",
      "parentUuid": "16ac2a06_ac90e374",
      "revId": "b64ca446d15a5f2a64e859df478bd85aa0c9be1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b0e2f2a_b7df6856",
        "filename": "metricsd/metrics_daemon.rc",
        "patchSetId": 3
      },
      "lineNbr": 4,
      "author": {
        "id": 1076133
      },
      "writtenOn": "2015-11-10T23:13:17Z",
      "side": 1,
      "message": "logging to syslog only will make libbrillo\u0027s logging handler return true which will prevent the default libchrome message handler from running (http://cs/android/external/libbrillo/brillo/syslog_logging.cc\u0026l\u003d74). This will then only log to syslog.\n\nLibbrillo\u0027s configuration seems to not do what we think it should to.",
      "parentUuid": "f6a6b626_ae13b7a7",
      "revId": "b64ca446d15a5f2a64e859df478bd85aa0c9be1d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}