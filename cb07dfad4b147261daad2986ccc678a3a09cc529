{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e048af97_276f301c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 3312642
      },
      "writtenOn": "2024-06-12T01:34:44Z",
      "side": 1,
      "message": "Hi David,\n\nCould you please review this commit ?\n\nThanks,",
      "revId": "cb07dfad4b147261daad2986ccc678a3a09cc529",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49ac8f16_72779bdf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2024-06-12T17:20:27Z",
      "side": 1,
      "message": "This function is getting very complex and is badly in need of some kind of unit test, but I don\u0027t really know what to do about it. It\u0027s just complex in general.\n\n\"adb remount\" could set a flag, reboot the device. First-stage init could create a mount structure that bypasses the need for MS_MOVE, by putting a shadow dir structure in tmpfs, and then mounting overlays directly into /system etc. Creating the workdirs would happen inline. Per-mount remounts would go away (if they haven\u0027t already, they should). I\u0027d also argue that needing to remount twice is silly... always remounting writable would eliminate more code, and simplify the developer experience.\n\nAnyway, +2\u0027ing to not block the change, but it\u0027s worth thinking about...",
      "revId": "cb07dfad4b147261daad2986ccc678a3a09cc529",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45f98848_caf166d2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2024-06-18T11:12:02Z",
      "side": 1,
      "message": "\u003e This function is getting very complex\n\nAgree. Even I spend a non-trivial amount of time just to understand it, but I\u0027m also the one who wrote this pile of code in the first place.\n\n\u003e First-stage init could create a mount structure that bypasses the need for MS_MOVE\n\nI think MS_MOVE doesn\u0027t affect first-stage-init anyway, because we only have one namespace in first-stage-init (one process; one namespace). The separate mount namespace happens after second-stage-init. The problem Jianan is seeing only happens right after the initial overlay setup, and before rebooting . (So the mountpoints were just moved and mount namespace of /data is dissociated between _bootstrap_ and _default_ namespace)\n\n\u003e I\u0027d also argue that needing to remount twice is silly... always remounting writable would eliminate more code, and simplify the developer experience.\n\nyeah... I kind of wanted to just make the `-R` behavior mandatory, and don\u0027t allow remount RW right after initial overlayfs setup. Thus only allow remount RW after reboot. This would make the code path much simpler, but would break a lot of the expectations of existing scripts that expects `adb remount` to behave similar to `adb shell mount -o remount,rw`.\n\n\u003e Anyway, +2\u0027ing to not block the change\n\nthanks!",
      "parentUuid": "49ac8f16_72779bdf",
      "revId": "cb07dfad4b147261daad2986ccc678a3a09cc529",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "267a736e_0fd16864",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2024-06-19T00:16:52Z",
      "side": 1,
      "message": "I\u0027m not thinking -R should be the default. Instead, *no* remount logic should happen after first-stage init. adb remount, -R or not, would just flip a bit somewhere. first-stage init would then mount ro partitions off in some shadow directory structure, and build the overlays on top of the \"real\" structure in /.\n\nMy guess is that there could be a little complication in submounts still but a lot of this logic could go away. The only scripts that would break are ones expecting \"adb remount \u0026\u0026 adb reboot\" to wind up in readonly overlay mode. But that mode is not very useful and it\u0027s not clear why anyone would rely on it.",
      "parentUuid": "45f98848_caf166d2",
      "revId": "cb07dfad4b147261daad2986ccc678a3a09cc529",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "162c7c1d_9e13ec7b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2024-06-19T11:04:43Z",
      "side": 1,
      "message": "\u003e Instead, no remount logic should happen after first-stage init.\n\nThat\u0027s precisely what I meant for \"make -R default\". I meant to make _reboot_ a mandatory step of enabling overlayfs, and don\u0027t allow overlayfs usage until reboot had happened. This guaranteed that the overlays are mounted by first stage init, AND we don\u0027t need to move mounts during initial overlay setup.\n\n\u003e My guess is that there could be a little complication in submounts\n\nTrue. \"little ocmplication\" being that overlayfs cannot discover file paths cross file system boundary. So we would still need one overlayfs per mount point. But the move mount logic can be greatly simplified because every thing should be MS_PRIVATE in first stage init. \n\n\u003e scripts that would break\n\nThere are scripts that expects device is initially AVB disabled, and expects `adb remount` to just work without reboot. These are the ones that I recall are problematic and sensitive to any code changes in remount. They also have (good?) reason to do this because they want to (1) cut down test run time by avoiding unnecessary reboots (2) less reboot -\u003e less flaky test behavior.",
      "parentUuid": "267a736e_0fd16864",
      "revId": "cb07dfad4b147261daad2986ccc678a3a09cc529",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14f4a351_99df916d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2024-06-20T15:21:44Z",
      "side": 1,
      "message": "Yeah, agreed, that seems like a good path forward. I\u0027m currently trying to get our overlayfs patches working on android-mainline, if I have time after I might take a stab at this.\n\nFor userdebug builds, we can continue to tie \"will use overlays\" with \"adb disable-verity\". But if verity is getting disabled through any other means (eg fastboot, or eng builds), I\u0027m pretty sure those scripts would break today.\n\nWe can even preserve the fact that overlays are initially RO and get switched to RW. We can also preserve the ancient behavior of ext4 partitions getting remounted RW immediately. The only thing we\u0027d change is when overlays are set up, and I think that can be done transparently.",
      "parentUuid": "162c7c1d_9e13ec7b",
      "revId": "cb07dfad4b147261daad2986ccc678a3a09cc529",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bd73664a_09a82f99",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 3312642
      },
      "writtenOn": "2024-06-21T02:13:08Z",
      "side": 1,
      "message": "Allowing overlayfs to be mounted only in the first stage can simplify the currently complex logic and makes it easier to test.\n\nFor those who want to make the remount take effect without rebooting, perhaps a property can be configured through fastboot or eng builds, and init can use this property to decide whether to enable overlayfs in the first stage. But this may introduce new complex logic.",
      "parentUuid": "14f4a351_99df916d",
      "revId": "cb07dfad4b147261daad2986ccc678a3a09cc529",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}