{
  "comments": [
    {
      "key": {
        "uuid": "46fbc925_646a38d5",
        "filename": "logd/CompressionEngine.cpp",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2020-06-10T20:44:01Z",
      "side": 1,
      "message": "CHECK_LE(in_size, UINT32_MAX)?",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 40,
        "endChar": 53
      },
      "revId": "5a60629170fcca916b4ecb85154af725861e41e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1766e10c_1a26e323",
        "filename": "logd/CompressionEngine.cpp",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-06-11T00:12:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "46fbc925_646a38d5",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 40,
        "endChar": 53
      },
      "revId": "5a60629170fcca916b4ecb85154af725861e41e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "01f6d6ca_88cf02d6",
        "filename": "logd/CompressionEngine.cpp",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2020-06-10T20:44:01Z",
      "side": 1,
      "message": "I think this should be `!\u003d Z_STREAM_END` (or CHECK_EQ(ret, Z_STREAM_END), since zlib gives the guarantee that it returns Z_STREAM_END here.\n\nIf the impossible happens, you leak the z_stream here, which is an argument for CHECK.",
      "range": {
        "startLine": 48,
        "startChar": 12,
        "endLine": 48,
        "endChar": 29
      },
      "revId": "5a60629170fcca916b4ecb85154af725861e41e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85db2474_22b8a383",
        "filename": "logd/CompressionEngine.cpp",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-06-11T00:12:45Z",
      "side": 1,
      "message": "Done.  I originally had LOG(FATAL) here, so the CHECK sounds better to me.\n\nIt is essentially impossible for this to fail, right?  It\u0027s not like deflateBound() may accidentally give me a close enough but not large enough bound?",
      "parentUuid": "01f6d6ca_88cf02d6",
      "range": {
        "startLine": 48,
        "startChar": 12,
        "endLine": 48,
        "endChar": 29
      },
      "revId": "5a60629170fcca916b4ecb85154af725861e41e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fda9d789_20241f64",
        "filename": "logd/CompressionEngine.cpp",
        "patchSetId": 5
      },
      "lineNbr": 49,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2020-06-10T20:44:01Z",
      "side": 1,
      "message": "deflate",
      "range": {
        "startLine": 49,
        "startChar": 23,
        "endLine": 49,
        "endChar": 29
      },
      "revId": "5a60629170fcca916b4ecb85154af725861e41e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af17bb84_f5fe3a40",
        "filename": "logd/CompressionEngine.cpp",
        "patchSetId": 5
      },
      "lineNbr": 49,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-06-11T00:12:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fda9d789_20241f64",
      "range": {
        "startLine": 49,
        "startChar": 23,
        "endLine": 49,
        "endChar": 29
      },
      "revId": "5a60629170fcca916b4ecb85154af725861e41e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17eb2f9b_7f6af84f",
        "filename": "logd/CompressionEngine.cpp",
        "patchSetId": 5
      },
      "lineNbr": 52,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2020-06-10T20:44:01Z",
      "side": 1,
      "message": "Just use strm.total_out instead?",
      "range": {
        "startLine": 52,
        "startChar": 36,
        "endLine": 52,
        "endChar": 62
      },
      "revId": "5a60629170fcca916b4ecb85154af725861e41e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d45e6a74_ec4d840a",
        "filename": "logd/CompressionEngine.cpp",
        "patchSetId": 5
      },
      "lineNbr": 52,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-06-11T00:12:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "17eb2f9b_7f6af84f",
      "range": {
        "startLine": 52,
        "startChar": 36,
        "endLine": 52,
        "endChar": 62
      },
      "revId": "5a60629170fcca916b4ecb85154af725861e41e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "464f1836_30acde6e",
        "filename": "logd/CompressionEngine.cpp",
        "patchSetId": 5
      },
      "lineNbr": 56,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2020-06-10T20:44:01Z",
      "side": 1,
      "message": "Either this is wrong, or the in_size parameter is pointless.",
      "range": {
        "startLine": 56,
        "startChar": 49,
        "endLine": 56,
        "endChar": 58
      },
      "revId": "5a60629170fcca916b4ecb85154af725861e41e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3657b0cb_43ef0a9b",
        "filename": "logd/CompressionEngine.cpp",
        "patchSetId": 5
      },
      "lineNbr": 56,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-06-11T00:12:45Z",
      "side": 1,
      "message": "Done; it was wrong, I should have used in_size.  It actually may be useful to report both even.",
      "parentUuid": "464f1836_30acde6e",
      "range": {
        "startLine": 56,
        "startChar": 49,
        "endLine": 56,
        "endChar": 58
      },
      "revId": "5a60629170fcca916b4ecb85154af725861e41e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3df6c063_fda2b8d7",
        "filename": "logd/CompressionEngine.cpp",
        "patchSetId": 5
      },
      "lineNbr": 74,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2020-06-10T20:44:01Z",
      "side": 1,
      "message": "This doesn\u0027t seem right, unless you\u0027re storing the uncompressed size alongside the chunk. I think this at least deserves a comment that out must be exactly the size of the uncompressed data.\n\n(also, same comment re: leaking in here)",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 74,
        "endChar": 75
      },
      "revId": "5a60629170fcca916b4ecb85154af725861e41e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1372607_28e25819",
        "filename": "logd/CompressionEngine.cpp",
        "patchSetId": 5
      },
      "lineNbr": 74,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-06-11T00:12:45Z",
      "side": 1,
      "message": "I was stealing this from the ART code.  I actually do store the uncompressed size alongside the chunk, but I resize ahead of time.  I\u0027ll pass it to this function and resize within it to be clearer.\n\nI\u0027ll add the CHECK() too.  It shouldn\u0027t be possible to fail here either, right?",
      "parentUuid": "3df6c063_fda2b8d7",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 74,
        "endChar": 75
      },
      "revId": "5a60629170fcca916b4ecb85154af725861e41e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "35e3b7db_b8748ccd",
        "filename": "logd/CompressionEngine.cpp",
        "patchSetId": 5
      },
      "lineNbr": 95,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2020-06-10T20:44:01Z",
      "side": 1,
      "message": "same as the zlib impl, this is either wrong or in_size is useless.",
      "range": {
        "startLine": 95,
        "startChar": 49,
        "endLine": 95,
        "endChar": 58
      },
      "revId": "5a60629170fcca916b4ecb85154af725861e41e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdaf96f0_7d624be4",
        "filename": "logd/CompressionEngine.cpp",
        "patchSetId": 5
      },
      "lineNbr": 95,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-06-11T00:12:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "35e3b7db_b8748ccd",
      "range": {
        "startLine": 95,
        "startChar": 49,
        "endLine": 95,
        "endChar": 58
      },
      "revId": "5a60629170fcca916b4ecb85154af725861e41e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fd239fd3_c10009c8",
        "filename": "logd/CompressionEngine.cpp",
        "patchSetId": 5
      },
      "lineNbr": 105,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2020-06-10T20:44:01Z",
      "side": 1,
      "message": "This has subtly different behavior from the zlib implementation: you\u0027re permitting results that don\u0027t exactly fill out.",
      "range": {
        "startLine": 104,
        "startChar": 5,
        "endLine": 105,
        "endChar": 16
      },
      "revId": "5a60629170fcca916b4ecb85154af725861e41e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73bebbf2_20c24f08",
        "filename": "logd/CompressionEngine.cpp",
        "patchSetId": 5
      },
      "lineNbr": 105,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-06-11T00:12:45Z",
      "side": 1,
      "message": "Done.  I added a CHECK() to assert the size is the same.",
      "parentUuid": "fd239fd3_c10009c8",
      "range": {
        "startLine": 104,
        "startChar": 5,
        "endLine": 105,
        "endChar": 16
      },
      "revId": "5a60629170fcca916b4ecb85154af725861e41e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a83a628_dce53bdf",
        "filename": "logd/CompressionEngine.h",
        "patchSetId": 5
      },
      "lineNbr": 27,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2020-06-10T20:44:01Z",
      "side": 1,
      "message": "Instead of passing both a vector reference and a size, use std::span\u003cconst uint8_t\u003e or std::string_view instead?",
      "range": {
        "startLine": 27,
        "startChar": 26,
        "endLine": 27,
        "endChar": 72
      },
      "revId": "5a60629170fcca916b4ecb85154af725861e41e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "346a19ed_3b5b5a24",
        "filename": "logd/CompressionEngine.h",
        "patchSetId": 5
      },
      "lineNbr": 27,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-06-11T00:12:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0a83a628_dce53bdf",
      "range": {
        "startLine": 27,
        "startChar": 26,
        "endLine": 27,
        "endChar": 72
      },
      "revId": "5a60629170fcca916b4ecb85154af725861e41e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de4922a4_e9f9d3e8",
        "filename": "logd/SerializedFlushToState.cpp",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2020-06-10T20:44:01Z",
      "side": 1,
      "message": "nit: preincrement/decrement",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 48,
        "endChar": 13
      },
      "revId": "5a60629170fcca916b4ecb85154af725861e41e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0bdd7f4d_5d602314",
        "filename": "logd/SerializedFlushToState.cpp",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-06-11T00:12:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "de4922a4_e9f9d3e8",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 48,
        "endChar": 13
      },
      "revId": "5a60629170fcca916b4ecb85154af725861e41e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b266c8a6_20981288",
        "filename": "logd/SerializedFlushToState.cpp",
        "patchSetId": 5
      },
      "lineNbr": 83,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2020-06-10T20:44:01Z",
      "side": 1,
      "message": "nit: preincrement",
      "range": {
        "startLine": 83,
        "startChar": 0,
        "endLine": 83,
        "endChar": 24
      },
      "revId": "5a60629170fcca916b4ecb85154af725861e41e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef144039_6c48eaaf",
        "filename": "logd/SerializedFlushToState.cpp",
        "patchSetId": 5
      },
      "lineNbr": 83,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-06-11T00:12:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b266c8a6_20981288",
      "range": {
        "startLine": 83,
        "startChar": 0,
        "endLine": 83,
        "endChar": 24
      },
      "revId": "5a60629170fcca916b4ecb85154af725861e41e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fb7e8c8_ab5d42ef",
        "filename": "logd/SerializedLogBuffer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 83,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2020-06-10T20:44:01Z",
      "side": 1,
      "message": "Is there any point in doing a relaxed increment when you immediately take the lock that guards everything afterwards?",
      "range": {
        "startLine": 81,
        "startChar": 0,
        "endLine": 83,
        "endChar": 44
      },
      "revId": "5a60629170fcca916b4ecb85154af725861e41e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d83bdbd0_7b3dcea6",
        "filename": "logd/SerializedLogBuffer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 83,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-06-11T00:12:45Z",
      "side": 1,
      "message": "Other threads can read this and I don\u0027t want them to have to take the lock to do so.",
      "parentUuid": "3fb7e8c8_ab5d42ef",
      "range": {
        "startLine": 81,
        "startChar": 0,
        "endLine": 83,
        "endChar": 44
      },
      "revId": "5a60629170fcca916b4ecb85154af725861e41e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8bac4ad_7b3eb60b",
        "filename": "logd/SerializedLogBuffer.h",
        "patchSetId": 5
      },
      "lineNbr": 64,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2020-06-10T20:44:01Z",
      "side": 1,
      "message": "Use thread safety annotations to mark what this guards?",
      "range": {
        "startLine": 63,
        "startChar": 52,
        "endLine": 64,
        "endChar": 26
      },
      "revId": "5a60629170fcca916b4ecb85154af725861e41e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2d8b525_c7e15672",
        "filename": "logd/SerializedLogBuffer.h",
        "patchSetId": 5
      },
      "lineNbr": 64,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-06-11T00:12:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f8bac4ad_7b3eb60b",
      "range": {
        "startLine": 63,
        "startChar": 52,
        "endLine": 64,
        "endChar": 26
      },
      "revId": "5a60629170fcca916b4ecb85154af725861e41e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfc4d941_912e0f46",
        "filename": "logd/SerializedLogChunk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 1079148
      },
      "writtenOn": "2020-06-10T20:44:01Z",
      "side": 1,
      "message": "It seems like this might be prone to storms of unneeded decompress/compress cycles. e.g. if you have N readers, and a writer writes two whole chunks before the readers get to read, could that potentially lead to each of the readers decompressing and then immediately recompressing the chunk?",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 40,
        "endChar": 1
      },
      "revId": "5a60629170fcca916b4ecb85154af725861e41e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b67fe30_73c8ea6b",
        "filename": "logd/SerializedLogChunk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2020-06-11T00:12:45Z",
      "side": 1,
      "message": "Potentially.  I\u0027ll add a TODO to handle this in later, but I think this is okay for an initial commit.\n\nIn the \u0027good\u0027 case where the reader(s) are within a block of the writer, this works well; the writer decrements the ref count but no compression happens until the reader(s) decrement the ref count to 0.\n\nMy longer term plan, once the rest of this is working, is to send the compressed logs as is to readers.  This should be an overall win.",
      "parentUuid": "bfc4d941_912e0f46",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 40,
        "endChar": 1
      },
      "revId": "5a60629170fcca916b4ecb85154af725861e41e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}