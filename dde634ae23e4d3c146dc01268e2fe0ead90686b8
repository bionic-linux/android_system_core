{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7e452477_9814d3dc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2021-08-03T02:04:23Z",
      "side": 1,
      "message": "Rebase with ToT",
      "revId": "dde634ae23e4d3c146dc01268e2fe0ead90686b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "feb42be3_f95fc3dc",
        "filename": "fs_mgr/libdm/dm.cpp",
        "patchSetId": 7
      },
      "lineNbr": 662,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2021-08-03T04:07:35Z",
      "side": 1,
      "message": "Okay, I see now that this code is identical to update_verifier - let\u0027s remove it from there once this lands. Especially since you\u0027ve fixed a memory leak that exists in the verifier version. If we ever refactor this it\u0027d be nice to try out std::filesystem.",
      "revId": "dde634ae23e4d3c146dc01268e2fe0ead90686b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf53bb0d_5273142a",
        "filename": "fs_mgr/libsnapshot/snapuserd/Android.bp",
        "patchSetId": 7
      },
      "lineNbr": 81,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2021-08-03T04:07:35Z",
      "side": 1,
      "message": "accidental hard tab?",
      "revId": "dde634ae23e4d3c146dc01268e2fe0ead90686b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9c446580_63137b88",
        "filename": "fs_mgr/libsnapshot/snapuserd/Android.bp",
        "patchSetId": 7
      },
      "lineNbr": 81,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2021-08-03T09:07:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bf53bb0d_5273142a",
      "revId": "dde634ae23e4d3c146dc01268e2fe0ead90686b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0cf6194_d0c0c89e",
        "filename": "fs_mgr/libsnapshot/snapuserd/Android.bp",
        "patchSetId": 7
      },
      "lineNbr": 125,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2021-08-03T04:07:35Z",
      "side": 1,
      "message": "ditto",
      "revId": "dde634ae23e4d3c146dc01268e2fe0ead90686b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6f8800d0_8d341093",
        "filename": "fs_mgr/libsnapshot/snapuserd/Android.bp",
        "patchSetId": 7
      },
      "lineNbr": 125,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2021-08-03T09:07:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a0cf6194_d0c0c89e",
      "revId": "dde634ae23e4d3c146dc01268e2fe0ead90686b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e8bc048_594951b8",
        "filename": "fs_mgr/libsnapshot/snapuserd/snapuserd.cpp",
        "patchSetId": 7
      },
      "lineNbr": 678,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2021-08-03T04:07:35Z",
      "side": 1,
      "message": "SNAP_PLOG",
      "revId": "dde634ae23e4d3c146dc01268e2fe0ead90686b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ccd7304b_eec5c09a",
        "filename": "fs_mgr/libsnapshot/snapuserd/snapuserd.cpp",
        "patchSetId": 7
      },
      "lineNbr": 678,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2021-08-03T09:07:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7e8bc048_594951b8",
      "revId": "dde634ae23e4d3c146dc01268e2fe0ead90686b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "647ec64f_608dcf3c",
        "filename": "fs_mgr/libsnapshot/snapuserd/snapuserd.cpp",
        "patchSetId": 7
      },
      "lineNbr": 684,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2021-08-03T04:07:35Z",
      "side": 1,
      "message": "Can we add a comment about the rationale behind 1024? Is it something that might differ across devices?\n\nRelatedly, do we expect this to have any adverse effects on low-memory devices?",
      "revId": "dde634ae23e4d3c146dc01268e2fe0ead90686b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d205e15b_4879174c",
        "filename": "fs_mgr/libsnapshot/snapuserd/snapuserd.cpp",
        "patchSetId": 7
      },
      "lineNbr": 684,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2021-08-03T06:16:23Z",
      "side": 1,
      "message": "\u003e Can we add a comment about the rationale behind 1024? Is it something that might differ across devices?\n\nWell, the primary reason to pick 4M is because the current update_verifier uses 4M as the read size. That said, when I integrate the io_uring API\u0027s, I will experiment with the rith I/O size. For now, this is in sync with update_verifier code.\n\n\n\u003e Relatedly, do we expect this to have any adverse effects on low-memory devices?\n\nI did think about this; there shouldn\u0027t be any issue. On low memory systems, pages will get thrashed out if the sum of all partition size is greater than the memory which is mostly on \u003c 2GB devices. One way to address this is to read blocks only from the largest partition which is just fits into memory. I didn\u0027t do that as it requires a little more effort. Let me know if it is worth the effort, I will think through and will try to optimize in a follow up check-in.",
      "parentUuid": "647ec64f_608dcf3c",
      "revId": "dde634ae23e4d3c146dc01268e2fe0ead90686b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "085a7511_cc5b90b1",
        "filename": "fs_mgr/libsnapshot/snapuserd/snapuserd.cpp",
        "patchSetId": 7
      },
      "lineNbr": 684,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2021-08-03T17:15:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d205e15b_4879174c",
      "revId": "dde634ae23e4d3c146dc01268e2fe0ead90686b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d7e417d_00abbd09",
        "filename": "fs_mgr/libsnapshot/snapuserd/snapuserd.cpp",
        "patchSetId": 7
      },
      "lineNbr": 691,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2021-08-03T04:07:35Z",
      "side": 1,
      "message": "SNAP_PLOG",
      "revId": "dde634ae23e4d3c146dc01268e2fe0ead90686b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40af10bd_6ea3b006",
        "filename": "fs_mgr/libsnapshot/snapuserd/snapuserd.cpp",
        "patchSetId": 7
      },
      "lineNbr": 691,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2021-08-03T09:07:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3d7e417d_00abbd09",
      "revId": "dde634ae23e4d3c146dc01268e2fe0ead90686b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f62a03e_0a0d8950",
        "filename": "fs_mgr/libsnapshot/snapuserd/snapuserd.cpp",
        "patchSetId": 7
      },
      "lineNbr": 701,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2021-08-03T04:07:35Z",
      "side": 1,
      "message": "SNAP_LOG",
      "revId": "dde634ae23e4d3c146dc01268e2fe0ead90686b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bdccee73_bc9570b9",
        "filename": "fs_mgr/libsnapshot/snapuserd/snapuserd.cpp",
        "patchSetId": 7
      },
      "lineNbr": 701,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2021-08-03T09:07:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4f62a03e_0a0d8950",
      "revId": "dde634ae23e4d3c146dc01268e2fe0ead90686b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7dfcf251_d7f52f6b",
        "filename": "fs_mgr/libsnapshot/snapuserd/snapuserd.cpp",
        "patchSetId": 7
      },
      "lineNbr": 706,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2021-08-03T04:07:35Z",
      "side": 1,
      "message": "SNAP_LOG",
      "revId": "dde634ae23e4d3c146dc01268e2fe0ead90686b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb7aa164_95aa9ee2",
        "filename": "fs_mgr/libsnapshot/snapuserd/snapuserd.cpp",
        "patchSetId": 7
      },
      "lineNbr": 706,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2021-08-03T09:07:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7dfcf251_d7f52f6b",
      "revId": "dde634ae23e4d3c146dc01268e2fe0ead90686b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc261569_61e7fb3f",
        "filename": "fs_mgr/libsnapshot/snapuserd/snapuserd.cpp",
        "patchSetId": 7
      },
      "lineNbr": 712,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2021-08-03T04:07:35Z",
      "side": 1,
      "message": "SNAP_LOG",
      "revId": "dde634ae23e4d3c146dc01268e2fe0ead90686b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "39d2d678_7e022158",
        "filename": "fs_mgr/libsnapshot/snapuserd/snapuserd.cpp",
        "patchSetId": 7
      },
      "lineNbr": 712,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2021-08-03T09:07:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fc261569_61e7fb3f",
      "revId": "dde634ae23e4d3c146dc01268e2fe0ead90686b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "358bcd79_4c061ac9",
        "filename": "fs_mgr/libsnapshot/snapuserd/snapuserd.cpp",
        "patchSetId": 7
      },
      "lineNbr": 775,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2021-08-03T04:07:35Z",
      "side": 1,
      "message": "Thinking about this again.. the property service isn\u0027t online during the selinux stage of init, so the value will always be empty, and we\u0027ll readahead every time we boot with snapshots.\n\nIf that\u0027s the intent, can we drop the property check altogether? I\u0027m a little worried it could race with __system_properties_init. To limit readhead only to current slot partitions, we could check against fs_mgr_get_slot_suffix().",
      "revId": "dde634ae23e4d3c146dc01268e2fe0ead90686b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46c90599_2d513992",
        "filename": "fs_mgr/libsnapshot/snapuserd/snapuserd.cpp",
        "patchSetId": 7
      },
      "lineNbr": 775,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2021-08-03T06:16:23Z",
      "side": 1,
      "message": "\u003e To limit readhead only to current slot partitions, we could check against fs_mgr_get_slot_suffix().\n\nWhy do we need this explicit check ? If the device falls back to old slot, daemon should never spin up and hence this code will never execute.",
      "parentUuid": "358bcd79_4c061ac9",
      "revId": "dde634ae23e4d3c146dc01268e2fe0ead90686b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8cf3e53_01b39b5d",
        "filename": "fs_mgr/libsnapshot/snapuserd/snapuserd.cpp",
        "patchSetId": 7
      },
      "lineNbr": 775,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2021-08-03T17:15:31Z",
      "side": 1,
      "message": "Do we want to readahead when doing the postinstall step on the source slot?",
      "parentUuid": "46c90599_2d513992",
      "revId": "dde634ae23e4d3c146dc01268e2fe0ead90686b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9e8ee39_b0b2cc3b",
        "filename": "fs_mgr/libsnapshot/snapuserd/snapuserd.cpp",
        "patchSetId": 7
      },
      "lineNbr": 775,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2021-08-03T17:26:48Z",
      "side": 1,
      "message": "We shouldn\u0027t be reading during postinstall phase. The current check will make sure it does not:\n\n    if (android::base::EndsWith(misc_name_, \"-init\") || is_socket_present_) {\n        second_stage_init \u003d false;\n    }\n    \n\"is_socket_present_\" will be \"true\" during post-install phase; or am i missing something here ?",
      "parentUuid": "e8cf3e53_01b39b5d",
      "revId": "dde634ae23e4d3c146dc01268e2fe0ead90686b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5a208f10_0eb93a4b",
        "filename": "fs_mgr/libsnapshot/snapuserd/snapuserd.cpp",
        "patchSetId": 7
      },
      "lineNbr": 775,
      "author": {
        "id": 1724998
      },
      "writtenOn": "2021-08-05T03:01:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b9e8ee39_b0b2cc3b",
      "revId": "dde634ae23e4d3c146dc01268e2fe0ead90686b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}