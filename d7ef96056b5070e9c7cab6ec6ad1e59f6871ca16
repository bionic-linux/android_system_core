{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "dbebed7f_d3d053a6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-08T17:33:02Z",
      "side": 1,
      "message": "at a higher level, are we too deep in the weeds here? is there actually a _good_ way to do something ashmem-like on Windows, and we should just have a different Windows implementation and rename \"host\" to \"unix\"?\n\n(actually, why is the unix one still messing around with temporary files? shouldn\u0027t this have been moved to memfd already?!)",
      "revId": "d7ef96056b5070e9c7cab6ec6ad1e59f6871ca16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3ff826d_b85b4ae5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1396566
      },
      "writtenOn": "2024-03-08T18:26:50Z",
      "side": 1,
      "message": "I have spent a lot of time looking for the best possible Windows implementation, and temp file seems to be the best option, due to the constraint that the return value has to be an `int fd`. Let me know if you know of a better option.\n\n\u003e shouldn\u0027t this have been moved to memfd already\n\nMaybe, I\u0027d be happy to open a new CL for this, but that is outside the scope of this CL, which adds an implementation for Windows.",
      "parentUuid": "dbebed7f_d3d053a6",
      "revId": "d7ef96056b5070e9c7cab6ec6ad1e59f6871ca16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7629d0b2_f2ecb842",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1396566
      },
      "writtenOn": "2024-03-08T18:30:31Z",
      "side": 1,
      "message": "Just to expand on this, in Windows, it is possible to create a HANDLE to shared memory using:\n\n   HANDLE mapFile \u003d CreateFileMapping(\n          INVALID_HANDLE_VALUE,    // uses the paging file, not disk backed\n   ...\n   )\n   \nThe problem is that converting it to an int fd does not work:\n\nint fd \u003d _open_osfhandle((intptr_t) mapFile, _O_RDWR); // fails\n\n\nSo this is why a disk-backed temp file seems to be the best option.",
      "parentUuid": "d3ff826d_b85b4ae5",
      "revId": "d7ef96056b5070e9c7cab6ec6ad1e59f6871ca16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf34311c_54796789",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-08T18:57:59Z",
      "side": 1,
      "message": "\u003e So this is why a disk-backed temp file seems to be the best option.\n\nyeah, i feared you might say that. especially since _you_ (\"the windows guy\") didn\u0027t know that and had to check, that\u0027s probably worth a code comment :-)",
      "parentUuid": "7629d0b2_f2ecb842",
      "revId": "d7ef96056b5070e9c7cab6ec6ad1e59f6871ca16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ae8158a8_18e27df4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1396566
      },
      "writtenOn": "2024-03-08T19:52:33Z",
      "side": 1,
      "message": "Added a code comment at the top-level.",
      "parentUuid": "bf34311c_54796789",
      "revId": "d7ef96056b5070e9c7cab6ec6ad1e59f6871ca16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51bb1693_4a645355",
        "filename": "libcutils/ashmem-host.cpp",
        "patchSetId": 11
      },
      "lineNbr": 54,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-08T17:33:02Z",
      "side": 1,
      "message": "!defined()",
      "range": {
        "startLine": 54,
        "startChar": 1,
        "endLine": 54,
        "endChar": 7
      },
      "revId": "d7ef96056b5070e9c7cab6ec6ad1e59f6871ca16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8fd5a23_03431f8b",
        "filename": "libcutils/ashmem-host.cpp",
        "patchSetId": 11
      },
      "lineNbr": 54,
      "author": {
        "id": 1396566
      },
      "writtenOn": "2024-03-08T19:52:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "51bb1693_4a645355",
      "range": {
        "startLine": 54,
        "startChar": 1,
        "endLine": 54,
        "endChar": 7
      },
      "revId": "d7ef96056b5070e9c7cab6ec6ad1e59f6871ca16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fc3300a_898cb343",
        "filename": "libcutils/ashmem-host.cpp",
        "patchSetId": 11
      },
      "lineNbr": 55,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-08T17:33:02Z",
      "side": 1,
      "message": "this is probably less unclear _before_ the #if\n\nbut probably best to redo all the comments as\n```\n// Check if this is an ashmem region.\n// Since there\u0027s no such thing on the host, we can\u0027t actually implement that.\n// Check that it\u0027s at least a regular file...\n```\nand\n```\n// And on Linux, check that the file doesn\u0027t have a name.\n```",
      "revId": "d7ef96056b5070e9c7cab6ec6ad1e59f6871ca16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "63d35167_e084aef0",
        "filename": "libcutils/ashmem-host.cpp",
        "patchSetId": 11
      },
      "lineNbr": 55,
      "author": {
        "id": 1396566
      },
      "writtenOn": "2024-03-08T19:52:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7fc3300a_898cb343",
      "revId": "d7ef96056b5070e9c7cab6ec6ad1e59f6871ca16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33d49f5f_86ac68f1",
        "filename": "libcutils/ashmem-host.cpp",
        "patchSetId": 11
      },
      "lineNbr": 71,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-08T17:33:02Z",
      "side": 1,
      "message": "this seems a bit worse than my tmpfile()+fileno() suggestion? if only in that we could actually _improve_ the ashmem_validate_stat() heuristic for linux with that (by checking the flags in /proc/pid/fdinfo/fd for O_TMPFILE). plus this is subtle enough to have needed a comment. (ashmem_valid() or ashmem_validate_stat() would actually fail in this function because the destructor hasn\u0027t been called yet, so the unlink() hasn\u0027t happened...)\n\ndoes mingw tmpfile() not do the right thing? or is mingw\u0027s fileno() broken?",
      "revId": "d7ef96056b5070e9c7cab6ec6ad1e59f6871ca16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9f3a24b_9b2c7a41",
        "filename": "libcutils/ashmem-host.cpp",
        "patchSetId": 11
      },
      "lineNbr": 71,
      "author": {
        "id": 1396566
      },
      "writtenOn": "2024-03-08T18:18:59Z",
      "side": 1,
      "message": "If you use `tmpfile` and `fileno`, how do you call `unlink(char *path)` in a cross-platform way? With mkstemp you get the file path, which can subsequently be unlinked.",
      "parentUuid": "33d49f5f_86ac68f1",
      "revId": "d7ef96056b5070e9c7cab6ec6ad1e59f6871ca16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "defbaffd_5d949fa6",
        "filename": "libcutils/ashmem-host.cpp",
        "patchSetId": 11
      },
      "lineNbr": 71,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-08T18:57:59Z",
      "side": 1,
      "message": "you read the docs for tmpfile() and delete the unlink() :-)\n\nafter the good news about linux:\n\u003e On some implementations (e.g. older Linux), this function actually creates, opens, and immediately deletes the file from the file system: as long as an open file descriptor to a deleted file is held by a program, the file exists, but since it was deleted, its name does not appear in any directory, so that no other process can open it. Once the file descriptor is closed, or once the program terminates (normally or abnormally), the space occupied by the file is reclaimed by the filesystem. Newer Linux (since 3.11 or later, depending on filesystem) creates such invisible temporary files in one step, via special flag in the open() syscall.\n\nhttps://en.cppreference.com/w/c/io/tmpfile also has:\n\u003e On some implementations (e.g. Windows), elevated privileges are required as the function may create the temporary file in a system directory.\n\nthat \"may\" is doing some heavy lifting though, and -- pun intended -- may not be relevant to us.",
      "parentUuid": "e9f3a24b_9b2c7a41",
      "revId": "d7ef96056b5070e9c7cab6ec6ad1e59f6871ca16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a77ad09c_fb424c7b",
        "filename": "libcutils/ashmem-host.cpp",
        "patchSetId": 11
      },
      "lineNbr": 71,
      "author": {
        "id": 1396566
      },
      "writtenOn": "2024-03-08T19:52:33Z",
      "side": 1,
      "message": "Ah, great suggestion, I did not catch that it is removed automatically. This is great!",
      "parentUuid": "defbaffd_5d949fa6",
      "revId": "d7ef96056b5070e9c7cab6ec6ad1e59f6871ca16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c92b3d50_30006ec0",
        "filename": "libcutils/ashmem_base_test.cpp",
        "patchSetId": 11
      },
      "lineNbr": 46,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-08T17:33:02Z",
      "side": 1,
      "message": "i still don\u0027t really get the point of what this is supposed to be testing...",
      "revId": "d7ef96056b5070e9c7cab6ec6ad1e59f6871ca16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b996a15_9630f827",
        "filename": "libcutils/ashmem_base_test.cpp",
        "patchSetId": 11
      },
      "lineNbr": 46,
      "author": {
        "id": 1396566
      },
      "writtenOn": "2024-03-08T18:26:50Z",
      "side": 1,
      "message": "It is testing ashmem_create_region returns a valid pointer and data can be written to that pointer. It is similar to https://cs.android.com/android/platform/superproject/+/master:system/core/libcutils/ashmem_test.cpp;l\u003d70-90?q\u003dashmem_test.cpp.",
      "parentUuid": "c92b3d50_30006ec0",
      "revId": "d7ef96056b5070e9c7cab6ec6ad1e59f6871ca16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88fb1926_cbb104f4",
        "filename": "libcutils/ashmem_base_test.cpp",
        "patchSetId": 11
      },
      "lineNbr": 46,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-08T18:57:59Z",
      "side": 1,
      "message": "yeah, i don\u0027t think smoreland meant _duplicate_ a test --- i think he literally meant _share_ whatever tests work on both...",
      "parentUuid": "0b996a15_9630f827",
      "revId": "d7ef96056b5070e9c7cab6ec6ad1e59f6871ca16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8ef0b22_b6dc2853",
        "filename": "libcutils/ashmem_base_test.cpp",
        "patchSetId": 11
      },
      "lineNbr": 46,
      "author": {
        "id": 1396566
      },
      "writtenOn": "2024-03-08T19:16:06Z",
      "side": 1,
      "message": "The problem is that ashmem_test.cpp is highly Unix-specific, e.g. there are calls to `ASSERT_EQ(FD_CLOEXEC, (fcntl(fd, F_GETFD) \u0026 FD_CLOEXEC));`, `mmap`, `munmap`, etc. Sharing these tests will require a lot of ifdefs for different host platforms. Isn\u0027t it overall cleaner to create a basic test that does not require the use of ifdefs, even if there is some overlap in test functionality?",
      "parentUuid": "88fb1926_cbb104f4",
      "revId": "d7ef96056b5070e9c7cab6ec6ad1e59f6871ca16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72e5e419_6960f5fa",
        "filename": "libcutils/ashmem_base_test.cpp",
        "patchSetId": 11
      },
      "lineNbr": 46,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-08T19:50:14Z",
      "side": 1,
      "message": "duplication is rarely a good idea.\n\nand we ought to be testing all the stuff that we\u0027re intending to _use_ for Windows.\n\ni\u0027d be fine just dropping the munmap() calls, since they\u0027ll be cleaned up on exit anyway. (libcutils_test should probably be `isolated: true` too!)",
      "parentUuid": "d8ef0b22_b6dc2853",
      "revId": "d7ef96056b5070e9c7cab6ec6ad1e59f6871ca16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62646abb_01efe964",
        "filename": "libcutils/ashmem_base_test.cpp",
        "patchSetId": 11
      },
      "lineNbr": 46,
      "author": {
        "id": 1396566
      },
      "writtenOn": "2024-03-08T21:25:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "72e5e419_6960f5fa",
      "revId": "d7ef96056b5070e9c7cab6ec6ad1e59f6871ca16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06fdd51b_a63bf210",
        "filename": "libcutils/ashmem_base_test.cpp",
        "patchSetId": 11
      },
      "lineNbr": 49,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2024-03-08T17:33:02Z",
      "side": 1,
      "message": "why don\u0027t you just use the default? (since this _is_ the default!)",
      "revId": "d7ef96056b5070e9c7cab6ec6ad1e59f6871ca16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8395bbee_1e4cdeac",
        "filename": "libcutils/ashmem_base_test.cpp",
        "patchSetId": 11
      },
      "lineNbr": 49,
      "author": {
        "id": 1396566
      },
      "writtenOn": "2024-03-08T19:52:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "06fdd51b_a63bf210",
      "revId": "d7ef96056b5070e9c7cab6ec6ad1e59f6871ca16",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}