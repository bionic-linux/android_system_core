{
  "comments": [
    {
      "key": {
        "uuid": "f6af5630_8c2cf91a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 18,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-02-13T17:44:48Z",
      "side": 1,
      "message": "The slash should be optional (enforced), or is there a reason someone needs to do something like /dev/cpuset-foo/system/background with -foo/system/background?\n\nSeems rife for possible abuse?\n\nrelative paths allowed?",
      "range": {
        "startLine": 18,
        "startChar": 15,
        "endLine": 18,
        "endChar": 16
      },
      "revId": "67f6a7f297cb23cd29fdaeb7e9e0fc2f043fd0c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a934afe7_0a057b81",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 18,
      "author": {
        "id": 1076863
      },
      "writtenOn": "2017-02-14T00:06:55Z",
      "side": 1,
      "message": "Yes, the / is not necessary here. We never concatenate paths. Instead, it\u0027s being open with openat() and we prepend ./ to the provided path.\n\nThe main reason why leading / is there is for consistency with the case where root cpuset needs to be used, so the subpath would have to be empty. So, people can use \"cpuset /\" for that case. And once using \"/\" there, we might as well use it everywhere. One can make an argument that the paths is rooted at /dev/cpuset, so \"/\" indicates that mount point and everything else is a descendant.",
      "parentUuid": "f6af5630_8c2cf91a",
      "range": {
        "startLine": 18,
        "startChar": 15,
        "endLine": 18,
        "endChar": 16
      },
      "revId": "67f6a7f297cb23cd29fdaeb7e9e0fc2f043fd0c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "726d8298_94ac9172",
        "filename": "init/README.md",
        "patchSetId": 7
      },
      "lineNbr": 211,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-02-13T17:44:48Z",
      "side": 1,
      "message": "superfluous (in part because the detail is that you can not tell difference between not set, or set to empty).",
      "range": {
        "startLine": 211,
        "startChar": 6,
        "endLine": 211,
        "endChar": 14
      },
      "revId": "67f6a7f297cb23cd29fdaeb7e9e0fc2f043fd0c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9eff3cf1_0601c04e",
        "filename": "init/service.cpp",
        "patchSetId": 7
      },
      "lineNbr": 552,
      "author": {
        "id": 1076863
      },
      "writtenOn": "2017-02-14T00:13:15Z",
      "side": 1,
      "message": "So, the original suggestion (posted here https://googleplex-android-review.git.corp.google.com/#/c/1811300/6/init/service.cpp@835 by jorgelo@) of opening /dev/cpuset during parsing and fail the parse if the path specified is incorrect doesn\u0027t really work. The .rc files are parsed first and only then executed, which means all the initialization including file system mounting happens after all the files are parsed.\n\nAs such, we can\u0027t open /dev/cpuset at parse time since they don\u0027t exist yet (it\u0027s too early in boot process).\n\nWill have to revert some of this code...",
      "range": {
        "startLine": 518,
        "startChar": 0,
        "endLine": 552,
        "endChar": 5
      },
      "revId": "67f6a7f297cb23cd29fdaeb7e9e0fc2f043fd0c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}