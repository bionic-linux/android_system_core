{
  "comments": [
    {
      "key": {
        "uuid": "28046895_f3a32e35",
        "filename": "init/init.cpp",
        "patchSetId": 3
      },
      "lineNbr": 134,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-05-02T02:10:39Z",
      "side": 1,
      "message": "Ultra-nit #2: do we want unordered_map?",
      "range": {
        "startLine": 134,
        "startChar": 12,
        "endLine": 134,
        "endChar": 15
      },
      "revId": "2d458f0e0163f98888c7687d3c6bb9f45a8c725f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c666e277_4a9f6622",
        "filename": "init/init.cpp",
        "patchSetId": 3
      },
      "lineNbr": 134,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-05-02T02:18:10Z",
      "side": 1,
      "message": "I depend on the iterators not being invalidated on subsequent additions/deletions so I don\u0027t need to wrap the function in unique_ptr.  I\u0027ve got that commented below.",
      "parentUuid": "28046895_f3a32e35",
      "range": {
        "startLine": 134,
        "startChar": 12,
        "endLine": 134,
        "endChar": 15
      },
      "revId": "2d458f0e0163f98888c7687d3c6bb9f45a8c725f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4eab7b1a_1ce2e637",
        "filename": "init/init.cpp",
        "patchSetId": 3
      },
      "lineNbr": 134,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-05-02T02:21:45Z",
      "side": 1,
      "message": "Sure. We could look up the function by FD instead I guess. But this is fine. (Maybe \"// Use map for iterator stability\"?)",
      "parentUuid": "c666e277_4a9f6622",
      "range": {
        "startLine": 134,
        "startChar": 12,
        "endLine": 134,
        "endChar": 15
      },
      "revId": "2d458f0e0163f98888c7687d3c6bb9f45a8c725f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d655f7dd_06773955",
        "filename": "init/init.cpp",
        "patchSetId": 3
      },
      "lineNbr": 134,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-05-02T02:24:56Z",
      "side": 1,
      "message": "I figure the comment is better next to where I actually depend on the iterator remaining constant.\n\nI didn\u0027t want to do the look up by FD since that\u0027ll add (a trivial amount of) overheard to each of these calls.",
      "parentUuid": "4eab7b1a_1ce2e637",
      "range": {
        "startLine": 134,
        "startChar": 12,
        "endLine": 134,
        "endChar": 15
      },
      "revId": "2d458f0e0163f98888c7687d3c6bb9f45a8c725f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a93e8349_a9bccd3e",
        "filename": "init/init.cpp",
        "patchSetId": 3
      },
      "lineNbr": 134,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-05-02T02:28:42Z",
      "side": 1,
      "message": "Another option, even simpler, might be a big std::vector\u003cstd::function\u003cvoid()\u003e\u003e; just use the fd to index into the array. The FD set is dense, so you wouldn\u0027t waste much space. And you wouldn\u0027t have to redundantly store the FD numbers, since the FD would be implicit in the position. (Or a std::vector\u003cunique_ptr\u003cstd::function\u003cvoid()\u003e\u003e\u003e to make the array smaller and keep std::function memory stability.)\n\nBut just to be clear: there are lots of ways of doing this thing. This one is fine.",
      "parentUuid": "d655f7dd_06773955",
      "range": {
        "startLine": 134,
        "startChar": 12,
        "endLine": 134,
        "endChar": 15
      },
      "revId": "2d458f0e0163f98888c7687d3c6bb9f45a8c725f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10ffebef_52ffa92c",
        "filename": "init/init.cpp",
        "patchSetId": 3
      },
      "lineNbr": 832,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-05-02T02:10:39Z",
      "side": 1,
      "message": "Out of curiosity: why bother with std::invoke here? I\u0027d have reached for making a named std::function\u003cvoid()\u003e\u0026 and just calling through that with the usual syntax.",
      "range": {
        "startLine": 832,
        "startChar": 12,
        "endLine": 832,
        "endChar": 65
      },
      "revId": "2d458f0e0163f98888c7687d3c6bb9f45a8c725f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12e465c9_4792b657",
        "filename": "init/init.cpp",
        "patchSetId": 3
      },
      "lineNbr": 832,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-05-02T02:18:10Z",
      "side": 1,
      "message": "I\u0027ve gotten into the habit of using std::invoke since it makes the intent clear to me.  I can drop it if everyone\u0027s against it here.",
      "parentUuid": "10ffebef_52ffa92c",
      "range": {
        "startLine": 832,
        "startChar": 12,
        "endLine": 832,
        "endChar": 65
      },
      "revId": "2d458f0e0163f98888c7687d3c6bb9f45a8c725f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55c73407_1e3df5e3",
        "filename": "init/init.cpp",
        "patchSetId": 3
      },
      "lineNbr": 832,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-05-02T02:21:45Z",
      "side": 1,
      "message": "I\u0027m not for or against it --- I was just curious.",
      "parentUuid": "12e465c9_4792b657",
      "range": {
        "startLine": 832,
        "startChar": 12,
        "endLine": 832,
        "endChar": 65
      },
      "revId": "2d458f0e0163f98888c7687d3c6bb9f45a8c725f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a54b1470_9d75e2de",
        "filename": "init/init.h",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-05-02T02:10:39Z",
      "side": 1,
      "message": "Ultra-nit: do we want to add a TODO to change this to std::unique_function when it\u0027s available?",
      "range": {
        "startLine": 46,
        "startChar": 41,
        "endLine": 46,
        "endChar": 49
      },
      "revId": "2d458f0e0163f98888c7687d3c6bb9f45a8c725f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad9cf9ca_37883c5b",
        "filename": "init/init.h",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-05-02T02:18:10Z",
      "side": 1,
      "message": "Is that even in C++2a?  Probably better to not have a TODO unless there\u0027s a line of sight on fixing it.  We\u0027ll be able to search for std::function once it\u0027s available anyway.",
      "parentUuid": "a54b1470_9d75e2de",
      "range": {
        "startLine": 46,
        "startChar": 41,
        "endLine": 46,
        "endChar": 49
      },
      "revId": "2d458f0e0163f98888c7687d3c6bb9f45a8c725f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2da9ba21_8c34a3f3",
        "filename": "init/init.h",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1130394
      },
      "writtenOn": "2018-05-02T02:21:45Z",
      "side": 1,
      "message": "Based on some internal conversations over in the C++ channel, I think it\u0027s going to be in 2a. But yeah, we can just look for opportunities to switch when unique_function arrives.",
      "parentUuid": "ad9cf9ca_37883c5b",
      "range": {
        "startLine": 46,
        "startChar": 41,
        "endLine": 46,
        "endChar": 49
      },
      "revId": "2d458f0e0163f98888c7687d3c6bb9f45a8c725f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}