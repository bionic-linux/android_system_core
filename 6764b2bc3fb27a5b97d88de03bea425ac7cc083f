{
  "comments": [
    {
      "key": {
        "uuid": "80d102b1_5a0478d7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 10,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-08-13T20:23:45Z",
      "side": 1,
      "message": "Shouldn\u0027t this be \u0027maxfree\u0027 ?\n\n1% \u0027minfree\u0027 would mean \"enable this for devices with 1% or more free space\" 1% \u0027max\u0027 free would mean \"enable this for devices with at most 1% free space\"  It\u0027s the latter that we want, right?",
      "range": {
        "startLine": 10,
        "startChar": 41,
        "endLine": 10,
        "endChar": 48
      },
      "revId": "6764b2bc3fb27a5b97d88de03bea425ac7cc083f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b81a06b_b607f8f8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 10,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-08-13T21:32:12Z",
      "side": 1,
      "message": "agreed",
      "parentUuid": "80d102b1_5a0478d7",
      "range": {
        "startLine": 10,
        "startChar": 41,
        "endLine": 10,
        "endChar": 48
      },
      "revId": "6764b2bc3fb27a5b97d88de03bea425ac7cc083f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d0b9369_fdaded55",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 17,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-08-13T20:23:45Z",
      "side": 1,
      "message": "than",
      "range": {
        "startLine": 17,
        "startChar": 57,
        "endLine": 17,
        "endChar": 63
      },
      "revId": "6764b2bc3fb27a5b97d88de03bea425ac7cc083f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6dab0334_97072586",
        "filename": "fs_mgr/README.property.md",
        "patchSetId": 17
      },
      "lineNbr": 16,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-08-13T20:23:45Z",
      "side": 1,
      "message": "parameter",
      "range": {
        "startLine": 16,
        "startChar": 49,
        "endLine": 16,
        "endChar": 57
      },
      "revId": "6764b2bc3fb27a5b97d88de03bea425ac7cc083f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13fa8335_1d4ea027",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 17
      },
      "lineNbr": 72,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-08-13T20:23:45Z",
      "side": 1,
      "message": "You can check ro.persistent_properties.ready to be true directly.\n\nhttps://cs.corp.google.com/android/system/core/init/property_service.cpp?q\u003df:property_service.cpp\u0026sq\u003dpackage:%5Eandroid$\u0026dr\u0026l\u003d732",
      "revId": "6764b2bc3fb27a5b97d88de03bea425ac7cc083f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3430432f_ae6ff61c",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 17
      },
      "lineNbr": 72,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-08-13T21:32:12Z",
      "side": 1,
      "message": "Thanks, will switch and add the sepolicy in a separate CL we will depend upon. Too bad we don\u0027t have a similar signal to say that all product ro[.] properties have been read in and settled?\n\nThe one I suspect I can count on is !android::base::GetProperty(\"ro.debuggable\", \"\").empty(), what do you think?",
      "parentUuid": "13fa8335_1d4ea027",
      "revId": "6764b2bc3fb27a5b97d88de03bea425ac7cc083f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a129085_a9bc54ec",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 17
      },
      "lineNbr": 72,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-08-13T22:07:14Z",
      "side": 1,
      "message": "\u003e Too bad we don\u0027t have a similar signal to say that all product ro[.] properties have been read in and settled?\n\nProbably hard to do since ro. properties can be set from anywhere, not just the property files.  I do want to make it such that all property files are loaded before init starts running, as opposed to some of the properties being loaded at post-fs like they are now, but that is going to present all sorts of compatibility issues.\n\n\u003e The one I suspect I can count on is !android::base::GetProperty(\"ro.debuggable\", \"\").empty(), what do you think?\n\nI think it depends on where these properties end up.  ro.debuggable ends up in default.prop which is loaded before init scripts start executing.  If your properties end up in the set of default.prop files, that\u0027s fine, but also means it\u0027s defacto true for everything other than first stage mount.",
      "parentUuid": "3430432f_ae6ff61c",
      "revId": "6764b2bc3fb27a5b97d88de03bea425ac7cc083f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ec2ee26_9b9c7227",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 17
      },
      "lineNbr": 139,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-08-13T20:23:45Z",
      "side": 1,
      "message": "This is checked both before creating the upper/work dir and before mounting the overlayfs, right?  This seems slightly dangerous if so.  What if someone has files in their upper dir, then changes the property such that it would no longer have overlayfs applied; do you want to no longer mount the overlayfs?  That seems a bit counter-intuitive.  Its confusion is compounded by the fact that the property cannot be checked during first stage mount, so it\u0027ll only impact mounts done during mount_all.\n\nI\u0027m still generally of the opinion that the existence of the upper/work dir should be the only information we use to determine if we\u0027re going to mount or not.  This property can be used to indicate whether or not we\u0027re going to create the upper/work dir.",
      "revId": "6764b2bc3fb27a5b97d88de03bea425ac7cc083f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79643141_422fffcb",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 17
      },
      "lineNbr": 139,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-08-13T21:32:12Z",
      "side": 1,
      "message": "Sounds like I would need to remove the persist.* variant of the property as too controversial because of side-effects. I\u0027d prefer not.\n\nThe intent is that the only place persist.* checking for this would be active is in adb disable-verity and adb remount.\n\nI envisioned persist.* property possibly being set in a developer option where some checking could manage expectations, or by the developer that knows what he is doing, so it is an API. The main purpose of the persist property is to enable overlayfs when it otherwise would not be (eg: set to 100%). The alternative, when reducing the value, is as you say dangerous, and would _only_ have an effect on mount_all --late. I do not believe we have any devices currently that would cause a problem (not even Hikey which mounts /cache and /data in the same mount_all cycle).\n\nI think the only action I should take is to itemize caveats for the persist option in the README.md.",
      "parentUuid": "0ec2ee26_9b9c7227",
      "revId": "6764b2bc3fb27a5b97d88de03bea425ac7cc083f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6a1a661_100457b2",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 17
      },
      "lineNbr": 139,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-08-13T22:07:14Z",
      "side": 1,
      "message": "\u003e The intent is that the only place persist.* checking for this would be active is in adb disable-verity and adb remount.\n\nThen don\u0027t put it in this function, since this function is also called in fs_mgr_overlayfs_mount() ?  It would solve my issue with mount_all.  \n\nWhy wouldn\u0027t hikey be impacted by it?  I think it would be, since it does overlayfs in mount_all, right?\n\nAlternatively, since you\u0027re envisioning this as a dev option and I\u0027m figuring it should only impact the creation of the upper/work dirs, then what if this were an override to disable-verity?  It would put the choice directly at the command that creates these directories too for maximum clarity.",
      "parentUuid": "79643141_422fffcb",
      "revId": "6764b2bc3fb27a5b97d88de03bea425ac7cc083f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0852621e_62404017",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 17
      },
      "lineNbr": 139,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-08-14T14:59:10Z",
      "side": 1,
      "message": "Hikey: mount_all (which mounts /cache and /data) is before persist properties are settled.",
      "parentUuid": "b6a1a661_100457b2",
      "revId": "6764b2bc3fb27a5b97d88de03bea425ac7cc083f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "822942ae_b2633548",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 17
      },
      "lineNbr": 231,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-08-13T21:35:52Z",
      "side": 1,
      "message": "We could add a setup bool flag, that only checks this during setup, but skips this during mount_all to solve tomcherry@ concern about side effects from reducing the space free threshold.",
      "range": {
        "startLine": 231,
        "startChar": 4,
        "endLine": 231,
        "endChar": 55
      },
      "revId": "6764b2bc3fb27a5b97d88de03bea425ac7cc083f",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}