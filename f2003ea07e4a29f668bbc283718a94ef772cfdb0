{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "cf3837c9_62edcffd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-01-08T17:50:38Z",
      "side": 1,
      "message": "i guess my other point of confusion is that i thought char32_t was supposed to be unsigned?",
      "revId": "f2003ea07e4a29f668bbc283718a94ef772cfdb0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9ff4535_1494ef99",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1249117
      },
      "writtenOn": "2021-01-08T18:14:06Z",
      "side": 1,
      "message": "I was surprised - I\u0027ve never encountered a unsigned char type, but it is in fact unsigned. TIL [1] I\u0027ll fix it in PS3.\n\n[1] https://en.cppreference.com/w/cpp/language/types",
      "parentUuid": "cf3837c9_62edcffd",
      "revId": "f2003ea07e4a29f668bbc283718a94ef772cfdb0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0190250_5420a88b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2021-01-08T18:43:02Z",
      "side": 1,
      "message": "heh, even Java -- which really doesn\u0027t believe in unsigned types -- has an unsigned [16-bit] char.\n\nthe only place i\u0027ve come across *C*\u0027s `char` being unsigned is, funnily enough, ARM. the first ever porting problem i had in real life was trying to get code i\u0027d written at university to work on an Archimedes with an ARM2: https://developer.arm.com/documentation/den0013/d/Porting/Miscellaneous-C-porting-issues/unsigned-char-and-signed-char (from which TIL *why* the Norcroft C compiler made that decision)",
      "parentUuid": "c9ff4535_1494ef99",
      "revId": "f2003ea07e4a29f668bbc283718a94ef772cfdb0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c2fe35ef_9f1a7367",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1249117
      },
      "writtenOn": "2021-01-08T21:41:27Z",
      "side": 1,
      "message": "Maybe I should revise to never _knowingly_ handling an unsigned char type. I think what this patch proves is that my mental model for how character types work is totally broken. So: (just in case I ever need a reminder...)\n\n* char: signed or unsigned (depends)\n* char16_t: unsigned\n* char32_t: unsigned",
      "parentUuid": "b0190250_5420a88b",
      "revId": "f2003ea07e4a29f668bbc283718a94ef772cfdb0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2766a3ac_c396dd40",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1249117
      },
      "writtenOn": "2021-01-08T21:41:27Z",
      "side": 1,
      "message": "Unfortunately, there\u0027s something not quite right with ~((to_ignore_mask \u0026 0x1ff) \u003c\u003c 23) and keeping everything 32-bit ATM, seems that all libutils_test cases pass, but AAPT2 seems to get stuck in an infinite loop with the new code - it\u0027s not undefined anymore, but it\u0027s clearly not right. I\u0027m running out of time to fix this one, but will try to get back to it next week. ",
      "revId": "f2003ea07e4a29f668bbc283718a94ef772cfdb0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}