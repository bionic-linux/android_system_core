{
  "comments": [
    {
      "key": {
        "uuid": "3f8fa133_bb86ff06",
        "filename": "fastboot/Android.mk",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-02-15T19:17:23Z",
      "side": 1,
      "message": "|sort",
      "revId": "6256e82f8492744c20b28f19b5e416da7a56357e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e2a1609d_ee125c3d",
        "filename": "fastboot/fastboot.cpp",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-02-15T19:17:23Z",
      "side": 1,
      "message": "|sort",
      "revId": "6256e82f8492744c20b28f19b5e416da7a56357e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e62b67f_571e23bb",
        "filename": "fastboot/fastboot.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1427,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-02-15T19:17:23Z",
      "side": 1,
      "message": "static",
      "range": {
        "startLine": 1427,
        "startChar": 0,
        "endLine": 1427,
        "endChar": 3
      },
      "revId": "6256e82f8492744c20b28f19b5e416da7a56357e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "454cfae7_540b5a0c",
        "filename": "fastboot/fastboot.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1427,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-02-15T19:17:23Z",
      "side": 1,
      "message": "const\u0026",
      "range": {
        "startLine": 1427,
        "startChar": 23,
        "endLine": 1427,
        "endChar": 34
      },
      "revId": "6256e82f8492744c20b28f19b5e416da7a56357e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "95300466_5c0a80bf",
        "filename": "fastboot/fastboot.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1430,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-15T20:55:22Z",
      "side": 1,
      "message": "Restrict variables to the smallest block in which they are used (in this case, declare tmp inside the \"for\" clause).",
      "range": {
        "startLine": 1430,
        "startChar": 4,
        "endLine": 1430,
        "endChar": 32
      },
      "revId": "6256e82f8492744c20b28f19b5e416da7a56357e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff66ff17_175fa5af",
        "filename": "fastboot/fastboot.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1432,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-02-15T19:17:23Z",
      "side": 1,
      "message": "std::vector",
      "revId": "6256e82f8492744c20b28f19b5e416da7a56357e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1dd5ff52_c967abd1",
        "filename": "fastboot/fastboot.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1434,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-02-15T19:17:23Z",
      "side": 1,
      "message": "https://google.github.io/styleguide/cppguide.html#Conditionals",
      "range": {
        "startLine": 1433,
        "startChar": 0,
        "endLine": 1434,
        "endChar": 18
      },
      "revId": "6256e82f8492744c20b28f19b5e416da7a56357e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c04b0023_e608a590",
        "filename": "fastboot/fastboot.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1444,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-15T20:55:22Z",
      "side": 1,
      "message": "This is more of a debug-only diagnostic message and probably shouldn\u0027t be unconditionally printed. I don\u0027t think fastboot has any modern logging utilities at the moment so suggest either removing or commenting this out for now.",
      "range": {
        "startLine": 1444,
        "startChar": 8,
        "endLine": 1444,
        "endChar": 76
      },
      "revId": "6256e82f8492744c20b28f19b5e416da7a56357e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2edf7953_b16c710c",
        "filename": "fastboot/fastboot.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1759,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-02-15T19:17:23Z",
      "side": 1,
      "message": "make this a new top-level command instead.",
      "revId": "6256e82f8492744c20b28f19b5e416da7a56357e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e63a23e_67b55a8f",
        "filename": "fastboot/partition.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-02-15T19:17:23Z",
      "side": 1,
      "message": "copyright header",
      "revId": "6256e82f8492744c20b28f19b5e416da7a56357e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4aec422a_c177e96f",
        "filename": "fastboot/partition.cpp",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-02-15T19:17:23Z",
      "side": 1,
      "message": "not needed in C++\n\n(also, names starting __ are not yours)",
      "revId": "6256e82f8492744c20b28f19b5e416da7a56357e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "95e7822b_455c9451",
        "filename": "fastboot/partition.cpp",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-15T20:55:22Z",
      "side": 1,
      "message": "In general, try to avoid abbreviations for names (https://google.github.io/styleguide/cppguide.html#General_Naming_Rules).",
      "range": {
        "startLine": 17,
        "startChar": 37,
        "endLine": 17,
        "endChar": 40
      },
      "revId": "6256e82f8492744c20b28f19b5e416da7a56357e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6c5929b2_96ea94f2",
        "filename": "fastboot/partition.cpp",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-02-15T19:17:23Z",
      "side": 1,
      "message": "std::vector",
      "revId": "6256e82f8492744c20b28f19b5e416da7a56357e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a574b3d6_03100148",
        "filename": "fastboot/partition.cpp",
        "patchSetId": 2
      },
      "lineNbr": 171,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-02-15T19:17:23Z",
      "side": 1,
      "message": "std::unique_ptr",
      "revId": "6256e82f8492744c20b28f19b5e416da7a56357e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3870c586_5d6bf72b",
        "filename": "fastboot/partition.h",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-15T20:55:22Z",
      "side": 1,
      "message": "Is the data format used here a standard defined somewhere else or did you come up with this? If it\u0027s a standard, please reference the documentation. If not, I think we\u0027re going to need to at least add some versioning support in case we decide we need larger buffers or additional data later on.",
      "revId": "6256e82f8492744c20b28f19b5e416da7a56357e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce3ea52c_12658b59",
        "filename": "fastboot/partition.h",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-15T20:55:22Z",
      "side": 1,
      "message": "Prefer enums to macros when possible, and keep internal details that other files don\u0027t need in the implementation (.cpp) file instead of the header.",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 28,
        "endChar": 30
      },
      "revId": "6256e82f8492744c20b28f19b5e416da7a56357e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8998c1b9_93c7063e",
        "filename": "fastboot/partition.h",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2017-02-15T20:55:22Z",
      "side": 1,
      "message": "What do you think about making this into a C++ class instead for better usability and readability? I get that we want to transfer this data as a buffer, but keeping all these variables with vague names in a struct makes it quite difficult to figure out what\u0027s actually happening here. IMO it would be cleaner to store these things as simply as possible, and only pack them into the transmit format on-demand.\n\nMaybe something like this:\n\n  class Partition {\n   public:\n    ...\n\n    // Pack the partition into the required format\n    // to transmit to the device.\n    std::vector\u003cuint8_t\u003e Serialize() const;\n  };\n\n  class PartitionTable {\n   public:\n    PartitionTable(const std::string\u0026 file_path);\n\n    const std::vector\u003cPartition\u003e\u0026 partitions() const;\n\n    ...\n  }\n\nThis way usage can be a little simpler:\n\n  PartitionTable table(\u003cfile\u003e);\n  fastboot_buffer fb_buffer;\n  fb_buffer.type \u003d FB_BUFFER;\n  for (const Partition\u0026 partition : table.partitions()) {\n    std::vector\u003cuint8_t\u003e data \u003d partition.Serialize();\n    fb_buffer.data \u003d data.data();\n    fb_buffer.sz \u003d data.size();\n    flash_buf(...);\n  }",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 48,
        "endChar": 30
      },
      "revId": "6256e82f8492744c20b28f19b5e416da7a56357e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f9375979_05c3aff4",
        "filename": "fastboot/partition.h",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-02-15T19:17:23Z",
      "side": 1,
      "message": "std::vector",
      "range": {
        "startLine": 50,
        "startChar": 7,
        "endLine": 50,
        "endChar": 22
      },
      "revId": "6256e82f8492744c20b28f19b5e416da7a56357e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12c45c29_21267626",
        "filename": "fastboot/partition.h",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2017-02-15T19:17:23Z",
      "side": 1,
      "message": "\u0026\n\nmissing #include \u003cstring\u003e",
      "range": {
        "startLine": 50,
        "startChar": 56,
        "endLine": 50,
        "endChar": 62
      },
      "revId": "6256e82f8492744c20b28f19b5e416da7a56357e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}