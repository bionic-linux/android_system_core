{
  "comments": [
    {
      "key": {
        "uuid": "cdc02a18_d08f62b2",
        "filename": "logd/LogKlog.cpp",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1069543
      },
      "writtenOn": "2015-07-22T01:07:48Z",
      "side": 1,
      "message": "could we have a \u0027const int\u0027 instead of \u00275\u0027 or a comment to clarify why we go past the string termination (presumably because the field got split between two lines so we will find the end of the field in the next string).",
      "revId": "8e617759cbffd02e8e7992fb45e5b1a4b3de34db",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed808ec6_39d80b1d",
        "filename": "logd/LogKlog.cpp",
        "patchSetId": 1
      },
      "lineNbr": 539,
      "author": {
        "id": 1069543
      },
      "writtenOn": "2015-07-22T01:07:48Z",
      "side": 1,
      "message": "so these are not tags, but \"y0y\" and \"vv0\" are ok? When folks create tags are the validity rules clear?",
      "revId": "8e617759cbffd02e8e7992fb45e5b1a4b3de34db",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "edc5ee24_f74292c0",
        "filename": "logd/LogKlog.cpp",
        "patchSetId": 1
      },
      "lineNbr": 539,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2015-07-22T14:47:14Z",
      "side": 1,
      "message": "There are no rules, only heuristics. kernel prints have no standards of behavior.\n\nThese are used to ensure that a stack dump (which includes a register dump) do not turn the register names into tags. Driver names like en0: is a tag we want to allow through, but x19 not. I have checked on three devices, this heuristic is enough to clarify the stack dump and not exclude any driver-created tags.",
      "parentUuid": "ed808ec6_39d80b1d",
      "revId": "8e617759cbffd02e8e7992fb45e5b1a4b3de34db",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}