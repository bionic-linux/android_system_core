{
  "comments": [
    {
      "key": {
        "uuid": "d5e89e03_3cd6b738",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 14
      },
      "lineNbr": 518,
      "author": {
        "id": 1290458
      },
      "writtenOn": "2018-08-14T18:57:30Z",
      "side": 1,
      "message": "nit: Can mount_point or blk_device be null? If not, could these be std::string instead?",
      "revId": "7c02e4cd00c32d586ac3c76273ed0a816660fec3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce0840b5_077b5c1d",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 14
      },
      "lineNbr": 518,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-08-14T19:53:39Z",
      "side": 1,
      "message": "fsrec-\u003emount_point and fsrec-\u003eblk_device can be null. Either on purpose, or by accident (!)\n\nWe could do std::string, but that would require more validity checking in fs_mgr_overlayfs_enabled() above, and largely unnecessary transitory allocation. This is (honestly, used to be as of 11am this morning, but not anymore, but who is to say what the future is with a library) called during First Stage init; I\u0027d prefer to keep allocations and boot delays at a minimum.",
      "parentUuid": "d5e89e03_3cd6b738",
      "revId": "7c02e4cd00c32d586ac3c76273ed0a816660fec3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca62c43f_76f5e2e7",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 14
      },
      "lineNbr": 518,
      "author": {
        "id": 1064128
      },
      "writtenOn": "2018-08-14T20:51:17Z",
      "side": 1,
      "message": "\u003e \u003e nit: Can mount_point or blk_device be null? If not, could these be std::string instead?\n\u003e fsrec-\u003emount_point and fsrec-\u003eblk_device can be null. Either on purpose, or by accident (!)\n\nEh, in practice they never can be.  The only places we alloc fstab_rec\u0027s in fs_mgr_fstab.cpp always set these.  We unapologetically skip the null checks in first_stage_mount and the rest of fs_mgr.  There\u0027s not really any graceful fall back if they were null either, so I\u0027m more than happy to just blow up - basically just a corollary  to the idea \"don\u0027t catch exceptions that you can\u0027t handle\"\n\nWe also rather unapologetically convert these to std::strings in first stage mount.  The allocation overhead is trivial compared to the rest of the operation.\n\nBowgo and I have stated that we want to rewrite this code about 100 times, but neither of us have found time.  If anyone\u0027s free to, replacing all of struct fstab with a class that just has a sane vector\u003cFstabEntry\u003e element, where FstabEntry is a class containing the fstab information as std::string\u0027s would be a very welcome change.",
      "parentUuid": "ce0840b5_077b5c1d",
      "revId": "7c02e4cd00c32d586ac3c76273ed0a816660fec3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f5de442_146c8761",
        "filename": "fs_mgr/fs_mgr_overlayfs.cpp",
        "patchSetId": 14
      },
      "lineNbr": 518,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2018-08-14T21:44:52Z",
      "side": 1,
      "message": "First stage logs landing in dmesg as presented by fs_mgr, can then be picked up during runtime, when it is obvious that overlayfs let us down. I have _done_ this in fact while developing this. But everything else is healthy of course. I can make this statement because overlayfs is itself a userdebug feature that is compiled out on user builds, so any pain-relief here is _only_ for the developers convenience and should not behave any differently than if it was not here, hence the soft-spot ...\n\nThe rationalization does change for _core_ operations I can concede perhaps, it is a fine line.",
      "parentUuid": "ca62c43f_76f5e2e7",
      "revId": "7c02e4cd00c32d586ac3c76273ed0a816660fec3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}