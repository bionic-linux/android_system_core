{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2eb02f71_928abf0b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-01-18T21:25:16Z",
      "side": 1,
      "message": "Elliott, is there any way you could look at this as well? I think this makes sense, though you would know better than I if anything could be depending on this.",
      "revId": "2a825a634415c8730e854f42511f09217b74d73c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "669ebcc2_c7a91822",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2023-01-18T23:17:35Z",
      "side": 1,
      "message": "yeah, that\u0027s the problem --- it\u0027s a behavior change. personally i\u0027d rather just leave Mutex as-is and tell anyone who cares \"use std::mutex instead\", so people opt-in to moving over rather than us forcing everyone to switch (without their knowing).\n\n+hboehm in case he disagrees and thinks we should give this a go. (though even so, that\u0027s probably a thing to do just _after_ a dessert branches so there\u0027s a whole year to find and fix issues rather than just _before_!)",
      "parentUuid": "2eb02f71_928abf0b",
      "revId": "2a825a634415c8730e854f42511f09217b74d73c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eebe2b49_9b08082b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-01-19T00:16:19Z",
      "side": 1,
      "message": "This looks to me like a very partial solution to our timeout issues. See b/245772893 . (Even better, add a comment if you understand this better than me.)\n\nI think we should at least postpone this until we have a more complete solution. And I like Elliott\u0027s approach.",
      "parentUuid": "669ebcc2_c7a91822",
      "revId": "2a825a634415c8730e854f42511f09217b74d73c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4e763f1_09a29ed7",
        "filename": "libutils/include/utils/Mutex.h",
        "patchSetId": 4
      },
      "lineNbr": 201,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-01-17T20:28:30Z",
      "side": 1,
      "message": "Does this code guarantee \u0027tv_nsec \u003c 1000000000LL\u0027 or would we ever want to subtract off more than one?",
      "range": {
        "startLine": 198,
        "startChar": 0,
        "endLine": 201,
        "endChar": 5
      },
      "revId": "2a825a634415c8730e854f42511f09217b74d73c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "922b5925_d87771ca",
        "filename": "libutils/include/utils/Mutex.h",
        "patchSetId": 4
      },
      "lineNbr": 201,
      "author": {
        "id": 1880185
      },
      "writtenOn": "2023-01-17T20:35:26Z",
      "side": 1,
      "message": "it is guarantee \u0027tv_nsec \u003c 1000000000LL\u0027\nsince tv_nsec \u003c 1000000000LL and (timeoutNs % 1000000000LL) \u003c 1000000000LL\nadding those together will guarantee tv_nsec \u003c 2000000000LL and subtract that by  1000000000LL will guarantee \u0027tv_nsec \u003c 1000000000LL\u0027.",
      "parentUuid": "c4e763f1_09a29ed7",
      "range": {
        "startLine": 198,
        "startChar": 0,
        "endLine": 201,
        "endChar": 5
      },
      "revId": "2a825a634415c8730e854f42511f09217b74d73c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2027f203_60077fae",
        "filename": "libutils/include/utils/Mutex.h",
        "patchSetId": 4
      },
      "lineNbr": 201,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2023-01-18T21:25:16Z",
      "side": 1,
      "message": "I see, thanks.",
      "parentUuid": "922b5925_d87771ca",
      "range": {
        "startLine": 198,
        "startChar": 0,
        "endLine": 201,
        "endChar": 5
      },
      "revId": "2a825a634415c8730e854f42511f09217b74d73c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a943e78a_24871c74",
        "filename": "libutils/include/utils/Mutex.h",
        "patchSetId": 4
      },
      "lineNbr": 201,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-01-19T00:16:19Z",
      "side": 1,
      "message": "It looks to me like nsec_t is signed, so this all kind of seems to be on thin ice? It should probably just fail if timeoutNs is negative, since the spec is unsatisfiable without a time machine.",
      "parentUuid": "2027f203_60077fae",
      "range": {
        "startLine": 198,
        "startChar": 0,
        "endLine": 201,
        "endChar": 5
      },
      "revId": "2a825a634415c8730e854f42511f09217b74d73c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e78ce827_bc7daca8",
        "filename": "libutils/include/utils/Mutex.h",
        "patchSetId": 4
      },
      "lineNbr": 201,
      "author": {
        "id": 1880185
      },
      "writtenOn": "2023-01-19T00:39:33Z",
      "side": 1,
      "message": "it would return EINVAL:\nhttps://cs.android.com/android/platform/superproject/+/master:bionic/libc/private/bionic_time_conversions.h;drc\u003d5095a6c4b484f34d5c4f55a855d6174e00fb7f5e;l\u003d50",
      "parentUuid": "a943e78a_24871c74",
      "range": {
        "startLine": 198,
        "startChar": 0,
        "endLine": 201,
        "endChar": 5
      },
      "revId": "2a825a634415c8730e854f42511f09217b74d73c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fac2621a_bba79300",
        "filename": "libutils/include/utils/Mutex.h",
        "patchSetId": 4
      },
      "lineNbr": 201,
      "author": {
        "id": 1042828
      },
      "writtenOn": "2023-02-14T01:00:20Z",
      "side": 1,
      "message": "But that\u0027s only a check at the end, right? ts may end up looking valid (and in the past) or not. So you could get either ETIMEDOUT or EINVAL, with the former technically not really meeting the current spec. And the Posix spec actually seems to say that it succeeds if the lock is not currently held, which also technically doesn\u0027t meet spec.\n\nThese are clearly nits, which we could fix, but what\u0027s the added value over the standard one?",
      "parentUuid": "e78ce827_bc7daca8",
      "range": {
        "startLine": 198,
        "startChar": 0,
        "endLine": 201,
        "endChar": 5
      },
      "revId": "2a825a634415c8730e854f42511f09217b74d73c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}