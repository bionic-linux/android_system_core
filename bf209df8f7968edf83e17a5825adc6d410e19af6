{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a104f469_6e6234c2",
        "filename": "libcutils/Android.bp",
        "patchSetId": 7
      },
      "lineNbr": 270,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2024-03-04T13:14:37Z",
      "side": 1,
      "message": "the host test should be exactly the same as the device test? so that we are sure they are implementing the same interface properly? as client test should rely on both, the test should rely on both?\n\nIf all the tests can\u0027t be commen, can you make at least a common core common?\n\nNote - any differences will end up being roboelectric\u003c-\u003edevice differences as well and cause worse test coverage",
      "range": {
        "startLine": 270,
        "startChar": 17,
        "endLine": 270,
        "endChar": 28
      },
      "revId": "bf209df8f7968edf83e17a5825adc6d410e19af6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce30345e_f2bd405c",
        "filename": "libcutils/Android.bp",
        "patchSetId": 7
      },
      "lineNbr": 270,
      "author": {
        "id": 1396566
      },
      "writtenOn": "2024-03-04T14:46:10Z",
      "side": 1,
      "message": "Hi Steven,\n\n\u003e the host test should be exactly the same as the device test\n\nThis was my first attempt but this test is highly Linux specific. As an example, it calls:\n\n  ASSERT_EQ(FD_CLOEXEC, (fcntl(fd, F_GETFD) \u0026 FD_CLOEXEC));\n  \nIt also calls mmap / fork and other Linux syscalls.\n\nAs such, I did not want to have #ifdef _WIN32 all over the test file. This is primarily a test for ashmem_host.cpp, which by design has significantly reduced functionality:\nhttps://cs.android.com/android/platform/superproject/main/+/main:system/core/libcutils/ashmem-host.cpp\n\nWould it be better if this was a cc_test that could also run on a device to verify the functionality?",
      "parentUuid": "a104f469_6e6234c2",
      "range": {
        "startLine": 270,
        "startChar": 17,
        "endLine": 270,
        "endChar": 28
      },
      "revId": "bf209df8f7968edf83e17a5825adc6d410e19af6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03c03cf0_517bfe7c",
        "filename": "libcutils/Android.bp",
        "patchSetId": 7
      },
      "lineNbr": 270,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2024-03-04T14:51:24Z",
      "side": 1,
      "message": "There should be some core subset of the test that works on all implementations, with the idea being that eventually it could cover the entire implementation (once the host implementations fully emulate the device).\n\nLike \"ashmem_host_test.cpp\" now could probably run on device as well, so it could be called \"ashmem_base_test.cpp\" and added to srcs instead of target.host.srcs so that \"ashmem_base_test.cpp\" will run against ashmem-dev (for the device variants of the test) and ashmem-host (for the host variants of the test)",
      "parentUuid": "ce30345e_f2bd405c",
      "range": {
        "startLine": 270,
        "startChar": 17,
        "endLine": 270,
        "endChar": 28
      },
      "revId": "bf209df8f7968edf83e17a5825adc6d410e19af6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82bb57b7_ef3bb115",
        "filename": "libcutils/Android.bp",
        "patchSetId": 7
      },
      "lineNbr": 270,
      "author": {
        "id": 1396566
      },
      "writtenOn": "2024-03-06T21:15:30Z",
      "side": 1,
      "message": "Done, renamed to ashmem_base_test.cpp.",
      "parentUuid": "03c03cf0_517bfe7c",
      "range": {
        "startLine": 270,
        "startChar": 17,
        "endLine": 270,
        "endChar": 28
      },
      "revId": "bf209df8f7968edf83e17a5825adc6d410e19af6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f934c923_b4a91a1c",
        "filename": "libcutils/Android.bp",
        "patchSetId": 7
      },
      "lineNbr": 365,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2024-03-04T14:51:24Z",
      "side": 1,
      "message": "why is this added here if it\u0027s already in libcutils_test_default? Is it because this is the only file that works in Windows?\n\nyou could add windows to libcutils_test and then add exclude sources for windows if there are some that don\u0027t work. That way there is only one module for this test, and the difference between variants is explicit.",
      "range": {
        "startLine": 365,
        "startChar": 0,
        "endLine": 365,
        "endChar": 35
      },
      "revId": "bf209df8f7968edf83e17a5825adc6d410e19af6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6833fc8d_4ca0fdaf",
        "filename": "libcutils/Android.bp",
        "patchSetId": 7
      },
      "lineNbr": 365,
      "author": {
        "id": 1396566
      },
      "writtenOn": "2024-03-06T21:15:30Z",
      "side": 1,
      "message": "Done, it is now just part of libcutils_test_default.",
      "parentUuid": "f934c923_b4a91a1c",
      "range": {
        "startLine": 365,
        "startChar": 0,
        "endLine": 365,
        "endChar": 35
      },
      "revId": "bf209df8f7968edf83e17a5825adc6d410e19af6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}