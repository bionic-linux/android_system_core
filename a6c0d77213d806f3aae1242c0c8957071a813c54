{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9ac2cba1_2b88170b",
        "filename": "libstats/pull_rust/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1431413
      },
      "writtenOn": "2021-03-31T19:34:13Z",
      "side": 1,
      "message": "We\u0027d like to limit new clients depending on libstatslog. Can we add module annotation support for Rust code generation? libstatslog includes generated code for all atoms and we want new clients to only use generated code for the atoms they care about.",
      "range": {
        "startLine": 52,
        "startChar": 9,
        "endLine": 52,
        "endChar": 25
      },
      "revId": "a6c0d77213d806f3aae1242c0c8957071a813c54",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1856e2c_d572fef3",
        "filename": "libstats/pull_rust/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1208973
      },
      "writtenOn": "2021-03-31T19:36:59Z",
      "side": 1,
      "message": "The support is already there, but how would that work with this?  Would each user have to define their own libstatspull_foo_rust that depends on their own libstatslog_foo_rust?",
      "parentUuid": "9ac2cba1_2b88170b",
      "range": {
        "startLine": 52,
        "startChar": 9,
        "endLine": 52,
        "endChar": 25
      },
      "revId": "a6c0d77213d806f3aae1242c0c8957071a813c54",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1615c59_b168ac5a",
        "filename": "libstats/pull_rust/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1208973
      },
      "writtenOn": "2021-03-31T19:52:13Z",
      "side": 1,
      "message": "Actually, I can probably do something like the C++ generator and split the autogenerated Rust code into a \"header\" that just declares the atoms and some other things and then the other one that has all the code.  The first would have to contain all the atoms as Rust enums are closed, but then this library would only have to depend on that and not all the implementations.  I\u0027ll try that after lunch...",
      "parentUuid": "e1856e2c_d572fef3",
      "range": {
        "startLine": 52,
        "startChar": 9,
        "endLine": 52,
        "endChar": 25
      },
      "revId": "a6c0d77213d806f3aae1242c0c8957071a813c54",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "92bc9fb3_cbf7325b",
        "filename": "libstats/pull_rust/Android.bp",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1208973
      },
      "writtenOn": "2021-03-31T21:43:58Z",
      "side": 1,
      "message": "Okay, how does this look?  I did what I described above, breaking the auto-generated Rust code into a header and the implementation.  This now depends only on the header part.",
      "parentUuid": "f1615c59_b168ac5a",
      "range": {
        "startLine": 52,
        "startChar": 9,
        "endLine": 52,
        "endChar": 25
      },
      "revId": "a6c0d77213d806f3aae1242c0c8957071a813c54",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}